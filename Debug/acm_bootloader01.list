
acm_bootloader01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6e0  0800c000  0800c000  0001c000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  080176e0  080176e0  000276e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080188c8  080188c8  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  080188c8  080188c8  000288c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080188d0  080188d0  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080188d0  080188d0  000288d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080188d4  080188d4  000288d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080188d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c94  2000020c  08018ae4  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20005ea0  08018ae4  00035ea0  2**0
                  ALLOC
 11 .newsection   00000004  10000000  10000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004612a  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000094d2  00000000  00000000  00076366  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000194e4  00000000  00000000  0007f838  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001ba8  00000000  00000000  00098d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000025f8  00000000  00000000  0009a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002dc0b  00000000  00000000  0009cec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000265ff  00000000  00000000  000caacb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000e0dd5  00000000  00000000  000f10ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001d1e9f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000596c  00000000  00000000  001d1f1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	2000020c 	.word	0x2000020c
 800c01c:	00000000 	.word	0x00000000
 800c020:	080176c8 	.word	0x080176c8

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000210 	.word	0x20000210
 800c03c:	080176c8 	.word	0x080176c8

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <memchr>:
 800c050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c054:	2a10      	cmp	r2, #16
 800c056:	db2b      	blt.n	800c0b0 <memchr+0x60>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	d008      	beq.n	800c070 <memchr+0x20>
 800c05e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c062:	3a01      	subs	r2, #1
 800c064:	428b      	cmp	r3, r1
 800c066:	d02d      	beq.n	800c0c4 <memchr+0x74>
 800c068:	f010 0f07 	tst.w	r0, #7
 800c06c:	b342      	cbz	r2, 800c0c0 <memchr+0x70>
 800c06e:	d1f6      	bne.n	800c05e <memchr+0xe>
 800c070:	b4f0      	push	{r4, r5, r6, r7}
 800c072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c07a:	f022 0407 	bic.w	r4, r2, #7
 800c07e:	f07f 0700 	mvns.w	r7, #0
 800c082:	2300      	movs	r3, #0
 800c084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c088:	3c08      	subs	r4, #8
 800c08a:	ea85 0501 	eor.w	r5, r5, r1
 800c08e:	ea86 0601 	eor.w	r6, r6, r1
 800c092:	fa85 f547 	uadd8	r5, r5, r7
 800c096:	faa3 f587 	sel	r5, r3, r7
 800c09a:	fa86 f647 	uadd8	r6, r6, r7
 800c09e:	faa5 f687 	sel	r6, r5, r7
 800c0a2:	b98e      	cbnz	r6, 800c0c8 <memchr+0x78>
 800c0a4:	d1ee      	bne.n	800c084 <memchr+0x34>
 800c0a6:	bcf0      	pop	{r4, r5, r6, r7}
 800c0a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c0ac:	f002 0207 	and.w	r2, r2, #7
 800c0b0:	b132      	cbz	r2, 800c0c0 <memchr+0x70>
 800c0b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	ea83 0301 	eor.w	r3, r3, r1
 800c0bc:	b113      	cbz	r3, 800c0c4 <memchr+0x74>
 800c0be:	d1f8      	bne.n	800c0b2 <memchr+0x62>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4770      	bx	lr
 800c0c4:	3801      	subs	r0, #1
 800c0c6:	4770      	bx	lr
 800c0c8:	2d00      	cmp	r5, #0
 800c0ca:	bf06      	itte	eq
 800c0cc:	4635      	moveq	r5, r6
 800c0ce:	3803      	subeq	r0, #3
 800c0d0:	3807      	subne	r0, #7
 800c0d2:	f015 0f01 	tst.w	r5, #1
 800c0d6:	d107      	bne.n	800c0e8 <memchr+0x98>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f415 7f80 	tst.w	r5, #256	; 0x100
 800c0de:	bf02      	ittt	eq
 800c0e0:	3001      	addeq	r0, #1
 800c0e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800c0e6:	3001      	addeq	r0, #1
 800c0e8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0ea:	3801      	subs	r0, #1
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <__aeabi_uldivmod>:
 800c0f0:	b953      	cbnz	r3, 800c108 <__aeabi_uldivmod+0x18>
 800c0f2:	b94a      	cbnz	r2, 800c108 <__aeabi_uldivmod+0x18>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	bf08      	it	eq
 800c0f8:	2800      	cmpeq	r0, #0
 800c0fa:	bf1c      	itt	ne
 800c0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800c100:	f04f 30ff 	movne.w	r0, #4294967295
 800c104:	f000 b972 	b.w	800c3ec <__aeabi_idiv0>
 800c108:	f1ad 0c08 	sub.w	ip, sp, #8
 800c10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c110:	f000 f806 	bl	800c120 <__udivmoddi4>
 800c114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr

0800c120 <__udivmoddi4>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	9e08      	ldr	r6, [sp, #32]
 800c126:	4604      	mov	r4, r0
 800c128:	4688      	mov	r8, r1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d14b      	bne.n	800c1c6 <__udivmoddi4+0xa6>
 800c12e:	428a      	cmp	r2, r1
 800c130:	4615      	mov	r5, r2
 800c132:	d967      	bls.n	800c204 <__udivmoddi4+0xe4>
 800c134:	fab2 f282 	clz	r2, r2
 800c138:	b14a      	cbz	r2, 800c14e <__udivmoddi4+0x2e>
 800c13a:	f1c2 0720 	rsb	r7, r2, #32
 800c13e:	fa01 f302 	lsl.w	r3, r1, r2
 800c142:	fa20 f707 	lsr.w	r7, r0, r7
 800c146:	4095      	lsls	r5, r2
 800c148:	ea47 0803 	orr.w	r8, r7, r3
 800c14c:	4094      	lsls	r4, r2
 800c14e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c152:	0c23      	lsrs	r3, r4, #16
 800c154:	fbb8 f7fe 	udiv	r7, r8, lr
 800c158:	fa1f fc85 	uxth.w	ip, r5
 800c15c:	fb0e 8817 	mls	r8, lr, r7, r8
 800c160:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800c164:	fb07 f10c 	mul.w	r1, r7, ip
 800c168:	4299      	cmp	r1, r3
 800c16a:	d909      	bls.n	800c180 <__udivmoddi4+0x60>
 800c16c:	18eb      	adds	r3, r5, r3
 800c16e:	f107 30ff 	add.w	r0, r7, #4294967295
 800c172:	f080 811b 	bcs.w	800c3ac <__udivmoddi4+0x28c>
 800c176:	4299      	cmp	r1, r3
 800c178:	f240 8118 	bls.w	800c3ac <__udivmoddi4+0x28c>
 800c17c:	3f02      	subs	r7, #2
 800c17e:	442b      	add	r3, r5
 800c180:	1a5b      	subs	r3, r3, r1
 800c182:	b2a4      	uxth	r4, r4
 800c184:	fbb3 f0fe 	udiv	r0, r3, lr
 800c188:	fb0e 3310 	mls	r3, lr, r0, r3
 800c18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c190:	fb00 fc0c 	mul.w	ip, r0, ip
 800c194:	45a4      	cmp	ip, r4
 800c196:	d909      	bls.n	800c1ac <__udivmoddi4+0x8c>
 800c198:	192c      	adds	r4, r5, r4
 800c19a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c19e:	f080 8107 	bcs.w	800c3b0 <__udivmoddi4+0x290>
 800c1a2:	45a4      	cmp	ip, r4
 800c1a4:	f240 8104 	bls.w	800c3b0 <__udivmoddi4+0x290>
 800c1a8:	3802      	subs	r0, #2
 800c1aa:	442c      	add	r4, r5
 800c1ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800c1b0:	eba4 040c 	sub.w	r4, r4, ip
 800c1b4:	2700      	movs	r7, #0
 800c1b6:	b11e      	cbz	r6, 800c1c0 <__udivmoddi4+0xa0>
 800c1b8:	40d4      	lsrs	r4, r2
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e9c6 4300 	strd	r4, r3, [r6]
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	428b      	cmp	r3, r1
 800c1c8:	d909      	bls.n	800c1de <__udivmoddi4+0xbe>
 800c1ca:	2e00      	cmp	r6, #0
 800c1cc:	f000 80eb 	beq.w	800c3a6 <__udivmoddi4+0x286>
 800c1d0:	2700      	movs	r7, #0
 800c1d2:	e9c6 0100 	strd	r0, r1, [r6]
 800c1d6:	4638      	mov	r0, r7
 800c1d8:	4639      	mov	r1, r7
 800c1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1de:	fab3 f783 	clz	r7, r3
 800c1e2:	2f00      	cmp	r7, #0
 800c1e4:	d147      	bne.n	800c276 <__udivmoddi4+0x156>
 800c1e6:	428b      	cmp	r3, r1
 800c1e8:	d302      	bcc.n	800c1f0 <__udivmoddi4+0xd0>
 800c1ea:	4282      	cmp	r2, r0
 800c1ec:	f200 80fa 	bhi.w	800c3e4 <__udivmoddi4+0x2c4>
 800c1f0:	1a84      	subs	r4, r0, r2
 800c1f2:	eb61 0303 	sbc.w	r3, r1, r3
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	4698      	mov	r8, r3
 800c1fa:	2e00      	cmp	r6, #0
 800c1fc:	d0e0      	beq.n	800c1c0 <__udivmoddi4+0xa0>
 800c1fe:	e9c6 4800 	strd	r4, r8, [r6]
 800c202:	e7dd      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c204:	b902      	cbnz	r2, 800c208 <__udivmoddi4+0xe8>
 800c206:	deff      	udf	#255	; 0xff
 800c208:	fab2 f282 	clz	r2, r2
 800c20c:	2a00      	cmp	r2, #0
 800c20e:	f040 808f 	bne.w	800c330 <__udivmoddi4+0x210>
 800c212:	1b49      	subs	r1, r1, r5
 800c214:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c218:	fa1f f885 	uxth.w	r8, r5
 800c21c:	2701      	movs	r7, #1
 800c21e:	fbb1 fcfe 	udiv	ip, r1, lr
 800c222:	0c23      	lsrs	r3, r4, #16
 800c224:	fb0e 111c 	mls	r1, lr, ip, r1
 800c228:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c22c:	fb08 f10c 	mul.w	r1, r8, ip
 800c230:	4299      	cmp	r1, r3
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x124>
 800c234:	18eb      	adds	r3, r5, r3
 800c236:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c23a:	d202      	bcs.n	800c242 <__udivmoddi4+0x122>
 800c23c:	4299      	cmp	r1, r3
 800c23e:	f200 80cd 	bhi.w	800c3dc <__udivmoddi4+0x2bc>
 800c242:	4684      	mov	ip, r0
 800c244:	1a59      	subs	r1, r3, r1
 800c246:	b2a3      	uxth	r3, r4
 800c248:	fbb1 f0fe 	udiv	r0, r1, lr
 800c24c:	fb0e 1410 	mls	r4, lr, r0, r1
 800c250:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c254:	fb08 f800 	mul.w	r8, r8, r0
 800c258:	45a0      	cmp	r8, r4
 800c25a:	d907      	bls.n	800c26c <__udivmoddi4+0x14c>
 800c25c:	192c      	adds	r4, r5, r4
 800c25e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c262:	d202      	bcs.n	800c26a <__udivmoddi4+0x14a>
 800c264:	45a0      	cmp	r8, r4
 800c266:	f200 80b6 	bhi.w	800c3d6 <__udivmoddi4+0x2b6>
 800c26a:	4618      	mov	r0, r3
 800c26c:	eba4 0408 	sub.w	r4, r4, r8
 800c270:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c274:	e79f      	b.n	800c1b6 <__udivmoddi4+0x96>
 800c276:	f1c7 0c20 	rsb	ip, r7, #32
 800c27a:	40bb      	lsls	r3, r7
 800c27c:	fa22 fe0c 	lsr.w	lr, r2, ip
 800c280:	ea4e 0e03 	orr.w	lr, lr, r3
 800c284:	fa01 f407 	lsl.w	r4, r1, r7
 800c288:	fa20 f50c 	lsr.w	r5, r0, ip
 800c28c:	fa21 f30c 	lsr.w	r3, r1, ip
 800c290:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800c294:	4325      	orrs	r5, r4
 800c296:	fbb3 f9f8 	udiv	r9, r3, r8
 800c29a:	0c2c      	lsrs	r4, r5, #16
 800c29c:	fb08 3319 	mls	r3, r8, r9, r3
 800c2a0:	fa1f fa8e 	uxth.w	sl, lr
 800c2a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800c2a8:	fb09 f40a 	mul.w	r4, r9, sl
 800c2ac:	429c      	cmp	r4, r3
 800c2ae:	fa02 f207 	lsl.w	r2, r2, r7
 800c2b2:	fa00 f107 	lsl.w	r1, r0, r7
 800c2b6:	d90b      	bls.n	800c2d0 <__udivmoddi4+0x1b0>
 800c2b8:	eb1e 0303 	adds.w	r3, lr, r3
 800c2bc:	f109 30ff 	add.w	r0, r9, #4294967295
 800c2c0:	f080 8087 	bcs.w	800c3d2 <__udivmoddi4+0x2b2>
 800c2c4:	429c      	cmp	r4, r3
 800c2c6:	f240 8084 	bls.w	800c3d2 <__udivmoddi4+0x2b2>
 800c2ca:	f1a9 0902 	sub.w	r9, r9, #2
 800c2ce:	4473      	add	r3, lr
 800c2d0:	1b1b      	subs	r3, r3, r4
 800c2d2:	b2ad      	uxth	r5, r5
 800c2d4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c2d8:	fb08 3310 	mls	r3, r8, r0, r3
 800c2dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800c2e0:	fb00 fa0a 	mul.w	sl, r0, sl
 800c2e4:	45a2      	cmp	sl, r4
 800c2e6:	d908      	bls.n	800c2fa <__udivmoddi4+0x1da>
 800c2e8:	eb1e 0404 	adds.w	r4, lr, r4
 800c2ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2f0:	d26b      	bcs.n	800c3ca <__udivmoddi4+0x2aa>
 800c2f2:	45a2      	cmp	sl, r4
 800c2f4:	d969      	bls.n	800c3ca <__udivmoddi4+0x2aa>
 800c2f6:	3802      	subs	r0, #2
 800c2f8:	4474      	add	r4, lr
 800c2fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2fe:	fba0 8902 	umull	r8, r9, r0, r2
 800c302:	eba4 040a 	sub.w	r4, r4, sl
 800c306:	454c      	cmp	r4, r9
 800c308:	46c2      	mov	sl, r8
 800c30a:	464b      	mov	r3, r9
 800c30c:	d354      	bcc.n	800c3b8 <__udivmoddi4+0x298>
 800c30e:	d051      	beq.n	800c3b4 <__udivmoddi4+0x294>
 800c310:	2e00      	cmp	r6, #0
 800c312:	d069      	beq.n	800c3e8 <__udivmoddi4+0x2c8>
 800c314:	ebb1 050a 	subs.w	r5, r1, sl
 800c318:	eb64 0403 	sbc.w	r4, r4, r3
 800c31c:	fa04 fc0c 	lsl.w	ip, r4, ip
 800c320:	40fd      	lsrs	r5, r7
 800c322:	40fc      	lsrs	r4, r7
 800c324:	ea4c 0505 	orr.w	r5, ip, r5
 800c328:	e9c6 5400 	strd	r5, r4, [r6]
 800c32c:	2700      	movs	r7, #0
 800c32e:	e747      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c330:	f1c2 0320 	rsb	r3, r2, #32
 800c334:	fa20 f703 	lsr.w	r7, r0, r3
 800c338:	4095      	lsls	r5, r2
 800c33a:	fa01 f002 	lsl.w	r0, r1, r2
 800c33e:	fa21 f303 	lsr.w	r3, r1, r3
 800c342:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c346:	4338      	orrs	r0, r7
 800c348:	0c01      	lsrs	r1, r0, #16
 800c34a:	fbb3 f7fe 	udiv	r7, r3, lr
 800c34e:	fa1f f885 	uxth.w	r8, r5
 800c352:	fb0e 3317 	mls	r3, lr, r7, r3
 800c356:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c35a:	fb07 f308 	mul.w	r3, r7, r8
 800c35e:	428b      	cmp	r3, r1
 800c360:	fa04 f402 	lsl.w	r4, r4, r2
 800c364:	d907      	bls.n	800c376 <__udivmoddi4+0x256>
 800c366:	1869      	adds	r1, r5, r1
 800c368:	f107 3cff 	add.w	ip, r7, #4294967295
 800c36c:	d22f      	bcs.n	800c3ce <__udivmoddi4+0x2ae>
 800c36e:	428b      	cmp	r3, r1
 800c370:	d92d      	bls.n	800c3ce <__udivmoddi4+0x2ae>
 800c372:	3f02      	subs	r7, #2
 800c374:	4429      	add	r1, r5
 800c376:	1acb      	subs	r3, r1, r3
 800c378:	b281      	uxth	r1, r0
 800c37a:	fbb3 f0fe 	udiv	r0, r3, lr
 800c37e:	fb0e 3310 	mls	r3, lr, r0, r3
 800c382:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c386:	fb00 f308 	mul.w	r3, r0, r8
 800c38a:	428b      	cmp	r3, r1
 800c38c:	d907      	bls.n	800c39e <__udivmoddi4+0x27e>
 800c38e:	1869      	adds	r1, r5, r1
 800c390:	f100 3cff 	add.w	ip, r0, #4294967295
 800c394:	d217      	bcs.n	800c3c6 <__udivmoddi4+0x2a6>
 800c396:	428b      	cmp	r3, r1
 800c398:	d915      	bls.n	800c3c6 <__udivmoddi4+0x2a6>
 800c39a:	3802      	subs	r0, #2
 800c39c:	4429      	add	r1, r5
 800c39e:	1ac9      	subs	r1, r1, r3
 800c3a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800c3a4:	e73b      	b.n	800c21e <__udivmoddi4+0xfe>
 800c3a6:	4637      	mov	r7, r6
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	e709      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	e6e7      	b.n	800c180 <__udivmoddi4+0x60>
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	e6fb      	b.n	800c1ac <__udivmoddi4+0x8c>
 800c3b4:	4541      	cmp	r1, r8
 800c3b6:	d2ab      	bcs.n	800c310 <__udivmoddi4+0x1f0>
 800c3b8:	ebb8 0a02 	subs.w	sl, r8, r2
 800c3bc:	eb69 020e 	sbc.w	r2, r9, lr
 800c3c0:	3801      	subs	r0, #1
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	e7a4      	b.n	800c310 <__udivmoddi4+0x1f0>
 800c3c6:	4660      	mov	r0, ip
 800c3c8:	e7e9      	b.n	800c39e <__udivmoddi4+0x27e>
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	e795      	b.n	800c2fa <__udivmoddi4+0x1da>
 800c3ce:	4667      	mov	r7, ip
 800c3d0:	e7d1      	b.n	800c376 <__udivmoddi4+0x256>
 800c3d2:	4681      	mov	r9, r0
 800c3d4:	e77c      	b.n	800c2d0 <__udivmoddi4+0x1b0>
 800c3d6:	3802      	subs	r0, #2
 800c3d8:	442c      	add	r4, r5
 800c3da:	e747      	b.n	800c26c <__udivmoddi4+0x14c>
 800c3dc:	f1ac 0c02 	sub.w	ip, ip, #2
 800c3e0:	442b      	add	r3, r5
 800c3e2:	e72f      	b.n	800c244 <__udivmoddi4+0x124>
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	e708      	b.n	800c1fa <__udivmoddi4+0xda>
 800c3e8:	4637      	mov	r7, r6
 800c3ea:	e6e9      	b.n	800c1c0 <__udivmoddi4+0xa0>

0800c3ec <__aeabi_idiv0>:
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop

0800c3f0 <Bootloader_Init>:
 * @brief  This function initializes bootloader and flash.
 * @return Bootloader error code ::eBootloaderErrorCodes
 * @retval BL_OK is returned in every case
 */
uint8_t Bootloader_Init(void)
{
 800c3f0:	b513      	push	{r0, r1, r4, lr}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <Bootloader_Init+0x30>)
 800c3f4:	2400      	movs	r4, #0
 800c3f6:	9401      	str	r4, [sp, #4]
 800c3f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3fe:	645a      	str	r2, [r3, #68]	; 0x44
 800c400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c406:	9301      	str	r3, [sp, #4]
 800c408:	9b01      	ldr	r3, [sp, #4]
//    __HAL_RCC_FLASH_CLK_ENABLE();

    /* Clear flash flags */
    HAL_FLASH_Unlock();
 800c40a:	f002 fd79 	bl	800ef00 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_BSY |\
 800c40e:	4b05      	ldr	r3, [pc, #20]	; (800c424 <Bootloader_Init+0x34>)
 800c410:	4a05      	ldr	r2, [pc, #20]	; (800c428 <Bootloader_Init+0x38>)
 800c412:	60da      	str	r2, [r3, #12]
			FLASH_FLAG_PGAERR | \
			FLASH_FLAG_PGPERR | \
			FLASH_FLAG_PGSERR | \
			FLASH_FLAG_WRPERR\
			);
    HAL_FLASH_Lock();
 800c414:	f002 fd86 	bl	800ef24 <HAL_FLASH_Lock>

    return BL_OK;
}
 800c418:	4620      	mov	r0, r4
 800c41a:	b002      	add	sp, #8
 800c41c:	bd10      	pop	{r4, pc}
 800c41e:	bf00      	nop
 800c420:	40023800 	.word	0x40023800
 800c424:	40023c00 	.word	0x40023c00
 800c428:	000100f3 	.word	0x000100f3

0800c42c <Bootloader_Erase>:
 * @return Bootloader error code ::eBootloaderErrorCodes
 * @retval BL_OK: upon success
 * @retval BL_ERR: upon failure
 */
uint8_t Bootloader_Erase(void)
{
 800c42c:	b510      	push	{r4, lr}
 800c42e:	b086      	sub	sp, #24
    //uint32_t               NbrOfSectors = 0;
    uint32_t               SectorError  = 0;
 800c430:	2400      	movs	r4, #0
 800c432:	9400      	str	r4, [sp, #0]
    FLASH_EraseInitTypeDef pEraseInit;
    HAL_StatusTypeDef      status = HAL_OK;

    HAL_FLASH_Unlock();
 800c434:	f002 fd64 	bl	800ef00 <HAL_FLASH_Unlock>

    /* Get the number of pages to erase */
    ///Mehdi Code
    pEraseInit.TypeErase	=FLASH_TYPEERASE_SECTORS;
    pEraseInit.Banks		=FLASH_BANK_1;
    pEraseInit.Sector		=APP_SECTOR_START;//sector5 (after 128K)
 800c438:	2201      	movs	r2, #1
 800c43a:	2305      	movs	r3, #5
 800c43c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    pEraseInit.NbSectors	=APP_SECTOR_NBR;// 7 sectors
    pEraseInit.VoltageRange= VOLTAGE_RANGE_3; //x32bit
 800c440:	2107      	movs	r1, #7
 800c442:	2302      	movs	r3, #2
 800c444:	e9cd 1304 	strd	r1, r3, [sp, #16]
    status=HAL_FLASHEx_Erase(&pEraseInit,&SectorError);
 800c448:	a801      	add	r0, sp, #4
 800c44a:	4669      	mov	r1, sp
    pEraseInit.TypeErase	=FLASH_TYPEERASE_SECTORS;
 800c44c:	9401      	str	r4, [sp, #4]
    status=HAL_FLASHEx_Erase(&pEraseInit,&SectorError);
 800c44e:	f002 fe47 	bl	800f0e0 <HAL_FLASHEx_Erase>
 800c452:	4604      	mov	r4, r0
//	//////////////////////////

//    /////////////////////////////
    HAL_FLASH_Lock();
 800c454:	f002 fd66 	bl	800ef24 <HAL_FLASH_Lock>

    return (status == HAL_OK) ? BL_OK : BL_ERASE_ERROR;
 800c458:	2c00      	cmp	r4, #0
}
 800c45a:	bf14      	ite	ne
 800c45c:	2004      	movne	r0, #4
 800c45e:	2000      	moveq	r0, #0
 800c460:	b006      	add	sp, #24
 800c462:	bd10      	pop	{r4, pc}

0800c464 <Bootloader_FlashBegin>:
 * @see    README for futher information
 * @return Bootloader error code ::eBootloaderErrorCodes
 * @retval BL_OK is returned in every case
 */
uint8_t Bootloader_FlashBegin(void)
{
 800c464:	b508      	push	{r3, lr}
    /* Reset flash destination address */
    flash_ptr = APP_ADDRESS;
 800c466:	4b03      	ldr	r3, [pc, #12]	; (800c474 <Bootloader_FlashBegin+0x10>)
 800c468:	4a03      	ldr	r2, [pc, #12]	; (800c478 <Bootloader_FlashBegin+0x14>)
 800c46a:	601a      	str	r2, [r3, #0]

    /* Unlock flash */
    HAL_FLASH_Unlock();
 800c46c:	f002 fd48 	bl	800ef00 <HAL_FLASH_Unlock>

    return BL_OK;
}
 800c470:	2000      	movs	r0, #0
 800c472:	bd08      	pop	{r3, pc}
 800c474:	20000000 	.word	0x20000000
 800c478:	08020000 	.word	0x08020000

0800c47c <Bootloader_FlashNext>:
 * @return Bootloader error code ::eBootloaderErrorCodes
 * @retval BL_OK: upon success
 * @retval BL_WRITE_ERROR: upon failure
 */
uint8_t Bootloader_FlashNext(uint32_t data)
{
 800c47c:	b538      	push	{r3, r4, r5, lr}
    if(!(flash_ptr <= (FLASH_BASE + FLASH_SIZE - 4)) ||
 800c47e:	4c0e      	ldr	r4, [pc, #56]	; (800c4b8 <Bootloader_FlashNext+0x3c>)
 800c480:	4a0e      	ldr	r2, [pc, #56]	; (800c4bc <Bootloader_FlashNext+0x40>)
 800c482:	6821      	ldr	r1, [r4, #0]
 800c484:	f101 4377 	add.w	r3, r1, #4143972352	; 0xf7000000
 800c488:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800c48c:	4293      	cmp	r3, r2
{
 800c48e:	4605      	mov	r5, r0
    if(!(flash_ptr <= (FLASH_BASE + FLASH_SIZE - 4)) ||
 800c490:	d903      	bls.n	800c49a <Bootloader_FlashNext+0x1e>
       (flash_ptr < APP_ADDRESS))
    {
        HAL_FLASH_Lock();
 800c492:	f002 fd47 	bl	800ef24 <HAL_FLASH_Lock>
        return BL_WRITE_ERROR;
 800c496:	2005      	movs	r0, #5
        HAL_FLASH_Lock();
        return BL_WRITE_ERROR;
    }

    return BL_OK;
}
 800c498:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_ptr, data) ==  HAL_OK)
 800c49a:	4602      	mov	r2, r0
 800c49c:	2300      	movs	r3, #0
 800c49e:	2002      	movs	r0, #2
 800c4a0:	f002 fd74 	bl	800ef8c <HAL_FLASH_Program>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d1f4      	bne.n	800c492 <Bootloader_FlashNext+0x16>
        if(*(uint32_t*)flash_ptr != data)
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	42aa      	cmp	r2, r5
 800c4ae:	d1f0      	bne.n	800c492 <Bootloader_FlashNext+0x16>
        flash_ptr += 4;
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	6023      	str	r3, [r4, #0]
    return BL_OK;
 800c4b4:	e7f0      	b.n	800c498 <Bootloader_FlashNext+0x1c>
 800c4b6:	bf00      	nop
 800c4b8:	20000000 	.word	0x20000000
 800c4bc:	000dfffc 	.word	0x000dfffc

0800c4c0 <Bootloader_FlashEnd>:
 * @see    README for futher information
 * @return Bootloader error code ::eBootloaderErrorCodes
 * @retval BL_OK is returned in every case
 */
uint8_t Bootloader_FlashEnd(void)
{
 800c4c0:	b508      	push	{r3, lr}
    /* Lock flash */
    HAL_FLASH_Lock();
 800c4c2:	f002 fd2f 	bl	800ef24 <HAL_FLASH_Lock>

    return BL_OK;
}
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	bd08      	pop	{r3, pc}

0800c4ca <Bootloader_CheckSize>:
 * @retval BL_SIZE_ERROR: if application does not fit into flash
 */
uint8_t Bootloader_CheckSize(uint32_t appsize)
{
    return ((FLASH_BASE + FLASH_SIZE - APP_ADDRESS) >= appsize) ? BL_OK
                                                                : BL_SIZE_ERROR;
 800c4ca:	f5b0 2f60 	cmp.w	r0, #917504	; 0xe0000
}
 800c4ce:	bf8c      	ite	hi
 800c4d0:	2002      	movhi	r0, #2
 800c4d2:	2000      	movls	r0, #0
 800c4d4:	4770      	bx	lr
	...

0800c4d8 <Bootloader_CheckForApplication>:
 * @retval BL_OK: if first DWORD represents a valid stack pointer location
 * @retval BL_NO_APP: first DWORD value is out of RAM boundaries
 */
uint8_t Bootloader_CheckForApplication(void)
{
    return (((*(uint32_t*)APP_ADDRESS) - RAM_BASE) <= RAM_SIZE) ? BL_OK
 800c4d8:	4b04      	ldr	r3, [pc, #16]	; (800c4ec <Bootloader_CheckForApplication+0x14>)
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
                                                               : BL_NO_APP;
}
 800c4e0:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 800c4e4:	bf94      	ite	ls
 800c4e6:	2000      	movls	r0, #0
 800c4e8:	2001      	movhi	r0, #1
 800c4ea:	4770      	bx	lr
 800c4ec:	08020000 	.word	0x08020000

0800c4f0 <Bootloader_JumpToApplication>:
 *  - Sets the stack pointer location
 *  - Perform the jump
 */
void Bootloader_JumpToApplication(void)
{
    uint32_t  JumpAddress = *(__IO uint32_t*)(APP_ADDRESS + 4);
 800c4f0:	4b09      	ldr	r3, [pc, #36]	; (800c518 <Bootloader_JumpToApplication+0x28>)
{
 800c4f2:	b510      	push	{r4, lr}
    uint32_t  JumpAddress = *(__IO uint32_t*)(APP_ADDRESS + 4);
 800c4f4:	681c      	ldr	r4, [r3, #0]
    pFunction Jump        = (pFunction)JumpAddress;

    HAL_RCC_DeInit();
 800c4f6:	f003 ff37 	bl	8010368 <HAL_RCC_DeInit>
    HAL_DeInit();
 800c4fa:	f002 f9f5 	bl	800e8e8 <HAL_DeInit>

    SysTick->CTRL = 0;
 800c4fe:	4b07      	ldr	r3, [pc, #28]	; (800c51c <Bootloader_JumpToApplication+0x2c>)
 800c500:	2200      	movs	r2, #0
 800c502:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 800c504:	605a      	str	r2, [r3, #4]
    SysTick->VAL  = 0;
 800c506:	609a      	str	r2, [r3, #8]

#if(SET_VECTOR_TABLE)
    SCB->VTOR = APP_ADDRESS;
 800c508:	4a05      	ldr	r2, [pc, #20]	; (800c520 <Bootloader_JumpToApplication+0x30>)
 800c50a:	4b06      	ldr	r3, [pc, #24]	; (800c524 <Bootloader_JumpToApplication+0x34>)
 800c50c:	6093      	str	r3, [r2, #8]
#endif

    __set_MSP(*(__IO uint32_t*)APP_ADDRESS);
 800c50e:	681b      	ldr	r3, [r3, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800c510:	f383 8808 	msr	MSP, r3
    Jump();
 800c514:	47a0      	blx	r4
 800c516:	e7fe      	b.n	800c516 <Bootloader_JumpToApplication+0x26>
 800c518:	08020004 	.word	0x08020004
 800c51c:	e000e010 	.word	0xe000e010
 800c520:	e000ed00 	.word	0xe000ed00
 800c524:	08020000 	.word	0x08020000

0800c528 <Peripherials_DeInit>:
#include "libbmp.h"

extern uint32_t __attribute__((section(".newsection"))) sharedmem;
extern USBH_HandleTypeDef hUsbHostHS;
/**************************************************************/
void Peripherials_DeInit(void) {
 800c528:	b510      	push	{r4, lr}
//	BSP_SD_DeInit();
//	FATFS_DeInit();
	MX_FATFS_DeInit();
	HAL_UART_DeInit(&huart2);
 800c52a:	4c0c      	ldr	r4, [pc, #48]	; (800c55c <Peripherials_DeInit+0x34>)
	MX_FATFS_DeInit();
 800c52c:	f006 fa6e 	bl	8012a0c <MX_FATFS_DeInit>
	HAL_UART_DeInit(&huart2);
 800c530:	4620      	mov	r0, r4
 800c532:	f005 fa15 	bl	8011960 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 800c536:	4620      	mov	r0, r4
	HAL_UART_DeInit(&huart3);
 800c538:	4c09      	ldr	r4, [pc, #36]	; (800c560 <Peripherials_DeInit+0x38>)
	HAL_UART_MspDeInit(&huart2);
 800c53a:	f002 f97d 	bl	800e838 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart3);
 800c53e:	4620      	mov	r0, r4
 800c540:	f005 fa0e 	bl	8011960 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart3);
 800c544:	4620      	mov	r0, r4
 800c546:	f002 f977 	bl	800e838 <HAL_UART_MspDeInit>
	BSP_SD_DeInit();
 800c54a:	f006 fac5 	bl	8012ad8 <BSP_SD_DeInit>
	MX_USB_HOST_DeInit();
 800c54e:	f009 fcf7 	bl	8015f40 <MX_USB_HOST_DeInit>
	MX_GPIO_DeInit();
	//MX_IWDG_DeInit();

}
 800c552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	MX_GPIO_DeInit();
 800c556:	f000 be23 	b.w	800d1a0 <MX_GPIO_DeInit>
 800c55a:	bf00      	nop
 800c55c:	200016bc 	.word	0x200016bc
 800c560:	2000167c 	.word	0x2000167c

0800c564 <Check_SDCard>:
/*** Bootloader ***************************************************************/
/*** SD Card ******************************************************************/
uint8_t Check_SDCard(char *firmware_path, uint16_t *firmware_version,
		uint32_t *firmware_checksum) {
 800c564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c566:	b09b      	sub	sp, #108	; 0x6c
 800c568:	4606      	mov	r6, r0
 800c56a:	460f      	mov	r7, r1
	FRESULT fr;
	char readline[100];
	if (BSP_SD_IsDetected() == SD_NOT_PRESENT) {
 800c56c:	f006 fa97 	bl	8012a9e <BSP_SD_IsDetected>
 800c570:	b928      	cbnz	r0, 800c57e <Check_SDCard+0x1a>
		printf("SD card is not present.\n\r");
 800c572:	4820      	ldr	r0, [pc, #128]	; (800c5f4 <Check_SDCard+0x90>)
 800c574:	f009 ff46 	bl	8016404 <iprintf>
		return MEM_NOT_PRESENT;
 800c578:	2001      	movs	r0, #1
//	}
	*firmware_checksum = atol(readline);
	fclose(&SDFile);
	f_mount(NULL, (TCHAR const*) SDPath, 0);
	return MEM_CHECK_OK;
}
 800c57a:	b01b      	add	sp, #108	; 0x6c
 800c57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	printf("SD card is present\n\r");
 800c57e:	481e      	ldr	r0, [pc, #120]	; (800c5f8 <Check_SDCard+0x94>)
 800c580:	f009 ff40 	bl	8016404 <iprintf>
	fr = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 800c584:	2201      	movs	r2, #1
 800c586:	491d      	ldr	r1, [pc, #116]	; (800c5fc <Check_SDCard+0x98>)
 800c588:	481d      	ldr	r0, [pc, #116]	; (800c600 <Check_SDCard+0x9c>)
 800c58a:	f009 f87b 	bl	8015684 <f_mount>
	if (fr != FR_OK) {
 800c58e:	4604      	mov	r4, r0
 800c590:	b140      	cbz	r0, 800c5a4 <Check_SDCard+0x40>
		printf("SD card cannot be mounted.\n\r");
 800c592:	481c      	ldr	r0, [pc, #112]	; (800c604 <Check_SDCard+0xa0>)
 800c594:	f009 ff36 	bl	8016404 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c598:	4621      	mov	r1, r4
 800c59a:	481b      	ldr	r0, [pc, #108]	; (800c608 <Check_SDCard+0xa4>)
 800c59c:	f009 ff32 	bl	8016404 <iprintf>
		return MEM_MOUNT_FAIL;
 800c5a0:	2002      	movs	r0, #2
 800c5a2:	e7ea      	b.n	800c57a <Check_SDCard+0x16>
	printf("SD card mountes\n\r");
 800c5a4:	4819      	ldr	r0, [pc, #100]	; (800c60c <Check_SDCard+0xa8>)
 800c5a6:	f009 ff2d 	bl	8016404 <iprintf>
	fr = f_open(&SDFile, "0:/boot.ini", FA_READ);
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	4918      	ldr	r1, [pc, #96]	; (800c610 <Check_SDCard+0xac>)
 800c5ae:	4819      	ldr	r0, [pc, #100]	; (800c614 <Check_SDCard+0xb0>)
 800c5b0:	f009 f89c 	bl	80156ec <f_open>
	if (fr != FR_OK) {
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	b168      	cbz	r0, 800c5d4 <Check_SDCard+0x70>
		printf("File cannot be opened.\n\r");
 800c5b8:	4817      	ldr	r0, [pc, #92]	; (800c618 <Check_SDCard+0xb4>)
 800c5ba:	f009 ff23 	bl	8016404 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c5be:	4629      	mov	r1, r5
 800c5c0:	4811      	ldr	r0, [pc, #68]	; (800c608 <Check_SDCard+0xa4>)
 800c5c2:	f009 ff1f 	bl	8016404 <iprintf>
		f_mount(NULL, (TCHAR const*) SDPath, 0);
 800c5c6:	4622      	mov	r2, r4
 800c5c8:	490c      	ldr	r1, [pc, #48]	; (800c5fc <Check_SDCard+0x98>)
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f009 f85a 	bl	8015684 <f_mount>
		return FILE_OPEN_FAIL;
 800c5d0:	2003      	movs	r0, #3
 800c5d2:	e7d2      	b.n	800c57a <Check_SDCard+0x16>
	f_gets(readline, 100, &SDFile);
 800c5d4:	4a0f      	ldr	r2, [pc, #60]	; (800c614 <Check_SDCard+0xb0>)
 800c5d6:	2164      	movs	r1, #100	; 0x64
 800c5d8:	a801      	add	r0, sp, #4
 800c5da:	f009 fbd7 	bl	8015d8c <f_gets>
	*firmware_version = atol(readline);
 800c5de:	a801      	add	r0, sp, #4
 800c5e0:	f009 fe16 	bl	8016210 <atol>
	f_gets(firmware_path, 100, &SDFile);
 800c5e4:	4a0b      	ldr	r2, [pc, #44]	; (800c614 <Check_SDCard+0xb0>)
	*firmware_version = atol(readline);
 800c5e6:	8038      	strh	r0, [r7, #0]
	f_gets(firmware_path, 100, &SDFile);
 800c5e8:	2164      	movs	r1, #100	; 0x64
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f009 fbce 	bl	8015d8c <f_gets>
 800c5f0:	e7fe      	b.n	800c5f0 <Check_SDCard+0x8c>
 800c5f2:	bf00      	nop
 800c5f4:	080176e0 	.word	0x080176e0
 800c5f8:	080176fa 	.word	0x080176fa
 800c5fc:	20001725 	.word	0x20001725
 800c600:	200047c4 	.word	0x200047c4
 800c604:	0801770f 	.word	0x0801770f
 800c608:	0801772c 	.word	0x0801772c
 800c60c:	08017743 	.word	0x08017743
 800c610:	08017755 	.word	0x08017755
 800c614:	2000275c 	.word	0x2000275c
 800c618:	08017761 	.word	0x08017761

0800c61c <Check_USBMEM>:
/*** USB Memory ******************************************************************/
uint8_t Check_USBMEM(char *firmware_path, uint16_t *firmware_version,
		uint32_t *firmware_checksum) {
 800c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t usb_counter = 0;
	do {
		MX_USB_HOST_Process();
		HAL_Delay(10);
		usb_counter++;
	} while ((usb_counter < 1000) && (!USBH_MSC_IsReady(&hUsbHostHS)));
 800c620:	4d43      	ldr	r5, [pc, #268]	; (800c730 <Check_USBMEM+0x114>)
		uint32_t *firmware_checksum) {
 800c622:	b0b2      	sub	sp, #200	; 0xc8
 800c624:	4606      	mov	r6, r0
 800c626:	460f      	mov	r7, r1
 800c628:	4690      	mov	r8, r2
 800c62a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800c62e:	3c01      	subs	r4, #1
		MX_USB_HOST_Process();
 800c630:	f009 fcb2 	bl	8015f98 <MX_USB_HOST_Process>
 800c634:	b2a4      	uxth	r4, r4
		HAL_Delay(10);
 800c636:	200a      	movs	r0, #10
 800c638:	f002 f998 	bl	800e96c <HAL_Delay>
	} while ((usb_counter < 1000) && (!USBH_MSC_IsReady(&hUsbHostHS)));
 800c63c:	2c00      	cmp	r4, #0
 800c63e:	d072      	beq.n	800c726 <Check_USBMEM+0x10a>
 800c640:	4628      	mov	r0, r5
 800c642:	f006 fe35 	bl	80132b0 <USBH_MSC_IsReady>
 800c646:	2800      	cmp	r0, #0
 800c648:	d0f1      	beq.n	800c62e <Check_USBMEM+0x12>
	if (usb_counter >= 1000) {
		printf("USB is not present.\n\r");
		return MEM_NOT_PRESENT;
	}
	printf("USB is present\n\r");
 800c64a:	483a      	ldr	r0, [pc, #232]	; (800c734 <Check_USBMEM+0x118>)
 800c64c:	f009 feda 	bl	8016404 <iprintf>
	/* Mount SD card */
	fr = f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 1);
 800c650:	2201      	movs	r2, #1
 800c652:	4939      	ldr	r1, [pc, #228]	; (800c738 <Check_USBMEM+0x11c>)
 800c654:	4839      	ldr	r0, [pc, #228]	; (800c73c <Check_USBMEM+0x120>)
 800c656:	f009 f815 	bl	8015684 <f_mount>
	if (fr != FR_OK) {
 800c65a:	4605      	mov	r5, r0
 800c65c:	b150      	cbz	r0, 800c674 <Check_USBMEM+0x58>
		/* f_mount failed */
		printf("USB cannot be mounted.\n\r");
 800c65e:	4838      	ldr	r0, [pc, #224]	; (800c740 <Check_USBMEM+0x124>)
 800c660:	f009 fed0 	bl	8016404 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c664:	4629      	mov	r1, r5
 800c666:	4837      	ldr	r0, [pc, #220]	; (800c744 <Check_USBMEM+0x128>)
 800c668:	f009 fecc 	bl	8016404 <iprintf>
		return MEM_MOUNT_FAIL;
 800c66c:	2002      	movs	r0, #2
//	}

	f_close(&USBHFile);
	f_mount(NULL, (TCHAR const*) USBHPath, 0);
	return MEM_CHECK_OK;
}
 800c66e:	b032      	add	sp, #200	; 0xc8
 800c670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("USB was mounted.\n\r");
 800c674:	4834      	ldr	r0, [pc, #208]	; (800c748 <Check_USBMEM+0x12c>)
 800c676:	f009 fec5 	bl	8016404 <iprintf>
	HAL_Delay(100);
 800c67a:	2064      	movs	r0, #100	; 0x64
 800c67c:	f002 f976 	bl	800e96c <HAL_Delay>
	fr = f_open(&USBHFile, "1:/boot.ini", FA_READ);
 800c680:	2201      	movs	r2, #1
 800c682:	4932      	ldr	r1, [pc, #200]	; (800c74c <Check_USBMEM+0x130>)
 800c684:	4832      	ldr	r0, [pc, #200]	; (800c750 <Check_USBMEM+0x134>)
 800c686:	f009 f831 	bl	80156ec <f_open>
	if (fr != FR_OK) {
 800c68a:	4604      	mov	r4, r0
 800c68c:	b168      	cbz	r0, 800c6aa <Check_USBMEM+0x8e>
		printf("File cannot be opened.\n\r");
 800c68e:	4831      	ldr	r0, [pc, #196]	; (800c754 <Check_USBMEM+0x138>)
 800c690:	f009 feb8 	bl	8016404 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c694:	4621      	mov	r1, r4
 800c696:	482b      	ldr	r0, [pc, #172]	; (800c744 <Check_USBMEM+0x128>)
 800c698:	f009 feb4 	bl	8016404 <iprintf>
		f_mount(NULL, (TCHAR const*) USBHPath, 0);
 800c69c:	462a      	mov	r2, r5
 800c69e:	4926      	ldr	r1, [pc, #152]	; (800c738 <Check_USBMEM+0x11c>)
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	f008 ffef 	bl	8015684 <f_mount>
		return FILE_OPEN_FAIL;
 800c6a6:	2003      	movs	r0, #3
 800c6a8:	e7e1      	b.n	800c66e <Check_USBMEM+0x52>
	f_gets(readline, 100, &USBHFile);
 800c6aa:	4a29      	ldr	r2, [pc, #164]	; (800c750 <Check_USBMEM+0x134>)
 800c6ac:	2164      	movs	r1, #100	; 0x64
 800c6ae:	4668      	mov	r0, sp
 800c6b0:	f009 fb6c 	bl	8015d8c <f_gets>
	readline[strlen(readline) - 1] = 0;
 800c6b4:	4668      	mov	r0, sp
 800c6b6:	f7ff fcc3 	bl	800c040 <strlen>
 800c6ba:	ab32      	add	r3, sp, #200	; 0xc8
 800c6bc:	4418      	add	r0, r3
 800c6be:	f800 4cc9 	strb.w	r4, [r0, #-201]
	*firmware_version = atol(readline);
 800c6c2:	4668      	mov	r0, sp
 800c6c4:	f009 fda4 	bl	8016210 <atol>
	f_gets(readline, 100, &USBHFile);
 800c6c8:	4a21      	ldr	r2, [pc, #132]	; (800c750 <Check_USBMEM+0x134>)
	*firmware_version = atol(readline);
 800c6ca:	8038      	strh	r0, [r7, #0]
	f_gets(readline, 100, &USBHFile);
 800c6cc:	2164      	movs	r1, #100	; 0x64
 800c6ce:	4668      	mov	r0, sp
 800c6d0:	f009 fb5c 	bl	8015d8c <f_gets>
	readline[strlen(readline) - 1] = 0;
 800c6d4:	4668      	mov	r0, sp
 800c6d6:	f7ff fcb3 	bl	800c040 <strlen>
 800c6da:	ab32      	add	r3, sp, #200	; 0xc8
 800c6dc:	4418      	add	r0, r3
	sprintf(firmware_path, "%s", readline);
 800c6de:	4669      	mov	r1, sp
	readline[strlen(readline) - 1] = 0;
 800c6e0:	f800 4cc9 	strb.w	r4, [r0, #-201]
	sprintf(firmware_path, "%s", readline);
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f009 ff83 	bl	80165f0 <strcpy>
	f_gets(readline, 100, &USBHFile);
 800c6ea:	4a19      	ldr	r2, [pc, #100]	; (800c750 <Check_USBMEM+0x134>)
 800c6ec:	2164      	movs	r1, #100	; 0x64
 800c6ee:	4668      	mov	r0, sp
 800c6f0:	f009 fb4c 	bl	8015d8c <f_gets>
	readline[strlen(readline) - 1] = 0;
 800c6f4:	4668      	mov	r0, sp
 800c6f6:	f7ff fca3 	bl	800c040 <strlen>
 800c6fa:	ab32      	add	r3, sp, #200	; 0xc8
 800c6fc:	4418      	add	r0, r3
 800c6fe:	f800 4cc9 	strb.w	r4, [r0, #-201]
	*firmware_checksum = atol(readline);
 800c702:	4668      	mov	r0, sp
 800c704:	f009 fd84 	bl	8016210 <atol>
 800c708:	f8c8 0000 	str.w	r0, [r8]
	HAL_Delay(50);
 800c70c:	2032      	movs	r0, #50	; 0x32
 800c70e:	f002 f92d 	bl	800e96c <HAL_Delay>
	f_close(&USBHFile);
 800c712:	480f      	ldr	r0, [pc, #60]	; (800c750 <Check_USBMEM+0x134>)
 800c714:	f009 fa03 	bl	8015b1e <f_close>
	f_mount(NULL, (TCHAR const*) USBHPath, 0);
 800c718:	4622      	mov	r2, r4
 800c71a:	4907      	ldr	r1, [pc, #28]	; (800c738 <Check_USBMEM+0x11c>)
 800c71c:	4620      	mov	r0, r4
 800c71e:	f008 ffb1 	bl	8015684 <f_mount>
	return MEM_CHECK_OK;
 800c722:	4620      	mov	r0, r4
 800c724:	e7a3      	b.n	800c66e <Check_USBMEM+0x52>
		printf("USB is not present.\n\r");
 800c726:	480c      	ldr	r0, [pc, #48]	; (800c758 <Check_USBMEM+0x13c>)
 800c728:	f009 fe6c 	bl	8016404 <iprintf>
		return MEM_NOT_PRESENT;
 800c72c:	2001      	movs	r0, #1
 800c72e:	e79e      	b.n	800c66e <Check_USBMEM+0x52>
 800c730:	20005800 	.word	0x20005800
 800c734:	080177b2 	.word	0x080177b2
 800c738:	20001721 	.word	0x20001721
 800c73c:	2000378c 	.word	0x2000378c
 800c740:	0801777a 	.word	0x0801777a
 800c744:	0801772c 	.word	0x0801772c
 800c748:	08017793 	.word	0x08017793
 800c74c:	080177a6 	.word	0x080177a6
 800c750:	2000172c 	.word	0x2000172c
 800c754:	08017761 	.word	0x08017761
 800c758:	080177c3 	.word	0x080177c3

0800c75c <goto_application>:
/*** Go application******************************************************************/
uint8_t goto_application(void) {
 800c75c:	b508      	push	{r3, lr}
	if (Bootloader_CheckForApplication() == BL_OK) {
 800c75e:	f7ff febb 	bl	800c4d8 <Bootloader_CheckForApplication>
 800c762:	b940      	cbnz	r0, 800c776 <goto_application+0x1a>
		printf("Launching Application.\n\r");
 800c764:	4805      	ldr	r0, [pc, #20]	; (800c77c <goto_application+0x20>)
 800c766:	f009 fe4d 	bl	8016404 <iprintf>
//		draw_text("Launching Application", 0, 50, Tahoma8, 1, 0);
//		glcd_refresh();
//		HAL_Delay(1000);
		/* De-initialize bootloader hardware & peripherals */
		Peripherials_DeInit();
 800c76a:	f7ff fedd 	bl	800c528 <Peripherials_DeInit>
		/* Launch application */
		Bootloader_JumpToApplication();
 800c76e:	f7ff febf 	bl	800c4f0 <Bootloader_JumpToApplication>
		return 1;
 800c772:	2001      	movs	r0, #1
	}
	return 0;
}
 800c774:	bd08      	pop	{r3, pc}
	return 0;
 800c776:	2000      	movs	r0, #0
 800c778:	e7fc      	b.n	800c774 <goto_application+0x18>
 800c77a:	bf00      	nop
 800c77c:	08017b07 	.word	0x08017b07

0800c780 <Write_Flash>:
/*
 * Write program to flash memory & verify
 */
extern uint16_t VirtAddVarTab[NB_OF_VAR];
uint8_t Write_Flash(uint8_t ID_mem, char *name, uint16_t version,
		uint32_t checksum) {
 800c780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c784:	b0a9      	sub	sp, #164	; 0xa4
	uint32_t cntr;
	uint32_t addr;
	FSIZE_t filesize;
	char filename[100];
	char tmp_str[30];
	if (ID_mem == SD_ID)
 800c786:	280a      	cmp	r0, #10
		uint32_t checksum) {
 800c788:	9202      	str	r2, [sp, #8]
 800c78a:	4605      	mov	r5, r0
		sprintf(filename, "0:/%s", name);
 800c78c:	460a      	mov	r2, r1
	else
		sprintf(filename, "1:/%s", name);
 800c78e:	a80f      	add	r0, sp, #60	; 0x3c
		sprintf(filename, "0:/%s", name);
 800c790:	bf0c      	ite	eq
 800c792:	4948      	ldreq	r1, [pc, #288]	; (800c8b4 <Write_Flash+0x134>)
		sprintf(filename, "1:/%s", name);
 800c794:	4948      	ldrne	r1, [pc, #288]	; (800c8b8 <Write_Flash+0x138>)
	printf("name of file %s\n\r", filename);
	///////////////////////get version//////////////////////////////////
	HAL_FLASH_Unlock();
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800c796:	4c49      	ldr	r4, [pc, #292]	; (800c8bc <Write_Flash+0x13c>)
		sprintf(filename, "1:/%s", name);
 800c798:	f009 ff0a 	bl	80165b0 <siprintf>
	printf("name of file %s\n\r", filename);
 800c79c:	a90f      	add	r1, sp, #60	; 0x3c
 800c79e:	4848      	ldr	r0, [pc, #288]	; (800c8c0 <Write_Flash+0x140>)
 800c7a0:	f009 fe30 	bl	8016404 <iprintf>
	HAL_FLASH_Unlock();
 800c7a4:	f002 fbac 	bl	800ef00 <HAL_FLASH_Unlock>
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800c7a8:	200a      	movs	r0, #10
	EE_ReadVariable(VirtAddVarTab[0], &current_version);
 800c7aa:	a904      	add	r1, sp, #16
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800c7ac:	8020      	strh	r0, [r4, #0]
	EE_ReadVariable(VirtAddVarTab[0], &current_version);
 800c7ae:	f000 fab3 	bl	800cd18 <EE_ReadVariable>
	HAL_FLASH_Lock();
 800c7b2:	f002 fbb7 	bl	800ef24 <HAL_FLASH_Lock>
	//////////////////////check downgrade?////////////////////////////////////////////
	if (version == current_version) {
 800c7b6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800c7ba:	9a02      	ldr	r2, [sp, #8]
 800c7bc:	9403      	str	r4, [sp, #12]
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d115      	bne.n	800c7ee <Write_Flash+0x6e>
		printf(
 800c7c2:	4840      	ldr	r0, [pc, #256]	; (800c8c4 <Write_Flash+0x144>)
			printf("Downgrade firmware is not possible.\n\r");
			return FLASH_CHECKVERSION_FAIL;
		}
		printf("Downgrade firmware.\n\r");
	} else {
		printf("Upgrade firmware.\n\r");
 800c7c4:	f009 fe1e 	bl	8016404 <iprintf>
	}
	////////////////////////////////////////////////////////////////
	/* Mount MEM */
	if (ID_mem == SD_ID)
 800c7c8:	2d0a      	cmp	r5, #10
		fr = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 800c7ca:	f04f 0201 	mov.w	r2, #1
	if (ID_mem == SD_ID)
 800c7ce:	d11f      	bne.n	800c810 <Write_Flash+0x90>
		fr = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 800c7d0:	493d      	ldr	r1, [pc, #244]	; (800c8c8 <Write_Flash+0x148>)
 800c7d2:	483e      	ldr	r0, [pc, #248]	; (800c8cc <Write_Flash+0x14c>)
 800c7d4:	f008 ff56 	bl	8015684 <f_mount>
	else
		fr = f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 1);
	if (fr != FR_OK) {
 800c7d8:	4604      	mov	r4, r0
 800c7da:	b360      	cbz	r0, 800c836 <Write_Flash+0xb6>
		/* f_mount failed */
		printf("Mem cannot be mounted.\n\r");
 800c7dc:	483c      	ldr	r0, [pc, #240]	; (800c8d0 <Write_Flash+0x150>)
 800c7de:	f009 fe11 	bl	8016404 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	483b      	ldr	r0, [pc, #236]	; (800c8d4 <Write_Flash+0x154>)
 800c7e6:	f009 fe0d 	bl	8016404 <iprintf>
		return MEM_MOUNT_FAIL;
 800c7ea:	2002      	movs	r0, #2
 800c7ec:	e009      	b.n	800c802 <Write_Flash+0x82>
	} else if (version < current_version) {
 800c7ee:	d90d      	bls.n	800c80c <Write_Flash+0x8c>
		if (sharedmem == WRITE_FROM_SD || sharedmem == WRITE_FROM_USB) {
 800c7f0:	4b39      	ldr	r3, [pc, #228]	; (800c8d8 <Write_Flash+0x158>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d806      	bhi.n	800c808 <Write_Flash+0x88>
			printf("Downgrade firmware is not possible.\n\r");
 800c7fa:	4838      	ldr	r0, [pc, #224]	; (800c8dc <Write_Flash+0x15c>)
 800c7fc:	f009 fe02 	bl	8016404 <iprintf>
			return FLASH_CHECKVERSION_FAIL;
 800c800:	2007      	movs	r0, #7
	}
	printf("Version Write in Flash %d\n\r", Data);
	HAL_Delay(500);
	HAL_FLASH_Lock();
	return FLASH_WRITE_OK;
}
 800c802:	b029      	add	sp, #164	; 0xa4
 800c804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Downgrade firmware.\n\r");
 800c808:	4835      	ldr	r0, [pc, #212]	; (800c8e0 <Write_Flash+0x160>)
 800c80a:	e7db      	b.n	800c7c4 <Write_Flash+0x44>
		printf("Upgrade firmware.\n\r");
 800c80c:	4835      	ldr	r0, [pc, #212]	; (800c8e4 <Write_Flash+0x164>)
 800c80e:	e7d9      	b.n	800c7c4 <Write_Flash+0x44>
		fr = f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 1);
 800c810:	4935      	ldr	r1, [pc, #212]	; (800c8e8 <Write_Flash+0x168>)
 800c812:	4836      	ldr	r0, [pc, #216]	; (800c8ec <Write_Flash+0x16c>)
 800c814:	f008 ff36 	bl	8015684 <f_mount>
	if (fr != FR_OK) {
 800c818:	4604      	mov	r4, r0
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d1de      	bne.n	800c7dc <Write_Flash+0x5c>
		fr = f_open(&USBHFile, filename, FA_READ);
 800c81e:	4e34      	ldr	r6, [pc, #208]	; (800c8f0 <Write_Flash+0x170>)
 800c820:	2201      	movs	r2, #1
 800c822:	a90f      	add	r1, sp, #60	; 0x3c
 800c824:	4630      	mov	r0, r6
 800c826:	f008 ff61 	bl	80156ec <f_open>
	if (fr != FR_OK) {
 800c82a:	4604      	mov	r4, r0
 800c82c:	b958      	cbnz	r0, 800c846 <Write_Flash+0xc6>
		filesize = f_size(&USBHFile);
 800c82e:	68f7      	ldr	r7, [r6, #12]
		printf("Software found on USBH(%lu byte).\n\r", filesize);
 800c830:	4830      	ldr	r0, [pc, #192]	; (800c8f4 <Write_Flash+0x174>)
 800c832:	4639      	mov	r1, r7
 800c834:	e013      	b.n	800c85e <Write_Flash+0xde>
		fr = f_open(&SDFile, filename, FA_READ);
 800c836:	4e30      	ldr	r6, [pc, #192]	; (800c8f8 <Write_Flash+0x178>)
 800c838:	2201      	movs	r2, #1
 800c83a:	a90f      	add	r1, sp, #60	; 0x3c
 800c83c:	4630      	mov	r0, r6
 800c83e:	f008 ff55 	bl	80156ec <f_open>
	if (fr != FR_OK) {
 800c842:	4604      	mov	r4, r0
 800c844:	b140      	cbz	r0, 800c858 <Write_Flash+0xd8>
		printf("File cannot be opened.\n\r");
 800c846:	482d      	ldr	r0, [pc, #180]	; (800c8fc <Write_Flash+0x17c>)
 800c848:	f009 fddc 	bl	8016404 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c84c:	4621      	mov	r1, r4
 800c84e:	4821      	ldr	r0, [pc, #132]	; (800c8d4 <Write_Flash+0x154>)
 800c850:	f009 fdd8 	bl	8016404 <iprintf>
		return FILE_OPEN_FAIL;
 800c854:	2003      	movs	r0, #3
 800c856:	e7d4      	b.n	800c802 <Write_Flash+0x82>
		filesize = f_size(&SDFile);
 800c858:	68f7      	ldr	r7, [r6, #12]
		printf("Software found on SD(%lu byte).\n\r", filesize);
 800c85a:	4829      	ldr	r0, [pc, #164]	; (800c900 <Write_Flash+0x180>)
 800c85c:	4639      	mov	r1, r7
		printf("Software found on USBH(%lu byte).\n\r", filesize);
 800c85e:	f009 fdd1 	bl	8016404 <iprintf>
	if (Bootloader_CheckSize((uint32_t) filesize) != BL_OK) {
 800c862:	4638      	mov	r0, r7
 800c864:	f7ff fe31 	bl	800c4ca <Bootloader_CheckSize>
 800c868:	4604      	mov	r4, r0
 800c86a:	b150      	cbz	r0, 800c882 <Write_Flash+0x102>
		printf("Error: app on SD card is too large.\n\r");
 800c86c:	4825      	ldr	r0, [pc, #148]	; (800c904 <Write_Flash+0x184>)
 800c86e:	f009 fdc9 	bl	8016404 <iprintf>
		if (ID_mem == SD_ID)
 800c872:	2d0a      	cmp	r5, #10
			f_close(&SDFile);
 800c874:	bf0c      	ite	eq
 800c876:	4820      	ldreq	r0, [pc, #128]	; (800c8f8 <Write_Flash+0x178>)
			f_close(&USBHFile);
 800c878:	481d      	ldrne	r0, [pc, #116]	; (800c8f0 <Write_Flash+0x170>)
 800c87a:	f009 f950 	bl	8015b1e <f_close>
		return FLASH_CHECKSIZE_FAIL;
 800c87e:	2008      	movs	r0, #8
 800c880:	e7bf      	b.n	800c802 <Write_Flash+0x82>
	Bootloader_Init();
 800c882:	f7ff fdb5 	bl	800c3f0 <Bootloader_Init>
	printf("Erasing flash...\n\r");
 800c886:	4820      	ldr	r0, [pc, #128]	; (800c908 <Write_Flash+0x188>)
 800c888:	f009 fdbc 	bl	8016404 <iprintf>
	draw_text("Erase Flash...", 0, 10, Tahoma8, 1, 0);
 800c88c:	2301      	movs	r3, #1
 800c88e:	4621      	mov	r1, r4
 800c890:	220a      	movs	r2, #10
 800c892:	9401      	str	r4, [sp, #4]
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	481d      	ldr	r0, [pc, #116]	; (800c90c <Write_Flash+0x18c>)
 800c898:	4b1d      	ldr	r3, [pc, #116]	; (800c910 <Write_Flash+0x190>)
 800c89a:	f000 fe32 	bl	800d502 <draw_text>
	glcd_refresh();
 800c89e:	f001 fcd3 	bl	800e248 <glcd_refresh>
	if (Bootloader_Erase() != BL_OK) {
 800c8a2:	f7ff fdc3 	bl	800c42c <Bootloader_Erase>
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	b3b0      	cbz	r0, 800c918 <Write_Flash+0x198>
		printf("Flashe erase error.\n\r");
 800c8aa:	481a      	ldr	r0, [pc, #104]	; (800c914 <Write_Flash+0x194>)
 800c8ac:	f009 fdaa 	bl	8016404 <iprintf>
		return FLASH_ERASE_FAIL;
 800c8b0:	2005      	movs	r0, #5
 800c8b2:	e7a6      	b.n	800c802 <Write_Flash+0x82>
 800c8b4:	080177d9 	.word	0x080177d9
 800c8b8:	080177df 	.word	0x080177df
 800c8bc:	20000004 	.word	0x20000004
 800c8c0:	080177e5 	.word	0x080177e5
 800c8c4:	080177f7 	.word	0x080177f7
 800c8c8:	20001725 	.word	0x20001725
 800c8cc:	200047c4 	.word	0x200047c4
 800c8d0:	0801788d 	.word	0x0801788d
 800c8d4:	0801772c 	.word	0x0801772c
 800c8d8:	10000000 	.word	0x10000000
 800c8dc:	0801783d 	.word	0x0801783d
 800c8e0:	08017863 	.word	0x08017863
 800c8e4:	08017879 	.word	0x08017879
 800c8e8:	20001721 	.word	0x20001721
 800c8ec:	2000378c 	.word	0x2000378c
 800c8f0:	2000172c 	.word	0x2000172c
 800c8f4:	080178c8 	.word	0x080178c8
 800c8f8:	2000275c 	.word	0x2000275c
 800c8fc:	08017761 	.word	0x08017761
 800c900:	080178a6 	.word	0x080178a6
 800c904:	080178ec 	.word	0x080178ec
 800c908:	08017912 	.word	0x08017912
 800c90c:	08017925 	.word	0x08017925
 800c910:	08017e05 	.word	0x08017e05
 800c914:	08017934 	.word	0x08017934
	printf("Flash erase finished.\n\r");
 800c918:	4885      	ldr	r0, [pc, #532]	; (800cb30 <Write_Flash+0x3b0>)
			fr = f_read(&SDFile, &data, 4, &num);
 800c91a:	f8df a228 	ldr.w	sl, [pc, #552]	; 800cb44 <Write_Flash+0x3c4>
			printf("%d %% was flahsed(%lu/%lu)\n\r",
 800c91e:	f8df b25c 	ldr.w	fp, [pc, #604]	; 800cb7c <Write_Flash+0x3fc>
	printf("Flash erase finished.\n\r");
 800c922:	f009 fd6f 	bl	8016404 <iprintf>
	HAL_Delay(1000);
 800c926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c92a:	f002 f81f 	bl	800e96c <HAL_Delay>
	printf("Starting programming...\n\r");
 800c92e:	4881      	ldr	r0, [pc, #516]	; (800cb34 <Write_Flash+0x3b4>)
 800c930:	f009 fd68 	bl	8016404 <iprintf>
	Bootloader_FlashBegin(); //unlock flash
 800c934:	f7ff fd96 	bl	800c464 <Bootloader_FlashBegin>
		if (ID_mem == SD_ID)
 800c938:	2d0a      	cmp	r5, #10
		data = 0xFFFFFFFF; // flash write is in 32bit mode write
 800c93a:	f04f 33ff 	mov.w	r3, #4294967295
 800c93e:	9306      	str	r3, [sp, #24]
			fr = f_read(&SDFile, &data, 4, &num);
 800c940:	f04f 0204 	mov.w	r2, #4
 800c944:	ab05      	add	r3, sp, #20
 800c946:	a906      	add	r1, sp, #24
 800c948:	bf0c      	ite	eq
 800c94a:	4650      	moveq	r0, sl
			fr = f_read(&USBHFile, &data, 4, &num);
 800c94c:	487a      	ldrne	r0, [pc, #488]	; (800cb38 <Write_Flash+0x3b8>)
 800c94e:	f008 ffdf 	bl	8015910 <f_read>
		if (num) {
 800c952:	9b05      	ldr	r3, [sp, #20]
			fr = f_read(&USBHFile, &data, 4, &num);
 800c954:	4680      	mov	r8, r0
		if (num) {
 800c956:	b133      	cbz	r3, 800c966 <Write_Flash+0x1e6>
			status = Bootloader_FlashNext(data);
 800c958:	9806      	ldr	r0, [sp, #24]
 800c95a:	f7ff fd8f 	bl	800c47c <Bootloader_FlashNext>
			if (status == BL_OK) {
 800c95e:	2800      	cmp	r0, #0
 800c960:	f040 80c5 	bne.w	800caee <Write_Flash+0x36e>
				cntr++;
 800c964:	3401      	adds	r4, #1
		if (cntr % 256 == 0) {
 800c966:	f014 09ff 	ands.w	r9, r4, #255	; 0xff
 800c96a:	d11d      	bne.n	800c9a8 <Write_Flash+0x228>
					(uint8_t) ((uint32_t) (cntr * 4) * 100 / (uint32_t) filesize)+1,
 800c96c:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800c970:	4366      	muls	r6, r4
 800c972:	fbb6 f6f7 	udiv	r6, r6, r7
 800c976:	b2f6      	uxtb	r6, r6
			printf("%d %% was flahsed(%lu/%lu)\n\r",
 800c978:	3601      	adds	r6, #1
 800c97a:	463b      	mov	r3, r7
 800c97c:	00a2      	lsls	r2, r4, #2
 800c97e:	4631      	mov	r1, r6
 800c980:	4658      	mov	r0, fp
 800c982:	f009 fd3f 	bl	8016404 <iprintf>
			sprintf(tmp_str,"%03d%%_flashed",(uint8_t) ((uint32_t) (cntr * 4) * 100 / (uint32_t) filesize)+1);
 800c986:	4632      	mov	r2, r6
 800c988:	496c      	ldr	r1, [pc, #432]	; (800cb3c <Write_Flash+0x3bc>)
 800c98a:	a807      	add	r0, sp, #28
 800c98c:	f009 fe10 	bl	80165b0 <siprintf>
			draw_text(tmp_str, 0, 20, Tahoma8, 1, 0);
 800c990:	2301      	movs	r3, #1
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	2214      	movs	r2, #20
 800c996:	4b6a      	ldr	r3, [pc, #424]	; (800cb40 <Write_Flash+0x3c0>)
 800c998:	f8cd 9004 	str.w	r9, [sp, #4]
 800c99c:	4649      	mov	r1, r9
 800c99e:	a807      	add	r0, sp, #28
 800c9a0:	f000 fdaf 	bl	800d502 <draw_text>
			glcd_refresh();
 800c9a4:	f001 fc50 	bl	800e248 <glcd_refresh>
	} while ((fr == FR_OK) && (num > 0));
 800c9a8:	f1b8 0f00 	cmp.w	r8, #0
 800c9ac:	d102      	bne.n	800c9b4 <Write_Flash+0x234>
 800c9ae:	9b05      	ldr	r3, [sp, #20]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1c1      	bne.n	800c938 <Write_Flash+0x1b8>
	Bootloader_FlashEnd();
 800c9b4:	f7ff fd84 	bl	800c4c0 <Bootloader_FlashEnd>
	if (ID_mem == SD_ID)
 800c9b8:	2d0a      	cmp	r5, #10
		f_close(&SDFile);
 800c9ba:	bf0c      	ite	eq
 800c9bc:	4861      	ldreq	r0, [pc, #388]	; (800cb44 <Write_Flash+0x3c4>)
		f_close(&USBHFile);
 800c9be:	485e      	ldrne	r0, [pc, #376]	; (800cb38 <Write_Flash+0x3b8>)
 800c9c0:	f009 f8ad 	bl	8015b1e <f_close>
	printf("Programming finished.\n\r");
 800c9c4:	4860      	ldr	r0, [pc, #384]	; (800cb48 <Write_Flash+0x3c8>)
 800c9c6:	f009 fd1d 	bl	8016404 <iprintf>
	printf("Flashed: %lu bytes.", (cntr * 4));
 800c9ca:	00a1      	lsls	r1, r4, #2
 800c9cc:	485f      	ldr	r0, [pc, #380]	; (800cb4c <Write_Flash+0x3cc>)
 800c9ce:	f009 fd19 	bl	8016404 <iprintf>
	if (ID_mem == SD_ID)
 800c9d2:	2d0a      	cmp	r5, #10
		fr = f_open(&SDFile, filename, FA_READ);
 800c9d4:	f04f 0201 	mov.w	r2, #1
 800c9d8:	a90f      	add	r1, sp, #60	; 0x3c
	if (ID_mem == SD_ID)
 800c9da:	f040 8094 	bne.w	800cb06 <Write_Flash+0x386>
		fr = f_open(&SDFile, filename, FA_READ);
 800c9de:	4859      	ldr	r0, [pc, #356]	; (800cb44 <Write_Flash+0x3c4>)
 800c9e0:	f008 fe84 	bl	80156ec <f_open>
	if (fr != FR_OK) {
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f47f af2d 	bne.w	800c846 <Write_Flash+0xc6>
		printf("Software found on SD.\n\r");
 800c9ec:	4858      	ldr	r0, [pc, #352]	; (800cb50 <Write_Flash+0x3d0>)
	cntr = 0;
 800c9ee:	f8df 8190 	ldr.w	r8, [pc, #400]	; 800cb80 <Write_Flash+0x400>
			printf("%d %% was verified(%lu/%lu)\n\r",
 800c9f2:	f8df b190 	ldr.w	fp, [pc, #400]	; 800cb84 <Write_Flash+0x404>
		printf("Software found on USBH.\n\r");
 800c9f6:	f009 fd05 	bl	8016404 <iprintf>
	cntr = 0;
 800c9fa:	2600      	movs	r6, #0
		data = 0xFFFFFFFF;
 800c9fc:	a928      	add	r1, sp, #160	; 0xa0
		if (ID_mem == SD_ID)
 800c9fe:	2d0a      	cmp	r5, #10
		data = 0xFFFFFFFF;
 800ca00:	f04f 33ff 	mov.w	r3, #4294967295
 800ca04:	f841 3d88 	str.w	r3, [r1, #-136]!
			fr = f_read(&SDFile, &data, 4, &num);
 800ca08:	f04f 0204 	mov.w	r2, #4
 800ca0c:	ab05      	add	r3, sp, #20
 800ca0e:	bf0c      	ite	eq
 800ca10:	484c      	ldreq	r0, [pc, #304]	; (800cb44 <Write_Flash+0x3c4>)
			fr = f_read(&USBHFile, &data, 4, &num);
 800ca12:	4849      	ldrne	r0, [pc, #292]	; (800cb38 <Write_Flash+0x3b8>)
 800ca14:	f008 ff7c 	bl	8015910 <f_read>
		if (num) {
 800ca18:	9b05      	ldr	r3, [sp, #20]
			fr = f_read(&USBHFile, &data, 4, &num);
 800ca1a:	4681      	mov	r9, r0
		if (num) {
 800ca1c:	b13b      	cbz	r3, 800ca2e <Write_Flash+0x2ae>
			if (*(uint32_t*) addr == (uint32_t) data) {
 800ca1e:	f8d8 2000 	ldr.w	r2, [r8]
 800ca22:	9b06      	ldr	r3, [sp, #24]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d177      	bne.n	800cb18 <Write_Flash+0x398>
				addr += 4;
 800ca28:	f108 0804 	add.w	r8, r8, #4
				cntr++;
 800ca2c:	3601      	adds	r6, #1
		if (cntr % 256 == 0) {
 800ca2e:	f016 0aff 	ands.w	sl, r6, #255	; 0xff
 800ca32:	d11d      	bne.n	800ca70 <Write_Flash+0x2f0>
					(uint8_t) ((uint32_t) (cntr * 4) * 100 / (uint32_t) filesize)+1,
 800ca34:	f44f 74c8 	mov.w	r4, #400	; 0x190
 800ca38:	4374      	muls	r4, r6
 800ca3a:	fbb4 f4f7 	udiv	r4, r4, r7
 800ca3e:	b2e4      	uxtb	r4, r4
			printf("%d %% was verified(%lu/%lu)\n\r",
 800ca40:	3401      	adds	r4, #1
 800ca42:	463b      	mov	r3, r7
 800ca44:	00b2      	lsls	r2, r6, #2
 800ca46:	4621      	mov	r1, r4
 800ca48:	4658      	mov	r0, fp
 800ca4a:	f009 fcdb 	bl	8016404 <iprintf>
			sprintf(tmp_str,"%03d%% verified",(uint8_t) ((uint32_t) (cntr * 4) * 100 / (uint32_t) filesize)+1);
 800ca4e:	4622      	mov	r2, r4
 800ca50:	4940      	ldr	r1, [pc, #256]	; (800cb54 <Write_Flash+0x3d4>)
 800ca52:	a807      	add	r0, sp, #28
 800ca54:	f009 fdac 	bl	80165b0 <siprintf>
			draw_text(tmp_str, 0, 30, Tahoma8, 1, 0);
 800ca58:	2301      	movs	r3, #1
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	221e      	movs	r2, #30
 800ca5e:	4b38      	ldr	r3, [pc, #224]	; (800cb40 <Write_Flash+0x3c0>)
 800ca60:	f8cd a004 	str.w	sl, [sp, #4]
 800ca64:	4651      	mov	r1, sl
 800ca66:	a807      	add	r0, sp, #28
 800ca68:	f000 fd4b 	bl	800d502 <draw_text>
			glcd_refresh();
 800ca6c:	f001 fbec 	bl	800e248 <glcd_refresh>
	} while ((fr == FR_OK) && (num > 0));
 800ca70:	f1b9 0f00 	cmp.w	r9, #0
 800ca74:	d102      	bne.n	800ca7c <Write_Flash+0x2fc>
 800ca76:	9b05      	ldr	r3, [sp, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1bf      	bne.n	800c9fc <Write_Flash+0x27c>
	printf("Verification passed.\n\r");
 800ca7c:	4836      	ldr	r0, [pc, #216]	; (800cb58 <Write_Flash+0x3d8>)
 800ca7e:	f009 fcc1 	bl	8016404 <iprintf>
	if (ID_mem == SD_ID)
 800ca82:	2d0a      	cmp	r5, #10
		f_close(&SDFile);
 800ca84:	bf0c      	ite	eq
 800ca86:	482f      	ldreq	r0, [pc, #188]	; (800cb44 <Write_Flash+0x3c4>)
		f_close(&USBHFile);
 800ca88:	482b      	ldrne	r0, [pc, #172]	; (800cb38 <Write_Flash+0x3b8>)
 800ca8a:	f009 f848 	bl	8015b1e <f_close>
	printf("flashed programmed & verified\n\r");
 800ca8e:	4833      	ldr	r0, [pc, #204]	; (800cb5c <Write_Flash+0x3dc>)
 800ca90:	f009 fcb8 	bl	8016404 <iprintf>
	if(HAL_FLASH_Unlock()!=HAL_OK)
 800ca94:	f002 fa34 	bl	800ef00 <HAL_FLASH_Unlock>
 800ca98:	b110      	cbz	r0, 800caa0 <Write_Flash+0x320>
		printf("flash unlock error\n\r");
 800ca9a:	4831      	ldr	r0, [pc, #196]	; (800cb60 <Write_Flash+0x3e0>)
 800ca9c:	f009 fcb2 	bl	8016404 <iprintf>
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800caa0:	9b03      	ldr	r3, [sp, #12]
	if ((r = EE_WriteVariable(VirtAddVarTab[0], (uint16_t) version))
 800caa2:	9902      	ldr	r1, [sp, #8]
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800caa4:	200a      	movs	r0, #10
 800caa6:	8018      	strh	r0, [r3, #0]
	if ((r = EE_WriteVariable(VirtAddVarTab[0], (uint16_t) version))
 800caa8:	f000 fa2a 	bl	800cf00 <EE_WriteVariable>
 800caac:	4601      	mov	r1, r0
 800caae:	b110      	cbz	r0, 800cab6 <Write_Flash+0x336>
		printf("EE Write Error %d\n\r", r);
 800cab0:	482c      	ldr	r0, [pc, #176]	; (800cb64 <Write_Flash+0x3e4>)
 800cab2:	f009 fca7 	bl	8016404 <iprintf>
	HAL_Delay(500);
 800cab6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800caba:	f001 ff57 	bl	800e96c <HAL_Delay>
	if((r=EE_ReadVariable(VirtAddVarTab[0], &Data))!=HAL_OK){
 800cabe:	9b03      	ldr	r3, [sp, #12]
 800cac0:	f10d 0112 	add.w	r1, sp, #18
 800cac4:	8818      	ldrh	r0, [r3, #0]
 800cac6:	f000 f927 	bl	800cd18 <EE_ReadVariable>
 800caca:	4601      	mov	r1, r0
 800cacc:	b110      	cbz	r0, 800cad4 <Write_Flash+0x354>
		printf("EE Read Error %d\n\r", r);;
 800cace:	4826      	ldr	r0, [pc, #152]	; (800cb68 <Write_Flash+0x3e8>)
 800cad0:	f009 fc98 	bl	8016404 <iprintf>
	printf("Version Write in Flash %d\n\r", Data);
 800cad4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800cad8:	4824      	ldr	r0, [pc, #144]	; (800cb6c <Write_Flash+0x3ec>)
 800cada:	f009 fc93 	bl	8016404 <iprintf>
	HAL_Delay(500);
 800cade:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cae2:	f001 ff43 	bl	800e96c <HAL_Delay>
	HAL_FLASH_Lock();
 800cae6:	f002 fa1d 	bl	800ef24 <HAL_FLASH_Lock>
	return FLASH_WRITE_OK;
 800caea:	200b      	movs	r0, #11
 800caec:	e689      	b.n	800c802 <Write_Flash+0x82>
				printf("Programming error at: %lu byte\n\r", (cntr * 4));
 800caee:	00a1      	lsls	r1, r4, #2
 800caf0:	481f      	ldr	r0, [pc, #124]	; (800cb70 <Write_Flash+0x3f0>)
 800caf2:	f009 fc87 	bl	8016404 <iprintf>
				if (ID_mem == SD_ID)
 800caf6:	2d0a      	cmp	r5, #10
					f_close(&SDFile);
 800caf8:	bf0c      	ite	eq
 800cafa:	4812      	ldreq	r0, [pc, #72]	; (800cb44 <Write_Flash+0x3c4>)
					f_close(&USBHFile);
 800cafc:	480e      	ldrne	r0, [pc, #56]	; (800cb38 <Write_Flash+0x3b8>)
 800cafe:	f009 f80e 	bl	8015b1e <f_close>
				return FLASH_WRITE_FAIL;
 800cb02:	2006      	movs	r0, #6
 800cb04:	e67d      	b.n	800c802 <Write_Flash+0x82>
		fr = f_open(&USBHFile, filename, FA_READ);
 800cb06:	480c      	ldr	r0, [pc, #48]	; (800cb38 <Write_Flash+0x3b8>)
 800cb08:	f008 fdf0 	bl	80156ec <f_open>
	if (fr != FR_OK) {
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	f47f ae99 	bne.w	800c846 <Write_Flash+0xc6>
		printf("Software found on USBH.\n\r");
 800cb14:	4817      	ldr	r0, [pc, #92]	; (800cb74 <Write_Flash+0x3f4>)
 800cb16:	e76a      	b.n	800c9ee <Write_Flash+0x26e>
				printf("Verification error at: %lu byte.\n\r", (cntr * 4));
 800cb18:	00b1      	lsls	r1, r6, #2
 800cb1a:	4817      	ldr	r0, [pc, #92]	; (800cb78 <Write_Flash+0x3f8>)
 800cb1c:	f009 fc72 	bl	8016404 <iprintf>
				if (ID_mem == SD_ID)
 800cb20:	2d0a      	cmp	r5, #10
					f_close(&SDFile);
 800cb22:	bf0c      	ite	eq
 800cb24:	4807      	ldreq	r0, [pc, #28]	; (800cb44 <Write_Flash+0x3c4>)
					f_close(&USBHFile);
 800cb26:	4804      	ldrne	r0, [pc, #16]	; (800cb38 <Write_Flash+0x3b8>)
 800cb28:	f008 fff9 	bl	8015b1e <f_close>
				return FLASH_VERIFY_FAIL;
 800cb2c:	2009      	movs	r0, #9
 800cb2e:	e668      	b.n	800c802 <Write_Flash+0x82>
 800cb30:	0801794a 	.word	0x0801794a
 800cb34:	08017962 	.word	0x08017962
 800cb38:	2000172c 	.word	0x2000172c
 800cb3c:	080179ba 	.word	0x080179ba
 800cb40:	08017e05 	.word	0x08017e05
 800cb44:	2000275c 	.word	0x2000275c
 800cb48:	080179c9 	.word	0x080179c9
 800cb4c:	080179e1 	.word	0x080179e1
 800cb50:	080179f5 	.word	0x080179f5
 800cb54:	08017a68 	.word	0x08017a68
 800cb58:	08017a78 	.word	0x08017a78
 800cb5c:	08017a8f 	.word	0x08017a8f
 800cb60:	08017aaf 	.word	0x08017aaf
 800cb64:	08017ac4 	.word	0x08017ac4
 800cb68:	08017ad8 	.word	0x08017ad8
 800cb6c:	08017aeb 	.word	0x08017aeb
 800cb70:	0801797c 	.word	0x0801797c
 800cb74:	08017a0d 	.word	0x08017a0d
 800cb78:	08017a27 	.word	0x08017a27
 800cb7c:	0801799d 	.word	0x0801799d
 800cb80:	08020000 	.word	0x08020000
 800cb84:	08017a4a 	.word	0x08017a4a

0800cb88 <MX_CRC_Init>:

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 800cb88:	4805      	ldr	r0, [pc, #20]	; (800cba0 <MX_CRC_Init+0x18>)
{
 800cb8a:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800cb8c:	4b05      	ldr	r3, [pc, #20]	; (800cba4 <MX_CRC_Init+0x1c>)
 800cb8e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800cb90:	f001 ff68 	bl	800ea64 <HAL_CRC_Init>
 800cb94:	b118      	cbz	r0, 800cb9e <MX_CRC_Init+0x16>
  {
    Error_Handler();
  }

}
 800cb96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800cb9a:	f001 b8e9 	b.w	800dd70 <Error_Handler>
}
 800cb9e:	bd08      	pop	{r3, pc}
 800cba0:	20001484 	.word	0x20001484
 800cba4:	40023000 	.word	0x40023000

0800cba8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800cba8:	6802      	ldr	r2, [r0, #0]
 800cbaa:	4b09      	ldr	r3, [pc, #36]	; (800cbd0 <HAL_CRC_MspInit+0x28>)
 800cbac:	429a      	cmp	r2, r3
{
 800cbae:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 800cbb0:	d10b      	bne.n	800cbca <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9301      	str	r3, [sp, #4]
 800cbb6:	4b07      	ldr	r3, [pc, #28]	; (800cbd4 <HAL_CRC_MspInit+0x2c>)
 800cbb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cbbe:	631a      	str	r2, [r3, #48]	; 0x30
 800cbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbc6:	9301      	str	r3, [sp, #4]
 800cbc8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800cbca:	b002      	add	sp, #8
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	40023000 	.word	0x40023000
 800cbd4:	40023800 	.word	0x40023800

0800cbd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800cbd8:	b513      	push	{r0, r1, r4, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800cbda:	4b0f      	ldr	r3, [pc, #60]	; (800cc18 <MX_DMA_Init+0x40>)
 800cbdc:	2400      	movs	r4, #0
 800cbde:	9401      	str	r4, [sp, #4]
 800cbe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbe2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800cbe6:	631a      	str	r2, [r3, #48]	; 0x30
 800cbe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800cbee:	4622      	mov	r2, r4
 800cbf0:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800cbf2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800cbf4:	203b      	movs	r0, #59	; 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 800cbf6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800cbf8:	f001 fede 	bl	800e9b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800cbfc:	203b      	movs	r0, #59	; 0x3b
 800cbfe:	f001 ff0f 	bl	800ea20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800cc02:	4622      	mov	r2, r4
 800cc04:	4621      	mov	r1, r4
 800cc06:	2045      	movs	r0, #69	; 0x45
 800cc08:	f001 fed6 	bl	800e9b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800cc0c:	2045      	movs	r0, #69	; 0x45

}
 800cc0e:	b002      	add	sp, #8
 800cc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800cc14:	f001 bf04 	b.w	800ea20 <HAL_NVIC_EnableIRQ>
 800cc18:	40023800 	.word	0x40023800

0800cc1c <EE_VerifyPageFullyErased>:
{
  uint32_t ReadStatus = 1;
  uint16_t AddressValue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <EE_VerifyPageFullyErased+0x1c>)
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800cc1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  while (Address <= PAGE0_END_ADDRESS)
 800cc22:	4298      	cmp	r0, r3
 800cc24:	d901      	bls.n	800cc2a <EE_VerifyPageFullyErased+0xe>
  uint32_t ReadStatus = 1;
 800cc26:	2001      	movs	r0, #1
 800cc28:	4770      	bx	lr
    AddressValue = (*(__IO uint16_t*)Address);
 800cc2a:	8801      	ldrh	r1, [r0, #0]
    if (AddressValue != ERASED)
 800cc2c:	428a      	cmp	r2, r1
 800cc2e:	d101      	bne.n	800cc34 <EE_VerifyPageFullyErased+0x18>
      ReadStatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 800cc30:	3004      	adds	r0, #4
 800cc32:	e7f6      	b.n	800cc22 <EE_VerifyPageFullyErased+0x6>
      ReadStatus = 0;
 800cc34:	2000      	movs	r0, #0
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
}
 800cc36:	4770      	bx	lr
 800cc38:	08007fff 	.word	0x08007fff

0800cc3c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800cc3c:	b538      	push	{r3, r4, r5, lr}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cc3e:	4b1b      	ldr	r3, [pc, #108]	; (800ccac <EE_VerifyPageFullWriteVariable+0x70>)
 800cc40:	881b      	ldrh	r3, [r3, #0]
{
 800cc42:	4605      	mov	r5, r0
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cc44:	b298      	uxth	r0, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800cc46:	4b1a      	ldr	r3, [pc, #104]	; (800ccb0 <EE_VerifyPageFullWriteVariable+0x74>)
 800cc48:	881b      	ldrh	r3, [r3, #0]
 800cc4a:	b29b      	uxth	r3, r3
      if (PageStatus1 == VALID_PAGE)
 800cc4c:	b983      	cbnz	r3, 800cc70 <EE_VerifyPageFullWriteVariable+0x34>
          return PAGE0;         /* Page0 valid */
 800cc4e:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 800cc52:	1ac3      	subs	r3, r0, r3
 800cc54:	bf18      	it	ne
 800cc56:	2301      	movne	r3, #1
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800cc58:	f503 5400 	add.w	r4, r3, #8192	; 0x2000

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800cc5c:	4815      	ldr	r0, [pc, #84]	; (800ccb4 <EE_VerifyPageFullWriteVariable+0x78>)
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800cc5e:	3401      	adds	r4, #1
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800cc60:	3301      	adds	r3, #1
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800cc62:	03a4      	lsls	r4, r4, #14
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800cc64:	eb00 3383 	add.w	r3, r0, r3, lsl #14

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 800cc68:	429c      	cmp	r4, r3
 800cc6a:	d308      	bcc.n	800cc7e <EE_VerifyPageFullWriteVariable+0x42>
      Address = Address + 4;
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800cc6c:	2080      	movs	r0, #128	; 0x80
 800cc6e:	e011      	b.n	800cc94 <EE_VerifyPageFullWriteVariable+0x58>
      else if (PageStatus0 == VALID_PAGE)
 800cc70:	b9d0      	cbnz	r0, 800cca8 <EE_VerifyPageFullWriteVariable+0x6c>
          return PAGE0;         /* Page0 valid */
 800cc72:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800cc76:	1a9a      	subs	r2, r3, r2
 800cc78:	4253      	negs	r3, r2
 800cc7a:	4153      	adcs	r3, r2
 800cc7c:	e7ec      	b.n	800cc58 <EE_VerifyPageFullWriteVariable+0x1c>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800cc7e:	6822      	ldr	r2, [r4, #0]
 800cc80:	3201      	adds	r2, #1
 800cc82:	d10f      	bne.n	800cca4 <EE_VerifyPageFullWriteVariable+0x68>
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 800cc84:	460a      	mov	r2, r1
 800cc86:	2300      	movs	r3, #0
 800cc88:	4621      	mov	r1, r4
 800cc8a:	2001      	movs	r0, #1
 800cc8c:	f002 f97e 	bl	800ef8c <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 800cc90:	b108      	cbz	r0, 800cc96 <EE_VerifyPageFullWriteVariable+0x5a>
      return FlashStatus;
 800cc92:	b280      	uxth	r0, r0
}
 800cc94:	bd38      	pop	{r3, r4, r5, pc}
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 800cc96:	462a      	mov	r2, r5
 800cc98:	2300      	movs	r3, #0
 800cc9a:	1ca1      	adds	r1, r4, #2
 800cc9c:	2001      	movs	r0, #1
 800cc9e:	f002 f975 	bl	800ef8c <HAL_FLASH_Program>
 800cca2:	e7f6      	b.n	800cc92 <EE_VerifyPageFullWriteVariable+0x56>
      Address = Address + 4;
 800cca4:	3404      	adds	r4, #4
 800cca6:	e7df      	b.n	800cc68 <EE_VerifyPageFullWriteVariable+0x2c>
    return  NO_VALID_PAGE;
 800cca8:	20ab      	movs	r0, #171	; 0xab
 800ccaa:	e7f3      	b.n	800cc94 <EE_VerifyPageFullWriteVariable+0x58>
 800ccac:	08004000 	.word	0x08004000
 800ccb0:	08008000 	.word	0x08008000
 800ccb4:	08003fff 	.word	0x08003fff

0800ccb8 <EE_Format>:
{
 800ccb8:	b510      	push	{r4, lr}
  uint32_t SectorError = 0;
 800ccba:	2300      	movs	r3, #0
{
 800ccbc:	b086      	sub	sp, #24
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 800ccbe:	e9cd 3300 	strd	r3, r3, [sp]
  pEraseInit.Sector = PAGE0_ID;
 800ccc2:	2301      	movs	r3, #1
  pEraseInit.NbSectors = 1;
 800ccc4:	e9cd 3303 	strd	r3, r3, [sp, #12]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800ccc8:	4811      	ldr	r0, [pc, #68]	; (800cd10 <EE_Format+0x58>)
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800ccca:	2302      	movs	r3, #2
 800cccc:	9305      	str	r3, [sp, #20]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800ccce:	f7ff ffa5 	bl	800cc1c <EE_VerifyPageFullyErased>
 800ccd2:	b198      	cbz	r0, 800ccfc <EE_Format+0x44>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	490d      	ldr	r1, [pc, #52]	; (800cd10 <EE_Format+0x58>)
 800ccda:	2001      	movs	r0, #1
 800ccdc:	f002 f956 	bl	800ef8c <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 800cce0:	4604      	mov	r4, r0
 800cce2:	b990      	cbnz	r0, 800cd0a <EE_Format+0x52>
  pEraseInit.Sector = PAGE1_ID;
 800cce4:	2302      	movs	r3, #2
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800cce6:	480b      	ldr	r0, [pc, #44]	; (800cd14 <EE_Format+0x5c>)
  pEraseInit.Sector = PAGE1_ID;
 800cce8:	9303      	str	r3, [sp, #12]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800ccea:	f7ff ff97 	bl	800cc1c <EE_VerifyPageFullyErased>
 800ccee:	b960      	cbnz	r0, 800cd0a <EE_Format+0x52>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800ccf0:	4669      	mov	r1, sp
 800ccf2:	a801      	add	r0, sp, #4
 800ccf4:	f002 f9f4 	bl	800f0e0 <HAL_FLASHEx_Erase>
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	e006      	b.n	800cd0a <EE_Format+0x52>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800ccfc:	4669      	mov	r1, sp
 800ccfe:	a801      	add	r0, sp, #4
 800cd00:	f002 f9ee 	bl	800f0e0 <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 800cd04:	4604      	mov	r4, r0
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d0e4      	beq.n	800ccd4 <EE_Format+0x1c>
}
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	b006      	add	sp, #24
 800cd0e:	bd10      	pop	{r4, pc}
 800cd10:	08004000 	.word	0x08004000
 800cd14:	08008000 	.word	0x08008000

0800cd18 <EE_ReadVariable>:
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cd18:	4b0f      	ldr	r3, [pc, #60]	; (800cd58 <EE_ReadVariable+0x40>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800cd1a:	4a10      	ldr	r2, [pc, #64]	; (800cd5c <EE_ReadVariable+0x44>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cd1c:	881b      	ldrh	r3, [r3, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800cd1e:	8812      	ldrh	r2, [r2, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cd20:	b29b      	uxth	r3, r3
{
 800cd22:	b510      	push	{r4, lr}
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800cd24:	b292      	uxth	r2, r2
      if (PageStatus0 == VALID_PAGE)
 800cd26:	b10b      	cbz	r3, 800cd2c <EE_ReadVariable+0x14>
      else if (PageStatus1 == VALID_PAGE)
 800cd28:	b99a      	cbnz	r2, 800cd52 <EE_ReadVariable+0x3a>
        return PAGE1;           /* Page1 valid */
 800cd2a:	2301      	movs	r3, #1
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800cd2c:	039c      	lsls	r4, r3, #14
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800cd2e:	4a0c      	ldr	r2, [pc, #48]	; (800cd60 <EE_ReadVariable+0x48>)
  while (Address > (PageStartAddress + 2))
 800cd30:	4b0c      	ldr	r3, [pc, #48]	; (800cd64 <EE_ReadVariable+0x4c>)
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800cd32:	4422      	add	r2, r4
  while (Address > (PageStartAddress + 2))
 800cd34:	4423      	add	r3, r4
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d301      	bcc.n	800cd3e <EE_ReadVariable+0x26>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800cd3a:	2001      	movs	r0, #1
 800cd3c:	e006      	b.n	800cd4c <EE_ReadVariable+0x34>
    AddressValue = (*(__IO uint16_t*)Address);
 800cd3e:	8814      	ldrh	r4, [r2, #0]
    if (AddressValue == VirtAddress)
 800cd40:	42a0      	cmp	r0, r4
 800cd42:	d104      	bne.n	800cd4e <EE_ReadVariable+0x36>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800cd44:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800cd48:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 800cd4a:	2000      	movs	r0, #0
}
 800cd4c:	bd10      	pop	{r4, pc}
      Address = Address - 4;
 800cd4e:	3a04      	subs	r2, #4
 800cd50:	e7f1      	b.n	800cd36 <EE_ReadVariable+0x1e>
    return  NO_VALID_PAGE;
 800cd52:	20ab      	movs	r0, #171	; 0xab
 800cd54:	e7fa      	b.n	800cd4c <EE_ReadVariable+0x34>
 800cd56:	bf00      	nop
 800cd58:	08004000 	.word	0x08004000
 800cd5c:	08008000 	.word	0x08008000
 800cd60:	08007ffe 	.word	0x08007ffe
 800cd64:	08004002 	.word	0x08004002

0800cd68 <EE_Init>:
{
 800cd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cd6c:	485e      	ldr	r0, [pc, #376]	; (800cee8 <EE_Init+0x180>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800cd6e:	4a5f      	ldr	r2, [pc, #380]	; (800ceec <EE_Init+0x184>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cd70:	8804      	ldrh	r4, [r0, #0]
{
 800cd72:	b086      	sub	sp, #24
  uint32_t SectorError = 0;
 800cd74:	2100      	movs	r1, #0
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cd76:	b2a3      	uxth	r3, r4
  uint32_t SectorError = 0;
 800cd78:	9100      	str	r1, [sp, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800cd7a:	8814      	ldrh	r4, [r2, #0]
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800cd7c:	9101      	str	r1, [sp, #4]
  switch (PageStatus0)
 800cd7e:	f64e 66ee 	movw	r6, #61166	; 0xeeee
  pEraseInit.Sector = PAGE0_ID;
 800cd82:	2101      	movs	r1, #1
  pEraseInit.NbSectors = 1;
 800cd84:	e9cd 1103 	strd	r1, r1, [sp, #12]
  switch (PageStatus0)
 800cd88:	42b3      	cmp	r3, r6
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800cd8a:	f04f 0102 	mov.w	r1, #2
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800cd8e:	b2a4      	uxth	r4, r4
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800cd90:	9105      	str	r1, [sp, #20]
  switch (PageStatus0)
 800cd92:	d028      	beq.n	800cde6 <EE_Init+0x7e>
 800cd94:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800cd98:	42ab      	cmp	r3, r5
 800cd9a:	d005      	beq.n	800cda8 <EE_Init+0x40>
 800cd9c:	b90b      	cbnz	r3, 800cda2 <EE_Init+0x3a>
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800cd9e:	2c00      	cmp	r4, #0
 800cda0:	d166      	bne.n	800ce70 <EE_Init+0x108>
      FlashStatus = EE_Format();
 800cda2:	f7ff ff89 	bl	800ccb8 <EE_Format>
 800cda6:	e01b      	b.n	800cde0 <EE_Init+0x78>
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800cda8:	b944      	cbnz	r4, 800cdbc <EE_Init+0x54>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800cdaa:	f7ff ff37 	bl	800cc1c <EE_VerifyPageFullyErased>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	f000 8094 	beq.w	800cedc <EE_Init+0x174>
  return HAL_OK;
 800cdb4:	2000      	movs	r0, #0
}
 800cdb6:	b006      	add	sp, #24
 800cdb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800cdbc:	42b4      	cmp	r4, r6
 800cdbe:	d1f0      	bne.n	800cda2 <EE_Init+0x3a>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800cdc0:	f7ff ff2c 	bl	800cc1c <EE_VerifyPageFullyErased>
 800cdc4:	b930      	cbnz	r0, 800cdd4 <EE_Init+0x6c>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800cdc6:	4669      	mov	r1, sp
 800cdc8:	a801      	add	r0, sp, #4
 800cdca:	f002 f989 	bl	800f0e0 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 800cdce:	b108      	cbz	r0, 800cdd4 <EE_Init+0x6c>
        return FlashStatus;
 800cdd0:	b280      	uxth	r0, r0
 800cdd2:	e7f0      	b.n	800cdb6 <EE_Init+0x4e>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800cdd4:	4945      	ldr	r1, [pc, #276]	; (800ceec <EE_Init+0x184>)
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	2300      	movs	r3, #0
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800cdda:	2001      	movs	r0, #1
 800cddc:	f002 f8d6 	bl	800ef8c <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d1f5      	bne.n	800cdd0 <EE_Init+0x68>
 800cde4:	e7e6      	b.n	800cdb4 <EE_Init+0x4c>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800cde6:	bb84      	cbnz	r4, 800ce4a <EE_Init+0xe2>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800cde8:	4f41      	ldr	r7, [pc, #260]	; (800cef0 <EE_Init+0x188>)
 800cdea:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800cef8 <EE_Init+0x190>
  int16_t x = -1;
 800cdee:	f04f 36ff 	mov.w	r6, #4294967295
 800cdf2:	46b8      	mov	r8, r7
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800cdf4:	f8b9 3000 	ldrh.w	r3, [r9]
 800cdf8:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800cdfc:	4298      	cmp	r0, r3
            x = VarIdx;
 800cdfe:	bf08      	it	eq
 800ce00:	b226      	sxtheq	r6, r4
          if (VarIdx != x)
 800ce02:	42b4      	cmp	r4, r6
 800ce04:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800ce08:	d111      	bne.n	800ce2e <EE_Init+0xc6>
 800ce0a:	3401      	adds	r4, #1
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800ce0c:	2c03      	cmp	r4, #3
 800ce0e:	d1f1      	bne.n	800cdf4 <EE_Init+0x8c>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800ce10:	2200      	movs	r2, #0
 800ce12:	2300      	movs	r3, #0
 800ce14:	4934      	ldr	r1, [pc, #208]	; (800cee8 <EE_Init+0x180>)
 800ce16:	2001      	movs	r0, #1
 800ce18:	f002 f8b8 	bl	800ef8c <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d1d7      	bne.n	800cdd0 <EE_Init+0x68>
        pEraseInit.NbSectors = 1;
 800ce20:	2302      	movs	r3, #2
 800ce22:	2201      	movs	r2, #1
 800ce24:	e9cd 3203 	strd	r3, r2, [sp, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800ce28:	9305      	str	r3, [sp, #20]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800ce2a:	4830      	ldr	r0, [pc, #192]	; (800ceec <EE_Init+0x184>)
 800ce2c:	e7bd      	b.n	800cdaa <EE_Init+0x42>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800ce2e:	4d31      	ldr	r5, [pc, #196]	; (800cef4 <EE_Init+0x18c>)
 800ce30:	4629      	mov	r1, r5
 800ce32:	f7ff ff71 	bl	800cd18 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 800ce36:	2801      	cmp	r0, #1
 800ce38:	d0e7      	beq.n	800ce0a <EE_Init+0xa2>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800ce3a:	8829      	ldrh	r1, [r5, #0]
 800ce3c:	f838 000a 	ldrh.w	r0, [r8, sl]
 800ce40:	f7ff fefc 	bl	800cc3c <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 800ce44:	2800      	cmp	r0, #0
 800ce46:	d0e0      	beq.n	800ce0a <EE_Init+0xa2>
 800ce48:	e7b5      	b.n	800cdb6 <EE_Init+0x4e>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800ce4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce4e:	429c      	cmp	r4, r3
 800ce50:	d1a7      	bne.n	800cda2 <EE_Init+0x3a>
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800ce52:	4610      	mov	r0, r2
        pEraseInit.Sector = PAGE1_ID;
 800ce54:	9103      	str	r1, [sp, #12]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800ce56:	f7ff fee1 	bl	800cc1c <EE_VerifyPageFullyErased>
 800ce5a:	b928      	cbnz	r0, 800ce68 <EE_Init+0x100>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800ce5c:	4669      	mov	r1, sp
 800ce5e:	a801      	add	r0, sp, #4
 800ce60:	f002 f93e 	bl	800f0e0 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d1b3      	bne.n	800cdd0 <EE_Init+0x68>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	491e      	ldr	r1, [pc, #120]	; (800cee8 <EE_Init+0x180>)
 800ce6e:	e7b4      	b.n	800cdda <EE_Init+0x72>
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800ce70:	42ac      	cmp	r4, r5
 800ce72:	d101      	bne.n	800ce78 <EE_Init+0x110>
        pEraseInit.Sector = PAGE1_ID;
 800ce74:	9103      	str	r1, [sp, #12]
 800ce76:	e7d8      	b.n	800ce2a <EE_Init+0xc2>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800ce78:	4f1d      	ldr	r7, [pc, #116]	; (800cef0 <EE_Init+0x188>)
 800ce7a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800cefc <EE_Init+0x194>
 800ce7e:	461c      	mov	r4, r3
  int16_t x = -1;
 800ce80:	f04f 36ff 	mov.w	r6, #4294967295
 800ce84:	46b8      	mov	r8, r7
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800ce86:	f8b9 3000 	ldrh.w	r3, [r9]
 800ce8a:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800ce8e:	4298      	cmp	r0, r3
            x = VarIdx;
 800ce90:	bf08      	it	eq
 800ce92:	b226      	sxtheq	r6, r4
          if (VarIdx != x)
 800ce94:	42b4      	cmp	r4, r6
 800ce96:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800ce9a:	d111      	bne.n	800cec0 <EE_Init+0x158>
 800ce9c:	3401      	adds	r4, #1
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800ce9e:	2c03      	cmp	r4, #3
 800cea0:	d1f1      	bne.n	800ce86 <EE_Init+0x11e>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 800cea2:	2200      	movs	r2, #0
 800cea4:	2300      	movs	r3, #0
 800cea6:	4911      	ldr	r1, [pc, #68]	; (800ceec <EE_Init+0x184>)
 800cea8:	2001      	movs	r0, #1
 800ceaa:	f002 f86f 	bl	800ef8c <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d18e      	bne.n	800cdd0 <EE_Init+0x68>
        pEraseInit.Sector = PAGE0_ID;
 800ceb2:	2301      	movs	r3, #1
        pEraseInit.NbSectors = 1;
 800ceb4:	e9cd 3303 	strd	r3, r3, [sp, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800ceb8:	2302      	movs	r3, #2
 800ceba:	9305      	str	r3, [sp, #20]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800cebc:	480a      	ldr	r0, [pc, #40]	; (800cee8 <EE_Init+0x180>)
 800cebe:	e774      	b.n	800cdaa <EE_Init+0x42>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800cec0:	4d0c      	ldr	r5, [pc, #48]	; (800cef4 <EE_Init+0x18c>)
 800cec2:	4629      	mov	r1, r5
 800cec4:	f7ff ff28 	bl	800cd18 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 800cec8:	2801      	cmp	r0, #1
 800ceca:	d0e7      	beq.n	800ce9c <EE_Init+0x134>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800cecc:	8829      	ldrh	r1, [r5, #0]
 800cece:	f838 000a 	ldrh.w	r0, [r8, sl]
 800ced2:	f7ff feb3 	bl	800cc3c <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d0e0      	beq.n	800ce9c <EE_Init+0x134>
 800ceda:	e76c      	b.n	800cdb6 <EE_Init+0x4e>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800cedc:	4669      	mov	r1, sp
 800cede:	a801      	add	r0, sp, #4
 800cee0:	f002 f8fe 	bl	800f0e0 <HAL_FLASHEx_Erase>
 800cee4:	e77c      	b.n	800cde0 <EE_Init+0x78>
 800cee6:	bf00      	nop
 800cee8:	08004000 	.word	0x08004000
 800ceec:	08008000 	.word	0x08008000
 800cef0:	20000004 	.word	0x20000004
 800cef4:	20000228 	.word	0x20000228
 800cef8:	08004006 	.word	0x08004006
 800cefc:	08008006 	.word	0x08008006

0800cf00 <EE_WriteVariable>:
{
 800cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	b087      	sub	sp, #28
 800cf06:	4607      	mov	r7, r0
 800cf08:	460e      	mov	r6, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800cf0a:	f7ff fe97 	bl	800cc3c <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 800cf0e:	2880      	cmp	r0, #128	; 0x80
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800cf10:	4604      	mov	r4, r0
  if (Status == PAGE_FULL)
 800cf12:	d144      	bne.n	800cf9e <EE_WriteVariable+0x9e>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cf14:	492c      	ldr	r1, [pc, #176]	; (800cfc8 <EE_WriteVariable+0xc8>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800cf16:	4d2d      	ldr	r5, [pc, #180]	; (800cfcc <EE_WriteVariable+0xcc>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cf18:	880a      	ldrh	r2, [r1, #0]
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
  uint32_t OldPageAddress = 0;
  uint16_t OldPageId=0;
  uint16_t ValidPage = PAGE0, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
  uint32_t SectorError = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	9300      	str	r3, [sp, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800cf1e:	882b      	ldrh	r3, [r5, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800cf20:	b292      	uxth	r2, r2
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800cf22:	b29b      	uxth	r3, r3
      if (PageStatus0 == VALID_PAGE)
 800cf24:	b172      	cbz	r2, 800cf44 <EE_WriteVariable+0x44>
      else if (PageStatus1 == VALID_PAGE)
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d14c      	bne.n	800cfc4 <EE_WriteVariable+0xc4>

    /* Old page address  where variable will be moved from */
    OldPageAddress = PAGE1_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800cf2a:	f04f 0802 	mov.w	r8, #2
    NewPageAddress = PAGE0_BASE_ADDRESS;
 800cf2e:	460d      	mov	r5, r1
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 800cf30:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800cf34:	2300      	movs	r3, #0
 800cf36:	4629      	mov	r1, r5
 800cf38:	2001      	movs	r0, #1
 800cf3a:	f002 f827 	bl	800ef8c <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800cf3e:	b120      	cbz	r0, 800cf4a <EE_WriteVariable+0x4a>
  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
  {
    return FlashStatus;
 800cf40:	b284      	uxth	r4, r0
 800cf42:	e02c      	b.n	800cf9e <EE_WriteVariable+0x9e>
    OldPageId = PAGE0_ID;
 800cf44:	f04f 0801 	mov.w	r8, #1
 800cf48:	e7f2      	b.n	800cf30 <EE_WriteVariable+0x30>
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	f7ff fe75 	bl	800cc3c <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 800cf52:	4604      	mov	r4, r0
 800cf54:	bb18      	cbnz	r0, 800cf9e <EE_WriteVariable+0x9e>
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800cf56:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800cfd4 <EE_WriteVariable+0xd4>
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800cf5a:	f8df a074 	ldr.w	sl, [pc, #116]	; 800cfd0 <EE_WriteVariable+0xd0>
  if (EepromStatus != HAL_OK)
 800cf5e:	4606      	mov	r6, r0
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800cf60:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 800cf64:	4287      	cmp	r7, r0
 800cf66:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 800cf6a:	d11c      	bne.n	800cfa6 <EE_WriteVariable+0xa6>
 800cf6c:	3601      	adds	r6, #1
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800cf6e:	2e03      	cmp	r6, #3
 800cf70:	d1f6      	bne.n	800cf60 <EE_WriteVariable+0x60>
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800cf72:	2300      	movs	r3, #0
 800cf74:	9301      	str	r3, [sp, #4]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800cf76:	2601      	movs	r6, #1
 800cf78:	2302      	movs	r3, #2
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 800cf7a:	4669      	mov	r1, sp
 800cf7c:	a801      	add	r0, sp, #4
  pEraseInit.Sector = OldPageId;
 800cf7e:	f8cd 800c 	str.w	r8, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800cf82:	e9cd 6304 	strd	r6, r3, [sp, #16]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 800cf86:	f002 f8ab 	bl	800f0e0 <HAL_FLASHEx_Erase>
  if (FlashStatus != HAL_OK)
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d1d8      	bne.n	800cf40 <EE_WriteVariable+0x40>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 800cf8e:	2200      	movs	r2, #0
 800cf90:	2300      	movs	r3, #0
 800cf92:	4629      	mov	r1, r5
 800cf94:	4630      	mov	r0, r6
 800cf96:	f001 fff9 	bl	800ef8c <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d1d0      	bne.n	800cf40 <EE_WriteVariable+0x40>
}
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	b007      	add	sp, #28
 800cfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800cfa6:	490a      	ldr	r1, [pc, #40]	; (800cfd0 <EE_WriteVariable+0xd0>)
 800cfa8:	f7ff feb6 	bl	800cd18 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 800cfac:	2801      	cmp	r0, #1
 800cfae:	d0dd      	beq.n	800cf6c <EE_WriteVariable+0x6c>
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800cfb0:	f8ba 1000 	ldrh.w	r1, [sl]
 800cfb4:	f839 000b 	ldrh.w	r0, [r9, fp]
 800cfb8:	f7ff fe40 	bl	800cc3c <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	d0d5      	beq.n	800cf6c <EE_WriteVariable+0x6c>
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	e7ec      	b.n	800cf9e <EE_WriteVariable+0x9e>
    return NO_VALID_PAGE;       /* No valid Page */
 800cfc4:	24ab      	movs	r4, #171	; 0xab
 800cfc6:	e7ea      	b.n	800cf9e <EE_WriteVariable+0x9e>
 800cfc8:	08004000 	.word	0x08004000
 800cfcc:	08008000 	.word	0x08008000
 800cfd0:	20000228 	.word	0x20000228
 800cfd4:	20000004 	.word	0x20000004

0800cfd8 <MX_GPIO_Init>:
        * EXTI
     PH8   ------> I2C3_SDA
     PH7   ------> I2C3_SCL
*/
void MX_GPIO_Init(void)
{
 800cfd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfdc:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfde:	2214      	movs	r2, #20
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	a809      	add	r0, sp, #36	; 0x24
 800cfe4:	f009 f95d 	bl	80162a2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cfe8:	2400      	movs	r4, #0
 800cfea:	4b65      	ldr	r3, [pc, #404]	; (800d180 <MX_GPIO_Init+0x1a8>)
 800cfec:	9401      	str	r4, [sp, #4]
 800cfee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DISP_CMD_Pin|DISP_RST_Pin|USB_PWR_EN_Pin|RESET_MB_Pin, GPIO_PIN_RESET);
 800cff0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d198 <MX_GPIO_Init+0x1c0>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_SID_Pin|DISP_SCK_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 800cff4:	4f63      	ldr	r7, [pc, #396]	; (800d184 <MX_GPIO_Init+0x1ac>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800cff6:	4e64      	ldr	r6, [pc, #400]	; (800d188 <MX_GPIO_Init+0x1b0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TEC_ONOFF_Pin|TEC_CURDIR_Pin, GPIO_PIN_RESET);
 800cff8:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800d19c <MX_GPIO_Init+0x1c4>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cffc:	f042 0210 	orr.w	r2, r2, #16
 800d000:	631a      	str	r2, [r3, #48]	; 0x30
 800d002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d004:	f002 0210 	and.w	r2, r2, #16
 800d008:	9201      	str	r2, [sp, #4]
 800d00a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d00c:	9402      	str	r4, [sp, #8]
 800d00e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d010:	f042 0202 	orr.w	r2, r2, #2
 800d014:	631a      	str	r2, [r3, #48]	; 0x30
 800d016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d018:	f002 0202 	and.w	r2, r2, #2
 800d01c:	9202      	str	r2, [sp, #8]
 800d01e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d020:	9403      	str	r4, [sp, #12]
 800d022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d024:	f042 0204 	orr.w	r2, r2, #4
 800d028:	631a      	str	r2, [r3, #48]	; 0x30
 800d02a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d02c:	f002 0204 	and.w	r2, r2, #4
 800d030:	9203      	str	r2, [sp, #12]
 800d032:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d034:	9404      	str	r4, [sp, #16]
 800d036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d038:	f042 0201 	orr.w	r2, r2, #1
 800d03c:	631a      	str	r2, [r3, #48]	; 0x30
 800d03e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d040:	f002 0201 	and.w	r2, r2, #1
 800d044:	9204      	str	r2, [sp, #16]
 800d046:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d048:	9405      	str	r4, [sp, #20]
 800d04a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d04c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d050:	631a      	str	r2, [r3, #48]	; 0x30
 800d052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d054:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800d058:	9205      	str	r2, [sp, #20]
 800d05a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d05c:	9406      	str	r4, [sp, #24]
 800d05e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d060:	f042 0208 	orr.w	r2, r2, #8
 800d064:	631a      	str	r2, [r3, #48]	; 0x30
 800d066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d068:	f002 0208 	and.w	r2, r2, #8
 800d06c:	9206      	str	r2, [sp, #24]
 800d06e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d070:	9407      	str	r4, [sp, #28]
 800d072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d078:	631a      	str	r2, [r3, #48]	; 0x30
 800d07a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d07c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d080:	9207      	str	r2, [sp, #28]
 800d082:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d084:	9408      	str	r4, [sp, #32]
 800d086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d088:	f042 0220 	orr.w	r2, r2, #32
 800d08c:	631a      	str	r2, [r3, #48]	; 0x30
 800d08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d090:	f003 0320 	and.w	r3, r3, #32
 800d094:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, DISP_CMD_Pin|DISP_RST_Pin|USB_PWR_EN_Pin|RESET_MB_Pin, GPIO_PIN_RESET);
 800d096:	4622      	mov	r2, r4
 800d098:	4640      	mov	r0, r8
 800d09a:	f648 0103 	movw	r1, #34819	; 0x8803
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d09e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, DISP_CMD_Pin|DISP_RST_Pin|USB_PWR_EN_Pin|RESET_MB_Pin, GPIO_PIN_RESET);
 800d0a0:	f002 f9e0 	bl	800f464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DISP_SID_Pin|DISP_SCK_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 800d0a4:	4622      	mov	r2, r4
 800d0a6:	4638      	mov	r0, r7
 800d0a8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800d0ac:	f002 f9da 	bl	800f464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800d0b0:	4622      	mov	r2, r4
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	2110      	movs	r1, #16
 800d0b6:	f002 f9d5 	bl	800f464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, TEC_ONOFF_Pin|TEC_CURDIR_Pin, GPIO_PIN_RESET);
 800d0ba:	4622      	mov	r2, r4
 800d0bc:	4648      	mov	r0, r9
 800d0be:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800d0c2:	f002 f9cf 	bl	800f464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = ALERT2_TMP275_Pin|ALERT1_TMP275_Pin|ALERT3_TMP275_Pin|ALERT0_TMP275_Pin
                          |ALERT4_TMP275_Pin|INT_VCNL4200_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d0c6:	4b31      	ldr	r3, [pc, #196]	; (800d18c <MX_GPIO_Init+0x1b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0c8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d0ca:	f244 027c 	movw	r2, #16508	; 0x407c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d0ce:	a909      	add	r1, sp, #36	; 0x24
 800d0d0:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d0d2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DISP_CMD_Pin|DISP_RST_Pin|USB_PWR_EN_Pin|RESET_MB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d0d6:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d0d8:	f002 f850 	bl	800f17c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d0dc:	f648 0303 	movw	r3, #34819	; 0x8803
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d0e0:	a909      	add	r1, sp, #36	; 0x24
 800d0e2:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d0e4:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0e8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d0ec:	f002 f846 	bl	800f17c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DISP_SID_Pin|DISP_SCK_Pin|DISP_CS_Pin;
 800d0f0:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d0f4:	a909      	add	r1, sp, #36	; 0x24
 800d0f6:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d0f8:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0fc:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d100:	f002 f83c 	bl	800f17c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin|BTN5_Pin;
 800d104:	2358      	movs	r3, #88	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d106:	a909      	add	r1, sp, #36	; 0x24
 800d108:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d10a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d10e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d110:	f002 f834 	bl	800f17c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 800d114:	f44f 4310 	mov.w	r3, #36864	; 0x9000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d118:	a909      	add	r1, sp, #36	; 0x24
 800d11a:	481d      	ldr	r0, [pc, #116]	; (800d190 <MX_GPIO_Init+0x1b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d11c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d11e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d122:	f002 f82b 	bl	800f17c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800d126:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800d128:	a909      	add	r1, sp, #36	; 0x24
 800d12a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d12c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d130:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800d132:	f002 f823 	bl	800f17c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin;
 800d136:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 800d138:	a909      	add	r1, sp, #36	; 0x24
 800d13a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d13c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d140:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 800d144:	f002 f81a 	bl	800f17c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH8 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d148:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800d14c:	2312      	movs	r3, #18
 800d14e:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800d152:	2003      	movs	r0, #3
 800d154:	2304      	movs	r3, #4
 800d156:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d15a:	a909      	add	r1, sp, #36	; 0x24
 800d15c:	480d      	ldr	r0, [pc, #52]	; (800d194 <MX_GPIO_Init+0x1bc>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d15e:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d160:	f002 f80c 	bl	800f17c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TEC_ONOFF_Pin|TEC_CURDIR_Pin;
 800d164:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d168:	a909      	add	r1, sp, #36	; 0x24
 800d16a:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d16c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d170:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d174:	f002 f802 	bl	800f17c <HAL_GPIO_Init>

}
 800d178:	b00f      	add	sp, #60	; 0x3c
 800d17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d17e:	bf00      	nop
 800d180:	40023800 	.word	0x40023800
 800d184:	40020400 	.word	0x40020400
 800d188:	40020c00 	.word	0x40020c00
 800d18c:	10110000 	.word	0x10110000
 800d190:	40021800 	.word	0x40021800
 800d194:	40021c00 	.word	0x40021c00
 800d198:	40021000 	.word	0x40021000
 800d19c:	40021400 	.word	0x40021400

0800d1a0 <MX_GPIO_DeInit>:

/* USER CODE BEGIN 2 */
void MX_GPIO_DeInit(void) {
 800d1a0:	b500      	push	{lr}
	HAL_GPIO_DeInit(GPIOB,
 800d1a2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
void MX_GPIO_DeInit(void) {
 800d1a6:	b089      	sub	sp, #36	; 0x24
	HAL_GPIO_DeInit(GPIOB,
 800d1a8:	4837      	ldr	r0, [pc, #220]	; (800d288 <MX_GPIO_DeInit+0xe8>)
 800d1aa:	f002 f8c7 	bl	800f33c <HAL_GPIO_DeInit>
			DISP_SID_Pin | DISP_SCK_Pin | DISP_CS_Pin | BTN2_Pin | BTN1_Pin
					| BTN5_Pin);
	HAL_GPIO_DeInit(GPIOD, uSD_Detect_Pin | ESP32_EN_Pin);
 800d1ae:	2112      	movs	r1, #18
 800d1b0:	4836      	ldr	r0, [pc, #216]	; (800d28c <MX_GPIO_DeInit+0xec>)
 800d1b2:	f002 f8c3 	bl	800f33c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOE,
 800d1b6:	f64c 017f 	movw	r1, #51327	; 0xc87f
 800d1ba:	4835      	ldr	r0, [pc, #212]	; (800d290 <MX_GPIO_DeInit+0xf0>)
 800d1bc:	f002 f8be 	bl	800f33c <HAL_GPIO_DeInit>
			ALERT2_TMP275_Pin | ALERT1_TMP275_Pin | ALERT3_TMP275_Pin
					| ALERT0_TMP275_Pin | ALERT4_TMP275_Pin | INT_VCNL4200_Pin
					| DISP_CMD_Pin | DISP_RST_Pin | USB_PWR_EN_Pin
					| RESET_MB_Pin);
	HAL_GPIO_DeInit(GPIOF, TEC_ONOFF_Pin | TEC_CURDIR_Pin);
 800d1c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800d1c4:	4833      	ldr	r0, [pc, #204]	; (800d294 <MX_GPIO_DeInit+0xf4>)
 800d1c6:	f002 f8b9 	bl	800f33c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOG, BTN4_Pin | BTN3_Pin);
 800d1ca:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800d1ce:	4832      	ldr	r0, [pc, #200]	; (800d298 <MX_GPIO_DeInit+0xf8>)
 800d1d0:	f002 f8b4 	bl	800f33c <HAL_GPIO_DeInit>
	HAL_GPIO_Init(GPIOH, GPIO_PIN_8 | GPIO_PIN_7);
 800d1d4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800d1d8:	4830      	ldr	r0, [pc, #192]	; (800d29c <MX_GPIO_DeInit+0xfc>)
 800d1da:	f001 ffcf 	bl	800f17c <HAL_GPIO_Init>
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800d1de:	4b30      	ldr	r3, [pc, #192]	; (800d2a0 <MX_GPIO_DeInit+0x100>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	9200      	str	r2, [sp, #0]
 800d1e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d1e6:	f041 0110 	orr.w	r1, r1, #16
 800d1ea:	6319      	str	r1, [r3, #48]	; 0x30
 800d1ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d1ee:	f001 0110 	and.w	r1, r1, #16
 800d1f2:	9100      	str	r1, [sp, #0]
 800d1f4:	9900      	ldr	r1, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d1f6:	9201      	str	r2, [sp, #4]
 800d1f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d1fa:	f041 0102 	orr.w	r1, r1, #2
 800d1fe:	6319      	str	r1, [r3, #48]	; 0x30
 800d200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d202:	f001 0102 	and.w	r1, r1, #2
 800d206:	9101      	str	r1, [sp, #4]
 800d208:	9901      	ldr	r1, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800d20a:	9202      	str	r2, [sp, #8]
 800d20c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d20e:	f041 0104 	orr.w	r1, r1, #4
 800d212:	6319      	str	r1, [r3, #48]	; 0x30
 800d214:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d216:	f001 0104 	and.w	r1, r1, #4
 800d21a:	9102      	str	r1, [sp, #8]
 800d21c:	9902      	ldr	r1, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800d21e:	9203      	str	r2, [sp, #12]
 800d220:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d222:	f041 0101 	orr.w	r1, r1, #1
 800d226:	6319      	str	r1, [r3, #48]	; 0x30
 800d228:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d22a:	f001 0101 	and.w	r1, r1, #1
 800d22e:	9103      	str	r1, [sp, #12]
 800d230:	9903      	ldr	r1, [sp, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800d232:	9204      	str	r2, [sp, #16]
 800d234:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d236:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800d23a:	6319      	str	r1, [r3, #48]	; 0x30
 800d23c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d23e:	f001 0140 	and.w	r1, r1, #64	; 0x40
 800d242:	9104      	str	r1, [sp, #16]
 800d244:	9904      	ldr	r1, [sp, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800d246:	9205      	str	r2, [sp, #20]
 800d248:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d24a:	f041 0108 	orr.w	r1, r1, #8
 800d24e:	6319      	str	r1, [r3, #48]	; 0x30
 800d250:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d252:	f001 0108 	and.w	r1, r1, #8
 800d256:	9105      	str	r1, [sp, #20]
 800d258:	9905      	ldr	r1, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800d25a:	9206      	str	r2, [sp, #24]
 800d25c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d25e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800d262:	6319      	str	r1, [r3, #48]	; 0x30
 800d264:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d266:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800d26a:	9106      	str	r1, [sp, #24]
 800d26c:	9906      	ldr	r1, [sp, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800d26e:	9207      	str	r2, [sp, #28]
 800d270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d272:	f042 0220 	orr.w	r2, r2, #32
 800d276:	631a      	str	r2, [r3, #48]	; 0x30
 800d278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d27a:	f003 0320 	and.w	r3, r3, #32
 800d27e:	9307      	str	r3, [sp, #28]
 800d280:	9b07      	ldr	r3, [sp, #28]

}
 800d282:	b009      	add	sp, #36	; 0x24
 800d284:	f85d fb04 	ldr.w	pc, [sp], #4
 800d288:	40020400 	.word	0x40020400
 800d28c:	40020c00 	.word	0x40020c00
 800d290:	40021000 	.word	0x40021000
 800d294:	40021400 	.word	0x40021400
 800d298:	40021800 	.word	0x40021800
 800d29c:	40021c00 	.word	0x40021c00
 800d2a0:	40023800 	.word	0x40023800

0800d2a4 <draw_char>:
	return ret;
}
/*
 *
 */
bounding_box_t draw_char(unsigned char c, unsigned char x, unsigned char y, unsigned char *font,unsigned char inv) {
 800d2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a8:	461c      	mov	r4, r3
	ret.y1 = y;
	ret.x2 = x;
	ret.y2 = y;

	// Read first byte, should be 0x01 for proportional
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return ret;
 800d2aa:	781b      	ldrb	r3, [r3, #0]
bounding_box_t draw_char(unsigned char c, unsigned char x, unsigned char y, unsigned char *font,unsigned char inv) {
 800d2ac:	b085      	sub	sp, #20
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return ret;
 800d2ae:	2b01      	cmp	r3, #1
bounding_box_t draw_char(unsigned char c, unsigned char x, unsigned char y, unsigned char *font,unsigned char inv) {
 800d2b0:	460d      	mov	r5, r1
 800d2b2:	4616      	mov	r6, r2
 800d2b4:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return ret;
 800d2b8:	d01b      	beq.n	800d2f2 <draw_char+0x4e>
 800d2ba:	f88d 500c 	strb.w	r5, [sp, #12]
 800d2be:	f88d 600d 	strb.w	r6, [sp, #13]
 800d2c2:	f88d 500e 	strb.w	r5, [sp, #14]
 800d2c6:	f88d 600f 	strb.w	r6, [sp, #15]
 800d2ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	f363 0007 	bfi	r0, r3, #0, #8
 800d2d4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d2d8:	f363 200f 	bfi	r0, r3, #8, #8
 800d2dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d2e0:	f363 4017 	bfi	r0, r3, #16, #8
 800d2e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d2e8:	f363 601f 	bfi	r0, r3, #24, #8
	//		 font.
	//ret.y2 = ret.y1 + height;
	ret.y2 = ret.y1 + font[FONT_HEADER_HEIGHT];

	return ret;
}
 800d2ec:	b005      	add	sp, #20
 800d2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (font[FONT_HEADER_ORIENTATION] != FONT_ORIENTATION_VERTICAL_CEILING) return ret;
 800d2f2:	7863      	ldrb	r3, [r4, #1]
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d1e0      	bne.n	800d2ba <draw_char+0x16>
	if (!(c >= font[FONT_HEADER_START] && c <= font[FONT_HEADER_START] + font[FONT_HEADER_LETTERS])) return ret;
 800d2f8:	78a2      	ldrb	r2, [r4, #2]
 800d2fa:	4290      	cmp	r0, r2
 800d2fc:	d34e      	bcc.n	800d39c <draw_char+0xf8>
 800d2fe:	78e1      	ldrb	r1, [r4, #3]
 800d300:	4411      	add	r1, r2
 800d302:	4288      	cmp	r0, r1
 800d304:	dc4a      	bgt.n	800d39c <draw_char+0xf8>
	c -= font[FONT_HEADER_START];
 800d306:	1a80      	subs	r0, r0, r2
 800d308:	b2c0      	uxtb	r0, r0
	pos = font[c * FONT_HEADER_START + 5];
 800d30a:	fb03 4200 	mla	r2, r3, r0, r4
	pos |= font[c * FONT_HEADER_START + 6];
 800d30e:	fb03 4000 	mla	r0, r3, r0, r4
	pos = font[c * FONT_HEADER_START + 5];
 800d312:	7952      	ldrb	r2, [r2, #5]
	pos |= font[c * FONT_HEADER_START + 6];
 800d314:	f890 9006 	ldrb.w	r9, [r0, #6]
 800d318:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
	width = font[pos];
 800d31c:	46aa      	mov	sl, r5
 800d31e:	f814 8009 	ldrb.w	r8, [r4, r9]
 800d322:	eb05 0b08 	add.w	fp, r5, r8
 800d326:	fa5f f38b 	uxtb.w	r3, fp
 800d32a:	9301      	str	r3, [sp, #4]
	for (i = 0; i < width; i++) {
 800d32c:	9b01      	ldr	r3, [sp, #4]
 800d32e:	4553      	cmp	r3, sl
 800d330:	d131      	bne.n	800d396 <draw_char+0xf2>
	ret.x2 = ret.x1 + width - 1;
 800d332:	1e6b      	subs	r3, r5, #1
 800d334:	4498      	add	r8, r3
	ret.y2 = ret.y1 + font[FONT_HEADER_HEIGHT];
 800d336:	7923      	ldrb	r3, [r4, #4]
 800d338:	4433      	add	r3, r6
	ret.x2 = ret.x1 + width - 1;
 800d33a:	fa5f f888 	uxtb.w	r8, r8
	ret.y2 = ret.y1 + font[FONT_HEADER_HEIGHT];
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	f88d 500c 	strb.w	r5, [sp, #12]
 800d344:	f88d 600d 	strb.w	r6, [sp, #13]
 800d348:	f88d 800e 	strb.w	r8, [sp, #14]
 800d34c:	f88d 300f 	strb.w	r3, [sp, #15]
 800d350:	e7bb      	b.n	800d2ca <draw_char+0x26>
			if (j % 8 == 0) pos++;
 800d352:	f011 0007 	ands.w	r0, r1, #7
 800d356:	bf04      	itt	eq
 800d358:	f109 0901 	addeq.w	r9, r9, #1
 800d35c:	fa1f f989 	uxtheq.w	r9, r9
 800d360:	4431      	add	r1, r6
			if (font[pos] & 1 << (j % 8)) {
 800d362:	f814 2009 	ldrb.w	r2, [r4, r9]
 800d366:	4102      	asrs	r2, r0
 800d368:	07d3      	lsls	r3, r2, #31
				glcd_pixel(x + i, y + j, !inv);
 800d36a:	bf48      	it	mi
 800d36c:	fab7 f287 	clzmi	r2, r7
 800d370:	b2c9      	uxtb	r1, r1
 800d372:	bf4c      	ite	mi
 800d374:	0952      	lsrmi	r2, r2, #5
				glcd_pixel(x + i, y + j, inv);
 800d376:	463a      	movpl	r2, r7
 800d378:	4650      	mov	r0, sl
 800d37a:	f000 ff0f 	bl	800e19c <glcd_pixel>
 800d37e:	f10b 0b01 	add.w	fp, fp, #1
		for (unsigned char j = 0; j < font[FONT_HEADER_HEIGHT]; j++) {
 800d382:	7922      	ldrb	r2, [r4, #4]
 800d384:	fa5f f18b 	uxtb.w	r1, fp
 800d388:	428a      	cmp	r2, r1
 800d38a:	d8e2      	bhi.n	800d352 <draw_char+0xae>
 800d38c:	f10a 0a01 	add.w	sl, sl, #1
 800d390:	fa5f fa8a 	uxtb.w	sl, sl
 800d394:	e7ca      	b.n	800d32c <draw_char+0x88>
	for (i = 0; i < width; i++) {
 800d396:	f04f 0b00 	mov.w	fp, #0
 800d39a:	e7f2      	b.n	800d382 <draw_char+0xde>
	if (!(c >= font[FONT_HEADER_START] && c <= font[FONT_HEADER_START] + font[FONT_HEADER_LETTERS])) return ret;
 800d39c:	4633      	mov	r3, r6
 800d39e:	46a8      	mov	r8, r5
 800d3a0:	e7ce      	b.n	800d340 <draw_char+0x9c>

0800d3a2 <text_width>:
	unsigned char c;

	// TODO: Implement for fixed width fonts

	// Check font type, should be 0x01 for proportional
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return 0;
 800d3a2:	780b      	ldrb	r3, [r1, #0]
 800d3a4:	2b01      	cmp	r3, #1
unsigned char text_width(unsigned char *string, unsigned char *font, unsigned char spacing) {
 800d3a6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return 0;
 800d3a8:	d124      	bne.n	800d3f4 <text_width+0x52>
 800d3aa:	1e45      	subs	r5, r0, #1
	unsigned char width = 0;
 800d3ac:	2400      	movs	r4, #0

		// Adjust for start position of font vs. the char passed
		c -= font[FONT_HEADER_START];

		// Work out where in the array the character is
		pos = font[c * FONT_HEADER_START + 5];
 800d3ae:	2002      	movs	r0, #2
 800d3b0:	2605      	movs	r6, #5
		pos <<= 8;
		pos |= font[c * FONT_HEADER_START + 6];
 800d3b2:	2706      	movs	r7, #6
	while (*string != 0) {
 800d3b4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800d3b8:	b913      	cbnz	r3, 800d3c0 <text_width+0x1e>
		// Allow for space between letters
		width += spacing;
	}

	// The last letter wont have a space after it
	return width - spacing;
 800d3ba:	1aa0      	subs	r0, r4, r2
 800d3bc:	b2c0      	uxtb	r0, r0
}
 800d3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!(c >= font[FONT_HEADER_START] && c <= font[FONT_HEADER_START] + font[FONT_HEADER_LETTERS])) return 0;
 800d3c0:	f891 c002 	ldrb.w	ip, [r1, #2]
 800d3c4:	459c      	cmp	ip, r3
 800d3c6:	d815      	bhi.n	800d3f4 <text_width+0x52>
 800d3c8:	f891 e003 	ldrb.w	lr, [r1, #3]
 800d3cc:	44e6      	add	lr, ip
 800d3ce:	4573      	cmp	r3, lr
 800d3d0:	dc10      	bgt.n	800d3f4 <text_width+0x52>
		c -= font[FONT_HEADER_START];
 800d3d2:	eba3 030c 	sub.w	r3, r3, ip
 800d3d6:	b2db      	uxtb	r3, r3
		pos = font[c * FONT_HEADER_START + 5];
 800d3d8:	fb10 6c03 	smlabb	ip, r0, r3, r6
		pos |= font[c * FONT_HEADER_START + 6];
 800d3dc:	fb10 7303 	smlabb	r3, r0, r3, r7
		pos = font[c * FONT_HEADER_START + 5];
 800d3e0:	f811 c00c 	ldrb.w	ip, [r1, ip]
		pos |= font[c * FONT_HEADER_START + 6];
 800d3e4:	5ccb      	ldrb	r3, [r1, r3]
		width += font[pos];
 800d3e6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
		width += spacing;
 800d3ea:	5ccb      	ldrb	r3, [r1, r3]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	441c      	add	r4, r3
 800d3f0:	b2e4      	uxtb	r4, r4
 800d3f2:	e7df      	b.n	800d3b4 <text_width+0x12>
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return 0;
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	e7e2      	b.n	800d3be <text_width+0x1c>

0800d3f8 <draw_line>:
// Implementation of Bresenham's line algorithm
//
// This code credit Tom Ootjers, originally obtained from:
// http://tinyurl.com/czok7vx
void draw_line(int x1, int y1, int x2, int y2, char colour)
{
 800d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fc:	460d      	mov	r5, r1
	int xinc1, yinc1, den, num, numadd, numpixels, curpixel, xinc2, yinc2;

	int deltax = abs(x2 - x1);    	// The difference between the x's
 800d3fe:	1a14      	subs	r4, r2, r0
	int deltay = abs(y2 - y1);    	// The difference between the y's
 800d400:	eba3 0905 	sub.w	r9, r3, r5
	int deltax = abs(x2 - x1);    	// The difference between the x's
 800d404:	2c00      	cmp	r4, #0
{
 800d406:	b085      	sub	sp, #20
	int deltax = abs(x2 - x1);    	// The difference between the x's
 800d408:	bfb8      	it	lt
 800d40a:	4264      	neglt	r4, r4
	int deltay = abs(y2 - y1);    	// The difference between the y's
 800d40c:	f1b9 0f00 	cmp.w	r9, #0
 800d410:	bfb8      	it	lt
 800d412:	f1c9 0900 	rsblt	r9, r9, #0
{
 800d416:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d41a:	9102      	str	r1, [sp, #8]
	if (x2 >= x1) {             	// The x-values are increasing
	  xinc1 = 1;
	  xinc2 = 1;

    } else {          	         	// The x-values are decreasing
	  xinc1 = -1;
 800d41c:	4282      	cmp	r2, r0
 800d41e:	bfac      	ite	ge
 800d420:	2701      	movge	r7, #1
 800d422:	f04f 37ff 	movlt.w	r7, #4294967295
	  yinc1 = 1;
	  yinc2 = 1;
	}
	else                    	  	// The y-values are decreasing
	{
	  yinc1 = -1;
 800d426:	42ab      	cmp	r3, r5
 800d428:	bfac      	ite	ge
 800d42a:	f04f 0801 	movge.w	r8, #1
 800d42e:	f04f 38ff 	movlt.w	r8, #4294967295
	  yinc2 = -1;
	}

	if (deltax >= deltay)     		// There is at least one x-value for every y-value
 800d432:	454c      	cmp	r4, r9
{
 800d434:	4606      	mov	r6, r0
	if (deltax >= deltay)     		// There is at least one x-value for every y-value
 800d436:	db1e      	blt.n	800d476 <draw_line+0x7e>
 800d438:	463b      	mov	r3, r7
	{
	  xinc1 = 0;              		// Don't change the x when numerator >= denominator
	  yinc2 = 0;              		// Don't change the y for every iteration
 800d43a:	2700      	movs	r7, #0
	  den = deltax;
	  num = deltax / 2;
 800d43c:	ea4f 0a64 	mov.w	sl, r4, asr #1
	  xinc1 = 0;              		// Don't change the x when numerator >= denominator
 800d440:	9701      	str	r7, [sp, #4]
	  num = deltay / 2;
	  numadd = deltax;
	  numpixels = deltay;     		// There are more y-values than x-values
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800d442:	f04f 0b00 	mov.w	fp, #0
	{
	  glcd_pixel(x, y, colour);    	// Draw the current pixel
 800d446:	b2e9      	uxtb	r1, r5
 800d448:	b2f0      	uxtb	r0, r6
 800d44a:	9a02      	ldr	r2, [sp, #8]
 800d44c:	9303      	str	r3, [sp, #12]
	  num += numadd;          		// Increase the numerator by the top of the fraction
 800d44e:	44ca      	add	sl, r9
	  glcd_pixel(x, y, colour);    	// Draw the current pixel
 800d450:	f000 fea4 	bl	800e19c <glcd_pixel>
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800d454:	f10b 0b01 	add.w	fp, fp, #1
	  if (num >= den)         		// Check if numerator >= denominator
 800d458:	4554      	cmp	r4, sl
 800d45a:	9b03      	ldr	r3, [sp, #12]
		num -= den;           		// Calculate the new numerator value
		x += xinc1;           		// Change the x as appropriate
		y += yinc1;           		// Change the y as appropriate
	  }
	  x += xinc2;             		// Change the x as appropriate
	  y += yinc2;             		// Change the y as appropriate
 800d45c:	9a01      	ldr	r2, [sp, #4]
		x += xinc1;           		// Change the x as appropriate
 800d45e:	bfde      	ittt	le
 800d460:	19f6      	addle	r6, r6, r7
		y += yinc1;           		// Change the y as appropriate
 800d462:	4445      	addle	r5, r8
		num -= den;           		// Calculate the new numerator value
 800d464:	ebaa 0a04 	suble.w	sl, sl, r4
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800d468:	455c      	cmp	r4, fp
	  x += xinc2;             		// Change the x as appropriate
 800d46a:	441e      	add	r6, r3
	  y += yinc2;             		// Change the y as appropriate
 800d46c:	4415      	add	r5, r2
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800d46e:	daea      	bge.n	800d446 <draw_line+0x4e>
	}
}
 800d470:	b005      	add	sp, #20
 800d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  num = deltay / 2;
 800d476:	4623      	mov	r3, r4
 800d478:	f8cd 8004 	str.w	r8, [sp, #4]
	  xinc2 = 0;              		// Don't change the x for every iteration
 800d47c:	f04f 0800 	mov.w	r8, #0
	  num = deltay / 2;
 800d480:	ea4f 0a69 	mov.w	sl, r9, asr #1
 800d484:	464c      	mov	r4, r9
 800d486:	4699      	mov	r9, r3
	  yinc1 = 0;              		// Don't change the y when numerator >= denominator
 800d488:	4643      	mov	r3, r8
 800d48a:	e7da      	b.n	800d442 <draw_line+0x4a>

0800d48c <draw_rectangle>:
{
 800d48c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d490:	f89d 5020 	ldrb.w	r5, [sp, #32]
	draw_line(x1, y1, x2, y1, colour);
 800d494:	9500      	str	r5, [sp, #0]
{
 800d496:	461c      	mov	r4, r3
 800d498:	4607      	mov	r7, r0
 800d49a:	460e      	mov	r6, r1
	draw_line(x1, y1, x2, y1, colour);
 800d49c:	460b      	mov	r3, r1
{
 800d49e:	4690      	mov	r8, r2
	draw_line(x1, y1, x2, y1, colour);
 800d4a0:	f7ff ffaa 	bl	800d3f8 <draw_line>
	draw_line(x1, y1, x1, y2, colour);
 800d4a4:	4623      	mov	r3, r4
 800d4a6:	463a      	mov	r2, r7
 800d4a8:	4631      	mov	r1, r6
 800d4aa:	4638      	mov	r0, r7
 800d4ac:	9500      	str	r5, [sp, #0]
 800d4ae:	f7ff ffa3 	bl	800d3f8 <draw_line>
	draw_line(x1, y2, x2, y2, colour);
 800d4b2:	4623      	mov	r3, r4
 800d4b4:	4642      	mov	r2, r8
 800d4b6:	4621      	mov	r1, r4
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	9500      	str	r5, [sp, #0]
 800d4bc:	f7ff ff9c 	bl	800d3f8 <draw_line>
	draw_line(x2, y1, x2, y2, colour);
 800d4c0:	4623      	mov	r3, r4
 800d4c2:	4642      	mov	r2, r8
 800d4c4:	4631      	mov	r1, r6
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	9508      	str	r5, [sp, #32]
}
 800d4ca:	b002      	add	sp, #8
 800d4cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	draw_line(x2, y1, x2, y2, colour);
 800d4d0:	f7ff bf92 	b.w	800d3f8 <draw_line>

0800d4d4 <draw_fill>:
{
 800d4d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d4d8:	f89d 8020 	ldrb.w	r8, [sp, #32]
 800d4dc:	4606      	mov	r6, r0
 800d4de:	460c      	mov	r4, r1
 800d4e0:	4617      	mov	r7, r2
 800d4e2:	461d      	mov	r5, r3
	for(int i=y1;i<=y2;i++)
 800d4e4:	42ac      	cmp	r4, r5
 800d4e6:	dd02      	ble.n	800d4ee <draw_fill+0x1a>
}
 800d4e8:	b002      	add	sp, #8
 800d4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		draw_line(x1, i, x2,i, colour);
 800d4ee:	4623      	mov	r3, r4
 800d4f0:	4621      	mov	r1, r4
 800d4f2:	f8cd 8000 	str.w	r8, [sp]
 800d4f6:	463a      	mov	r2, r7
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f7ff ff7d 	bl	800d3f8 <draw_line>
	for(int i=y1;i<=y2;i++)
 800d4fe:	3401      	adds	r4, #1
 800d500:	e7f0      	b.n	800d4e4 <draw_fill+0x10>

0800d502 <draw_text>:
bounding_box_t draw_text(char *string, unsigned char x, unsigned char y, unsigned char *font, unsigned char spacing,unsigned char inv) {
 800d502:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d506:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 800d50a:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 800d50e:	4699      	mov	r9, r3
 800d510:	460f      	mov	r7, r1
 800d512:	4616      	mov	r6, r2
		draw_fill(x-1, y, x+text_width(string, font, spacing), y+text_height(string, font)-1, inv);
 800d514:	4619      	mov	r1, r3
 800d516:	4622      	mov	r2, r4
bounding_box_t draw_text(char *string, unsigned char x, unsigned char y, unsigned char *font, unsigned char spacing,unsigned char inv) {
 800d518:	4680      	mov	r8, r0
		draw_fill(x-1, y, x+text_width(string, font, spacing), y+text_height(string, font)-1, inv);
 800d51a:	f7ff ff42 	bl	800d3a2 <text_width>
 800d51e:	f899 3004 	ldrb.w	r3, [r9, #4]
 800d522:	f8cd a000 	str.w	sl, [sp]
 800d526:	4433      	add	r3, r6
 800d528:	19c2      	adds	r2, r0, r7
 800d52a:	4631      	mov	r1, r6
 800d52c:	3b01      	subs	r3, #1
 800d52e:	1e78      	subs	r0, r7, #1
	spacing += 1;
 800d530:	3401      	adds	r4, #1
		draw_fill(x-1, y, x+text_width(string, font, spacing), y+text_height(string, font)-1, inv);
 800d532:	f7ff ffcf 	bl	800d4d4 <draw_fill>
	spacing += 1;
 800d536:	b2e4      	uxtb	r4, r4
 800d538:	f108 38ff 	add.w	r8, r8, #4294967295
	while (*string != 0) {
 800d53c:	4639      	mov	r1, r7
 800d53e:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 800d542:	b960      	cbnz	r0, 800d55e <draw_text+0x5c>
	return ret;
 800d544:	f367 0007 	bfi	r0, r7, #0, #8
 800d548:	f366 200f 	bfi	r0, r6, #8, #8
 800d54c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d550:	f365 4017 	bfi	r0, r5, #16, #8
 800d554:	f363 601f 	bfi	r0, r3, #24, #8
}
 800d558:	b004      	add	sp, #16
 800d55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tmp = draw_char(*string++, x, y, font,inv);
 800d55e:	f8cd a000 	str.w	sl, [sp]
 800d562:	464b      	mov	r3, r9
 800d564:	4632      	mov	r2, r6
 800d566:	f7ff fe9d 	bl	800d2a4 <draw_char>
 800d56a:	f3c0 4507 	ubfx	r5, r0, #16, #8
		x = tmp.x2 + spacing;
 800d56e:	1961      	adds	r1, r4, r5
		tmp = draw_char(*string++, x, y, font,inv);
 800d570:	9002      	str	r0, [sp, #8]
		x = tmp.x2 + spacing;
 800d572:	b2c9      	uxtb	r1, r1
 800d574:	e7e3      	b.n	800d53e <draw_text+0x3c>

0800d576 <draw_bmp_h>:
}
/*
 *	image height must be multiplier of 8
 */
void draw_bmp_h(unsigned char x, unsigned char y, unsigned char width ,unsigned char height,unsigned char *pic,unsigned char color)
{
 800d576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57a:	b085      	sub	sp, #20
	int index=0;
	for(int ypos=y;ypos<y+height;ypos++)
 800d57c:	440b      	add	r3, r1
{
 800d57e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	for(int ypos=y;ypos<y+height;ypos++)
 800d580:	9302      	str	r3, [sp, #8]
{
 800d582:	4682      	mov	sl, r0
 800d584:	4693      	mov	fp, r2
 800d586:	f1c0 0900 	rsb	r9, r0, #0
	for(int ypos=y;ypos<y+height;ypos++)
 800d58a:	4688      	mov	r8, r1
 800d58c:	9b02      	ldr	r3, [sp, #8]
 800d58e:	4543      	cmp	r3, r8
 800d590:	dc02      	bgt.n	800d598 <draw_bmp_h+0x22>
			glcd_pixel(xpos+2, ypos, pic[index]&0x20);
			glcd_pixel(xpos+1, ypos, pic[index]&0x40);
			glcd_pixel(xpos+0, ypos, pic[index]&0x80);
		}
	}
}
 800d592:	b005      	add	sp, #20
 800d594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(int xpos=x;xpos<x+width;xpos+=8)
 800d598:	eb0b 020a 	add.w	r2, fp, sl
 800d59c:	4653      	mov	r3, sl
 800d59e:	9201      	str	r2, [sp, #4]
			glcd_pixel(xpos+7, ypos, pic[index]&0x01);
 800d5a0:	fa5f f688 	uxtb.w	r6, r8
		for(int xpos=x;xpos<x+width;xpos+=8)
 800d5a4:	9a01      	ldr	r2, [sp, #4]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	dc03      	bgt.n	800d5b2 <draw_bmp_h+0x3c>
	for(int ypos=y;ypos<y+height;ypos++)
 800d5aa:	f108 0801 	add.w	r8, r8, #1
 800d5ae:	44d9      	add	r9, fp
 800d5b0:	e7ec      	b.n	800d58c <draw_bmp_h+0x16>
			glcd_pixel(xpos+7, ypos, pic[index]&0x01);
 800d5b2:	b2df      	uxtb	r7, r3
			index=((xpos-x)+(ypos-y)*width)/8;
 800d5b4:	eb03 0409 	add.w	r4, r3, r9
 800d5b8:	9303      	str	r3, [sp, #12]
 800d5ba:	2308      	movs	r3, #8
 800d5bc:	fb94 f4f3 	sdiv	r4, r4, r3
			glcd_pixel(xpos+7, ypos, pic[index]&0x01);
 800d5c0:	5d2a      	ldrb	r2, [r5, r4]
 800d5c2:	1df8      	adds	r0, r7, #7
 800d5c4:	f002 0201 	and.w	r2, r2, #1
 800d5c8:	4631      	mov	r1, r6
 800d5ca:	b2c0      	uxtb	r0, r0
 800d5cc:	f000 fde6 	bl	800e19c <glcd_pixel>
			glcd_pixel(xpos+6, ypos, pic[index]&0x02);
 800d5d0:	5d2a      	ldrb	r2, [r5, r4]
 800d5d2:	1db8      	adds	r0, r7, #6
 800d5d4:	f002 0202 	and.w	r2, r2, #2
 800d5d8:	4631      	mov	r1, r6
 800d5da:	b2c0      	uxtb	r0, r0
 800d5dc:	f000 fdde 	bl	800e19c <glcd_pixel>
			glcd_pixel(xpos+5, ypos, pic[index]&0x04);
 800d5e0:	5d2a      	ldrb	r2, [r5, r4]
 800d5e2:	1d78      	adds	r0, r7, #5
 800d5e4:	f002 0204 	and.w	r2, r2, #4
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	b2c0      	uxtb	r0, r0
 800d5ec:	f000 fdd6 	bl	800e19c <glcd_pixel>
			glcd_pixel(xpos+4, ypos, pic[index]&0x08);
 800d5f0:	5d2a      	ldrb	r2, [r5, r4]
 800d5f2:	1d38      	adds	r0, r7, #4
 800d5f4:	f002 0208 	and.w	r2, r2, #8
 800d5f8:	4631      	mov	r1, r6
 800d5fa:	b2c0      	uxtb	r0, r0
 800d5fc:	f000 fdce 	bl	800e19c <glcd_pixel>
			glcd_pixel(xpos+3, ypos, pic[index]&0x10);
 800d600:	5d2a      	ldrb	r2, [r5, r4]
 800d602:	1cf8      	adds	r0, r7, #3
 800d604:	f002 0210 	and.w	r2, r2, #16
 800d608:	4631      	mov	r1, r6
 800d60a:	b2c0      	uxtb	r0, r0
 800d60c:	f000 fdc6 	bl	800e19c <glcd_pixel>
			glcd_pixel(xpos+2, ypos, pic[index]&0x20);
 800d610:	5d2a      	ldrb	r2, [r5, r4]
 800d612:	1cb8      	adds	r0, r7, #2
 800d614:	f002 0220 	and.w	r2, r2, #32
 800d618:	4631      	mov	r1, r6
 800d61a:	b2c0      	uxtb	r0, r0
 800d61c:	f000 fdbe 	bl	800e19c <glcd_pixel>
			glcd_pixel(xpos+1, ypos, pic[index]&0x40);
 800d620:	5d2a      	ldrb	r2, [r5, r4]
 800d622:	1c78      	adds	r0, r7, #1
 800d624:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800d628:	4631      	mov	r1, r6
 800d62a:	b2c0      	uxtb	r0, r0
 800d62c:	f000 fdb6 	bl	800e19c <glcd_pixel>
			glcd_pixel(xpos+0, ypos, pic[index]&0x80);
 800d630:	5d2a      	ldrb	r2, [r5, r4]
 800d632:	4631      	mov	r1, r6
 800d634:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d638:	4638      	mov	r0, r7
 800d63a:	f000 fdaf 	bl	800e19c <glcd_pixel>
		for(int xpos=x;xpos<x+width;xpos+=8)
 800d63e:	9b03      	ldr	r3, [sp, #12]
 800d640:	3308      	adds	r3, #8
 800d642:	e7af      	b.n	800d5a4 <draw_bmp_h+0x2e>

0800d644 <bmp_header_read>:
//	f_write(img_file,header,sizeof(bmp_header),&writtenbytes);
//
//	return BMP_OK;
//}
//
enum bmp_error bmp_header_read(bmp_header *header, FIL *img_file) {
 800d644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d646:	4605      	mov	r5, r0
	UINT readbytes;
	if (img_file == NULL) {
 800d648:	460c      	mov	r4, r1
 800d64a:	b1c9      	cbz	r1, 800d680 <bmp_header_read+0x3c>
	// Since an adress must be passed to fread, create a variable!
	unsigned short magic;

	// Check if its an bmp file by comparing the magic nbr:
//	if (fread(&magic, sizeof(magic), 1, img_file) != 1 || magic != BMP_MAGIC) {
	if (f_read(img_file, &magic, sizeof(magic), &readbytes) != FR_OK || magic != BMP_MAGIC) {
 800d64c:	2202      	movs	r2, #2
 800d64e:	ab01      	add	r3, sp, #4
 800d650:	eb0d 0102 	add.w	r1, sp, r2
 800d654:	4620      	mov	r0, r4
 800d656:	f008 f95b 	bl	8015910 <f_read>
 800d65a:	b9a0      	cbnz	r0, 800d686 <bmp_header_read+0x42>
 800d65c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d660:	f644 5342 	movw	r3, #19778	; 0x4d42
 800d664:	429a      	cmp	r2, r3
 800d666:	d10e      	bne.n	800d686 <bmp_header_read+0x42>

		return BMP_INVALID_FILE;
	}
	//if (f_read(header, sizeof(bmp_header), 1, img_file) != 1) {
	if (f_read(img_file, header,sizeof(bmp_header), &readbytes) != FR_OK) {
 800d668:	ab01      	add	r3, sp, #4
 800d66a:	2234      	movs	r2, #52	; 0x34
 800d66c:	4629      	mov	r1, r5
 800d66e:	4620      	mov	r0, r4
 800d670:	f008 f94e 	bl	8015910 <f_read>
 800d674:	3000      	adds	r0, #0
 800d676:	bf18      	it	ne
 800d678:	2001      	movne	r0, #1
 800d67a:	4240      	negs	r0, r0
		return BMP_ERROR;
	}

	return BMP_OK;
}
 800d67c:	b003      	add	sp, #12
 800d67e:	bd30      	pop	{r4, r5, pc}
		return BMP_FILE_NOT_OPENED;
 800d680:	f06f 0003 	mvn.w	r0, #3
 800d684:	e7fa      	b.n	800d67c <bmp_header_read+0x38>
		return BMP_INVALID_FILE;
 800d686:	f06f 0001 	mvn.w	r0, #1
 800d68a:	e7f7      	b.n	800d67c <bmp_header_read+0x38>

0800d68c <bmp_img_alloc>:
//	pxl->bw=blue;
//}
//
//// BMP_IMG

void bmp_img_alloc(bmp_img *img) {
 800d68c:	b510      	push	{r4, lr}
 800d68e:	4604      	mov	r4, r0
	const size_t h = abs(img->img_header.biHeight);
 800d690:	6940      	ldr	r0, [r0, #20]
	const size_t w = abs(img->img_header.biWidth);
 800d692:	6923      	ldr	r3, [r4, #16]
	const size_t h = abs(img->img_header.biHeight);
 800d694:	2800      	cmp	r0, #0
 800d696:	bfb8      	it	lt
 800d698:	4240      	neglt	r0, r0
	const size_t w = abs(img->img_header.biWidth);
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	bfb8      	it	lt
 800d69e:	425b      	neglt	r3, r3

	// Allocate the required memory for the pixels:
	img->img_pixels = malloc(sizeof(unsigned char) *h*w);
 800d6a0:	4358      	muls	r0, r3
 800d6a2:	f008 fde3 	bl	801626c <malloc>
 800d6a6:	6360      	str	r0, [r4, #52]	; 0x34

//	for (size_t y = 0; y < h; y++) {
//		img->img_pixels[y] = malloc(
//				sizeof(bmp_pixel) * img->img_header.biWidth);
//	}
}
 800d6a8:	bd10      	pop	{r4, pc}

0800d6aa <bmp_img_free>:
//	const size_t h = abs(img->img_header.biHeight);
//
//	for (size_t y = 0; y < h; y++) {
//		free(img->img_pixels[y]);
//	}
	free(img->img_pixels);
 800d6aa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d6ac:	f008 bde6 	b.w	801627c <free>

0800d6b0 <bmp_img_read>:
//	// NOTE: All good!
//	f_close(&img_file);
//	return BMP_OK;
//}

enum bmp_error bmp_img_read(bmp_img *img, const char *filename) {
 800d6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6b4:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800d6b8:	b086      	sub	sp, #24
 800d6ba:	4607      	mov	r7, r0
	UINT readbytes;
	FIL img_file;
	if (f_open(&img_file, (const TCHAR*) filename, FA_READ) != FR_OK) {
 800d6bc:	2201      	movs	r2, #1
 800d6be:	a802      	add	r0, sp, #8
 800d6c0:	f008 f814 	bl	80156ec <f_open>
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d17e      	bne.n	800d7c8 <bmp_img_read+0x118>
		return BMP_FILE_NOT_OPENED;
	}
	// NOTE: This way the correct error code can be returned.
	const enum bmp_error err = bmp_header_read(&img->img_header, &img_file);
 800d6ca:	a902      	add	r1, sp, #8
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	f7ff ffb9 	bl	800d644 <bmp_header_read>
 800d6d2:	4605      	mov	r5, r0
	////////////////////////////read color table///////////////////////////////
	unsigned char **biColorTable;
	biColorTable = malloc(sizeof(unsigned char)*img->img_header.biBitCount);
 800d6d4:	8b78      	ldrh	r0, [r7, #26]
 800d6d6:	f008 fdc9 	bl	801626c <malloc>

	for (size_t y = 0; y < img->img_header.biBitCount; y++) {
			biColorTable[y] = malloc(sizeof(unsigned char)*4);
			f_read(&img_file,biColorTable[y], sizeof(unsigned char)* 4,&readbytes);
 800d6da:	f10d 0804 	add.w	r8, sp, #4
	biColorTable = malloc(sizeof(unsigned char)*img->img_header.biBitCount);
 800d6de:	4606      	mov	r6, r0
	for (size_t y = 0; y < img->img_header.biBitCount; y++) {
 800d6e0:	8b7b      	ldrh	r3, [r7, #26]
 800d6e2:	42a3      	cmp	r3, r4
 800d6e4:	d80a      	bhi.n	800d6fc <bmp_img_read+0x4c>
			if ( readbytes!= 4) {
				f_close(&img_file);
				return BMP_ERROR;
			}
	}
	for (size_t y = 0; y < img->img_header.biBitCount; y++) {
 800d6e6:	2400      	movs	r4, #0
			f_read(&img_file,biColorTable[y], sizeof(unsigned char)* 4,&readbytes);
 800d6e8:	f10d 0804 	add.w	r8, sp, #4
	for (size_t y = 0; y < img->img_header.biBitCount; y++) {
 800d6ec:	8b7b      	ldrh	r3, [r7, #26]
 800d6ee:	42a3      	cmp	r3, r4
 800d6f0:	d820      	bhi.n	800d734 <bmp_img_read+0x84>
			}
			free(biColorTable[y]);

	}

	if (err != BMP_OK) {
 800d6f2:	b385      	cbz	r5, 800d756 <bmp_img_read+0xa6>
		// ERROR: Could'nt read the image header!
		f_close(&img_file);
 800d6f4:	a802      	add	r0, sp, #8
 800d6f6:	f008 fa12 	bl	8015b1e <f_close>
		return err;
 800d6fa:	e013      	b.n	800d724 <bmp_img_read+0x74>
			biColorTable[y] = malloc(sizeof(unsigned char)*4);
 800d6fc:	2004      	movs	r0, #4
 800d6fe:	f008 fdb5 	bl	801626c <malloc>
			f_read(&img_file,biColorTable[y], sizeof(unsigned char)* 4,&readbytes);
 800d702:	4643      	mov	r3, r8
			biColorTable[y] = malloc(sizeof(unsigned char)*4);
 800d704:	4601      	mov	r1, r0
 800d706:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
			f_read(&img_file,biColorTable[y], sizeof(unsigned char)* 4,&readbytes);
 800d70a:	2204      	movs	r2, #4
 800d70c:	a802      	add	r0, sp, #8
 800d70e:	f008 f8ff 	bl	8015910 <f_read>
			if ( readbytes!= 4) {
 800d712:	f8d8 3000 	ldr.w	r3, [r8]
 800d716:	2b04      	cmp	r3, #4
 800d718:	d00a      	beq.n	800d730 <bmp_img_read+0x80>
				f_close(&img_file);
 800d71a:	a802      	add	r0, sp, #8
 800d71c:	f008 f9ff 	bl	8015b1e <f_close>
				return BMP_ERROR;
 800d720:	f04f 35ff 	mov.w	r5, #4294967295
	}

	// NOTE: All good!
	f_close(&img_file);
	return BMP_OK;
}
 800d724:	4628      	mov	r0, r5
 800d726:	f50d 5d81 	add.w	sp, sp, #4128	; 0x1020
 800d72a:	b006      	add	sp, #24
 800d72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t y = 0; y < img->img_header.biBitCount; y++) {
 800d730:	3401      	adds	r4, #1
 800d732:	e7d5      	b.n	800d6e0 <bmp_img_read+0x30>
			f_read(&img_file,biColorTable[y], sizeof(unsigned char)* 4,&readbytes);
 800d734:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
 800d738:	4643      	mov	r3, r8
 800d73a:	2204      	movs	r2, #4
 800d73c:	4649      	mov	r1, r9
 800d73e:	a802      	add	r0, sp, #8
 800d740:	f008 f8e6 	bl	8015910 <f_read>
			if ( readbytes!= 4) {
 800d744:	f8d8 3000 	ldr.w	r3, [r8]
 800d748:	2b04      	cmp	r3, #4
 800d74a:	d1e6      	bne.n	800d71a <bmp_img_read+0x6a>
			free(biColorTable[y]);
 800d74c:	4648      	mov	r0, r9
 800d74e:	f008 fd95 	bl	801627c <free>
	for (size_t y = 0; y < img->img_header.biBitCount; y++) {
 800d752:	3401      	adds	r4, #1
 800d754:	e7ca      	b.n	800d6ec <bmp_img_read+0x3c>
	bmp_img_alloc(img);
 800d756:	4638      	mov	r0, r7
 800d758:	f7ff ff98 	bl	800d68c <bmp_img_alloc>
	const size_t h = abs(img->img_header.biHeight);
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	ea83 79e3 	eor.w	r9, r3, r3, asr #31
	const size_t offset = (img->img_header.biHeight > 0 ? h - 1 : 0);
 800d762:	2b00      	cmp	r3, #0
	const size_t h = abs(img->img_header.biHeight);
 800d764:	eba9 79e3 	sub.w	r9, r9, r3, asr #31
	const size_t padding = BMP_GET_PADDING(img->img_header.biWidth);
 800d768:	693b      	ldr	r3, [r7, #16]
	const size_t offset = (img->img_header.biHeight > 0 ? h - 1 : 0);
 800d76a:	bfc8      	it	gt
 800d76c:	f109 35ff 	addgt.w	r5, r9, #4294967295
	const size_t padding = BMP_GET_PADDING(img->img_header.biWidth);
 800d770:	425a      	negs	r2, r3
 800d772:	f002 0203 	and.w	r2, r2, #3
 800d776:	f003 0a03 	and.w	sl, r3, #3
	for (size_t y = 0; y < h; y++) {
 800d77a:	f04f 0600 	mov.w	r6, #0
	const size_t padding = BMP_GET_PADDING(img->img_header.biWidth);
 800d77e:	bf58      	it	pl
 800d780:	f1c2 0a00 	rsbpl	sl, r2, #0
		f_read(&img_file,&img->img_pixels[abs(offset - y)*items], sizeof(unsigned char)* items,&readbytes);
 800d784:	ac01      	add	r4, sp, #4
	const size_t items = img->img_header.biWidth/8;
 800d786:	f04f 0808 	mov.w	r8, #8
 800d78a:	fb93 f8f8 	sdiv	r8, r3, r8
	for (size_t y = 0; y < h; y++) {
 800d78e:	454e      	cmp	r6, r9
 800d790:	d104      	bne.n	800d79c <bmp_img_read+0xec>
	f_close(&img_file);
 800d792:	a802      	add	r0, sp, #8
 800d794:	f008 f9c3 	bl	8015b1e <f_close>
	return BMP_OK;
 800d798:	2500      	movs	r5, #0
 800d79a:	e7c3      	b.n	800d724 <bmp_img_read+0x74>
		f_read(&img_file,&img->img_pixels[abs(offset - y)*items], sizeof(unsigned char)* items,&readbytes);
 800d79c:	1ba9      	subs	r1, r5, r6
 800d79e:	2900      	cmp	r1, #0
 800d7a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d7a2:	bfb8      	it	lt
 800d7a4:	4249      	neglt	r1, r1
 800d7a6:	4623      	mov	r3, r4
 800d7a8:	fb08 0101 	mla	r1, r8, r1, r0
 800d7ac:	4642      	mov	r2, r8
 800d7ae:	a802      	add	r0, sp, #8
 800d7b0:	f008 f8ae 	bl	8015910 <f_read>
		if ( readbytes!= items) {
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	4543      	cmp	r3, r8
 800d7b8:	d1af      	bne.n	800d71a <bmp_img_read+0x6a>
		f_lseek(&img_file, f_tell(&img_file)+padding);
 800d7ba:	9908      	ldr	r1, [sp, #32]
 800d7bc:	a802      	add	r0, sp, #8
 800d7be:	4451      	add	r1, sl
 800d7c0:	f008 f9be 	bl	8015b40 <f_lseek>
	for (size_t y = 0; y < h; y++) {
 800d7c4:	3601      	adds	r6, #1
 800d7c6:	e7e2      	b.n	800d78e <bmp_img_read+0xde>
		return BMP_FILE_NOT_OPENED;
 800d7c8:	f06f 0503 	mvn.w	r5, #3
 800d7cc:	e7aa      	b.n	800d724 <bmp_img_read+0x74>
	...

0800d7d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800d7d0:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800d7d2:	2400      	movs	r4, #0
void SystemClock_Config(void) {
 800d7d4:	b099      	sub	sp, #100	; 0x64
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800d7d6:	4621      	mov	r1, r4
 800d7d8:	2214      	movs	r2, #20
 800d7da:	a807      	add	r0, sp, #28
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800d7dc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800d7e0:	f008 fd5f 	bl	80162a2 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800d7e4:	4621      	mov	r1, r4
 800d7e6:	2210      	movs	r2, #16
 800d7e8:	a803      	add	r0, sp, #12
 800d7ea:	f008 fd5a 	bl	80162a2 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800d7ee:	4b22      	ldr	r3, [pc, #136]	; (800d878 <SystemClock_Config+0xa8>)
 800d7f0:	9401      	str	r4, [sp, #4]
 800d7f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d7f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d7f8:	641a      	str	r2, [r3, #64]	; 0x40
 800d7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d804:	4b1d      	ldr	r3, [pc, #116]	; (800d87c <SystemClock_Config+0xac>)
 800d806:	9402      	str	r4, [sp, #8]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d80e:	601a      	str	r2, [r3, #0]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d816:	9302      	str	r3, [sp, #8]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d818:	220d      	movs	r2, #13
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d81a:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d81c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d820:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d824:	2301      	movs	r3, #1
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d826:	2502      	movs	r5, #2
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d828:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800d82a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d82c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d830:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 336;
 800d834:	2119      	movs	r1, #25
 800d836:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800d83a:	e9cd 1314 	strd	r1, r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800d83e:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800d840:	2307      	movs	r3, #7
 800d842:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d844:	9516      	str	r5, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800d846:	f002 fa4b 	bl	800fce0 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800d84a:	230f      	movs	r3, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d84c:	e9cd 3507 	strd	r3, r5, [sp, #28]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d850:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800d854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d858:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800d85c:	2105      	movs	r1, #5
 800d85e:	a807      	add	r0, sp, #28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d860:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800d862:	f002 fc11 	bl	8010088 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d866:	f44f 7380 	mov.w	r3, #256	; 0x100
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800d86a:	a803      	add	r0, sp, #12
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d86c:	9503      	str	r5, [sp, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d86e:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800d870:	f002 fce2 	bl	8010238 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 800d874:	b019      	add	sp, #100	; 0x64
 800d876:	bd30      	pop	{r4, r5, pc}
 800d878:	40023800 	.word	0x40023800
 800d87c:	40007000 	.word	0x40007000

0800d880 <main>:
int main(void) {
 800d880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	printf("starting bootloader,shared mem= %lu.\n\r", sharedmem);
 800d884:	4db9      	ldr	r5, [pc, #740]	; (800db6c <main+0x2ec>)
int main(void) {
 800d886:	b09e      	sub	sp, #120	; 0x78
	HAL_Init();
 800d888:	f001 f844 	bl	800e914 <HAL_Init>
	SystemClock_Config();
 800d88c:	f7ff ffa0 	bl	800d7d0 <SystemClock_Config>
	MX_GPIO_Init();
 800d890:	f7ff fba2 	bl	800cfd8 <MX_GPIO_Init>
	MX_DMA_Init();
 800d894:	f7ff f9a0 	bl	800cbd8 <MX_DMA_Init>
	MX_TIM4_Init();
 800d898:	f000 fed0 	bl	800e63c <MX_TIM4_Init>
	MX_RTC_Init();
 800d89c:	f000 fad8 	bl	800de50 <MX_RTC_Init>
	MX_SDIO_SD_Init();
 800d8a0:	f000 fb1c 	bl	800dedc <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 800d8a4:	f005 f896 	bl	80129d4 <MX_FATFS_Init>
	MX_USART2_UART_Init();
 800d8a8:	f000 ff1c 	bl	800e6e4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800d8ac:	f000 ff36 	bl	800e71c <MX_USART3_UART_Init>
	MX_CRC_Init();
 800d8b0:	f7ff f96a 	bl	800cb88 <MX_CRC_Init>
	MX_USB_HOST_Init();
 800d8b4:	f008 fb50 	bl	8015f58 <MX_USB_HOST_Init>
	RetargetInit(&huart3);
 800d8b8:	48ad      	ldr	r0, [pc, #692]	; (800db70 <main+0x2f0>)
 800d8ba:	f000 fa5b 	bl	800dd74 <RetargetInit>
	printf("starting bootloader,shared mem= %lu.\n\r", sharedmem);
 800d8be:	6829      	ldr	r1, [r5, #0]
 800d8c0:	48ac      	ldr	r0, [pc, #688]	; (800db74 <main+0x2f4>)
 800d8c2:	f008 fd9f 	bl	8016404 <iprintf>
	HAL_FLASH_Unlock();
 800d8c6:	f001 fb1b 	bl	800ef00 <HAL_FLASH_Unlock>
	if ((r=EE_Init()) != EE_OK) {
 800d8ca:	f7ff fa4d 	bl	800cd68 <EE_Init>
 800d8ce:	4601      	mov	r1, r0
 800d8d0:	b110      	cbz	r0, 800d8d8 <main+0x58>
		printf("EEprom Init problem:%d\n\r",r);
 800d8d2:	48a9      	ldr	r0, [pc, #676]	; (800db78 <main+0x2f8>)
 800d8d4:	f008 fd96 	bl	8016404 <iprintf>
	HAL_Delay(500);
 800d8d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d8dc:	f001 f846 	bl	800e96c <HAL_Delay>
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800d8e0:	4ba6      	ldr	r3, [pc, #664]	; (800db7c <main+0x2fc>)
 800d8e2:	200a      	movs	r0, #10
	if((r=EE_ReadVariable(VirtAddVarTab[0], &current_version))!=EE_OK)
 800d8e4:	a903      	add	r1, sp, #12
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800d8e6:	8018      	strh	r0, [r3, #0]
	if((r=EE_ReadVariable(VirtAddVarTab[0], &current_version))!=EE_OK)
 800d8e8:	f7ff fa16 	bl	800cd18 <EE_ReadVariable>
 800d8ec:	4601      	mov	r1, r0
 800d8ee:	b110      	cbz	r0, 800d8f6 <main+0x76>
		printf("EEprom Read error:%d\n\r",r);
 800d8f0:	48a3      	ldr	r0, [pc, #652]	; (800db80 <main+0x300>)
 800d8f2:	f008 fd87 	bl	8016404 <iprintf>
	HAL_FLASH_Lock();
 800d8f6:	f001 fb15 	bl	800ef24 <HAL_FLASH_Lock>
	printf("version of firmware:%d.\n\r", current_version);
 800d8fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d8fe:	48a1      	ldr	r0, [pc, #644]	; (800db84 <main+0x304>)
 800d900:	f008 fd80 	bl	8016404 <iprintf>
	HAL_GPIO_WritePin(USB_PWR_EN_GPIO_Port, USB_PWR_EN_Pin, GPIO_PIN_SET);
 800d904:	2201      	movs	r2, #1
 800d906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d90a:	489f      	ldr	r0, [pc, #636]	; (800db88 <main+0x308>)
 800d90c:	f001 fdaa 	bl	800f464 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800d910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d914:	f001 f82a 	bl	800e96c <HAL_Delay>
	HAL_GPIO_WritePin(USB_PWR_EN_GPIO_Port, USB_PWR_EN_Pin, GPIO_PIN_RESET);
 800d918:	2200      	movs	r2, #0
 800d91a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d91e:	489a      	ldr	r0, [pc, #616]	; (800db88 <main+0x308>)
 800d920:	f001 fda0 	bl	800f464 <HAL_GPIO_WritePin>
	glcd_init(128, 64);
 800d924:	2140      	movs	r1, #64	; 0x40
 800d926:	2080      	movs	r0, #128	; 0x80
 800d928:	f000 fcf6 	bl	800e318 <glcd_init>
	glcd_flip_screen(XLR_YTB);
 800d92c:	2000      	movs	r0, #0
 800d92e:	f000 fd5b 	bl	800e3e8 <glcd_flip_screen>
	if ((fr = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1)) != FR_OK) {
 800d932:	2201      	movs	r2, #1
 800d934:	4995      	ldr	r1, [pc, #596]	; (800db8c <main+0x30c>)
 800d936:	4896      	ldr	r0, [pc, #600]	; (800db90 <main+0x310>)
 800d938:	f007 fea4 	bl	8015684 <f_mount>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	f000 80c7 	beq.w	800dad0 <main+0x250>
		printf("error mount SD\n\r");
 800d942:	4894      	ldr	r0, [pc, #592]	; (800db94 <main+0x314>)
 800d944:	f008 fd5e 	bl	8016404 <iprintf>
	glcd_blank();
 800d948:	f000 fc5c 	bl	800e204 <glcd_blank>
	draw_text("Bootloader...", 0, 0, Tahoma8, 1, 0);
 800d94c:	2400      	movs	r4, #0
 800d94e:	2301      	movs	r3, #1
 800d950:	e9cd 3400 	strd	r3, r4, [sp]
 800d954:	4622      	mov	r2, r4
 800d956:	4b90      	ldr	r3, [pc, #576]	; (800db98 <main+0x318>)
 800d958:	4890      	ldr	r0, [pc, #576]	; (800db9c <main+0x31c>)
	while (IS_BTN_PRESSED() && BTNcounter < 200) {
 800d95a:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800dbf0 <main+0x370>
			printf("Release button to enter Bootloader.\n\r");
 800d95e:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800dbf4 <main+0x374>
			draw_text("Release to Enter Loader", 0, 10, Tahoma8, 1, 0);
 800d962:	f8df a234 	ldr.w	sl, [pc, #564]	; 800db98 <main+0x318>
	draw_text("Bootloader...", 0, 0, Tahoma8, 1, 0);
 800d966:	4621      	mov	r1, r4
 800d968:	f7ff fdcb 	bl	800d502 <draw_text>
	glcd_refresh();
 800d96c:	f000 fc6c 	bl	800e248 <glcd_refresh>
	while (IS_BTN_PRESSED() && BTNcounter < 200) {
 800d970:	2110      	movs	r1, #16
 800d972:	4640      	mov	r0, r8
 800d974:	f001 fd70 	bl	800f458 <HAL_GPIO_ReadPin>
 800d978:	b2e6      	uxtb	r6, r4
 800d97a:	4607      	mov	r7, r0
 800d97c:	b918      	cbnz	r0, 800d986 <main+0x106>
 800d97e:	2cc8      	cmp	r4, #200	; 0xc8
 800d980:	f040 80d1 	bne.w	800db26 <main+0x2a6>
 800d984:	4626      	mov	r6, r4
	if ((BTNcounter < 100 && BTNcounter > 20)
 800d986:	3e15      	subs	r6, #21
 800d988:	2e4e      	cmp	r6, #78	; 0x4e
 800d98a:	d91b      	bls.n	800d9c4 <main+0x144>
			|| (sharedmem < WRITE_FROM_SD || sharedmem > FORCE_WRITE_FROM_USB)) {
 800d98c:	682b      	ldr	r3, [r5, #0]
 800d98e:	1e5a      	subs	r2, r3, #1
 800d990:	2a03      	cmp	r2, #3
 800d992:	f240 8131 	bls.w	800dbf8 <main+0x378>
			printf("try to go to application\n\r");
 800d996:	4882      	ldr	r0, [pc, #520]	; (800dba0 <main+0x320>)
 800d998:	f008 fd34 	bl	8016404 <iprintf>
			sharedmem = POWER_UP;
 800d99c:	230c      	movs	r3, #12
 800d99e:	602b      	str	r3, [r5, #0]
			glcd_blank();
 800d9a0:	f000 fc30 	bl	800e204 <glcd_blank>
			draw_text("Goto Application", 0, 0, Tahoma8, 1, 0);
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e9cd 3200 	strd	r3, r2, [sp]
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	4b7a      	ldr	r3, [pc, #488]	; (800db98 <main+0x318>)
 800d9b0:	487c      	ldr	r0, [pc, #496]	; (800dba4 <main+0x324>)
 800d9b2:	f7ff fda6 	bl	800d502 <draw_text>
			glcd_refresh();
 800d9b6:	f000 fc47 	bl	800e248 <glcd_refresh>
			goto_application();
 800d9ba:	f7fe fecf 	bl	800c75c <goto_application>
			printf(
 800d9be:	487a      	ldr	r0, [pc, #488]	; (800dba8 <main+0x328>)
 800d9c0:	f008 fd20 	bl	8016404 <iprintf>
		draw_text("try SD:", 0, 0, Tahoma8, 1, 0);
 800d9c4:	2600      	movs	r6, #0
 800d9c6:	2701      	movs	r7, #1
		glcd_blank();
 800d9c8:	f000 fc1c 	bl	800e204 <glcd_blank>
		draw_text("try SD:", 0, 0, Tahoma8, 1, 0);
 800d9cc:	4b72      	ldr	r3, [pc, #456]	; (800db98 <main+0x318>)
 800d9ce:	4877      	ldr	r0, [pc, #476]	; (800dbac <main+0x32c>)
 800d9d0:	4632      	mov	r2, r6
 800d9d2:	4631      	mov	r1, r6
 800d9d4:	e9cd 7600 	strd	r7, r6, [sp]
 800d9d8:	f7ff fd93 	bl	800d502 <draw_text>
		glcd_refresh();
 800d9dc:	f000 fc34 	bl	800e248 <glcd_refresh>
		if ((result_sd = Check_SDCard(firmware_path, &firmware_version,
 800d9e0:	aa04      	add	r2, sp, #16
 800d9e2:	f10d 010e 	add.w	r1, sp, #14
 800d9e6:	a805      	add	r0, sp, #20
 800d9e8:	f7fe fdbc 	bl	800c564 <Check_SDCard>
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	4680      	mov	r8, r0
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	f040 80af 	bne.w	800db54 <main+0x2d4>
			printf("Firmware found in SD\n\r");
 800d9f6:	486e      	ldr	r0, [pc, #440]	; (800dbb0 <main+0x330>)
 800d9f8:	f008 fd04 	bl	8016404 <iprintf>
			printf("Firmware version:%lu\n\r", firmware_version);
 800d9fc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800da00:	486c      	ldr	r0, [pc, #432]	; (800dbb4 <main+0x334>)
 800da02:	f008 fcff 	bl	8016404 <iprintf>
			printf("Firmware checksum:%lu\n\r", firmware_checksum);
 800da06:	9904      	ldr	r1, [sp, #16]
 800da08:	486b      	ldr	r0, [pc, #428]	; (800dbb8 <main+0x338>)
 800da0a:	f008 fcfb 	bl	8016404 <iprintf>
			printf("Firmware path:%s\n\r", firmware_path);
 800da0e:	a905      	add	r1, sp, #20
 800da10:	486a      	ldr	r0, [pc, #424]	; (800dbbc <main+0x33c>)
 800da12:	f008 fcf7 	bl	8016404 <iprintf>
			if ((result_sd = Write_Flash(SD_ID, firmware_path, firmware_version,
 800da16:	9b04      	ldr	r3, [sp, #16]
 800da18:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800da1c:	a905      	add	r1, sp, #20
 800da1e:	200a      	movs	r0, #10
 800da20:	f7fe feae 	bl	800c780 <Write_Flash>
 800da24:	280b      	cmp	r0, #11
 800da26:	4604      	mov	r4, r0
 800da28:	d110      	bne.n	800da4c <main+0x1cc>
				printf("Program Flashed from SD\n\r");
 800da2a:	4865      	ldr	r0, [pc, #404]	; (800dbc0 <main+0x340>)
 800da2c:	f008 fcea 	bl	8016404 <iprintf>
				draw_text("Flashed from SD", 0, 10, Tahoma8, 1, 0);
 800da30:	e9cd 7800 	strd	r7, r8, [sp]
 800da34:	4b58      	ldr	r3, [pc, #352]	; (800db98 <main+0x318>)
 800da36:	4863      	ldr	r0, [pc, #396]	; (800dbc4 <main+0x344>)
 800da38:	220a      	movs	r2, #10
 800da3a:	4641      	mov	r1, r8
			draw_text("Failed from SD", 0, 10, Tahoma8, 1, 0);
 800da3c:	f7ff fd61 	bl	800d502 <draw_text>
			glcd_refresh();
 800da40:	f000 fc02 	bl	800e248 <glcd_refresh>
			HAL_Delay(1000);
 800da44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800da48:	f000 ff90 	bl	800e96c <HAL_Delay>
		draw_text("try USB:", 0, 0, Tahoma8, 1, 0);
 800da4c:	2600      	movs	r6, #0
 800da4e:	2701      	movs	r7, #1
		sharedmem = result_sd;
 800da50:	602c      	str	r4, [r5, #0]
		glcd_blank();
 800da52:	f000 fbd7 	bl	800e204 <glcd_blank>
		draw_text("try USB:", 0, 0, Tahoma8, 1, 0);
 800da56:	4b50      	ldr	r3, [pc, #320]	; (800db98 <main+0x318>)
 800da58:	485b      	ldr	r0, [pc, #364]	; (800dbc8 <main+0x348>)
 800da5a:	4632      	mov	r2, r6
 800da5c:	4631      	mov	r1, r6
 800da5e:	e9cd 7600 	strd	r7, r6, [sp]
 800da62:	f7ff fd4e 	bl	800d502 <draw_text>
		glcd_refresh();
 800da66:	f000 fbef 	bl	800e248 <glcd_refresh>
		if (result_sd != FLASH_WRITE_OK) {
 800da6a:	2c0b      	cmp	r4, #11
 800da6c:	f000 810b 	beq.w	800dc86 <main+0x406>
		if ((result_usb = Check_USBMEM(firmware_path, &firmware_version,
 800da70:	aa04      	add	r2, sp, #16
 800da72:	f10d 010e 	add.w	r1, sp, #14
 800da76:	a805      	add	r0, sp, #20
 800da78:	f7fe fdd0 	bl	800c61c <Check_USBMEM>
 800da7c:	4604      	mov	r4, r0
 800da7e:	4680      	mov	r8, r0
 800da80:	2800      	cmp	r0, #0
 800da82:	f040 813f 	bne.w	800dd04 <main+0x484>
			printf("Firmware found in USB\n\r");
 800da86:	4851      	ldr	r0, [pc, #324]	; (800dbcc <main+0x34c>)
 800da88:	f008 fcbc 	bl	8016404 <iprintf>
			printf("Firmware version:%lu\n\r", firmware_version);
 800da8c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800da90:	4848      	ldr	r0, [pc, #288]	; (800dbb4 <main+0x334>)
 800da92:	f008 fcb7 	bl	8016404 <iprintf>
			printf("Firmware checksum:%lu\n\r", firmware_checksum);
 800da96:	9904      	ldr	r1, [sp, #16]
 800da98:	4847      	ldr	r0, [pc, #284]	; (800dbb8 <main+0x338>)
 800da9a:	f008 fcb3 	bl	8016404 <iprintf>
			printf("Firmware path:%s\n\r", firmware_path);
 800da9e:	a905      	add	r1, sp, #20
 800daa0:	4846      	ldr	r0, [pc, #280]	; (800dbbc <main+0x33c>)
 800daa2:	f008 fcaf 	bl	8016404 <iprintf>
			if ((result_usb = Write_Flash(USB_ID, firmware_path,
 800daa6:	9b04      	ldr	r3, [sp, #16]
 800daa8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800daac:	a905      	add	r1, sp, #20
 800daae:	2014      	movs	r0, #20
 800dab0:	f7fe fe66 	bl	800c780 <Write_Flash>
 800dab4:	280b      	cmp	r0, #11
 800dab6:	4604      	mov	r4, r0
 800dab8:	f040 80e4 	bne.w	800dc84 <main+0x404>
				printf("Program Flashed from USB\n\r");
 800dabc:	4844      	ldr	r0, [pc, #272]	; (800dbd0 <main+0x350>)
 800dabe:	f008 fca1 	bl	8016404 <iprintf>
				draw_text("Flashed from USB", 0, 10, Tahoma8, 1, 0);
 800dac2:	e9cd 7800 	strd	r7, r8, [sp]
 800dac6:	4b34      	ldr	r3, [pc, #208]	; (800db98 <main+0x318>)
 800dac8:	4842      	ldr	r0, [pc, #264]	; (800dbd4 <main+0x354>)
 800daca:	220a      	movs	r2, #10
 800dacc:	4641      	mov	r1, r8
 800dace:	e0d1      	b.n	800dc74 <main+0x3f4>
		if (bmp_img_read(&img, "logo.bmp") == BMP_OK)
 800dad0:	4941      	ldr	r1, [pc, #260]	; (800dbd8 <main+0x358>)
 800dad2:	a805      	add	r0, sp, #20
 800dad4:	f7ff fdec 	bl	800d6b0 <bmp_img_read>
 800dad8:	4601      	mov	r1, r0
 800dada:	bb00      	cbnz	r0, 800db1e <main+0x29e>
			draw_bmp_h(0, 0, img.img_header.biWidth, img.img_header.biHeight,
 800dadc:	2401      	movs	r4, #1
 800dade:	9401      	str	r4, [sp, #4]
 800dae0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800dae2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800dae6:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800daea:	9400      	str	r4, [sp, #0]
 800daec:	f7ff fd43 	bl	800d576 <draw_bmp_h>
		f_mount(&SDFatFS, "", 1);
 800daf0:	2201      	movs	r2, #1
 800daf2:	493a      	ldr	r1, [pc, #232]	; (800dbdc <main+0x35c>)
 800daf4:	4826      	ldr	r0, [pc, #152]	; (800db90 <main+0x310>)
 800daf6:	f007 fdc5 	bl	8015684 <f_mount>
		bmp_img_free(&img);
 800dafa:	a805      	add	r0, sp, #20
 800dafc:	f7ff fdd5 	bl	800d6aa <bmp_img_free>
		draw_rectangle(0, 0, 127 , 63,1);
 800db00:	2100      	movs	r1, #0
 800db02:	2301      	movs	r3, #1
 800db04:	4608      	mov	r0, r1
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	227f      	movs	r2, #127	; 0x7f
 800db0a:	233f      	movs	r3, #63	; 0x3f
 800db0c:	f7ff fcbe 	bl	800d48c <draw_rectangle>
		glcd_refresh();
 800db10:	f000 fb9a 	bl	800e248 <glcd_refresh>
		HAL_Delay(1000);
 800db14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800db18:	f000 ff28 	bl	800e96c <HAL_Delay>
 800db1c:	e714      	b.n	800d948 <main+0xc8>
			printf("bmp file error\n\r");
 800db1e:	4830      	ldr	r0, [pc, #192]	; (800dbe0 <main+0x360>)
 800db20:	f008 fc70 	bl	8016404 <iprintf>
 800db24:	e7e4      	b.n	800daf0 <main+0x270>
		if (BTNcounter == 20) {
 800db26:	2c14      	cmp	r4, #20
 800db28:	d10d      	bne.n	800db46 <main+0x2c6>
			printf("Release button to enter Bootloader.\n\r");
 800db2a:	4648      	mov	r0, r9
 800db2c:	f008 fc6a 	bl	8016404 <iprintf>
			draw_text("Release to Enter Loader", 0, 10, Tahoma8, 1, 0);
 800db30:	2301      	movs	r3, #1
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	220a      	movs	r2, #10
 800db36:	4653      	mov	r3, sl
 800db38:	4639      	mov	r1, r7
 800db3a:	9701      	str	r7, [sp, #4]
 800db3c:	4829      	ldr	r0, [pc, #164]	; (800dbe4 <main+0x364>)
 800db3e:	f7ff fce0 	bl	800d502 <draw_text>
			glcd_refresh();
 800db42:	f000 fb81 	bl	800e248 <glcd_refresh>
		MX_USB_HOST_Process();
 800db46:	f008 fa27 	bl	8015f98 <MX_USB_HOST_Process>
		HAL_Delay(100);
 800db4a:	2064      	movs	r0, #100	; 0x64
 800db4c:	f000 ff0e 	bl	800e96c <HAL_Delay>
 800db50:	3401      	adds	r4, #1
 800db52:	e70d      	b.n	800d970 <main+0xf0>
			printf("SD CARD Have problem(%d)\n\r", result_sd);
 800db54:	4601      	mov	r1, r0
 800db56:	4824      	ldr	r0, [pc, #144]	; (800dbe8 <main+0x368>)
 800db58:	f008 fc54 	bl	8016404 <iprintf>
			draw_text("Failed from SD", 0, 10, Tahoma8, 1, 0);
 800db5c:	e9cd 7600 	strd	r7, r6, [sp]
 800db60:	4b0d      	ldr	r3, [pc, #52]	; (800db98 <main+0x318>)
 800db62:	4822      	ldr	r0, [pc, #136]	; (800dbec <main+0x36c>)
 800db64:	220a      	movs	r2, #10
 800db66:	4631      	mov	r1, r6
 800db68:	e768      	b.n	800da3c <main+0x1bc>
 800db6a:	bf00      	nop
 800db6c:	10000000 	.word	0x10000000
 800db70:	2000167c 	.word	0x2000167c
 800db74:	08017b20 	.word	0x08017b20
 800db78:	08017b47 	.word	0x08017b47
 800db7c:	20000004 	.word	0x20000004
 800db80:	08017b60 	.word	0x08017b60
 800db84:	08017b77 	.word	0x08017b77
 800db88:	40021000 	.word	0x40021000
 800db8c:	20001725 	.word	0x20001725
 800db90:	200047c4 	.word	0x200047c4
 800db94:	08017b91 	.word	0x08017b91
 800db98:	08017e05 	.word	0x08017e05
 800db9c:	08017bbc 	.word	0x08017bbc
 800dba0:	08017c08 	.word	0x08017c08
 800dba4:	08017c23 	.word	0x08017c23
 800dba8:	08017c34 	.word	0x08017c34
 800dbac:	08017c70 	.word	0x08017c70
 800dbb0:	08017c78 	.word	0x08017c78
 800dbb4:	08017c8f 	.word	0x08017c8f
 800dbb8:	08017ca6 	.word	0x08017ca6
 800dbbc:	08017cbe 	.word	0x08017cbe
 800dbc0:	08017cd1 	.word	0x08017cd1
 800dbc4:	08017ceb 	.word	0x08017ceb
 800dbc8:	08017d25 	.word	0x08017d25
 800dbcc:	08017d2e 	.word	0x08017d2e
 800dbd0:	08017d46 	.word	0x08017d46
 800dbd4:	08017d61 	.word	0x08017d61
 800dbd8:	08017ba2 	.word	0x08017ba2
 800dbdc:	08017d15 	.word	0x08017d15
 800dbe0:	08017bab 	.word	0x08017bab
 800dbe4:	08017bf0 	.word	0x08017bf0
 800dbe8:	08017cfb 	.word	0x08017cfb
 800dbec:	08017d16 	.word	0x08017d16
 800dbf0:	40020400 	.word	0x40020400
 800dbf4:	08017bca 	.word	0x08017bca
	} else if (sharedmem == WRITE_FROM_SD || sharedmem == FORCE_WRITE_FROM_SD) {
 800dbf8:	f023 0702 	bic.w	r7, r3, #2
 800dbfc:	2f01      	cmp	r7, #1
 800dbfe:	d16e      	bne.n	800dcde <main+0x45e>
		draw_text("try SD:", 0, 0, Tahoma8, 1, 0);
 800dc00:	2600      	movs	r6, #0
		glcd_blank();
 800dc02:	f000 faff 	bl	800e204 <glcd_blank>
		draw_text("try SD:", 0, 0, Tahoma8, 1, 0);
 800dc06:	4b45      	ldr	r3, [pc, #276]	; (800dd1c <main+0x49c>)
 800dc08:	4845      	ldr	r0, [pc, #276]	; (800dd20 <main+0x4a0>)
 800dc0a:	4632      	mov	r2, r6
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	e9cd 7600 	strd	r7, r6, [sp]
 800dc12:	f7ff fc76 	bl	800d502 <draw_text>
		glcd_refresh();
 800dc16:	f000 fb17 	bl	800e248 <glcd_refresh>
		if ((result_sd = Check_SDCard(firmware_path, &firmware_version,
 800dc1a:	aa04      	add	r2, sp, #16
 800dc1c:	f10d 010e 	add.w	r1, sp, #14
 800dc20:	a805      	add	r0, sp, #20
 800dc22:	f7fe fc9f 	bl	800c564 <Check_SDCard>
 800dc26:	4604      	mov	r4, r0
 800dc28:	4680      	mov	r8, r0
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d14c      	bne.n	800dcc8 <main+0x448>
			printf("Firmware found in SD\n\r");
 800dc2e:	483d      	ldr	r0, [pc, #244]	; (800dd24 <main+0x4a4>)
 800dc30:	f008 fbe8 	bl	8016404 <iprintf>
			printf("Firmware version:%lu\n\r", firmware_version);
 800dc34:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800dc38:	483b      	ldr	r0, [pc, #236]	; (800dd28 <main+0x4a8>)
 800dc3a:	f008 fbe3 	bl	8016404 <iprintf>
			printf("Firmware checksum:%lu\n\r", firmware_checksum);
 800dc3e:	9904      	ldr	r1, [sp, #16]
 800dc40:	483a      	ldr	r0, [pc, #232]	; (800dd2c <main+0x4ac>)
 800dc42:	f008 fbdf 	bl	8016404 <iprintf>
			printf("Firmware path:%s\n\r", firmware_path);
 800dc46:	a905      	add	r1, sp, #20
 800dc48:	4839      	ldr	r0, [pc, #228]	; (800dd30 <main+0x4b0>)
 800dc4a:	f008 fbdb 	bl	8016404 <iprintf>
			if ((result_sd = Write_Flash(SD_ID, firmware_path, firmware_version,
 800dc4e:	9b04      	ldr	r3, [sp, #16]
 800dc50:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800dc54:	a905      	add	r1, sp, #20
 800dc56:	200a      	movs	r0, #10
 800dc58:	f7fe fd92 	bl	800c780 <Write_Flash>
 800dc5c:	280b      	cmp	r0, #11
 800dc5e:	4604      	mov	r4, r0
 800dc60:	d110      	bne.n	800dc84 <main+0x404>
				printf("Program Flashed from SD\n\r");
 800dc62:	4834      	ldr	r0, [pc, #208]	; (800dd34 <main+0x4b4>)
 800dc64:	f008 fbce 	bl	8016404 <iprintf>
				draw_text("Flashed from SD", 0, 10, Tahoma8, 1, 0);
 800dc68:	e9cd 7800 	strd	r7, r8, [sp]
 800dc6c:	4b2b      	ldr	r3, [pc, #172]	; (800dd1c <main+0x49c>)
 800dc6e:	4832      	ldr	r0, [pc, #200]	; (800dd38 <main+0x4b8>)
 800dc70:	220a      	movs	r2, #10
 800dc72:	4641      	mov	r1, r8
			draw_text("Failed from USB", 0, 10, Tahoma8, 1, 0);
 800dc74:	f7ff fc45 	bl	800d502 <draw_text>
			glcd_refresh();
 800dc78:	f000 fae6 	bl	800e248 <glcd_refresh>
			HAL_Delay(1000);
 800dc7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dc80:	f000 fe74 	bl	800e96c <HAL_Delay>
		sharedmem = result_usb;
 800dc84:	602c      	str	r4, [r5, #0]
	glcd_blank();
 800dc86:	f000 fabd 	bl	800e204 <glcd_blank>
	draw_text("goto app", 0, 0, Tahoma8, 1, 0);
 800dc8a:	2501      	movs	r5, #1
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	e9cd 5200 	strd	r5, r2, [sp]
 800dc92:	4b22      	ldr	r3, [pc, #136]	; (800dd1c <main+0x49c>)
 800dc94:	4829      	ldr	r0, [pc, #164]	; (800dd3c <main+0x4bc>)
 800dc96:	4611      	mov	r1, r2
 800dc98:	f7ff fc33 	bl	800d502 <draw_text>
	glcd_refresh();
 800dc9c:	f000 fad4 	bl	800e248 <glcd_refresh>
	if (!goto_application()) {
 800dca0:	f7fe fd5c 	bl	800c75c <goto_application>
 800dca4:	4604      	mov	r4, r0
 800dca6:	b960      	cbnz	r0, 800dcc2 <main+0x442>
		printf("bootloader could not go to application\n\r");
 800dca8:	4825      	ldr	r0, [pc, #148]	; (800dd40 <main+0x4c0>)
 800dcaa:	f008 fbab 	bl	8016404 <iprintf>
		draw_text("Failed Application", 0, 10, Tahoma8, 1, 0);
 800dcae:	4b1b      	ldr	r3, [pc, #108]	; (800dd1c <main+0x49c>)
 800dcb0:	4824      	ldr	r0, [pc, #144]	; (800dd44 <main+0x4c4>)
 800dcb2:	220a      	movs	r2, #10
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	e9cd 5400 	strd	r5, r4, [sp]
 800dcba:	f7ff fc22 	bl	800d502 <draw_text>
		glcd_refresh();
 800dcbe:	f000 fac3 	bl	800e248 <glcd_refresh>
		MX_USB_HOST_Process();
 800dcc2:	f008 f969 	bl	8015f98 <MX_USB_HOST_Process>
 800dcc6:	e7fc      	b.n	800dcc2 <main+0x442>
			printf("SD CARD Have problem(%d)\n\r", result_sd);
 800dcc8:	4601      	mov	r1, r0
 800dcca:	481f      	ldr	r0, [pc, #124]	; (800dd48 <main+0x4c8>)
 800dccc:	f008 fb9a 	bl	8016404 <iprintf>
			draw_text("Failed from SD", 0, 10, Tahoma8, 1, 0);
 800dcd0:	e9cd 7600 	strd	r7, r6, [sp]
 800dcd4:	4b11      	ldr	r3, [pc, #68]	; (800dd1c <main+0x49c>)
 800dcd6:	481d      	ldr	r0, [pc, #116]	; (800dd4c <main+0x4cc>)
 800dcd8:	220a      	movs	r2, #10
 800dcda:	4631      	mov	r1, r6
 800dcdc:	e7ca      	b.n	800dc74 <main+0x3f4>
	} else if (sharedmem == WRITE_FROM_USB || sharedmem == FORCE_WRITE_FROM_USB) {
 800dcde:	2b02      	cmp	r3, #2
 800dce0:	d001      	beq.n	800dce6 <main+0x466>
 800dce2:	2b04      	cmp	r3, #4
 800dce4:	d1cf      	bne.n	800dc86 <main+0x406>
		draw_text("try USB", 0, 0, Tahoma8, 1, 0);
 800dce6:	2600      	movs	r6, #0
 800dce8:	2701      	movs	r7, #1
		glcd_blank();
 800dcea:	f000 fa8b 	bl	800e204 <glcd_blank>
		draw_text("try USB", 0, 0, Tahoma8, 1, 0);
 800dcee:	4b0b      	ldr	r3, [pc, #44]	; (800dd1c <main+0x49c>)
 800dcf0:	4817      	ldr	r0, [pc, #92]	; (800dd50 <main+0x4d0>)
 800dcf2:	4632      	mov	r2, r6
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	e9cd 7600 	strd	r7, r6, [sp]
 800dcfa:	f7ff fc02 	bl	800d502 <draw_text>
		glcd_refresh();
 800dcfe:	f000 faa3 	bl	800e248 <glcd_refresh>
 800dd02:	e6b5      	b.n	800da70 <main+0x1f0>
			printf("USB MEMORY Have problem(%d)\n\r", result_usb);
 800dd04:	4601      	mov	r1, r0
 800dd06:	4813      	ldr	r0, [pc, #76]	; (800dd54 <main+0x4d4>)
 800dd08:	f008 fb7c 	bl	8016404 <iprintf>
			draw_text("Failed from USB", 0, 10, Tahoma8, 1, 0);
 800dd0c:	e9cd 7600 	strd	r7, r6, [sp]
 800dd10:	4b02      	ldr	r3, [pc, #8]	; (800dd1c <main+0x49c>)
 800dd12:	4811      	ldr	r0, [pc, #68]	; (800dd58 <main+0x4d8>)
 800dd14:	220a      	movs	r2, #10
 800dd16:	4631      	mov	r1, r6
 800dd18:	e7ac      	b.n	800dc74 <main+0x3f4>
 800dd1a:	bf00      	nop
 800dd1c:	08017e05 	.word	0x08017e05
 800dd20:	08017c70 	.word	0x08017c70
 800dd24:	08017c78 	.word	0x08017c78
 800dd28:	08017c8f 	.word	0x08017c8f
 800dd2c:	08017ca6 	.word	0x08017ca6
 800dd30:	08017cbe 	.word	0x08017cbe
 800dd34:	08017cd1 	.word	0x08017cd1
 800dd38:	08017ceb 	.word	0x08017ceb
 800dd3c:	08017da8 	.word	0x08017da8
 800dd40:	08017db1 	.word	0x08017db1
 800dd44:	08017dda 	.word	0x08017dda
 800dd48:	08017cfb 	.word	0x08017cfb
 800dd4c:	08017d16 	.word	0x08017d16
 800dd50:	08017da0 	.word	0x08017da0
 800dd54:	08017d72 	.word	0x08017d72
 800dd58:	08017d90 	.word	0x08017d90

0800dd5c <HAL_TIM_PeriodElapsedCallback>:
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800dd5c:	6802      	ldr	r2, [r0, #0]
 800dd5e:	4b03      	ldr	r3, [pc, #12]	; (800dd6c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d101      	bne.n	800dd68 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 800dd64:	f000 bdf0 	b.w	800e948 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	/* USER CODE END Callback 1 */
}
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	40010000 	.word	0x40010000

0800dd70 <Error_Handler>:
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 800dd70:	4770      	bx	lr
	...

0800dd74 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;
void RetargetInit(UART_HandleTypeDef *huart) {
	gHuart = huart;
 800dd74:	4b04      	ldr	r3, [pc, #16]	; (800dd88 <RetargetInit+0x14>)
 800dd76:	6018      	str	r0, [r3, #0]
	/* Disable I/O buffering for STDOUT stream, so that
	 * chars are sent out as soon as they are printed. */
	setvbuf(stdout, NULL, _IONBF, 0);
 800dd78:	4b04      	ldr	r3, [pc, #16]	; (800dd8c <RetargetInit+0x18>)
 800dd7a:	6818      	ldr	r0, [r3, #0]
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	2202      	movs	r2, #2
 800dd80:	4619      	mov	r1, r3
 800dd82:	6880      	ldr	r0, [r0, #8]
 800dd84:	f008 bb66 	b.w	8016454 <setvbuf>
 800dd88:	2000148c 	.word	0x2000148c
 800dd8c:	2000003c 	.word	0x2000003c

0800dd90 <_isatty>:
}

int _isatty(int fd) {
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800dd90:	2802      	cmp	r0, #2
int _isatty(int fd) {
 800dd92:	b508      	push	{r3, lr}
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800dd94:	d905      	bls.n	800dda2 <_isatty+0x12>
		return 1;

	errno = EBADF;
 800dd96:	f008 fa3f 	bl	8016218 <__errno>
 800dd9a:	2309      	movs	r3, #9
 800dd9c:	6003      	str	r3, [r0, #0]
	return 0;
 800dd9e:	2000      	movs	r0, #0
}
 800dda0:	bd08      	pop	{r3, pc}
		return 1;
 800dda2:	2001      	movs	r0, #1
 800dda4:	e7fc      	b.n	800dda0 <_isatty+0x10>
	...

0800dda8 <_write>:

int _write(int fd, char *ptr, int len) {
	HAL_StatusTypeDef hstatus;

	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800dda8:	3801      	subs	r0, #1
 800ddaa:	2801      	cmp	r0, #1
int _write(int fd, char *ptr, int len) {
 800ddac:	b510      	push	{r4, lr}
 800ddae:	4614      	mov	r4, r2
	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800ddb0:	d80b      	bhi.n	800ddca <_write+0x22>
		hstatus = HAL_UART_Transmit(gHuart, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800ddb2:	4809      	ldr	r0, [pc, #36]	; (800ddd8 <_write+0x30>)
 800ddb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddb8:	b292      	uxth	r2, r2
 800ddba:	6800      	ldr	r0, [r0, #0]
 800ddbc:	f003 fde8 	bl	8011990 <HAL_UART_Transmit>
		if (hstatus == HAL_OK)
 800ddc0:	2800      	cmp	r0, #0
			return len;
		else
			return EIO;
 800ddc2:	bf18      	it	ne
 800ddc4:	2405      	movne	r4, #5
	}
	errno = EBADF;
	return -1;
}
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	bd10      	pop	{r4, pc}
	errno = EBADF;
 800ddca:	f008 fa25 	bl	8016218 <__errno>
 800ddce:	2309      	movs	r3, #9
 800ddd0:	6003      	str	r3, [r0, #0]
	return -1;
 800ddd2:	f04f 34ff 	mov.w	r4, #4294967295
 800ddd6:	e7f6      	b.n	800ddc6 <_write+0x1e>
 800ddd8:	2000148c 	.word	0x2000148c

0800dddc <_close>:

int _close(int fd) {
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800dddc:	2802      	cmp	r0, #2
int _close(int fd) {
 800ddde:	b508      	push	{r3, lr}
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800dde0:	d906      	bls.n	800ddf0 <_close+0x14>
		return 0;

	errno = EBADF;
 800dde2:	f008 fa19 	bl	8016218 <__errno>
 800dde6:	2309      	movs	r3, #9
 800dde8:	6003      	str	r3, [r0, #0]
	return -1;
 800ddea:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ddee:	bd08      	pop	{r3, pc}
		return 0;
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	e7fc      	b.n	800ddee <_close+0x12>

0800ddf4 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800ddf4:	b508      	push	{r3, lr}
	(void) fd;
	(void) ptr;
	(void) dir;

	errno = EBADF;
 800ddf6:	f008 fa0f 	bl	8016218 <__errno>
 800ddfa:	2309      	movs	r3, #9
 800ddfc:	6003      	str	r3, [r0, #0]
	return -1;
}
 800ddfe:	f04f 30ff 	mov.w	r0, #4294967295
 800de02:	bd08      	pop	{r3, pc}

0800de04 <_read>:

int _read(int fd, char *ptr, int len) {
 800de04:	b508      	push	{r3, lr}
	HAL_StatusTypeDef hstatus;

	if (fd == STDIN_FILENO) {
 800de06:	b958      	cbnz	r0, 800de20 <_read+0x1c>
		hstatus = HAL_UART_Receive(gHuart, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 800de08:	4809      	ldr	r0, [pc, #36]	; (800de30 <_read+0x2c>)
 800de0a:	f04f 33ff 	mov.w	r3, #4294967295
 800de0e:	2201      	movs	r2, #1
 800de10:	6800      	ldr	r0, [r0, #0]
 800de12:	f003 fe19 	bl	8011a48 <HAL_UART_Receive>
		if (hstatus == HAL_OK)
 800de16:	2800      	cmp	r0, #0
			return 1;
		else
			return EIO;
 800de18:	bf0c      	ite	eq
 800de1a:	2001      	moveq	r0, #1
 800de1c:	2005      	movne	r0, #5
	}
	errno = EBADF;
	return -1;
}
 800de1e:	bd08      	pop	{r3, pc}
	errno = EBADF;
 800de20:	f008 f9fa 	bl	8016218 <__errno>
 800de24:	2309      	movs	r3, #9
 800de26:	6003      	str	r3, [r0, #0]
	return -1;
 800de28:	f04f 30ff 	mov.w	r0, #4294967295
 800de2c:	e7f7      	b.n	800de1e <_read+0x1a>
 800de2e:	bf00      	nop
 800de30:	2000148c 	.word	0x2000148c

0800de34 <_fstat>:

int _fstat(int fd, struct stat *st) {
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800de34:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat *st) {
 800de36:	b508      	push	{r3, lr}
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800de38:	d804      	bhi.n	800de44 <_fstat+0x10>
		st->st_mode = S_IFCHR;
 800de3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de3e:	604b      	str	r3, [r1, #4]
		return 0;
	}

	errno = EBADF;
	return 0;
}
 800de40:	2000      	movs	r0, #0
 800de42:	bd08      	pop	{r3, pc}
	errno = EBADF;
 800de44:	f008 f9e8 	bl	8016218 <__errno>
 800de48:	2309      	movs	r3, #9
 800de4a:	6003      	str	r3, [r0, #0]
	return 0;
 800de4c:	e7f8      	b.n	800de40 <_fstat+0xc>
	...

0800de50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800de50:	b510      	push	{r4, lr}
 800de52:	b086      	sub	sp, #24
  RTC_TimeTypeDef sTime = {0};
 800de54:	2214      	movs	r2, #20
 800de56:	2100      	movs	r1, #0
 800de58:	a801      	add	r0, sp, #4
 800de5a:	f008 fa22 	bl	80162a2 <memset>
  RTC_DateTypeDef sDate = {0};

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800de5e:	4816      	ldr	r0, [pc, #88]	; (800deb8 <MX_RTC_Init+0x68>)
 800de60:	4b16      	ldr	r3, [pc, #88]	; (800debc <MX_RTC_Init+0x6c>)
  RTC_DateTypeDef sDate = {0};
 800de62:	2400      	movs	r4, #0
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800de64:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 800de68:	227f      	movs	r2, #127	; 0x7f
 800de6a:	23ff      	movs	r3, #255	; 0xff
  RTC_DateTypeDef sDate = {0};
 800de6c:	9400      	str	r4, [sp, #0]
  hrtc.Init.SynchPrediv = 255;
 800de6e:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800de72:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800de76:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800de78:	f002 fb38 	bl	80104ec <HAL_RTC_Init>
 800de7c:	b108      	cbz	r0, 800de82 <MX_RTC_Init+0x32>
  {
    Error_Handler();
 800de7e:	f7ff ff77 	bl	800dd70 <Error_Handler>
  sTime.Hours = 0;
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800de82:	2200      	movs	r2, #0
 800de84:	a901      	add	r1, sp, #4
 800de86:	480c      	ldr	r0, [pc, #48]	; (800deb8 <MX_RTC_Init+0x68>)
  sTime.Hours = 0;
 800de88:	f8ad 4004 	strh.w	r4, [sp, #4]
  sTime.Minutes = 0;
 800de8c:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800de90:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800de94:	f002 fb83 	bl	801059e <HAL_RTC_SetTime>
 800de98:	b108      	cbz	r0, 800de9e <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 800de9a:	f7ff ff69 	bl	800dd70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800de9e:	a906      	add	r1, sp, #24
 800dea0:	4b07      	ldr	r3, [pc, #28]	; (800dec0 <MX_RTC_Init+0x70>)
 800dea2:	f841 3d18 	str.w	r3, [r1, #-24]!
  sDate.Month = RTC_MONTH_AUGUST;
  sDate.Date = 2;
  sDate.Year = 20;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800dea6:	2200      	movs	r2, #0
 800dea8:	4803      	ldr	r0, [pc, #12]	; (800deb8 <MX_RTC_Init+0x68>)
 800deaa:	f002 fbe9 	bl	8010680 <HAL_RTC_SetDate>
 800deae:	b108      	cbz	r0, 800deb4 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 800deb0:	f7ff ff5e 	bl	800dd70 <Error_Handler>
  }

}
 800deb4:	b006      	add	sp, #24
 800deb6:	bd10      	pop	{r4, pc}
 800deb8:	20001490 	.word	0x20001490
 800debc:	40002800 	.word	0x40002800
 800dec0:	14020807 	.word	0x14020807

0800dec4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 800dec4:	6802      	ldr	r2, [r0, #0]
 800dec6:	4b03      	ldr	r3, [pc, #12]	; (800ded4 <HAL_RTC_MspInit+0x10>)
 800dec8:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800deca:	bf02      	ittt	eq
 800decc:	4b02      	ldreq	r3, [pc, #8]	; (800ded8 <HAL_RTC_MspInit+0x14>)
 800dece:	2201      	moveq	r2, #1
 800ded0:	601a      	streq	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800ded2:	4770      	bx	lr
 800ded4:	40002800 	.word	0x40002800
 800ded8:	42470e3c 	.word	0x42470e3c

0800dedc <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 800dedc:	4b05      	ldr	r3, [pc, #20]	; (800def4 <MX_SDIO_SD_Init+0x18>)
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800dede:	4906      	ldr	r1, [pc, #24]	; (800def8 <MX_SDIO_SD_Init+0x1c>)
 800dee0:	2200      	movs	r2, #0
 800dee2:	e9c3 1200 	strd	r1, r2, [r3]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800dee6:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800deea:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hsd.Init.ClockDiv = 3;
 800deee:	2203      	movs	r2, #3
 800def0:	619a      	str	r2, [r3, #24]

}
 800def2:	4770      	bx	lr
 800def4:	20001570 	.word	0x20001570
 800def8:	40012c00 	.word	0x40012c00

0800defc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800defc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df00:	4606      	mov	r6, r0
 800df02:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df04:	2214      	movs	r2, #20
 800df06:	2100      	movs	r1, #0
 800df08:	a803      	add	r0, sp, #12
 800df0a:	f008 f9ca 	bl	80162a2 <memset>
  if(sdHandle->Instance==SDIO)
 800df0e:	6832      	ldr	r2, [r6, #0]
 800df10:	4b4b      	ldr	r3, [pc, #300]	; (800e040 <HAL_SD_MspInit+0x144>)
 800df12:	429a      	cmp	r2, r3
 800df14:	f040 8091 	bne.w	800e03a <HAL_SD_MspInit+0x13e>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800df18:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800df1c:	2500      	movs	r5, #0
 800df1e:	9500      	str	r5, [sp, #0]
 800df20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df22:	4848      	ldr	r0, [pc, #288]	; (800e044 <HAL_SD_MspInit+0x148>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 800df24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df28:	645a      	str	r2, [r3, #68]	; 0x44
 800df2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df2c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800df30:	9200      	str	r2, [sp, #0]
 800df32:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800df34:	9501      	str	r5, [sp, #4]
 800df36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df38:	f042 0204 	orr.w	r2, r2, #4
 800df3c:	631a      	str	r2, [r3, #48]	; 0x30
 800df3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df40:	f002 0204 	and.w	r2, r2, #4
 800df44:	9201      	str	r2, [sp, #4]
 800df46:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800df48:	9502      	str	r5, [sp, #8]
 800df4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df4c:	f042 0208 	orr.w	r2, r2, #8
 800df50:	631a      	str	r2, [r3, #48]	; 0x30
 800df52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df54:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800df58:	240c      	movs	r4, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800df5a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df5c:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800df60:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df62:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800df66:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df68:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800df6c:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800df70:	e9cd 7406 	strd	r7, r4, [sp, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800df74:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df78:	f001 f900 	bl	800f17c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800df7c:	eb0d 0104 	add.w	r1, sp, r4
 800df80:	4831      	ldr	r0, [pc, #196]	; (800e048 <HAL_SD_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800df82:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df84:	e9cd 8903 	strd	r8, r9, [sp, #12]

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800df88:	4c30      	ldr	r4, [pc, #192]	; (800e04c <HAL_SD_MspInit+0x150>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df8a:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800df8e:	f001 f8f5 	bl	800f17c <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800df92:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 800e058 <HAL_SD_MspInit+0x15c>
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800df96:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800df98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800df9c:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800dfa0:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800dfa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfa8:	e9c4 9304 	strd	r9, r3, [r4, #16]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800dfac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800dfb0:	2320      	movs	r3, #32
 800dfb2:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800dfb6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800dfba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800dfbe:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dfc0:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800dfc4:	e9c4 5808 	strd	r5, r8, [r4, #32]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800dfc8:	e9c4 130b 	strd	r1, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800dfcc:	f000 fd70 	bl	800eab0 <HAL_DMA_Init>
 800dfd0:	b108      	cbz	r0, 800dfd6 <HAL_SD_MspInit+0xda>
    {
      Error_Handler();
 800dfd2:	f7ff fecd 	bl	800dd70 <Error_Handler>

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800dfd6:	4a1e      	ldr	r2, [pc, #120]	; (800e050 <HAL_SD_MspInit+0x154>)
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800dfd8:	6434      	str	r4, [r6, #64]	; 0x40
 800dfda:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800dfdc:	4c1d      	ldr	r4, [pc, #116]	; (800e054 <HAL_SD_MspInit+0x158>)
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800dfde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dfe2:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dfe6:	2140      	movs	r1, #64	; 0x40
 800dfe8:	2300      	movs	r3, #0
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800dfea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800dfee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dff2:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800dff6:	6223      	str	r3, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800dff8:	2704      	movs	r7, #4
 800dffa:	2303      	movs	r3, #3
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800dffc:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800e000:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 800e004:	2220      	movs	r2, #32
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e006:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800e00a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800e00e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800e012:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800e014:	e9c4 5206 	strd	r5, r2, [r4, #24]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800e018:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800e01c:	f000 fd48 	bl	800eab0 <HAL_DMA_Init>
 800e020:	b108      	cbz	r0, 800e026 <HAL_SD_MspInit+0x12a>
    {
      Error_Handler();
 800e022:	f7ff fea5 	bl	800dd70 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 1, 0);
 800e026:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800e028:	63f4      	str	r4, [r6, #60]	; 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 1, 0);
 800e02a:	2200      	movs	r2, #0
 800e02c:	2101      	movs	r1, #1
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800e02e:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 1, 0);
 800e030:	f000 fcc2 	bl	800e9b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800e034:	2031      	movs	r0, #49	; 0x31
 800e036:	f000 fcf3 	bl	800ea20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800e03a:	b009      	add	sp, #36	; 0x24
 800e03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e040:	40012c00 	.word	0x40012c00
 800e044:	40020800 	.word	0x40020800
 800e048:	40020c00 	.word	0x40020c00
 800e04c:	200014b0 	.word	0x200014b0
 800e050:	400264a0 	.word	0x400264a0
 800e054:	20001510 	.word	0x20001510
 800e058:	40026458 	.word	0x40026458

0800e05c <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{

  if(sdHandle->Instance==SDIO)
 800e05c:	6802      	ldr	r2, [r0, #0]
 800e05e:	4b0f      	ldr	r3, [pc, #60]	; (800e09c <HAL_SD_MspDeInit+0x40>)
 800e060:	429a      	cmp	r2, r3
{
 800e062:	b510      	push	{r4, lr}
 800e064:	4604      	mov	r4, r0
  if(sdHandle->Instance==SDIO)
 800e066:	d118      	bne.n	800e09a <HAL_SD_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN SDIO_MspDeInit 0 */

  /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();
 800e068:	4a0d      	ldr	r2, [pc, #52]	; (800e0a0 <HAL_SD_MspDeInit+0x44>)
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PC8     ------> SDIO_D0
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_8);
 800e06a:	480e      	ldr	r0, [pc, #56]	; (800e0a4 <HAL_SD_MspDeInit+0x48>)
    __HAL_RCC_SDIO_CLK_DISABLE();
 800e06c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e06e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e072:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_8);
 800e074:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800e078:	f001 f960 	bl	800f33c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 800e07c:	2104      	movs	r1, #4
 800e07e:	480a      	ldr	r0, [pc, #40]	; (800e0a8 <HAL_SD_MspDeInit+0x4c>)
 800e080:	f001 f95c 	bl	800f33c <HAL_GPIO_DeInit>

    /* SDIO DMA DeInit */
    HAL_DMA_DeInit(sdHandle->hdmarx);
 800e084:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e086:	f000 fd91 	bl	800ebac <HAL_DMA_DeInit>
    HAL_DMA_DeInit(sdHandle->hdmatx);
 800e08a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e08c:	f000 fd8e 	bl	800ebac <HAL_DMA_DeInit>

    /* SDIO interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 800e090:	2031      	movs	r0, #49	; 0x31
  /* USER CODE BEGIN SDIO_MspDeInit 1 */

  /* USER CODE END SDIO_MspDeInit 1 */
  }
}
 800e092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 800e096:	f000 bcd1 	b.w	800ea3c <HAL_NVIC_DisableIRQ>
}
 800e09a:	bd10      	pop	{r4, pc}
 800e09c:	40012c00 	.word	0x40012c00
 800e0a0:	40023800 	.word	0x40023800
 800e0a4:	40020800 	.word	0x40020800
 800e0a8:	40020c00 	.word	0x40020c00

0800e0ac <glcd_data>:
}
/*
 * SPI emulation
 * send data
 */
void glcd_data(uint8_t data) {
 800e0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint8_t bits = 0x80;
	ST7567_CMD_SET;
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	2102      	movs	r1, #2
void glcd_data(uint8_t data) {
 800e0b2:	4607      	mov	r7, r0
	ST7567_CMD_SET;
 800e0b4:	4819      	ldr	r0, [pc, #100]	; (800e11c <glcd_data+0x70>)
	ST7567_SCLK_RESET;
	ST7567_CS_RESET;

	while (bits) {
		ST7567_SCLK_RESET;
 800e0b6:	4e1a      	ldr	r6, [pc, #104]	; (800e120 <glcd_data+0x74>)
	ST7567_CMD_SET;
 800e0b8:	f001 f9d4 	bl	800f464 <HAL_GPIO_WritePin>
	ST7567_SCLK_RESET;
 800e0bc:	2200      	movs	r2, #0
 800e0be:	2120      	movs	r1, #32
 800e0c0:	4817      	ldr	r0, [pc, #92]	; (800e120 <glcd_data+0x74>)
 800e0c2:	f001 f9cf 	bl	800f464 <HAL_GPIO_WritePin>
	ST7567_CS_RESET;
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2180      	movs	r1, #128	; 0x80
 800e0ca:	4815      	ldr	r0, [pc, #84]	; (800e120 <glcd_data+0x74>)
 800e0cc:	f001 f9ca 	bl	800f464 <HAL_GPIO_WritePin>
 800e0d0:	2408      	movs	r4, #8
	uint8_t bits = 0x80;
 800e0d2:	2580      	movs	r5, #128	; 0x80
		ST7567_SCLK_RESET;
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	2120      	movs	r1, #32
 800e0d8:	4630      	mov	r0, r6
 800e0da:	f001 f9c3 	bl	800f464 <HAL_GPIO_WritePin>
		//st7567_usdelay(1);
		if (data & bits)
 800e0de:	ea17 0205 	ands.w	r2, r7, r5
			ST7567_SID_SET;
 800e0e2:	bf18      	it	ne
 800e0e4:	2201      	movne	r2, #1
		else
			ST7567_SID_RESET;
 800e0e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	f001 f9ba 	bl	800f464 <HAL_GPIO_WritePin>
		ST7567_SCLK_SET;
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	2120      	movs	r1, #32
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	f001 f9b5 	bl	800f464 <HAL_GPIO_WritePin>
	while (bits) {
 800e0fa:	3c01      	subs	r4, #1
		//st7567_usdelay(1);
		bits >>= 1;
 800e0fc:	ea4f 0555 	mov.w	r5, r5, lsr #1
	while (bits) {
 800e100:	d1e8      	bne.n	800e0d4 <glcd_data+0x28>
	}
	ST7567_CS_SET;
 800e102:	2201      	movs	r2, #1
 800e104:	2180      	movs	r1, #128	; 0x80
 800e106:	4806      	ldr	r0, [pc, #24]	; (800e120 <glcd_data+0x74>)
 800e108:	f001 f9ac 	bl	800f464 <HAL_GPIO_WritePin>
	ST7567_CMD_RESET;
 800e10c:	4622      	mov	r2, r4
 800e10e:	2102      	movs	r1, #2
 800e110:	4802      	ldr	r0, [pc, #8]	; (800e11c <glcd_data+0x70>)

}
 800e112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ST7567_CMD_RESET;
 800e116:	f001 b9a5 	b.w	800f464 <HAL_GPIO_WritePin>
 800e11a:	bf00      	nop
 800e11c:	40021000 	.word	0x40021000
 800e120:	40020400 	.word	0x40020400

0800e124 <glcd_command>:

void glcd_command(uint8_t command) {
 800e124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint8_t bits = 0x80;
	ST7567_CMD_RESET;
 800e126:	2200      	movs	r2, #0
 800e128:	2102      	movs	r1, #2
void glcd_command(uint8_t command) {
 800e12a:	4607      	mov	r7, r0
	ST7567_CMD_RESET;
 800e12c:	4819      	ldr	r0, [pc, #100]	; (800e194 <glcd_command+0x70>)
	ST7567_SCLK_RESET;
	ST7567_CS_RESET;

	while (bits) {
		ST7567_SCLK_RESET;
 800e12e:	4d1a      	ldr	r5, [pc, #104]	; (800e198 <glcd_command+0x74>)
	ST7567_CMD_RESET;
 800e130:	f001 f998 	bl	800f464 <HAL_GPIO_WritePin>
	ST7567_SCLK_RESET;
 800e134:	2200      	movs	r2, #0
 800e136:	2120      	movs	r1, #32
 800e138:	4817      	ldr	r0, [pc, #92]	; (800e198 <glcd_command+0x74>)
 800e13a:	f001 f993 	bl	800f464 <HAL_GPIO_WritePin>
	ST7567_CS_RESET;
 800e13e:	2200      	movs	r2, #0
 800e140:	2180      	movs	r1, #128	; 0x80
 800e142:	4815      	ldr	r0, [pc, #84]	; (800e198 <glcd_command+0x74>)
 800e144:	f001 f98e 	bl	800f464 <HAL_GPIO_WritePin>
 800e148:	2608      	movs	r6, #8
	uint8_t bits = 0x80;
 800e14a:	2480      	movs	r4, #128	; 0x80
		ST7567_SCLK_RESET;
 800e14c:	2200      	movs	r2, #0
 800e14e:	2120      	movs	r1, #32
 800e150:	4628      	mov	r0, r5
 800e152:	f001 f987 	bl	800f464 <HAL_GPIO_WritePin>
//		st7567_usdelay(1);
		if (command & bits)
 800e156:	ea17 0204 	ands.w	r2, r7, r4
			ST7567_SID_SET;
 800e15a:	bf18      	it	ne
 800e15c:	2201      	movne	r2, #1
		else
			ST7567_SID_RESET;
 800e15e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e162:	4628      	mov	r0, r5
 800e164:	f001 f97e 	bl	800f464 <HAL_GPIO_WritePin>
		ST7567_SCLK_SET;
 800e168:	2201      	movs	r2, #1
 800e16a:	2120      	movs	r1, #32
 800e16c:	4628      	mov	r0, r5
 800e16e:	f001 f979 	bl	800f464 <HAL_GPIO_WritePin>
	while (bits) {
 800e172:	3e01      	subs	r6, #1
//		st7567_usdelay(1);
		bits >>= 1;
 800e174:	ea4f 0454 	mov.w	r4, r4, lsr #1
	while (bits) {
 800e178:	d1e8      	bne.n	800e14c <glcd_command+0x28>
	}
	ST7567_CS_SET;
 800e17a:	2201      	movs	r2, #1
 800e17c:	2180      	movs	r1, #128	; 0x80
 800e17e:	4806      	ldr	r0, [pc, #24]	; (800e198 <glcd_command+0x74>)
 800e180:	f001 f970 	bl	800f464 <HAL_GPIO_WritePin>
	ST7567_CMD_SET;
 800e184:	2201      	movs	r2, #1
 800e186:	2102      	movs	r1, #2
 800e188:	4802      	ldr	r0, [pc, #8]	; (800e194 <glcd_command+0x70>)
}
 800e18a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ST7567_CMD_SET;
 800e18e:	f001 b969 	b.w	800f464 <HAL_GPIO_WritePin>
 800e192:	bf00      	nop
 800e194:	40021000 	.word	0x40021000
 800e198:	40020400 	.word	0x40020400

0800e19c <glcd_pixel>:
/*
 *
 */
void glcd_pixel(unsigned char x, unsigned char y, unsigned char colour) {
 800e19c:	4b16      	ldr	r3, [pc, #88]	; (800e1f8 <glcd_pixel+0x5c>)
 800e19e:	b570      	push	{r4, r5, r6, lr}
 800e1a0:	881d      	ldrh	r5, [r3, #0]
 800e1a2:	4b16      	ldr	r3, [pc, #88]	; (800e1fc <glcd_pixel+0x60>)
 800e1a4:	681c      	ldr	r4, [r3, #0]
//		return;

//	// Real screen coordinates are 0-63, not 1-64.
//	x -= 1;
//	y -= 1;
	if (glcd_flipped == 0 || glcd_flipped == 1) {
 800e1a6:	4b16      	ldr	r3, [pc, #88]	; (800e200 <glcd_pixel+0x64>)
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d811      	bhi.n	800e1d2 <glcd_pixel+0x36>
 800e1ae:	f001 0607 	and.w	r6, r1, #7
		unsigned short array_pos = x + ((y / 8) * glcd_width);
 800e1b2:	08c9      	lsrs	r1, r1, #3
 800e1b4:	fb11 f105 	smulbb	r1, r1, r5
 800e1b8:	4408      	add	r0, r1
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	b280      	uxth	r0, r0
 800e1be:	40b3      	lsls	r3, r6
 800e1c0:	b25b      	sxtb	r3, r3
 800e1c2:	5621      	ldrsb	r1, [r4, r0]
#ifdef ST7565_DIRTY_PAGES
	#warning ** ST7565_DIRTY_PAGES enabled, only changed pages will be written to the GLCD **
		glcd_dirty_pages |= 1 << (array_pos / 128);
	#endif

		if (colour) {
 800e1c4:	b112      	cbz	r2, 800e1cc <glcd_pixel+0x30>
			glcd_buffer[array_pos] |= 1 << (y % 8);
 800e1c6:	430b      	orrs	r3, r1
		} else {
			glcd_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 800e1c8:	5423      	strb	r3, [r4, r0]
			glcd_buffer[array_pos] |= 1 << (x % 8);
		} else {
			glcd_buffer[array_pos] &= 0xFF ^ (1 << (x % 8));
		}
	}
}
 800e1ca:	bd70      	pop	{r4, r5, r6, pc}
			glcd_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 800e1cc:	ea21 0303 	bic.w	r3, r1, r3
 800e1d0:	e7fa      	b.n	800e1c8 <glcd_pixel+0x2c>
		unsigned short array_pos = (x / 8 + (y * glcd_width) / 8);
 800e1d2:	434d      	muls	r5, r1
 800e1d4:	08c1      	lsrs	r1, r0, #3
 800e1d6:	eb01 01d5 	add.w	r1, r1, r5, lsr #3
 800e1da:	b289      	uxth	r1, r1
 800e1dc:	f000 0007 	and.w	r0, r0, #7
 800e1e0:	2501      	movs	r5, #1
 800e1e2:	fa05 f000 	lsl.w	r0, r5, r0
 800e1e6:	5663      	ldrsb	r3, [r4, r1]
 800e1e8:	b240      	sxtb	r0, r0
		if (colour) {
 800e1ea:	b112      	cbz	r2, 800e1f2 <glcd_pixel+0x56>
			glcd_buffer[array_pos] |= 1 << (x % 8);
 800e1ec:	4303      	orrs	r3, r0
			glcd_buffer[array_pos] &= 0xFF ^ (1 << (x % 8));
 800e1ee:	5463      	strb	r3, [r4, r1]
}
 800e1f0:	e7eb      	b.n	800e1ca <glcd_pixel+0x2e>
			glcd_buffer[array_pos] &= 0xFF ^ (1 << (x % 8));
 800e1f2:	ea23 0300 	bic.w	r3, r3, r0
 800e1f6:	e7fa      	b.n	800e1ee <glcd_pixel+0x52>
 800e1f8:	200015f8 	.word	0x200015f8
 800e1fc:	200015f4 	.word	0x200015f4
 800e200:	2000022a 	.word	0x2000022a

0800e204 <glcd_blank>:

void glcd_blank() {
	// Reset the internal buffer
	for (int n = 1; n <= (SCREEN_WIDTH * SCREEN_HEIGHT / 8) - 1; n++) {
		glcd_buffer[n] = 0;
 800e204:	480f      	ldr	r0, [pc, #60]	; (800e244 <glcd_blank+0x40>)
void glcd_blank() {
 800e206:	b538      	push	{r3, r4, r5, lr}
		glcd_buffer[n] = 0;
 800e208:	2100      	movs	r1, #0
	for (int n = 1; n <= (SCREEN_WIDTH * SCREEN_HEIGHT / 8) - 1; n++) {
 800e20a:	2301      	movs	r3, #1
		glcd_buffer[n] = 0;
 800e20c:	6802      	ldr	r2, [r0, #0]
 800e20e:	54d1      	strb	r1, [r2, r3]
	for (int n = 1; n <= (SCREEN_WIDTH * SCREEN_HEIGHT / 8) - 1; n++) {
 800e210:	3301      	adds	r3, #1
 800e212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e216:	d1f9      	bne.n	800e20c <glcd_blank+0x8>
	}

	// Clear the actual screen
	for (int y = 0; y < 8; y++) {
 800e218:	2400      	movs	r4, #0
		glcd_command(GLCD_CMD_SET_PAGE | y);
 800e21a:	f064 004f 	orn	r0, r4, #79	; 0x4f
 800e21e:	b2c0      	uxtb	r0, r0
 800e220:	f7ff ff80 	bl	800e124 <glcd_command>

		// Reset column to 0 (the left side)
		glcd_command(GLCD_CMD_COLUMN_LOWER);
 800e224:	2000      	movs	r0, #0
 800e226:	f7ff ff7d 	bl	800e124 <glcd_command>
		glcd_command(GLCD_CMD_COLUMN_UPPER);
 800e22a:	2010      	movs	r0, #16
 800e22c:	f7ff ff7a 	bl	800e124 <glcd_command>
 800e230:	2584      	movs	r5, #132	; 0x84

		// We iterate to 132 as the internal buffer is 65*132, not
		// 64*124.
		for (int x = 0; x < 132; x++) {
			glcd_data(0x00);
 800e232:	2000      	movs	r0, #0
 800e234:	f7ff ff3a 	bl	800e0ac <glcd_data>
		for (int x = 0; x < 132; x++) {
 800e238:	3d01      	subs	r5, #1
 800e23a:	d1fa      	bne.n	800e232 <glcd_blank+0x2e>
	for (int y = 0; y < 8; y++) {
 800e23c:	3401      	adds	r4, #1
 800e23e:	2c08      	cmp	r4, #8
 800e240:	d1eb      	bne.n	800e21a <glcd_blank+0x16>
		}
	}
}
 800e242:	bd38      	pop	{r3, r4, r5, pc}
 800e244:	200015f4 	.word	0x200015f4

0800e248 <glcd_refresh>:

void glcd_refresh() {
 800e248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		// pixels differently, the ST7565_REVERSE define allows this to
		// be controlled if necessary.
#ifdef ST7565_REVERSE
		if (!glcd_flipped) {
#else
		if (glcd_flipped == 0 || glcd_flipped == 2) {
 800e24c:	4e1c      	ldr	r6, [pc, #112]	; (800e2c0 <glcd_refresh+0x78>)
 800e24e:	4f1d      	ldr	r7, [pc, #116]	; (800e2c4 <glcd_refresh+0x7c>)
	for (int y = 0; y < 8; y++) {
 800e250:	2400      	movs	r4, #0
 800e252:	46b0      	mov	r8, r6
		glcd_command(GLCD_CMD_SET_PAGE | y);
 800e254:	f064 004f 	orn	r0, r4, #79	; 0x4f
 800e258:	b2c0      	uxtb	r0, r0
 800e25a:	f7ff ff63 	bl	800e124 <glcd_command>
		if (glcd_flipped == 0 || glcd_flipped == 2) {
 800e25e:	7833      	ldrb	r3, [r6, #0]
 800e260:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800e2c8 <glcd_refresh+0x80>
 800e264:	f013 0ffd 	tst.w	r3, #253	; 0xfd
#endif
			glcd_command(GLCD_CMD_COLUMN_LOWER | 4);
 800e268:	bf0c      	ite	eq
 800e26a:	2004      	moveq	r0, #4
		} else {
			glcd_command(GLCD_CMD_COLUMN_LOWER);
 800e26c:	2000      	movne	r0, #0
 800e26e:	f7ff ff59 	bl	800e124 <glcd_command>
		}
		glcd_command(GLCD_CMD_COLUMN_UPPER);
 800e272:	2010      	movs	r0, #16
 800e274:	f7ff ff56 	bl	800e124 <glcd_command>
		if (glcd_flipped == 0 || glcd_flipped == 1) {
 800e278:	f898 3000 	ldrb.w	r3, [r8]
 800e27c:	2b01      	cmp	r3, #1
			for (int x = 0; x < 128; x++) {
 800e27e:	f04f 0500 	mov.w	r5, #0
		if (glcd_flipped == 0 || glcd_flipped == 1) {
 800e282:	d80f      	bhi.n	800e2a4 <glcd_refresh+0x5c>
				glcd_data(glcd_buffer[y * glcd_width + x]);
 800e284:	883b      	ldrh	r3, [r7, #0]
 800e286:	f8d9 2000 	ldr.w	r2, [r9]
 800e28a:	fb04 2303 	mla	r3, r4, r3, r2
 800e28e:	5d58      	ldrb	r0, [r3, r5]
			for (int x = 0; x < 128; x++) {
 800e290:	3501      	adds	r5, #1
				glcd_data(glcd_buffer[y * glcd_width + x]);
 800e292:	f7ff ff0b 	bl	800e0ac <glcd_data>
			for (int x = 0; x < 128; x++) {
 800e296:	2d80      	cmp	r5, #128	; 0x80
 800e298:	d1f4      	bne.n	800e284 <glcd_refresh+0x3c>
	for (int y = 0; y < 8; y++) {
 800e29a:	3401      	adds	r4, #1
 800e29c:	2c08      	cmp	r4, #8
 800e29e:	d1d9      	bne.n	800e254 <glcd_refresh+0xc>
#ifdef ST7565_DIRTY_PAGES
    // All pages have now been updated, reset the indicator.
    glcd_dirty_pages = 0;
#endif

}
 800e2a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				glcd_data(glcd_buffer[y + x * glcd_width / 8]);
 800e2a4:	883b      	ldrh	r3, [r7, #0]
 800e2a6:	fb05 f203 	mul.w	r2, r5, r3
 800e2aa:	f8d9 3000 	ldr.w	r3, [r9]
 800e2ae:	eb03 03e2 	add.w	r3, r3, r2, asr #3
			for (int x = 0; x < 128; x++) {
 800e2b2:	3501      	adds	r5, #1
				glcd_data(glcd_buffer[y + x * glcd_width / 8]);
 800e2b4:	5d18      	ldrb	r0, [r3, r4]
 800e2b6:	f7ff fef9 	bl	800e0ac <glcd_data>
			for (int x = 0; x < 128; x++) {
 800e2ba:	2d80      	cmp	r5, #128	; 0x80
 800e2bc:	d1f2      	bne.n	800e2a4 <glcd_refresh+0x5c>
 800e2be:	e7ec      	b.n	800e29a <glcd_refresh+0x52>
 800e2c0:	2000022a 	.word	0x2000022a
 800e2c4:	200015f8 	.word	0x200015f8
 800e2c8:	200015f4 	.word	0x200015f4

0800e2cc <glcd_backlight>:
/*
 *
 */
void glcd_backlight(uint8_t brightness) {
 800e2cc:	b510      	push	{r4, lr}
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800e2ce:	2210      	movs	r2, #16
void glcd_backlight(uint8_t brightness) {
 800e2d0:	b088      	sub	sp, #32
 800e2d2:	4604      	mov	r4, r0
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	eb0d 0002 	add.w	r0, sp, r2
 800e2da:	f007 ffe2 	bl	80162a2 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = (uint16_t) (__HAL_TIM_GET_AUTORELOAD(&DISP_BACK_TIMER)
 800e2de:	480d      	ldr	r0, [pc, #52]	; (800e314 <glcd_backlight+0x48>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e2e0:	2360      	movs	r3, #96	; 0x60
 800e2e2:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = (uint16_t) (__HAL_TIM_GET_AUTORELOAD(&DISP_BACK_TIMER)
 800e2e4:	6803      	ldr	r3, [r0, #0]
 800e2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e8:	fb13 f304 	smulbb	r3, r3, r4
			* brightness) / 100;
 800e2ec:	2264      	movs	r2, #100	; 0x64
 800e2ee:	b29b      	uxth	r3, r3
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&DISP_BACK_TIMER, &sConfigOC,
 800e2f0:	a901      	add	r1, sp, #4
			* brightness) / 100;
 800e2f2:	fbb3 f3f2 	udiv	r3, r3, r2
	if (HAL_TIM_PWM_ConfigChannel(&DISP_BACK_TIMER, &sConfigOC,
 800e2f6:	220c      	movs	r2, #12
			* brightness) / 100;
 800e2f8:	9302      	str	r3, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800e2fa:	2302      	movs	r3, #2
 800e2fc:	9303      	str	r3, [sp, #12]
	if (HAL_TIM_PWM_ConfigChannel(&DISP_BACK_TIMER, &sConfigOC,
 800e2fe:	f003 f8e7 	bl	80114d0 <HAL_TIM_PWM_ConfigChannel>
 800e302:	b108      	cbz	r0, 800e308 <glcd_backlight+0x3c>
	DISP_BACK_CHANNEL) != HAL_OK) {
		Error_Handler();
 800e304:	f7ff fd34 	bl	800dd70 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&DISP_BACK_TIMER, DISP_BACK_CHANNEL);
 800e308:	210c      	movs	r1, #12
 800e30a:	4802      	ldr	r0, [pc, #8]	; (800e314 <glcd_backlight+0x48>)
 800e30c:	f003 fa0e 	bl	801172c <HAL_TIM_PWM_Start>
}
 800e310:	b008      	add	sp, #32
 800e312:	bd10      	pop	{r4, pc}
 800e314:	2000163c 	.word	0x2000163c

0800e318 <glcd_init>:
/*
 *
 */
void glcd_init(uint16_t width, uint16_t height) {
 800e318:	b570      	push	{r4, r5, r6, lr}
//	unsigned char glcd_buffer[SCREEN_WIDTH * SCREEN_HEIGHT / 8];
	free(glcd_buffer);
 800e31a:	4c2e      	ldr	r4, [pc, #184]	; (800e3d4 <glcd_init+0xbc>)
void glcd_init(uint16_t width, uint16_t height) {
 800e31c:	4605      	mov	r5, r0
	free(glcd_buffer);
 800e31e:	6820      	ldr	r0, [r4, #0]
void glcd_init(uint16_t width, uint16_t height) {
 800e320:	460e      	mov	r6, r1
	free(glcd_buffer);
 800e322:	f007 ffab 	bl	801627c <free>
	glcd_width = width;
 800e326:	4b2c      	ldr	r3, [pc, #176]	; (800e3d8 <glcd_init+0xc0>)
 800e328:	801d      	strh	r5, [r3, #0]
	glcd_height = height;
 800e32a:	4b2c      	ldr	r3, [pc, #176]	; (800e3dc <glcd_init+0xc4>)
	glcd_buffer = malloc(
 800e32c:	fb06 f005 	mul.w	r0, r6, r5
	glcd_height = height;
 800e330:	801e      	strh	r6, [r3, #0]
	glcd_buffer = malloc(
 800e332:	f007 ff9b 	bl	801626c <malloc>
 800e336:	6020      	str	r0, [r4, #0]
			(sizeof(unsigned char)) * (size_t) glcd_width
					* (size_t) glcd_height);

	// Select the chip
	ST7567_CS_RESET;
 800e338:	4c29      	ldr	r4, [pc, #164]	; (800e3e0 <glcd_init+0xc8>)

	ST7567_RST_RESET;
 800e33a:	4d2a      	ldr	r5, [pc, #168]	; (800e3e4 <glcd_init+0xcc>)
	ST7567_CS_RESET;
 800e33c:	4620      	mov	r0, r4
 800e33e:	2200      	movs	r2, #0
 800e340:	2180      	movs	r1, #128	; 0x80
 800e342:	f001 f88f 	bl	800f464 <HAL_GPIO_WritePin>
	ST7567_RST_RESET;
 800e346:	2200      	movs	r2, #0
 800e348:	2101      	movs	r1, #1
 800e34a:	4628      	mov	r0, r5
 800e34c:	f001 f88a 	bl	800f464 <HAL_GPIO_WritePin>

	// Datasheet says "wait for power to stabilise" but gives
	// no specific time!
	HAL_Delay(50);
 800e350:	2032      	movs	r0, #50	; 0x32
 800e352:	f000 fb0b 	bl	800e96c <HAL_Delay>

	ST7567_RST_SET;
 800e356:	2201      	movs	r2, #1
 800e358:	4611      	mov	r1, r2
 800e35a:	4628      	mov	r0, r5
 800e35c:	f001 f882 	bl	800f464 <HAL_GPIO_WritePin>
	//software reset
	glcd_command(GLCD_CMD_RESET);
 800e360:	20e2      	movs	r0, #226	; 0xe2
 800e362:	f7ff fedf 	bl	800e124 <glcd_command>
	// Set LCD bias to 1/9th
	glcd_command(GLCD_CMD_BIAS_7);
 800e366:	20a3      	movs	r0, #163	; 0xa3
 800e368:	f7ff fedc 	bl	800e124 <glcd_command>

	// Horizontal output direction (ADC segment driver selection)
	glcd_command(GLCD_CMD_HORIZONTAL_REVERSE);
 800e36c:	20a1      	movs	r0, #161	; 0xa1
 800e36e:	f7ff fed9 	bl	800e124 <glcd_command>

	// Vertical output direction (common output mode selection)
	glcd_command(GLCD_CMD_VERTICAL_REVERSE);
 800e372:	20c8      	movs	r0, #200	; 0xc8
 800e374:	f7ff fed6 	bl	800e124 <glcd_command>

	// Set internal resistor.  A suitable middle value is used as
	// the default.
	glcd_command(GLCD_CMD_RESISTOR | 0x04);
 800e378:	2024      	movs	r0, #36	; 0x24
 800e37a:	f7ff fed3 	bl	800e124 <glcd_command>

	// Power control setting (datasheet step 7)
	// Note: Skipping straight to 0x7 works with my hardware.
	glcd_command(GLCD_CMD_POWER_CONTROL | 0x4);
 800e37e:	202c      	movs	r0, #44	; 0x2c
 800e380:	f7ff fed0 	bl	800e124 <glcd_command>
	//	DelayMs(50);
	glcd_command(GLCD_CMD_POWER_CONTROL | 0x6);
 800e384:	202e      	movs	r0, #46	; 0x2e
 800e386:	f7ff fecd 	bl	800e124 <glcd_command>
	//	DelayMs(50);
	glcd_command(GLCD_CMD_POWER_CONTROL | 0x7);
 800e38a:	202f      	movs	r0, #47	; 0x2f
 800e38c:	f7ff feca 	bl	800e124 <glcd_command>
	//	DelayMs(10);

	// Volume set (brightness control).  A middle value is used here
	// also.
	glcd_command(GLCD_CMD_VOLUME_MODE);
 800e390:	2081      	movs	r0, #129	; 0x81
 800e392:	f7ff fec7 	bl	800e124 <glcd_command>
	glcd_command(0x10);
 800e396:	2010      	movs	r0, #16
 800e398:	f7ff fec4 	bl	800e124 <glcd_command>

	// Reset start position to the top
	glcd_command(GLCD_CMD_DISPLAY_START);
 800e39c:	2040      	movs	r0, #64	; 0x40
 800e39e:	f7ff fec1 	bl	800e124 <glcd_command>

	// Turn the display on
	glcd_command(GLCD_CMD_DISPLAY_ON);
 800e3a2:	20af      	movs	r0, #175	; 0xaf
 800e3a4:	f7ff febe 	bl	800e124 <glcd_command>

	// Unselect the chip
	ST7567_CS_SET;
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	2180      	movs	r1, #128	; 0x80
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f001 f859 	bl	800f464 <HAL_GPIO_WritePin>
	glcd_blank();
 800e3b2:	f7ff ff27 	bl	800e204 <glcd_blank>
	glcd_backlight(50);
 800e3b6:	2032      	movs	r0, #50	; 0x32
 800e3b8:	f7ff ff88 	bl	800e2cc <glcd_backlight>
 */
void glcd_contrast(char resistor_ratio, char contrast) {
	if (resistor_ratio > 7 || contrast > 63)
		return;

	glcd_command(GLCD_CMD_RESISTOR | resistor_ratio);
 800e3bc:	2024      	movs	r0, #36	; 0x24
 800e3be:	f7ff feb1 	bl	800e124 <glcd_command>
	glcd_command(GLCD_CMD_VOLUME_MODE);
 800e3c2:	2081      	movs	r0, #129	; 0x81
 800e3c4:	f7ff feae 	bl	800e124 <glcd_command>
	glcd_command(contrast);
 800e3c8:	2010      	movs	r0, #16
}
 800e3ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	glcd_command(contrast);
 800e3ce:	f7ff bea9 	b.w	800e124 <glcd_command>
 800e3d2:	bf00      	nop
 800e3d4:	200015f4 	.word	0x200015f4
 800e3d8:	200015f8 	.word	0x200015f8
 800e3dc:	200015fa 	.word	0x200015fa
 800e3e0:	40020400 	.word	0x40020400
 800e3e4:	40021000 	.word	0x40021000

0800e3e8 <glcd_flip_screen>:
void glcd_flip_screen(unsigned char flip) {
 800e3e8:	b508      	push	{r3, lr}
	switch (flip) {
 800e3ea:	2803      	cmp	r0, #3
 800e3ec:	d80c      	bhi.n	800e408 <glcd_flip_screen+0x20>
 800e3ee:	e8df f000 	tbb	[pc, r0]
 800e3f2:	0c02      	.short	0x0c02
 800e3f4:	1e15      	.short	0x1e15
		glcd_command(GLCD_CMD_HORIZONTAL_REVERSE);
 800e3f6:	20a1      	movs	r0, #161	; 0xa1
 800e3f8:	f7ff fe94 	bl	800e124 <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_NORMAL);
 800e3fc:	20c0      	movs	r0, #192	; 0xc0
 800e3fe:	f7ff fe91 	bl	800e124 <glcd_command>
		glcd_flipped = 0;
 800e402:	4b0f      	ldr	r3, [pc, #60]	; (800e440 <glcd_flip_screen+0x58>)
 800e404:	2200      	movs	r2, #0
		glcd_flipped = 3;
 800e406:	701a      	strb	r2, [r3, #0]
}
 800e408:	bd08      	pop	{r3, pc}
		glcd_command(GLCD_CMD_HORIZONTAL_NORMAL);
 800e40a:	20a0      	movs	r0, #160	; 0xa0
 800e40c:	f7ff fe8a 	bl	800e124 <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_REVERSE);
 800e410:	20c8      	movs	r0, #200	; 0xc8
 800e412:	f7ff fe87 	bl	800e124 <glcd_command>
		glcd_flipped = 1;
 800e416:	4b0a      	ldr	r3, [pc, #40]	; (800e440 <glcd_flip_screen+0x58>)
 800e418:	2201      	movs	r2, #1
 800e41a:	e7f4      	b.n	800e406 <glcd_flip_screen+0x1e>
		glcd_command(GLCD_CMD_HORIZONTAL_REVERSE);
 800e41c:	20a1      	movs	r0, #161	; 0xa1
 800e41e:	f7ff fe81 	bl	800e124 <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_REVERSE);
 800e422:	20c8      	movs	r0, #200	; 0xc8
 800e424:	f7ff fe7e 	bl	800e124 <glcd_command>
		glcd_flipped = 2;
 800e428:	4b05      	ldr	r3, [pc, #20]	; (800e440 <glcd_flip_screen+0x58>)
 800e42a:	2202      	movs	r2, #2
 800e42c:	e7eb      	b.n	800e406 <glcd_flip_screen+0x1e>
		glcd_command(GLCD_CMD_HORIZONTAL_NORMAL);
 800e42e:	20a0      	movs	r0, #160	; 0xa0
 800e430:	f7ff fe78 	bl	800e124 <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_NORMAL);
 800e434:	20c0      	movs	r0, #192	; 0xc0
 800e436:	f7ff fe75 	bl	800e124 <glcd_command>
		glcd_flipped = 3;
 800e43a:	4b01      	ldr	r3, [pc, #4]	; (800e440 <glcd_flip_screen+0x58>)
 800e43c:	2203      	movs	r2, #3
 800e43e:	e7e2      	b.n	800e406 <glcd_flip_screen+0x1e>
 800e440:	2000022a 	.word	0x2000022a

0800e444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e444:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e446:	4b0c      	ldr	r3, [pc, #48]	; (800e478 <HAL_MspInit+0x34>)
 800e448:	2100      	movs	r1, #0
 800e44a:	9100      	str	r1, [sp, #0]
 800e44c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e44e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e452:	645a      	str	r2, [r3, #68]	; 0x44
 800e454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e456:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800e45a:	9200      	str	r2, [sp, #0]
 800e45c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e45e:	9101      	str	r1, [sp, #4]
 800e460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e462:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e466:	641a      	str	r2, [r3, #64]	; 0x40
 800e468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e46a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e46e:	9301      	str	r3, [sp, #4]
 800e470:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e472:	b002      	add	sp, #8
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	40023800 	.word	0x40023800

0800e47c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e47c:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800e47e:	4601      	mov	r1, r0
{
 800e480:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800e482:	2200      	movs	r2, #0
 800e484:	2019      	movs	r0, #25
 800e486:	f000 fa97 	bl	800e9b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e48a:	2019      	movs	r0, #25
 800e48c:	f000 fac8 	bl	800ea20 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e490:	2500      	movs	r5, #0
 800e492:	4b15      	ldr	r3, [pc, #84]	; (800e4e8 <HAL_InitTick+0x6c>)
 800e494:	9502      	str	r5, [sp, #8]
 800e496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800e498:	4c14      	ldr	r4, [pc, #80]	; (800e4ec <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e49a:	f042 0201 	orr.w	r2, r2, #1
 800e49e:	645a      	str	r2, [r3, #68]	; 0x44
 800e4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4a2:	f003 0301 	and.w	r3, r3, #1
 800e4a6:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e4a8:	a901      	add	r1, sp, #4
 800e4aa:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e4ac:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e4ae:	f001 fea5 	bl	80101fc <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800e4b2:	f001 fe93 	bl	80101dc <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800e4b6:	4b0e      	ldr	r3, [pc, #56]	; (800e4f0 <HAL_InitTick+0x74>)
 800e4b8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800e4ba:	f240 33e7 	movw	r3, #999	; 0x3e7
 800e4be:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800e4c0:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e4c2:	4b0c      	ldr	r3, [pc, #48]	; (800e4f4 <HAL_InitTick+0x78>)
 800e4c4:	fbb0 f0f3 	udiv	r0, r0, r3
 800e4c8:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800e4ca:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800e4cc:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800e4ce:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e4d0:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800e4d2:	f002 ff93 	bl	80113fc <HAL_TIM_Base_Init>
 800e4d6:	b920      	cbnz	r0, 800e4e2 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f002 fe71 	bl	80111c0 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 800e4de:	b009      	add	sp, #36	; 0x24
 800e4e0:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800e4e2:	2001      	movs	r0, #1
 800e4e4:	e7fb      	b.n	800e4de <HAL_InitTick+0x62>
 800e4e6:	bf00      	nop
 800e4e8:	40023800 	.word	0x40023800
 800e4ec:	200015fc 	.word	0x200015fc
 800e4f0:	40010000 	.word	0x40010000
 800e4f4:	000f4240 	.word	0x000f4240

0800e4f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e4f8:	e7fe      	b.n	800e4f8 <NMI_Handler>

0800e4fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e4fa:	e7fe      	b.n	800e4fa <HardFault_Handler>

0800e4fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e4fc:	e7fe      	b.n	800e4fc <MemManage_Handler>

0800e4fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e4fe:	e7fe      	b.n	800e4fe <BusFault_Handler>

0800e500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e500:	e7fe      	b.n	800e500 <UsageFault_Handler>

0800e502 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e502:	4770      	bx	lr

0800e504 <DebugMon_Handler>:
 800e504:	4770      	bx	lr

0800e506 <PendSV_Handler>:
 800e506:	4770      	bx	lr

0800e508 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e508:	4801      	ldr	r0, [pc, #4]	; (800e510 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800e50a:	f002 be6e 	b.w	80111ea <HAL_TIM_IRQHandler>
 800e50e:	bf00      	nop
 800e510:	200015fc 	.word	0x200015fc

0800e514 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800e514:	4801      	ldr	r0, [pc, #4]	; (800e51c <USART2_IRQHandler+0x8>)
 800e516:	f003 bb37 	b.w	8011b88 <HAL_UART_IRQHandler>
 800e51a:	bf00      	nop
 800e51c:	200016bc 	.word	0x200016bc

0800e520 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800e520:	4801      	ldr	r0, [pc, #4]	; (800e528 <USART3_IRQHandler+0x8>)
 800e522:	f003 bb31 	b.w	8011b88 <HAL_UART_IRQHandler>
 800e526:	bf00      	nop
 800e528:	2000167c 	.word	0x2000167c

0800e52c <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800e52c:	4801      	ldr	r0, [pc, #4]	; (800e534 <SDIO_IRQHandler+0x8>)
 800e52e:	f002 bcad 	b.w	8010e8c <HAL_SD_IRQHandler>
 800e532:	bf00      	nop
 800e534:	20001570 	.word	0x20001570

0800e538 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800e538:	4801      	ldr	r0, [pc, #4]	; (800e540 <DMA2_Stream3_IRQHandler+0x8>)
 800e53a:	f000 bbad 	b.w	800ec98 <HAL_DMA_IRQHandler>
 800e53e:	bf00      	nop
 800e540:	200014b0 	.word	0x200014b0

0800e544 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800e544:	4801      	ldr	r0, [pc, #4]	; (800e54c <DMA2_Stream6_IRQHandler+0x8>)
 800e546:	f000 bba7 	b.w	800ec98 <HAL_DMA_IRQHandler>
 800e54a:	bf00      	nop
 800e54c:	20001510 	.word	0x20001510

0800e550 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800e550:	4801      	ldr	r0, [pc, #4]	; (800e558 <OTG_HS_IRQHandler+0x8>)
 800e552:	f001 b883 	b.w	800f65c <HAL_HCD_IRQHandler>
 800e556:	bf00      	nop
 800e558:	20005bd8 	.word	0x20005bd8

0800e55c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e55c:	4b0b      	ldr	r3, [pc, #44]	; (800e58c <_sbrk+0x30>)
 800e55e:	6819      	ldr	r1, [r3, #0]
{
 800e560:	b510      	push	{r4, lr}
 800e562:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 800e564:	b909      	cbnz	r1, 800e56a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800e566:	490a      	ldr	r1, [pc, #40]	; (800e590 <_sbrk+0x34>)
 800e568:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e56a:	6818      	ldr	r0, [r3, #0]
 800e56c:	4909      	ldr	r1, [pc, #36]	; (800e594 <_sbrk+0x38>)
 800e56e:	4c0a      	ldr	r4, [pc, #40]	; (800e598 <_sbrk+0x3c>)
 800e570:	4402      	add	r2, r0
 800e572:	1b09      	subs	r1, r1, r4
 800e574:	428a      	cmp	r2, r1
 800e576:	d906      	bls.n	800e586 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800e578:	f007 fe4e 	bl	8016218 <__errno>
 800e57c:	230c      	movs	r3, #12
 800e57e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800e580:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800e584:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800e586:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 800e588:	e7fc      	b.n	800e584 <_sbrk+0x28>
 800e58a:	bf00      	nop
 800e58c:	2000022c 	.word	0x2000022c
 800e590:	20005ea0 	.word	0x20005ea0
 800e594:	20020000 	.word	0x20020000
 800e598:	00001000 	.word	0x00001000

0800e59c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e59c:	4b05      	ldr	r3, [pc, #20]	; (800e5b4 <SystemInit+0x18>)
 800e59e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e5a2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800e5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e5aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e5ae:	609a      	str	r2, [r3, #8]
#endif
}
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	e000ed00 	.word	0xe000ed00

0800e5b8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 800e5b8:	6802      	ldr	r2, [r0, #0]
 800e5ba:	4b09      	ldr	r3, [pc, #36]	; (800e5e0 <HAL_TIM_Base_MspInit+0x28>)
 800e5bc:	429a      	cmp	r2, r3
{
 800e5be:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM4)
 800e5c0:	d10b      	bne.n	800e5da <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	9301      	str	r3, [sp, #4]
 800e5c6:	4b07      	ldr	r3, [pc, #28]	; (800e5e4 <HAL_TIM_Base_MspInit+0x2c>)
 800e5c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5ca:	f042 0204 	orr.w	r2, r2, #4
 800e5ce:	641a      	str	r2, [r3, #64]	; 0x40
 800e5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d2:	f003 0304 	and.w	r3, r3, #4
 800e5d6:	9301      	str	r3, [sp, #4]
 800e5d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800e5da:	b002      	add	sp, #8
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	40000800 	.word	0x40000800
 800e5e4:	40023800 	.word	0x40023800

0800e5e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e5e8:	b510      	push	{r4, lr}
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5ee:	2214      	movs	r2, #20
 800e5f0:	2100      	movs	r1, #0
 800e5f2:	a801      	add	r0, sp, #4
 800e5f4:	f007 fe55 	bl	80162a2 <memset>
  if(timHandle->Instance==TIM4)
 800e5f8:	6822      	ldr	r2, [r4, #0]
 800e5fa:	4b0d      	ldr	r3, [pc, #52]	; (800e630 <HAL_TIM_MspPostInit+0x48>)
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d115      	bne.n	800e62c <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e600:	2300      	movs	r3, #0
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	4b0b      	ldr	r3, [pc, #44]	; (800e634 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = DISP_LEDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(DISP_LEDA_GPIO_Port, &GPIO_InitStruct);
 800e606:	480c      	ldr	r0, [pc, #48]	; (800e638 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e60a:	f042 0202 	orr.w	r2, r2, #2
 800e60e:	631a      	str	r2, [r3, #48]	; 0x30
 800e610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e612:	f003 0302 	and.w	r3, r3, #2
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e61a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e61e:	2302      	movs	r3, #2
    HAL_GPIO_Init(DISP_LEDA_GPIO_Port, &GPIO_InitStruct);
 800e620:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e622:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e626:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISP_LEDA_GPIO_Port, &GPIO_InitStruct);
 800e628:	f000 fda8 	bl	800f17c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800e62c:	b006      	add	sp, #24
 800e62e:	bd10      	pop	{r4, pc}
 800e630:	40000800 	.word	0x40000800
 800e634:	40023800 	.word	0x40023800
 800e638:	40020400 	.word	0x40020400

0800e63c <MX_TIM4_Init>:
{
 800e63c:	b510      	push	{r4, lr}
 800e63e:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e640:	2210      	movs	r2, #16
 800e642:	2100      	movs	r1, #0
 800e644:	a803      	add	r0, sp, #12
 800e646:	f007 fe2c 	bl	80162a2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e64a:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e64c:	221c      	movs	r2, #28
 800e64e:	4621      	mov	r1, r4
 800e650:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e654:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e658:	f007 fe23 	bl	80162a2 <memset>
  htim4.Instance = TIM4;
 800e65c:	481f      	ldr	r0, [pc, #124]	; (800e6dc <MX_TIM4_Init+0xa0>)
  htim4.Init.Prescaler = 42-1;
 800e65e:	f8df c080 	ldr.w	ip, [pc, #128]	; 800e6e0 <MX_TIM4_Init+0xa4>
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e662:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 42-1;
 800e664:	2329      	movs	r3, #41	; 0x29
 800e666:	e9c0 c300 	strd	ip, r3, [r0]
  htim4.Init.Period = 500-1;
 800e66a:	f240 13f3 	movw	r3, #499	; 0x1f3
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e66e:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e672:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800e674:	f002 fec2 	bl	80113fc <HAL_TIM_Base_Init>
 800e678:	b108      	cbz	r0, 800e67e <MX_TIM4_Init+0x42>
    Error_Handler();
 800e67a:	f7ff fb79 	bl	800dd70 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800e682:	a903      	add	r1, sp, #12
 800e684:	4815      	ldr	r0, [pc, #84]	; (800e6dc <MX_TIM4_Init+0xa0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e686:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800e688:	f002 ff8e 	bl	80115a8 <HAL_TIM_ConfigClockSource>
 800e68c:	b108      	cbz	r0, 800e692 <MX_TIM4_Init+0x56>
    Error_Handler();
 800e68e:	f7ff fb6f 	bl	800dd70 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800e692:	4812      	ldr	r0, [pc, #72]	; (800e6dc <MX_TIM4_Init+0xa0>)
 800e694:	f002 fecc 	bl	8011430 <HAL_TIM_PWM_Init>
 800e698:	b108      	cbz	r0, 800e69e <MX_TIM4_Init+0x62>
    Error_Handler();
 800e69a:	f7ff fb69 	bl	800dd70 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e69e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e6a0:	a901      	add	r1, sp, #4
 800e6a2:	480e      	ldr	r0, [pc, #56]	; (800e6dc <MX_TIM4_Init+0xa0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e6a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e6a8:	f003 f842 	bl	8011730 <HAL_TIMEx_MasterConfigSynchronization>
 800e6ac:	b108      	cbz	r0, 800e6b2 <MX_TIM4_Init+0x76>
    Error_Handler();
 800e6ae:	f7ff fb5f 	bl	800dd70 <Error_Handler>
  sConfigOC.Pulse = 250-1;
 800e6b2:	2260      	movs	r2, #96	; 0x60
 800e6b4:	23f9      	movs	r3, #249	; 0xf9
 800e6b6:	e9cd 2307 	strd	r2, r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800e6ba:	2302      	movs	r3, #2
 800e6bc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e6be:	220c      	movs	r2, #12
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e6c0:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e6c2:	a907      	add	r1, sp, #28
 800e6c4:	4805      	ldr	r0, [pc, #20]	; (800e6dc <MX_TIM4_Init+0xa0>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e6c6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e6c8:	f002 ff02 	bl	80114d0 <HAL_TIM_PWM_ConfigChannel>
 800e6cc:	b108      	cbz	r0, 800e6d2 <MX_TIM4_Init+0x96>
    Error_Handler();
 800e6ce:	f7ff fb4f 	bl	800dd70 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 800e6d2:	4802      	ldr	r0, [pc, #8]	; (800e6dc <MX_TIM4_Init+0xa0>)
 800e6d4:	f7ff ff88 	bl	800e5e8 <HAL_TIM_MspPostInit>
}
 800e6d8:	b00e      	add	sp, #56	; 0x38
 800e6da:	bd10      	pop	{r4, pc}
 800e6dc:	2000163c 	.word	0x2000163c
 800e6e0:	40000800 	.word	0x40000800

0800e6e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 800e6e4:	480b      	ldr	r0, [pc, #44]	; (800e714 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800e6e6:	4a0c      	ldr	r2, [pc, #48]	; (800e718 <MX_USART2_UART_Init+0x34>)
{
 800e6e8:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800e6ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e6ee:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e6f2:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e6f4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e6f6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e6fa:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e6fc:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e700:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800e702:	f003 f8ff 	bl	8011904 <HAL_UART_Init>
 800e706:	b118      	cbz	r0, 800e710 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800e708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800e70c:	f7ff bb30 	b.w	800dd70 <Error_Handler>
}
 800e710:	bd08      	pop	{r3, pc}
 800e712:	bf00      	nop
 800e714:	200016bc 	.word	0x200016bc
 800e718:	40004400 	.word	0x40004400

0800e71c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 800e71c:	480b      	ldr	r0, [pc, #44]	; (800e74c <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 800e71e:	4a0c      	ldr	r2, [pc, #48]	; (800e750 <MX_USART3_UART_Init+0x34>)
{
 800e720:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 115200;
 800e722:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e726:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e72a:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e72c:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e72e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e732:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e734:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e738:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800e73a:	f003 f8e3 	bl	8011904 <HAL_UART_Init>
 800e73e:	b118      	cbz	r0, 800e748 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800e740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800e744:	f7ff bb14 	b.w	800dd70 <Error_Handler>
}
 800e748:	bd08      	pop	{r3, pc}
 800e74a:	bf00      	nop
 800e74c:	2000167c 	.word	0x2000167c
 800e750:	40004800 	.word	0x40004800

0800e754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e754:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e756:	2214      	movs	r2, #20
{
 800e758:	b08a      	sub	sp, #40	; 0x28
 800e75a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e75c:	2100      	movs	r1, #0
 800e75e:	eb0d 0002 	add.w	r0, sp, r2
 800e762:	f007 fd9e 	bl	80162a2 <memset>
  if(uartHandle->Instance==USART2)
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	4a2e      	ldr	r2, [pc, #184]	; (800e824 <HAL_UART_MspInit+0xd0>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d12c      	bne.n	800e7c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800e76e:	4b2e      	ldr	r3, [pc, #184]	; (800e828 <HAL_UART_MspInit+0xd4>)
 800e770:	2400      	movs	r4, #0
 800e772:	9401      	str	r4, [sp, #4]
 800e774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e776:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e77a:	641a      	str	r2, [r3, #64]	; 0x40
 800e77c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e77e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800e782:	9201      	str	r2, [sp, #4]
 800e784:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e786:	9402      	str	r4, [sp, #8]
 800e788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e78a:	f042 0208 	orr.w	r2, r2, #8
 800e78e:	631a      	str	r2, [r3, #48]	; 0x30
 800e790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e792:	f003 0308 	and.w	r3, r3, #8
 800e796:	9302      	str	r3, [sp, #8]
 800e798:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e79a:	2060      	movs	r0, #96	; 0x60
 800e79c:	2302      	movs	r3, #2
 800e79e:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e7a2:	f04f 0c03 	mov.w	ip, #3
 800e7a6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e7a8:	a905      	add	r1, sp, #20
 800e7aa:	4820      	ldr	r0, [pc, #128]	; (800e82c <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e7ac:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e7b0:	f000 fce4 	bl	800f17c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e7b4:	2026      	movs	r0, #38	; 0x26
 800e7b6:	4622      	mov	r2, r4
 800e7b8:	2101      	movs	r1, #1
 800e7ba:	f000 f8fd 	bl	800e9b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e7be:	2026      	movs	r0, #38	; 0x26
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800e7c0:	f000 f92e 	bl	800ea20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800e7c4:	b00a      	add	sp, #40	; 0x28
 800e7c6:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART3)
 800e7c8:	4a19      	ldr	r2, [pc, #100]	; (800e830 <HAL_UART_MspInit+0xdc>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d1fa      	bne.n	800e7c4 <HAL_UART_MspInit+0x70>
    __HAL_RCC_USART3_CLK_ENABLE();
 800e7ce:	4b16      	ldr	r3, [pc, #88]	; (800e828 <HAL_UART_MspInit+0xd4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e7d0:	4818      	ldr	r0, [pc, #96]	; (800e834 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800e7d2:	2400      	movs	r4, #0
 800e7d4:	9403      	str	r4, [sp, #12]
 800e7d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e7dc:	641a      	str	r2, [r3, #64]	; 0x40
 800e7de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7e0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800e7e4:	9203      	str	r2, [sp, #12]
 800e7e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e7e8:	9404      	str	r4, [sp, #16]
 800e7ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7ec:	f042 0202 	orr.w	r2, r2, #2
 800e7f0:	631a      	str	r2, [r3, #48]	; 0x30
 800e7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f4:	f003 0302 	and.w	r3, r3, #2
 800e7f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7fa:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e7fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e800:	2302      	movs	r3, #2
 800e802:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e806:	2103      	movs	r1, #3
 800e808:	2307      	movs	r3, #7
 800e80a:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e80e:	a905      	add	r1, sp, #20
 800e810:	f000 fcb4 	bl	800f17c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800e814:	2027      	movs	r0, #39	; 0x27
 800e816:	4622      	mov	r2, r4
 800e818:	2101      	movs	r1, #1
 800e81a:	f000 f8cd 	bl	800e9b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800e81e:	2027      	movs	r0, #39	; 0x27
 800e820:	e7ce      	b.n	800e7c0 <HAL_UART_MspInit+0x6c>
 800e822:	bf00      	nop
 800e824:	40004400 	.word	0x40004400
 800e828:	40023800 	.word	0x40023800
 800e82c:	40020c00 	.word	0x40020c00
 800e830:	40004800 	.word	0x40004800
 800e834:	40020400 	.word	0x40020400

0800e838 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800e838:	b508      	push	{r3, lr}

  if(uartHandle->Instance==USART2)
 800e83a:	4a12      	ldr	r2, [pc, #72]	; (800e884 <HAL_UART_MspDeInit+0x4c>)
 800e83c:	6803      	ldr	r3, [r0, #0]
 800e83e:	4293      	cmp	r3, r2
 800e840:	d10e      	bne.n	800e860 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800e842:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400

    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_6|GPIO_PIN_5);
 800e846:	4810      	ldr	r0, [pc, #64]	; (800e888 <HAL_UART_MspDeInit+0x50>)
    __HAL_RCC_USART2_CLK_DISABLE();
 800e848:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e84a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e84e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_6|GPIO_PIN_5);
 800e850:	2160      	movs	r1, #96	; 0x60
 800e852:	f000 fd73 	bl	800f33c <HAL_GPIO_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800e856:	2026      	movs	r0, #38	; 0x26
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 800e858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800e85c:	f000 b8ee 	b.w	800ea3c <HAL_NVIC_DisableIRQ>
  else if(uartHandle->Instance==USART3)
 800e860:	4a0a      	ldr	r2, [pc, #40]	; (800e88c <HAL_UART_MspDeInit+0x54>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d10c      	bne.n	800e880 <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART3_CLK_DISABLE();
 800e866:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800e86a:	4809      	ldr	r0, [pc, #36]	; (800e890 <HAL_UART_MspDeInit+0x58>)
    __HAL_RCC_USART3_CLK_DISABLE();
 800e86c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e86e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e872:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800e874:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800e878:	f000 fd60 	bl	800f33c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800e87c:	2027      	movs	r0, #39	; 0x27
 800e87e:	e7eb      	b.n	800e858 <HAL_UART_MspDeInit+0x20>
}
 800e880:	bd08      	pop	{r3, pc}
 800e882:	bf00      	nop
 800e884:	40004400 	.word	0x40004400
 800e888:	40020c00 	.word	0x40020c00
 800e88c:	40004800 	.word	0x40004800
 800e890:	40020400 	.word	0x40020400

0800e894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e894:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e8cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e898:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e89a:	e003      	b.n	800e8a4 <LoopCopyDataInit>

0800e89c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e89c:	4b0c      	ldr	r3, [pc, #48]	; (800e8d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e89e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e8a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e8a2:	3104      	adds	r1, #4

0800e8a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e8a4:	480b      	ldr	r0, [pc, #44]	; (800e8d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e8a6:	4b0c      	ldr	r3, [pc, #48]	; (800e8d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e8a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e8aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e8ac:	d3f6      	bcc.n	800e89c <CopyDataInit>
  ldr  r2, =_sbss
 800e8ae:	4a0b      	ldr	r2, [pc, #44]	; (800e8dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e8b0:	e002      	b.n	800e8b8 <LoopFillZerobss>

0800e8b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e8b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e8b4:	f842 3b04 	str.w	r3, [r2], #4

0800e8b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e8b8:	4b09      	ldr	r3, [pc, #36]	; (800e8e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e8ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e8bc:	d3f9      	bcc.n	800e8b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e8be:	f7ff fe6d 	bl	800e59c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e8c2:	f007 fcaf 	bl	8016224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e8c6:	f7fe ffdb 	bl	800d880 <main>
  bx  lr    
 800e8ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e8cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e8d0:	080188d8 	.word	0x080188d8
  ldr  r0, =_sdata
 800e8d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e8d8:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 800e8dc:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 800e8e0:	20005ea0 	.word	0x20005ea0

0800e8e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e8e4:	e7fe      	b.n	800e8e4 <ADC_IRQHandler>

0800e8e6 <HAL_MspDeInit>:
 800e8e6:	4770      	bx	lr

0800e8e8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800e8e8:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800e8ea:	4b09      	ldr	r3, [pc, #36]	; (800e910 <HAL_DeInit+0x28>)
 800e8ec:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 800e8f0:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 800e8f2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800e8f4:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800e8f6:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800e8f8:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800e8fa:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800e8fc:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800e8fe:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800e900:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800e902:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800e904:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800e906:	f7ff ffee 	bl	800e8e6 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 800e90a:	4620      	mov	r0, r4
 800e90c:	bd10      	pop	{r4, pc}
 800e90e:	bf00      	nop
 800e910:	40023800 	.word	0x40023800

0800e914 <HAL_Init>:
{
 800e914:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e916:	4b0b      	ldr	r3, [pc, #44]	; (800e944 <HAL_Init+0x30>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e91e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e926:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e92e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e930:	2003      	movs	r0, #3
 800e932:	f000 f82f 	bl	800e994 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800e936:	2000      	movs	r0, #0
 800e938:	f7ff fda0 	bl	800e47c <HAL_InitTick>
  HAL_MspInit();
 800e93c:	f7ff fd82 	bl	800e444 <HAL_MspInit>
}
 800e940:	2000      	movs	r0, #0
 800e942:	bd08      	pop	{r3, pc}
 800e944:	40023c00 	.word	0x40023c00

0800e948 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800e948:	4a03      	ldr	r2, [pc, #12]	; (800e958 <HAL_IncTick+0x10>)
 800e94a:	4b04      	ldr	r3, [pc, #16]	; (800e95c <HAL_IncTick+0x14>)
 800e94c:	6811      	ldr	r1, [r2, #0]
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	440b      	add	r3, r1
 800e952:	6013      	str	r3, [r2, #0]
}
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	200016fc 	.word	0x200016fc
 800e95c:	20000010 	.word	0x20000010

0800e960 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800e960:	4b01      	ldr	r3, [pc, #4]	; (800e968 <HAL_GetTick+0x8>)
 800e962:	6818      	ldr	r0, [r3, #0]
}
 800e964:	4770      	bx	lr
 800e966:	bf00      	nop
 800e968:	200016fc 	.word	0x200016fc

0800e96c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e96c:	b538      	push	{r3, r4, r5, lr}
 800e96e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e970:	f7ff fff6 	bl	800e960 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e974:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800e976:	bf1c      	itt	ne
 800e978:	4b05      	ldrne	r3, [pc, #20]	; (800e990 <HAL_Delay+0x24>)
 800e97a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800e97c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800e97e:	bf18      	it	ne
 800e980:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e982:	f7ff ffed 	bl	800e960 <HAL_GetTick>
 800e986:	1b40      	subs	r0, r0, r5
 800e988:	42a0      	cmp	r0, r4
 800e98a:	d3fa      	bcc.n	800e982 <HAL_Delay+0x16>
  {
  }
}
 800e98c:	bd38      	pop	{r3, r4, r5, pc}
 800e98e:	bf00      	nop
 800e990:	20000010 	.word	0x20000010

0800e994 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e994:	4a07      	ldr	r2, [pc, #28]	; (800e9b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800e996:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e998:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e99c:	041b      	lsls	r3, r3, #16
 800e99e:	0c1b      	lsrs	r3, r3, #16
 800e9a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e9a4:	0200      	lsls	r0, r0, #8
 800e9a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e9aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800e9ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800e9b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800e9b2:	4770      	bx	lr
 800e9b4:	e000ed00 	.word	0xe000ed00

0800e9b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e9b8:	4b17      	ldr	r3, [pc, #92]	; (800ea18 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e9ba:	b570      	push	{r4, r5, r6, lr}
 800e9bc:	68dc      	ldr	r4, [r3, #12]
 800e9be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e9c2:	f1c4 0507 	rsb	r5, r4, #7
 800e9c6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e9c8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e9cc:	bf28      	it	cs
 800e9ce:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e9d0:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e9d4:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e9d6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e9da:	bf8c      	ite	hi
 800e9dc:	3c03      	subhi	r4, #3
 800e9de:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e9e0:	ea21 0303 	bic.w	r3, r1, r3
 800e9e4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e9e6:	fa06 f404 	lsl.w	r4, r6, r4
 800e9ea:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800e9ee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e9f0:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e9f4:	bfa8      	it	ge
 800e9f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800e9fa:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e9fe:	bfbc      	itt	lt
 800ea00:	f000 000f 	andlt.w	r0, r0, #15
 800ea04:	4a05      	ldrlt	r2, [pc, #20]	; (800ea1c <HAL_NVIC_SetPriority+0x64>)
 800ea06:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ea08:	bfaa      	itet	ge
 800ea0a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ea0e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ea10:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800ea14:	bd70      	pop	{r4, r5, r6, pc}
 800ea16:	bf00      	nop
 800ea18:	e000ed00 	.word	0xe000ed00
 800ea1c:	e000ed14 	.word	0xe000ed14

0800ea20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ea20:	2800      	cmp	r0, #0
 800ea22:	db08      	blt.n	800ea36 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ea24:	0942      	lsrs	r2, r0, #5
 800ea26:	2301      	movs	r3, #1
 800ea28:	f000 001f 	and.w	r0, r0, #31
 800ea2c:	fa03 f000 	lsl.w	r0, r3, r0
 800ea30:	4b01      	ldr	r3, [pc, #4]	; (800ea38 <HAL_NVIC_EnableIRQ+0x18>)
 800ea32:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ea36:	4770      	bx	lr
 800ea38:	e000e100 	.word	0xe000e100

0800ea3c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	db0d      	blt.n	800ea5c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ea40:	0943      	lsrs	r3, r0, #5
 800ea42:	2201      	movs	r2, #1
 800ea44:	f000 001f 	and.w	r0, r0, #31
 800ea48:	fa02 f000 	lsl.w	r0, r2, r0
 800ea4c:	3320      	adds	r3, #32
 800ea4e:	4a04      	ldr	r2, [pc, #16]	; (800ea60 <HAL_NVIC_DisableIRQ+0x24>)
 800ea50:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ea54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ea58:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	e000e100 	.word	0xe000e100

0800ea64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ea64:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ea66:	4604      	mov	r4, r0
 800ea68:	b150      	cbz	r0, 800ea80 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ea6a:	7943      	ldrb	r3, [r0, #5]
 800ea6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ea70:	b913      	cbnz	r3, 800ea78 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ea72:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ea74:	f7fe f898 	bl	800cba8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800ea7c:	2000      	movs	r0, #0
}
 800ea7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ea80:	2001      	movs	r0, #1
 800ea82:	e7fc      	b.n	800ea7e <HAL_CRC_Init+0x1a>

0800ea84 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ea84:	6803      	ldr	r3, [r0, #0]
 800ea86:	b2da      	uxtb	r2, r3
 800ea88:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ea8c:	f023 0303 	bic.w	r3, r3, #3
 800ea90:	2118      	movs	r1, #24
 800ea92:	3a10      	subs	r2, #16
 800ea94:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ea98:	4904      	ldr	r1, [pc, #16]	; (800eaac <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800ea9a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ea9c:	bf88      	it	hi
 800ea9e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800eaa0:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800eaa2:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800eaa4:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800eaa6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	0801829f 	.word	0x0801829f

0800eab0 <HAL_DMA_Init>:
{
 800eab0:	b570      	push	{r4, r5, r6, lr}
 800eab2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800eab4:	f7ff ff54 	bl	800e960 <HAL_GetTick>
 800eab8:	4605      	mov	r5, r0
  if(hdma == NULL)
 800eaba:	2c00      	cmp	r4, #0
 800eabc:	d071      	beq.n	800eba2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800eabe:	2300      	movs	r3, #0
 800eac0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800eac4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800eac6:	2302      	movs	r3, #2
 800eac8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800eacc:	6813      	ldr	r3, [r2, #0]
 800eace:	f023 0301 	bic.w	r3, r3, #1
 800ead2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ead4:	6821      	ldr	r1, [r4, #0]
 800ead6:	680b      	ldr	r3, [r1, #0]
 800ead8:	07d8      	lsls	r0, r3, #31
 800eada:	d43c      	bmi.n	800eb56 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 800eadc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800eade:	4d32      	ldr	r5, [pc, #200]	; (800eba8 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eae0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800eae2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800eae4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800eae8:	4313      	orrs	r3, r2
 800eaea:	68e2      	ldr	r2, [r4, #12]
 800eaec:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800eaee:	6922      	ldr	r2, [r4, #16]
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	6962      	ldr	r2, [r4, #20]
 800eaf4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eaf6:	69e2      	ldr	r2, [r4, #28]
 800eaf8:	4303      	orrs	r3, r0
 800eafa:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800eafc:	6a22      	ldr	r2, [r4, #32]
 800eafe:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800eb00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800eb02:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800eb04:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800eb08:	bf02      	ittt	eq
 800eb0a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800eb0e:	4335      	orreq	r5, r6
 800eb10:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800eb12:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800eb14:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800eb16:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800eb18:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800eb1c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800eb20:	d10b      	bne.n	800eb3a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800eb22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800eb24:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800eb26:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800eb28:	b13d      	cbz	r5, 800eb3a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800eb2a:	b9f8      	cbnz	r0, 800eb6c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800eb2c:	2a01      	cmp	r2, #1
 800eb2e:	d02d      	beq.n	800eb8c <HAL_DMA_Init+0xdc>
 800eb30:	d301      	bcc.n	800eb36 <HAL_DMA_Init+0x86>
 800eb32:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800eb34:	d101      	bne.n	800eb3a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800eb36:	01ea      	lsls	r2, r5, #7
 800eb38:	d42b      	bmi.n	800eb92 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800eb3a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f7ff ffa1 	bl	800ea84 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eb42:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800eb44:	233f      	movs	r3, #63	; 0x3f
 800eb46:	4093      	lsls	r3, r2
 800eb48:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eb4a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800eb4c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eb4e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800eb50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800eb54:	e009      	b.n	800eb6a <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800eb56:	f7ff ff03 	bl	800e960 <HAL_GetTick>
 800eb5a:	1b40      	subs	r0, r0, r5
 800eb5c:	2805      	cmp	r0, #5
 800eb5e:	d9b9      	bls.n	800ead4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800eb60:	2320      	movs	r3, #32
 800eb62:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800eb64:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800eb66:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800eb6a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800eb6c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800eb70:	d113      	bne.n	800eb9a <HAL_DMA_Init+0xea>
    switch (tmp)
 800eb72:	2a03      	cmp	r2, #3
 800eb74:	d8e1      	bhi.n	800eb3a <HAL_DMA_Init+0x8a>
 800eb76:	a001      	add	r0, pc, #4	; (adr r0, 800eb7c <HAL_DMA_Init+0xcc>)
 800eb78:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800eb7c:	0800eb93 	.word	0x0800eb93
 800eb80:	0800eb37 	.word	0x0800eb37
 800eb84:	0800eb93 	.word	0x0800eb93
 800eb88:	0800eb8d 	.word	0x0800eb8d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800eb8c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800eb90:	d1d3      	bne.n	800eb3a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800eb92:	2340      	movs	r3, #64	; 0x40
 800eb94:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800eb96:	2001      	movs	r0, #1
 800eb98:	e7e5      	b.n	800eb66 <HAL_DMA_Init+0xb6>
    switch (tmp)
 800eb9a:	2a02      	cmp	r2, #2
 800eb9c:	d9f9      	bls.n	800eb92 <HAL_DMA_Init+0xe2>
 800eb9e:	2a03      	cmp	r2, #3
 800eba0:	e7c8      	b.n	800eb34 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800eba2:	2001      	movs	r0, #1
 800eba4:	e7e1      	b.n	800eb6a <HAL_DMA_Init+0xba>
 800eba6:	bf00      	nop
 800eba8:	f010803f 	.word	0xf010803f

0800ebac <HAL_DMA_DeInit>:
{
 800ebac:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800ebae:	4605      	mov	r5, r0
 800ebb0:	b320      	cbz	r0, 800ebfc <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800ebb2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800ebb6:	b2e4      	uxtb	r4, r4
 800ebb8:	2c02      	cmp	r4, #2
 800ebba:	d01d      	beq.n	800ebf8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 800ebbc:	6803      	ldr	r3, [r0, #0]
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 800ebc4:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800ebc6:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 800ebc8:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800ebca:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800ebcc:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800ebce:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800ebd0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800ebd2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 800ebd4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ebd6:	f7ff ff55 	bl	800ea84 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ebda:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800ebdc:	233f      	movs	r3, #63	; 0x3f
 800ebde:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 800ebe0:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800ebe4:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 800ebe8:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ebec:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ebee:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800ebf0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800ebf4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	e000      	b.n	800ebfe <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 800ebfc:	2001      	movs	r0, #1
}
 800ebfe:	bd38      	pop	{r3, r4, r5, pc}

0800ec00 <HAL_DMA_Start_IT>:
{
 800ec00:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800ec02:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800ec06:	2c01      	cmp	r4, #1
 800ec08:	d032      	beq.n	800ec70 <HAL_DMA_Start_IT+0x70>
 800ec0a:	2401      	movs	r4, #1
 800ec0c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800ec10:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ec14:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800ec16:	2c01      	cmp	r4, #1
 800ec18:	f04f 0500 	mov.w	r5, #0
 800ec1c:	f04f 0402 	mov.w	r4, #2
 800ec20:	d124      	bne.n	800ec6c <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800ec22:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ec26:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ec28:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ec2a:	6825      	ldr	r5, [r4, #0]
 800ec2c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800ec30:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800ec32:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ec34:	6883      	ldr	r3, [r0, #8]
 800ec36:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800ec38:	bf0e      	itee	eq
 800ec3a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800ec3c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800ec3e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ec40:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800ec42:	bf08      	it	eq
 800ec44:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ec46:	233f      	movs	r3, #63	; 0x3f
 800ec48:	4093      	lsls	r3, r2
 800ec4a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ec4c:	6823      	ldr	r3, [r4, #0]
 800ec4e:	f043 0316 	orr.w	r3, r3, #22
 800ec52:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800ec54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ec56:	b11b      	cbz	r3, 800ec60 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800ec58:	6823      	ldr	r3, [r4, #0]
 800ec5a:	f043 0308 	orr.w	r3, r3, #8
 800ec5e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800ec60:	6823      	ldr	r3, [r4, #0]
 800ec62:	f043 0301 	orr.w	r3, r3, #1
 800ec66:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ec68:	2000      	movs	r0, #0
}
 800ec6a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 800ec6c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800ec70:	2002      	movs	r0, #2
 800ec72:	e7fa      	b.n	800ec6a <HAL_DMA_Start_IT+0x6a>

0800ec74 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ec74:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d003      	beq.n	800ec84 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ec7c:	2380      	movs	r3, #128	; 0x80
 800ec7e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800ec80:	2001      	movs	r0, #1
 800ec82:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800ec84:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800ec86:	2305      	movs	r3, #5
 800ec88:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800ec8c:	6813      	ldr	r3, [r2, #0]
 800ec8e:	f023 0301 	bic.w	r3, r3, #1
 800ec92:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800ec94:	2000      	movs	r0, #0
}
 800ec96:	4770      	bx	lr

0800ec98 <HAL_DMA_IRQHandler>:
{
 800ec98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ec9e:	4b5c      	ldr	r3, [pc, #368]	; (800ee10 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800eca0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800eca2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800eca4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800eca6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800eca8:	2208      	movs	r2, #8
 800ecaa:	409a      	lsls	r2, r3
 800ecac:	4232      	tst	r2, r6
{
 800ecae:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ecb0:	d00c      	beq.n	800eccc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ecb2:	6801      	ldr	r1, [r0, #0]
 800ecb4:	6808      	ldr	r0, [r1, #0]
 800ecb6:	0740      	lsls	r0, r0, #29
 800ecb8:	d508      	bpl.n	800eccc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ecba:	6808      	ldr	r0, [r1, #0]
 800ecbc:	f020 0004 	bic.w	r0, r0, #4
 800ecc0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ecc2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ecc4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ecc6:	f042 0201 	orr.w	r2, r2, #1
 800ecca:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800eccc:	2201      	movs	r2, #1
 800ecce:	409a      	lsls	r2, r3
 800ecd0:	4232      	tst	r2, r6
 800ecd2:	d008      	beq.n	800ece6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ecd4:	6821      	ldr	r1, [r4, #0]
 800ecd6:	6949      	ldr	r1, [r1, #20]
 800ecd8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ecda:	bf41      	itttt	mi
 800ecdc:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ecde:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800ece0:	f042 0202 	orrmi.w	r2, r2, #2
 800ece4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ece6:	2204      	movs	r2, #4
 800ece8:	409a      	lsls	r2, r3
 800ecea:	4232      	tst	r2, r6
 800ecec:	d008      	beq.n	800ed00 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ecee:	6821      	ldr	r1, [r4, #0]
 800ecf0:	6809      	ldr	r1, [r1, #0]
 800ecf2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ecf4:	bf41      	itttt	mi
 800ecf6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ecf8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800ecfa:	f042 0204 	orrmi.w	r2, r2, #4
 800ecfe:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ed00:	2210      	movs	r2, #16
 800ed02:	409a      	lsls	r2, r3
 800ed04:	4232      	tst	r2, r6
 800ed06:	d010      	beq.n	800ed2a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ed08:	6823      	ldr	r3, [r4, #0]
 800ed0a:	6819      	ldr	r1, [r3, #0]
 800ed0c:	0709      	lsls	r1, r1, #28
 800ed0e:	d50c      	bpl.n	800ed2a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ed10:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	0350      	lsls	r0, r2, #13
 800ed16:	d537      	bpl.n	800ed88 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	0319      	lsls	r1, r3, #12
 800ed1c:	d401      	bmi.n	800ed22 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800ed1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed20:	e000      	b.n	800ed24 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ed22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800ed24:	b10b      	cbz	r3, 800ed2a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800ed26:	4620      	mov	r0, r4
 800ed28:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ed2a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ed2c:	2220      	movs	r2, #32
 800ed2e:	408a      	lsls	r2, r1
 800ed30:	4232      	tst	r2, r6
 800ed32:	d03a      	beq.n	800edaa <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ed34:	6823      	ldr	r3, [r4, #0]
 800ed36:	6818      	ldr	r0, [r3, #0]
 800ed38:	06c6      	lsls	r6, r0, #27
 800ed3a:	d536      	bpl.n	800edaa <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ed3c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ed3e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800ed42:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ed44:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ed46:	d127      	bne.n	800ed98 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ed48:	f022 0216 	bic.w	r2, r2, #22
 800ed4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ed4e:	695a      	ldr	r2, [r3, #20]
 800ed50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed54:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ed56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ed58:	b90a      	cbnz	r2, 800ed5e <HAL_DMA_IRQHandler+0xc6>
 800ed5a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ed5c:	b11a      	cbz	r2, 800ed66 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	f022 0208 	bic.w	r2, r2, #8
 800ed64:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ed66:	233f      	movs	r3, #63	; 0x3f
 800ed68:	408b      	lsls	r3, r1
 800ed6a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800ed72:	2301      	movs	r3, #1
 800ed74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800ed78:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d045      	beq.n	800ee0a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800ed7e:	4620      	mov	r0, r4
}
 800ed80:	b003      	add	sp, #12
 800ed82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800ed86:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ed8c:	bf5e      	ittt	pl
 800ed8e:	681a      	ldrpl	r2, [r3, #0]
 800ed90:	f022 0208 	bicpl.w	r2, r2, #8
 800ed94:	601a      	strpl	r2, [r3, #0]
 800ed96:	e7c2      	b.n	800ed1e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ed98:	0350      	lsls	r0, r2, #13
 800ed9a:	d527      	bpl.n	800edec <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	0319      	lsls	r1, r3, #12
 800eda0:	d431      	bmi.n	800ee06 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800eda2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800eda4:	b10b      	cbz	r3, 800edaa <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800eda6:	4620      	mov	r0, r4
 800eda8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800edaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800edac:	b36b      	cbz	r3, 800ee0a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800edae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800edb0:	07da      	lsls	r2, r3, #31
 800edb2:	d519      	bpl.n	800ede8 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 800edb4:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800edb6:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800edb8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800edbc:	6813      	ldr	r3, [r2, #0]
 800edbe:	f023 0301 	bic.w	r3, r3, #1
 800edc2:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800edc4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800edc8:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800edcc:	9b01      	ldr	r3, [sp, #4]
 800edce:	3301      	adds	r3, #1
 800edd0:	42bb      	cmp	r3, r7
 800edd2:	9301      	str	r3, [sp, #4]
 800edd4:	d802      	bhi.n	800eddc <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800edd6:	6813      	ldr	r3, [r2, #0]
 800edd8:	07db      	lsls	r3, r3, #31
 800edda:	d4f7      	bmi.n	800edcc <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 800eddc:	2300      	movs	r3, #0
 800edde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800ede2:	2301      	movs	r3, #1
 800ede4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800ede8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800edea:	e7c6      	b.n	800ed7a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800edf2:	d108      	bne.n	800ee06 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800edf4:	6819      	ldr	r1, [r3, #0]
 800edf6:	f021 0110 	bic.w	r1, r1, #16
 800edfa:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800edfc:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800edfe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800ee02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800ee06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ee08:	e7cc      	b.n	800eda4 <HAL_DMA_IRQHandler+0x10c>
}
 800ee0a:	b003      	add	sp, #12
 800ee0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	2000000c 	.word	0x2000000c

0800ee14 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800ee14:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800ee16:	4770      	bx	lr

0800ee18 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ee18:	4909      	ldr	r1, [pc, #36]	; (800ee40 <FLASH_Program_DoubleWord+0x28>)
{
 800ee1a:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ee1c:	690c      	ldr	r4, [r1, #16]
 800ee1e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800ee22:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ee24:	690c      	ldr	r4, [r1, #16]
 800ee26:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800ee2a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ee2c:	690c      	ldr	r4, [r1, #16]
 800ee2e:	f044 0401 	orr.w	r4, r4, #1
 800ee32:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ee34:	6002      	str	r2, [r0, #0]
 800ee36:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800ee3a:	6043      	str	r3, [r0, #4]
}
 800ee3c:	bd10      	pop	{r4, pc}
 800ee3e:	bf00      	nop
 800ee40:	40023c00 	.word	0x40023c00

0800ee44 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ee44:	4b07      	ldr	r3, [pc, #28]	; (800ee64 <FLASH_Program_Word+0x20>)
 800ee46:	691a      	ldr	r2, [r3, #16]
 800ee48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ee4c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ee4e:	691a      	ldr	r2, [r3, #16]
 800ee50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee54:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ee56:	691a      	ldr	r2, [r3, #16]
 800ee58:	f042 0201 	orr.w	r2, r2, #1
 800ee5c:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 800ee5e:	6001      	str	r1, [r0, #0]
}
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	40023c00 	.word	0x40023c00

0800ee68 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ee68:	4b07      	ldr	r3, [pc, #28]	; (800ee88 <FLASH_Program_HalfWord+0x20>)
 800ee6a:	691a      	ldr	r2, [r3, #16]
 800ee6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ee70:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ee72:	691a      	ldr	r2, [r3, #16]
 800ee74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee78:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ee7a:	691a      	ldr	r2, [r3, #16]
 800ee7c:	f042 0201 	orr.w	r2, r2, #1
 800ee80:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800ee82:	8001      	strh	r1, [r0, #0]
}
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	40023c00 	.word	0x40023c00

0800ee8c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ee8c:	4b1a      	ldr	r3, [pc, #104]	; (800eef8 <FLASH_SetErrorCode+0x6c>)
 800ee8e:	68da      	ldr	r2, [r3, #12]
 800ee90:	06d2      	lsls	r2, r2, #27
 800ee92:	d506      	bpl.n	800eea2 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ee94:	4919      	ldr	r1, [pc, #100]	; (800eefc <FLASH_SetErrorCode+0x70>)
 800ee96:	69ca      	ldr	r2, [r1, #28]
 800ee98:	f042 0210 	orr.w	r2, r2, #16
 800ee9c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ee9e:	2210      	movs	r2, #16
 800eea0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800eea2:	68da      	ldr	r2, [r3, #12]
 800eea4:	0690      	lsls	r0, r2, #26
 800eea6:	d506      	bpl.n	800eeb6 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800eea8:	4914      	ldr	r1, [pc, #80]	; (800eefc <FLASH_SetErrorCode+0x70>)
 800eeaa:	69ca      	ldr	r2, [r1, #28]
 800eeac:	f042 0208 	orr.w	r2, r2, #8
 800eeb0:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800eeb2:	2220      	movs	r2, #32
 800eeb4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800eeb6:	4b10      	ldr	r3, [pc, #64]	; (800eef8 <FLASH_SetErrorCode+0x6c>)
 800eeb8:	68da      	ldr	r2, [r3, #12]
 800eeba:	0651      	lsls	r1, r2, #25
 800eebc:	d506      	bpl.n	800eecc <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800eebe:	490f      	ldr	r1, [pc, #60]	; (800eefc <FLASH_SetErrorCode+0x70>)
 800eec0:	69ca      	ldr	r2, [r1, #28]
 800eec2:	f042 0204 	orr.w	r2, r2, #4
 800eec6:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800eec8:	2240      	movs	r2, #64	; 0x40
 800eeca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800eecc:	68da      	ldr	r2, [r3, #12]
 800eece:	0612      	lsls	r2, r2, #24
 800eed0:	d506      	bpl.n	800eee0 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800eed2:	490a      	ldr	r1, [pc, #40]	; (800eefc <FLASH_SetErrorCode+0x70>)
 800eed4:	69ca      	ldr	r2, [r1, #28]
 800eed6:	f042 0202 	orr.w	r2, r2, #2
 800eeda:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800eedc:	2280      	movs	r2, #128	; 0x80
 800eede:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800eee0:	4a05      	ldr	r2, [pc, #20]	; (800eef8 <FLASH_SetErrorCode+0x6c>)
 800eee2:	68d3      	ldr	r3, [r2, #12]
 800eee4:	079b      	lsls	r3, r3, #30
 800eee6:	d506      	bpl.n	800eef6 <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800eee8:	4904      	ldr	r1, [pc, #16]	; (800eefc <FLASH_SetErrorCode+0x70>)
 800eeea:	69cb      	ldr	r3, [r1, #28]
 800eeec:	f043 0320 	orr.w	r3, r3, #32
 800eef0:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800eef2:	2302      	movs	r3, #2
 800eef4:	60d3      	str	r3, [r2, #12]
  }
}
 800eef6:	4770      	bx	lr
 800eef8:	40023c00 	.word	0x40023c00
 800eefc:	20001700 	.word	0x20001700

0800ef00 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ef00:	4b06      	ldr	r3, [pc, #24]	; (800ef1c <HAL_FLASH_Unlock+0x1c>)
 800ef02:	691a      	ldr	r2, [r3, #16]
 800ef04:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ef06:	bfbf      	itttt	lt
 800ef08:	4a05      	ldrlt	r2, [pc, #20]	; (800ef20 <HAL_FLASH_Unlock+0x20>)
 800ef0a:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ef0c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 800ef10:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ef12:	bfba      	itte	lt
 800ef14:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800ef16:	0fc0      	lsrlt	r0, r0, #31
 800ef18:	2000      	movge	r0, #0
}
 800ef1a:	4770      	bx	lr
 800ef1c:	40023c00 	.word	0x40023c00
 800ef20:	45670123 	.word	0x45670123

0800ef24 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800ef24:	4a03      	ldr	r2, [pc, #12]	; (800ef34 <HAL_FLASH_Lock+0x10>)
 800ef26:	6913      	ldr	r3, [r2, #16]
 800ef28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ef2c:	6113      	str	r3, [r2, #16]
}
 800ef2e:	2000      	movs	r0, #0
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	40023c00 	.word	0x40023c00

0800ef38 <FLASH_WaitForLastOperation>:
{ 
 800ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ef3a:	4b12      	ldr	r3, [pc, #72]	; (800ef84 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ef3c:	4c12      	ldr	r4, [pc, #72]	; (800ef88 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ef3e:	2200      	movs	r2, #0
{ 
 800ef40:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ef42:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800ef44:	f7ff fd0c 	bl	800e960 <HAL_GetTick>
 800ef48:	4626      	mov	r6, r4
 800ef4a:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ef4c:	68e3      	ldr	r3, [r4, #12]
 800ef4e:	03da      	lsls	r2, r3, #15
 800ef50:	d40c      	bmi.n	800ef6c <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ef52:	68e3      	ldr	r3, [r4, #12]
 800ef54:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ef56:	bf44      	itt	mi
 800ef58:	2301      	movmi	r3, #1
 800ef5a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ef5c:	68f0      	ldr	r0, [r6, #12]
 800ef5e:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 800ef62:	d007      	beq.n	800ef74 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 800ef64:	f7ff ff92 	bl	800ee8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ef68:	2001      	movs	r0, #1
 800ef6a:	e003      	b.n	800ef74 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 800ef6c:	1c69      	adds	r1, r5, #1
 800ef6e:	d0ed      	beq.n	800ef4c <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ef70:	b90d      	cbnz	r5, 800ef76 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 800ef72:	2003      	movs	r0, #3
}  
 800ef74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ef76:	f7ff fcf3 	bl	800e960 <HAL_GetTick>
 800ef7a:	1bc0      	subs	r0, r0, r7
 800ef7c:	42a8      	cmp	r0, r5
 800ef7e:	d9e5      	bls.n	800ef4c <FLASH_WaitForLastOperation+0x14>
 800ef80:	e7f7      	b.n	800ef72 <FLASH_WaitForLastOperation+0x3a>
 800ef82:	bf00      	nop
 800ef84:	20001700 	.word	0x20001700
 800ef88:	40023c00 	.word	0x40023c00

0800ef8c <HAL_FLASH_Program>:
{
 800ef8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800ef90:	4d1f      	ldr	r5, [pc, #124]	; (800f010 <HAL_FLASH_Program+0x84>)
{
 800ef92:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 800ef94:	7e2b      	ldrb	r3, [r5, #24]
 800ef96:	2b01      	cmp	r3, #1
{
 800ef98:	4607      	mov	r7, r0
 800ef9a:	460e      	mov	r6, r1
 800ef9c:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 800ef9e:	d035      	beq.n	800f00c <HAL_FLASH_Program+0x80>
 800efa0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800efa2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800efa6:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800efa8:	f7ff ffc6 	bl	800ef38 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800efac:	b9b0      	cbnz	r0, 800efdc <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800efae:	b9cf      	cbnz	r7, 800efe4 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800efb0:	4b18      	ldr	r3, [pc, #96]	; (800f014 <HAL_FLASH_Program+0x88>)
 800efb2:	691a      	ldr	r2, [r3, #16]
 800efb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800efb8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800efba:	691a      	ldr	r2, [r3, #16]
 800efbc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800efbe:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800efc0:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 800efc2:	f042 0201 	orr.w	r2, r2, #1
 800efc6:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800efc8:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800efca:	f24c 3050 	movw	r0, #50000	; 0xc350
 800efce:	f7ff ffb3 	bl	800ef38 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800efd2:	4a10      	ldr	r2, [pc, #64]	; (800f014 <HAL_FLASH_Program+0x88>)
 800efd4:	6913      	ldr	r3, [r2, #16]
 800efd6:	f023 0301 	bic.w	r3, r3, #1
 800efda:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800efdc:	2300      	movs	r3, #0
 800efde:	762b      	strb	r3, [r5, #24]
}
 800efe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800efe4:	2f01      	cmp	r7, #1
 800efe6:	d104      	bne.n	800eff2 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800efe8:	b2a1      	uxth	r1, r4
 800efea:	4630      	mov	r0, r6
 800efec:	f7ff ff3c 	bl	800ee68 <FLASH_Program_HalfWord>
 800eff0:	e7eb      	b.n	800efca <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800eff2:	2f02      	cmp	r7, #2
 800eff4:	d104      	bne.n	800f000 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 800eff6:	4621      	mov	r1, r4
 800eff8:	4630      	mov	r0, r6
 800effa:	f7ff ff23 	bl	800ee44 <FLASH_Program_Word>
 800effe:	e7e4      	b.n	800efca <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 800f000:	4622      	mov	r2, r4
 800f002:	4643      	mov	r3, r8
 800f004:	4630      	mov	r0, r6
 800f006:	f7ff ff07 	bl	800ee18 <FLASH_Program_DoubleWord>
 800f00a:	e7de      	b.n	800efca <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800f00c:	2002      	movs	r0, #2
 800f00e:	e7e7      	b.n	800efe0 <HAL_FLASH_Program+0x54>
 800f010:	20001700 	.word	0x20001700
 800f014:	40023c00 	.word	0x40023c00

0800f018 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f018:	4b07      	ldr	r3, [pc, #28]	; (800f038 <FLASH_MassErase.isra.0+0x20>)
 800f01a:	691a      	ldr	r2, [r3, #16]
 800f01c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f020:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 800f022:	691a      	ldr	r2, [r3, #16]
 800f024:	f042 0204 	orr.w	r2, r2, #4
 800f028:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800f02a:	691a      	ldr	r2, [r3, #16]
 800f02c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f030:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800f034:	6118      	str	r0, [r3, #16]
}
 800f036:	4770      	bx	lr
 800f038:	40023c00 	.word	0x40023c00

0800f03c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800f03c:	b139      	cbz	r1, 800f04e <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800f03e:	2901      	cmp	r1, #1
 800f040:	d01c      	beq.n	800f07c <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800f042:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800f044:	bf0c      	ite	eq
 800f046:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800f04a:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f04e:	4b0d      	ldr	r3, [pc, #52]	; (800f084 <FLASH_Erase_Sector+0x48>)
 800f050:	691a      	ldr	r2, [r3, #16]
 800f052:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f056:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800f058:	691a      	ldr	r2, [r3, #16]
 800f05a:	4311      	orrs	r1, r2
 800f05c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800f05e:	691a      	ldr	r2, [r3, #16]
 800f060:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800f064:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800f066:	691a      	ldr	r2, [r3, #16]
 800f068:	f042 0202 	orr.w	r2, r2, #2
 800f06c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800f070:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800f072:	691a      	ldr	r2, [r3, #16]
 800f074:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f078:	611a      	str	r2, [r3, #16]
}
 800f07a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800f07c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f080:	e7e5      	b.n	800f04e <FLASH_Erase_Sector+0x12>
 800f082:	bf00      	nop
 800f084:	40023c00 	.word	0x40023c00

0800f088 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800f088:	4b14      	ldr	r3, [pc, #80]	; (800f0dc <FLASH_FlushCaches+0x54>)
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	0591      	lsls	r1, r2, #22
 800f08e:	d50f      	bpl.n	800f0b0 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f096:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f09e:	601a      	str	r2, [r3, #0]
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f0a6:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f0ae:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800f0b0:	4b0a      	ldr	r3, [pc, #40]	; (800f0dc <FLASH_FlushCaches+0x54>)
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	0552      	lsls	r2, r2, #21
 800f0b6:	d50f      	bpl.n	800f0d8 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0be:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f0c6:	601a      	str	r2, [r3, #0]
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f0ce:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800f0d0:	681a      	ldr	r2, [r3, #0]
 800f0d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f0d6:	601a      	str	r2, [r3, #0]
  }
}
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	40023c00 	.word	0x40023c00

0800f0e0 <HAL_FLASHEx_Erase>:
{
 800f0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800f0e4:	4e23      	ldr	r6, [pc, #140]	; (800f174 <HAL_FLASHEx_Erase+0x94>)
 800f0e6:	7e33      	ldrb	r3, [r6, #24]
 800f0e8:	2b01      	cmp	r3, #1
{
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800f0ee:	d03f      	beq.n	800f170 <HAL_FLASHEx_Erase+0x90>
 800f0f0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f0f2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800f0f6:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f0f8:	f7ff ff1e 	bl	800ef38 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800f0fc:	4605      	mov	r5, r0
 800f0fe:	b9a8      	cbnz	r0, 800f12c <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 800f100:	f04f 33ff 	mov.w	r3, #4294967295
 800f104:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d113      	bne.n	800f136 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800f10e:	7c20      	ldrb	r0, [r4, #16]
 800f110:	f7ff ff82 	bl	800f018 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f114:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f118:	f7ff ff0e 	bl	800ef38 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800f11c:	4a16      	ldr	r2, [pc, #88]	; (800f178 <HAL_FLASHEx_Erase+0x98>)
 800f11e:	6913      	ldr	r3, [r2, #16]
 800f120:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f124:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800f126:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 800f128:	f7ff ffae 	bl	800f088 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800f12c:	2300      	movs	r3, #0
 800f12e:	7633      	strb	r3, [r6, #24]
}
 800f130:	4628      	mov	r0, r5
 800f132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f136:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f138:	f8df 903c 	ldr.w	r9, [pc, #60]	; 800f178 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f13c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f140:	4413      	add	r3, r2
 800f142:	42bb      	cmp	r3, r7
 800f144:	d9f0      	bls.n	800f128 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800f146:	7c21      	ldrb	r1, [r4, #16]
 800f148:	4638      	mov	r0, r7
 800f14a:	f7ff ff77 	bl	800f03c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f14e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f152:	f7ff fef1 	bl	800ef38 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f156:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f15a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800f15e:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800f162:	b118      	cbz	r0, 800f16c <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 800f164:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f168:	4605      	mov	r5, r0
          break;
 800f16a:	e7dd      	b.n	800f128 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f16c:	3701      	adds	r7, #1
 800f16e:	e7e5      	b.n	800f13c <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 800f170:	2502      	movs	r5, #2
 800f172:	e7dd      	b.n	800f130 <HAL_FLASHEx_Erase+0x50>
 800f174:	20001700 	.word	0x20001700
 800f178:	40023c00 	.word	0x40023c00

0800f17c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f180:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f182:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f184:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800f334 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f188:	4a68      	ldr	r2, [pc, #416]	; (800f32c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f18a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800f338 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f18e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f190:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800f192:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f194:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800f196:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f198:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800f19a:	42ac      	cmp	r4, r5
 800f19c:	f040 80b0 	bne.w	800f300 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f1a0:	684c      	ldr	r4, [r1, #4]
 800f1a2:	f024 0c10 	bic.w	ip, r4, #16
 800f1a6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800f1aa:	2603      	movs	r6, #3
 800f1ac:	f10c 37ff 	add.w	r7, ip, #4294967295
 800f1b0:	fa06 f60e 	lsl.w	r6, r6, lr
 800f1b4:	2f01      	cmp	r7, #1
 800f1b6:	ea6f 0606 	mvn.w	r6, r6
 800f1ba:	d811      	bhi.n	800f1e0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 800f1bc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f1be:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f1c2:	68cf      	ldr	r7, [r1, #12]
 800f1c4:	fa07 f70e 	lsl.w	r7, r7, lr
 800f1c8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800f1cc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800f1ce:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f1d0:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800f1d4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800f1d8:	409f      	lsls	r7, r3
 800f1da:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800f1de:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800f1e0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f1e2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f1e6:	688f      	ldr	r7, [r1, #8]
 800f1e8:	fa07 f70e 	lsl.w	r7, r7, lr
 800f1ec:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f1f0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800f1f4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f1f6:	d116      	bne.n	800f226 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800f1f8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800f1fc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f200:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800f204:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f208:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800f20c:	f04f 0c0f 	mov.w	ip, #15
 800f210:	fa0c fc0b 	lsl.w	ip, ip, fp
 800f214:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f218:	690f      	ldr	r7, [r1, #16]
 800f21a:	fa07 f70b 	lsl.w	r7, r7, fp
 800f21e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800f222:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800f226:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f228:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f22a:	f004 0703 	and.w	r7, r4, #3
 800f22e:	fa07 fe0e 	lsl.w	lr, r7, lr
 800f232:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800f236:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f238:	00e6      	lsls	r6, r4, #3
 800f23a:	d561      	bpl.n	800f300 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f23c:	f04f 0b00 	mov.w	fp, #0
 800f240:	f8cd b00c 	str.w	fp, [sp, #12]
 800f244:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f248:	4e39      	ldr	r6, [pc, #228]	; (800f330 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f24a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800f24e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800f252:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800f256:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800f25a:	9703      	str	r7, [sp, #12]
 800f25c:	9f03      	ldr	r7, [sp, #12]
 800f25e:	f023 0703 	bic.w	r7, r3, #3
 800f262:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800f266:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f26a:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800f26e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f272:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800f276:	f04f 0c0f 	mov.w	ip, #15
 800f27a:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f27e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f280:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f284:	d043      	beq.n	800f30e <HAL_GPIO_Init+0x192>
 800f286:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f28a:	42b0      	cmp	r0, r6
 800f28c:	d041      	beq.n	800f312 <HAL_GPIO_Init+0x196>
 800f28e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f292:	42b0      	cmp	r0, r6
 800f294:	d03f      	beq.n	800f316 <HAL_GPIO_Init+0x19a>
 800f296:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f29a:	42b0      	cmp	r0, r6
 800f29c:	d03d      	beq.n	800f31a <HAL_GPIO_Init+0x19e>
 800f29e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f2a2:	42b0      	cmp	r0, r6
 800f2a4:	d03b      	beq.n	800f31e <HAL_GPIO_Init+0x1a2>
 800f2a6:	4548      	cmp	r0, r9
 800f2a8:	d03b      	beq.n	800f322 <HAL_GPIO_Init+0x1a6>
 800f2aa:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800f2ae:	42b0      	cmp	r0, r6
 800f2b0:	d039      	beq.n	800f326 <HAL_GPIO_Init+0x1aa>
 800f2b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f2b6:	42b0      	cmp	r0, r6
 800f2b8:	bf14      	ite	ne
 800f2ba:	2608      	movne	r6, #8
 800f2bc:	2607      	moveq	r6, #7
 800f2be:	fa06 f60e 	lsl.w	r6, r6, lr
 800f2c2:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f2c6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800f2c8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800f2ca:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f2cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800f2d0:	bf0c      	ite	eq
 800f2d2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800f2d4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800f2d6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800f2d8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f2da:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800f2de:	bf0c      	ite	eq
 800f2e0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800f2e2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800f2e4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f2e6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f2e8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800f2ec:	bf0c      	ite	eq
 800f2ee:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800f2f0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800f2f2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800f2f4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f2f6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800f2f8:	bf54      	ite	pl
 800f2fa:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800f2fc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800f2fe:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f300:	3301      	adds	r3, #1
 800f302:	2b10      	cmp	r3, #16
 800f304:	f47f af45 	bne.w	800f192 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800f308:	b005      	add	sp, #20
 800f30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f30e:	465e      	mov	r6, fp
 800f310:	e7d5      	b.n	800f2be <HAL_GPIO_Init+0x142>
 800f312:	2601      	movs	r6, #1
 800f314:	e7d3      	b.n	800f2be <HAL_GPIO_Init+0x142>
 800f316:	2602      	movs	r6, #2
 800f318:	e7d1      	b.n	800f2be <HAL_GPIO_Init+0x142>
 800f31a:	2603      	movs	r6, #3
 800f31c:	e7cf      	b.n	800f2be <HAL_GPIO_Init+0x142>
 800f31e:	2604      	movs	r6, #4
 800f320:	e7cd      	b.n	800f2be <HAL_GPIO_Init+0x142>
 800f322:	2605      	movs	r6, #5
 800f324:	e7cb      	b.n	800f2be <HAL_GPIO_Init+0x142>
 800f326:	2606      	movs	r6, #6
 800f328:	e7c9      	b.n	800f2be <HAL_GPIO_Init+0x142>
 800f32a:	bf00      	nop
 800f32c:	40013c00 	.word	0x40013c00
 800f330:	40020000 	.word	0x40020000
 800f334:	40023800 	.word	0x40023800
 800f338:	40021400 	.word	0x40021400

0800f33c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800f33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800f340:	4d40      	ldr	r5, [pc, #256]	; (800f444 <HAL_GPIO_DeInit+0x108>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800f342:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f44c <HAL_GPIO_DeInit+0x110>
 800f346:	f8df a108 	ldr.w	sl, [pc, #264]	; 800f450 <HAL_GPIO_DeInit+0x114>
 800f34a:	f8df b108 	ldr.w	fp, [pc, #264]	; 800f454 <HAL_GPIO_DeInit+0x118>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f34e:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 800f350:	2301      	movs	r3, #1
 800f352:	fa03 fe02 	lsl.w	lr, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 800f356:	ea0e 0401 	and.w	r4, lr, r1
    if(iocurrent == ioposition)
 800f35a:	45a6      	cmp	lr, r4
 800f35c:	d15f      	bne.n	800f41e <HAL_GPIO_DeInit+0xe2>
 800f35e:	f022 0603 	bic.w	r6, r2, #3
 800f362:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800f366:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800f36a:	f002 0c03 	and.w	ip, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800f36e:	4b36      	ldr	r3, [pc, #216]	; (800f448 <HAL_GPIO_DeInit+0x10c>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 800f370:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800f374:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f378:	270f      	movs	r7, #15
 800f37a:	fa07 f70c 	lsl.w	r7, r7, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800f37e:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800f380:	ea07 0808 	and.w	r8, r7, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800f384:	d050      	beq.n	800f428 <HAL_GPIO_DeInit+0xec>
 800f386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f38a:	4298      	cmp	r0, r3
 800f38c:	d04e      	beq.n	800f42c <HAL_GPIO_DeInit+0xf0>
 800f38e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f392:	4298      	cmp	r0, r3
 800f394:	d04c      	beq.n	800f430 <HAL_GPIO_DeInit+0xf4>
 800f396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f39a:	4298      	cmp	r0, r3
 800f39c:	d04a      	beq.n	800f434 <HAL_GPIO_DeInit+0xf8>
 800f39e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f3a2:	4298      	cmp	r0, r3
 800f3a4:	d048      	beq.n	800f438 <HAL_GPIO_DeInit+0xfc>
 800f3a6:	4548      	cmp	r0, r9
 800f3a8:	d048      	beq.n	800f43c <HAL_GPIO_DeInit+0x100>
 800f3aa:	4550      	cmp	r0, sl
 800f3ac:	d048      	beq.n	800f440 <HAL_GPIO_DeInit+0x104>
 800f3ae:	4558      	cmp	r0, fp
 800f3b0:	bf0c      	ite	eq
 800f3b2:	2307      	moveq	r3, #7
 800f3b4:	2308      	movne	r3, #8
 800f3b6:	fa03 f30c 	lsl.w	r3, r3, ip
 800f3ba:	4543      	cmp	r3, r8
 800f3bc:	d110      	bne.n	800f3e0 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800f3be:	682b      	ldr	r3, [r5, #0]
 800f3c0:	43e4      	mvns	r4, r4
 800f3c2:	4023      	ands	r3, r4
 800f3c4:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800f3c6:	686b      	ldr	r3, [r5, #4]
 800f3c8:	4023      	ands	r3, r4
 800f3ca:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800f3cc:	68ab      	ldr	r3, [r5, #8]
 800f3ce:	4023      	ands	r3, r4
 800f3d0:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800f3d2:	68eb      	ldr	r3, [r5, #12]
 800f3d4:	401c      	ands	r4, r3
 800f3d6:	60ec      	str	r4, [r5, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800f3d8:	68b3      	ldr	r3, [r6, #8]
 800f3da:	ea23 0707 	bic.w	r7, r3, r7
 800f3de:	60b7      	str	r7, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f3e0:	0056      	lsls	r6, r2, #1
 800f3e2:	2303      	movs	r3, #3
 800f3e4:	6804      	ldr	r4, [r0, #0]
 800f3e6:	40b3      	lsls	r3, r6
 800f3e8:	43db      	mvns	r3, r3
 800f3ea:	401c      	ands	r4, r3
 800f3ec:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f3ee:	08d4      	lsrs	r4, r2, #3
 800f3f0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800f3f4:	f002 0c07 	and.w	ip, r2, #7
 800f3f8:	6a26      	ldr	r6, [r4, #32]
 800f3fa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f3fe:	270f      	movs	r7, #15
 800f400:	fa07 f70c 	lsl.w	r7, r7, ip
 800f404:	ea26 0707 	bic.w	r7, r6, r7
 800f408:	6227      	str	r7, [r4, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f40a:	68c4      	ldr	r4, [r0, #12]
 800f40c:	401c      	ands	r4, r3
 800f40e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f410:	6844      	ldr	r4, [r0, #4]
 800f412:	ea24 040e 	bic.w	r4, r4, lr
 800f416:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f418:	6884      	ldr	r4, [r0, #8]
 800f41a:	4023      	ands	r3, r4
 800f41c:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f41e:	3201      	adds	r2, #1
 800f420:	2a10      	cmp	r2, #16
 800f422:	d195      	bne.n	800f350 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 800f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800f428:	2300      	movs	r3, #0
 800f42a:	e7c4      	b.n	800f3b6 <HAL_GPIO_DeInit+0x7a>
 800f42c:	2301      	movs	r3, #1
 800f42e:	e7c2      	b.n	800f3b6 <HAL_GPIO_DeInit+0x7a>
 800f430:	2302      	movs	r3, #2
 800f432:	e7c0      	b.n	800f3b6 <HAL_GPIO_DeInit+0x7a>
 800f434:	2303      	movs	r3, #3
 800f436:	e7be      	b.n	800f3b6 <HAL_GPIO_DeInit+0x7a>
 800f438:	2304      	movs	r3, #4
 800f43a:	e7bc      	b.n	800f3b6 <HAL_GPIO_DeInit+0x7a>
 800f43c:	2305      	movs	r3, #5
 800f43e:	e7ba      	b.n	800f3b6 <HAL_GPIO_DeInit+0x7a>
 800f440:	2306      	movs	r3, #6
 800f442:	e7b8      	b.n	800f3b6 <HAL_GPIO_DeInit+0x7a>
 800f444:	40013c00 	.word	0x40013c00
 800f448:	40020000 	.word	0x40020000
 800f44c:	40021400 	.word	0x40021400
 800f450:	40021800 	.word	0x40021800
 800f454:	40021c00 	.word	0x40021c00

0800f458 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f458:	6903      	ldr	r3, [r0, #16]
 800f45a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800f45c:	bf14      	ite	ne
 800f45e:	2001      	movne	r0, #1
 800f460:	2000      	moveq	r0, #0
 800f462:	4770      	bx	lr

0800f464 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f464:	b10a      	cbz	r2, 800f46a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f466:	6181      	str	r1, [r0, #24]
  }
}
 800f468:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f46a:	0409      	lsls	r1, r1, #16
 800f46c:	e7fb      	b.n	800f466 <HAL_GPIO_WritePin+0x2>

0800f46e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800f46e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f472:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800f474:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 800f478:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f47c:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 800f480:	f8bd e038 	ldrh.w	lr, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 800f484:	2801      	cmp	r0, #1
 800f486:	d027      	beq.n	800f4d8 <HAL_HCD_HC_Init+0x6a>
  hhcd->hc[ch_num].do_ping = 0U;
 800f488:	2028      	movs	r0, #40	; 0x28
 800f48a:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 800f48e:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 800f490:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800f492:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 800f496:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800f49a:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 800f49e:	bf08      	it	eq
 800f4a0:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 800f4a2:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800f4a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 800f4aa:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800f4ae:	f880 c03f 	strb.w	ip, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800f4b2:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 800f4b6:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800f4ba:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 800f4be:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 800f4c2:	e9cd ce01 	strd	ip, lr, [sp, #4]
 800f4c6:	9700      	str	r7, [sp, #0]
 800f4c8:	6820      	ldr	r0, [r4, #0]
 800f4ca:	f003 f8b5 	bl	8012638 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800f4ce:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 800f4d2:	b004      	add	sp, #16
 800f4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 800f4d8:	2002      	movs	r0, #2
 800f4da:	e7fa      	b.n	800f4d2 <HAL_HCD_HC_Init+0x64>

0800f4dc <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 800f4dc:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800f4e0:	2b01      	cmp	r3, #1
{
 800f4e2:	b510      	push	{r4, lr}
 800f4e4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800f4e6:	d009      	beq.n	800f4fc <HAL_HCD_HC_Halt+0x20>
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f4ee:	6800      	ldr	r0, [r0, #0]
 800f4f0:	f003 f92a 	bl	8012748 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 800f4fa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800f4fc:	2002      	movs	r0, #2
 800f4fe:	e7fc      	b.n	800f4fa <HAL_HCD_HC_Halt+0x1e>

0800f500 <HAL_HCD_Init>:
{
 800f500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 800f504:	4607      	mov	r7, r0
{
 800f506:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 800f508:	2800      	cmp	r0, #0
 800f50a:	d041      	beq.n	800f590 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800f50c:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 800f510:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800f512:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f516:	b91b      	cbnz	r3, 800f520 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 800f518:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 800f51c:	f006 fd42 	bl	8015fa4 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 800f520:	2303      	movs	r3, #3
 800f522:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800f526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 800f528:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800f52a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 800f52e:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 800f532:	bf08      	it	eq
 800f534:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 800f536:	f002 ff3b 	bl	80123b0 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800f53a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f53c:	466d      	mov	r5, sp
 800f53e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f544:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f548:	e885 0003 	stmia.w	r5, {r0, r1}
 800f54c:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800f550:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800f552:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800f556:	6838      	ldr	r0, [r7, #0]
 800f558:	f002 fee4 	bl	8012324 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800f55c:	f856 0b10 	ldr.w	r0, [r6], #16
 800f560:	2101      	movs	r1, #1
 800f562:	f002 ff2b 	bl	80123bc <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800f566:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f568:	466d      	mov	r5, sp
 800f56a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f56c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f56e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f570:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f574:	e885 0003 	stmia.w	r5, {r0, r1}
 800f578:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800f57c:	6838      	ldr	r0, [r7, #0]
 800f57e:	f002 ffdb 	bl	8012538 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800f582:	2301      	movs	r3, #1
 800f584:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 800f588:	2000      	movs	r0, #0
}
 800f58a:	b00a      	add	sp, #40	; 0x28
 800f58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800f590:	2001      	movs	r0, #1
 800f592:	e7fa      	b.n	800f58a <HAL_HCD_Init+0x8a>

0800f594 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800f594:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 800f596:	2428      	movs	r4, #40	; 0x28
 800f598:	fb04 0401 	mla	r4, r4, r1, r0
{
 800f59c:	f89d 7010 	ldrb.w	r7, [sp, #16]
 800f5a0:	9e05      	ldr	r6, [sp, #20]
 800f5a2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800f5a6:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 800f5aa:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800f5ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 800f5b2:	b97f      	cbnz	r7, 800f5d4 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800f5b4:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800f5b6:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800f5b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 800f5bc:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  switch (ep_type)
 800f5c0:	d02b      	beq.n	800f61a <HAL_HCD_HC_SubmitRequest+0x86>
 800f5c2:	42bb      	cmp	r3, r7
 800f5c4:	d029      	beq.n	800f61a <HAL_HCD_HC_SubmitRequest+0x86>
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d131      	bne.n	800f62e <HAL_HCD_HC_SubmitRequest+0x9a>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800f5ca:	2328      	movs	r3, #40	; 0x28
 800f5cc:	fb03 0301 	mla	r3, r3, r1, r0
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	e02a      	b.n	800f62a <HAL_HCD_HC_SubmitRequest+0x96>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800f5d4:	f04f 0c02 	mov.w	ip, #2
 800f5d8:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  switch (ep_type)
 800f5dc:	2b03      	cmp	r3, #3
 800f5de:	d826      	bhi.n	800f62e <HAL_HCD_HC_SubmitRequest+0x9a>
 800f5e0:	a401      	add	r4, pc, #4	; (adr r4, 800f5e8 <HAL_HCD_HC_SubmitRequest+0x54>)
 800f5e2:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 800f5e6:	bf00      	nop
 800f5e8:	0800f5f9 	.word	0x0800f5f9
 800f5ec:	0800f5cb 	.word	0x0800f5cb
 800f5f0:	0800f61b 	.word	0x0800f61b
 800f5f4:	0800f61b 	.word	0x0800f61b
      if ((token == 1U) && (direction == 0U)) /*send data */
 800f5f8:	2f01      	cmp	r7, #1
 800f5fa:	d118      	bne.n	800f62e <HAL_HCD_HC_SubmitRequest+0x9a>
 800f5fc:	b9ba      	cbnz	r2, 800f62e <HAL_HCD_HC_SubmitRequest+0x9a>
        if (length == 0U)
 800f5fe:	b925      	cbnz	r5, 800f60a <HAL_HCD_HC_SubmitRequest+0x76>
          hhcd->hc[ch_num].toggle_out = 1U;
 800f600:	2328      	movs	r3, #40	; 0x28
 800f602:	fb03 0301 	mla	r3, r3, r1, r0
 800f606:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800f60a:	2328      	movs	r3, #40	; 0x28
 800f60c:	fb03 0301 	mla	r3, r3, r1, r0
 800f610:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800f614:	b14a      	cbz	r2, 800f62a <HAL_HCD_HC_SubmitRequest+0x96>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800f616:	2202      	movs	r2, #2
 800f618:	e007      	b.n	800f62a <HAL_HCD_HC_SubmitRequest+0x96>
 800f61a:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800f61c:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 800f620:	b9ca      	cbnz	r2, 800f656 <HAL_HCD_HC_SubmitRequest+0xc2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800f622:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 800f626:	2c00      	cmp	r4, #0
 800f628:	d1f5      	bne.n	800f616 <HAL_HCD_HC_SubmitRequest+0x82>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800f62a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800f62e:	2428      	movs	r4, #40	; 0x28
 800f630:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800f634:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 800f636:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800f63a:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
 800f63c:	e9c3 6511 	strd	r6, r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800f640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 800f644:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 800f646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800f64a:	3138      	adds	r1, #56	; 0x38
 800f64c:	7c02      	ldrb	r2, [r0, #16]
 800f64e:	6800      	ldr	r0, [r0, #0]
}
 800f650:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800f652:	f003 b8dd 	b.w	8012810 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800f656:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800f65a:	e7db      	b.n	800f614 <HAL_HCD_HC_SubmitRequest+0x80>

0800f65c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800f65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800f660:	6806      	ldr	r6, [r0, #0]
{
 800f662:	b085      	sub	sp, #20
 800f664:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800f666:	4630      	mov	r0, r6
 800f668:	f002 ff08 	bl	801247c <USB_GetMode>
 800f66c:	2801      	cmp	r0, #1
 800f66e:	f040 80e4 	bne.w	800f83a <HAL_HCD_IRQHandler+0x1de>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800f672:	6828      	ldr	r0, [r5, #0]
 800f674:	f002 fefe 	bl	8012474 <USB_ReadInterrupts>
 800f678:	2800      	cmp	r0, #0
 800f67a:	f000 80de 	beq.w	800f83a <HAL_HCD_IRQHandler+0x1de>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800f67e:	6828      	ldr	r0, [r5, #0]
 800f680:	f002 fef8 	bl	8012474 <USB_ReadInterrupts>
 800f684:	0284      	lsls	r4, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800f686:	bf48      	it	mi
 800f688:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800f68a:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800f68c:	bf44      	itt	mi
 800f68e:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 800f692:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800f694:	f002 feee 	bl	8012474 <USB_ReadInterrupts>
 800f698:	02c0      	lsls	r0, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800f69a:	bf48      	it	mi
 800f69c:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800f69e:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800f6a0:	bf44      	itt	mi
 800f6a2:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 800f6a6:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800f6a8:	f002 fee4 	bl	8012474 <USB_ReadInterrupts>
 800f6ac:	0141      	lsls	r1, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800f6ae:	bf48      	it	mi
 800f6b0:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800f6b2:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800f6b4:	bf44      	itt	mi
 800f6b6:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 800f6ba:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800f6bc:	f002 feda 	bl	8012474 <USB_ReadInterrupts>
 800f6c0:	0782      	lsls	r2, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800f6c2:	bf48      	it	mi
 800f6c4:	682b      	ldrmi	r3, [r5, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800f6c6:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800f6c8:	bf44      	itt	mi
 800f6ca:	2202      	movmi	r2, #2
 800f6cc:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800f6ce:	f002 fed1 	bl	8012474 <USB_ReadInterrupts>
 800f6d2:	0083      	lsls	r3, r0, #2
 800f6d4:	d50e      	bpl.n	800f6f4 <HAL_HCD_IRQHandler+0x98>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800f6d6:	682b      	ldr	r3, [r5, #0]
 800f6d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f6dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800f6de:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 800f6e2:	07df      	lsls	r7, r3, #31
 800f6e4:	d406      	bmi.n	800f6f4 <HAL_HCD_IRQHandler+0x98>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f006 fca4 	bl	8016034 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800f6ec:	2101      	movs	r1, #1
 800f6ee:	6828      	ldr	r0, [r5, #0]
 800f6f0:	f002 fec8 	bl	8012484 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800f6f4:	6828      	ldr	r0, [r5, #0]
 800f6f6:	f002 febd 	bl	8012474 <USB_ReadInterrupts>
 800f6fa:	01c4      	lsls	r4, r0, #7
 800f6fc:	d53c      	bpl.n	800f778 <HAL_HCD_IRQHandler+0x11c>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6fe:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800f700:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800f704:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 800f706:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800f70a:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800f70c:	9b03      	ldr	r3, [sp, #12]
 800f70e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f712:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800f714:	9b02      	ldr	r3, [sp, #8]
 800f716:	0798      	lsls	r0, r3, #30
 800f718:	d509      	bpl.n	800f72e <HAL_HCD_IRQHandler+0xd2>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800f71a:	9b02      	ldr	r3, [sp, #8]
 800f71c:	07d9      	lsls	r1, r3, #31
 800f71e:	d502      	bpl.n	800f726 <HAL_HCD_IRQHandler+0xca>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800f720:	4628      	mov	r0, r5
 800f722:	f006 fc83 	bl	801602c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800f726:	9b03      	ldr	r3, [sp, #12]
 800f728:	f043 0302 	orr.w	r3, r3, #2
 800f72c:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800f72e:	9b02      	ldr	r3, [sp, #8]
 800f730:	071a      	lsls	r2, r3, #28
 800f732:	d517      	bpl.n	800f764 <HAL_HCD_IRQHandler+0x108>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800f734:	9b03      	ldr	r3, [sp, #12]
 800f736:	f043 0308 	orr.w	r3, r3, #8
 800f73a:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800f73c:	9b02      	ldr	r3, [sp, #8]
 800f73e:	075b      	lsls	r3, r3, #29
 800f740:	f140 8086 	bpl.w	800f850 <HAL_HCD_IRQHandler+0x1f4>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800f744:	69a9      	ldr	r1, [r5, #24]
 800f746:	2902      	cmp	r1, #2
 800f748:	d17a      	bne.n	800f840 <HAL_HCD_IRQHandler+0x1e4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800f74a:	9b02      	ldr	r3, [sp, #8]
 800f74c:	6828      	ldr	r0, [r5, #0]
 800f74e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800f752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800f756:	bf18      	it	ne
 800f758:	2101      	movne	r1, #1
 800f75a:	f002 fe93 	bl	8012484 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800f75e:	4628      	mov	r0, r5
 800f760:	f006 fc6d 	bl	801603e <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800f764:	9b02      	ldr	r3, [sp, #8]
 800f766:	069f      	lsls	r7, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800f768:	bf42      	ittt	mi
 800f76a:	9b03      	ldrmi	r3, [sp, #12]
 800f76c:	f043 0320 	orrmi.w	r3, r3, #32
 800f770:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800f772:	9b03      	ldr	r3, [sp, #12]
 800f774:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800f778:	6828      	ldr	r0, [r5, #0]
 800f77a:	f002 fe7b 	bl	8012474 <USB_ReadInterrupts>
 800f77e:	0704      	lsls	r4, r0, #28
 800f780:	d505      	bpl.n	800f78e <HAL_HCD_IRQHandler+0x132>
      HAL_HCD_SOF_Callback(hhcd);
 800f782:	4628      	mov	r0, r5
 800f784:	f006 fc4e 	bl	8016024 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800f788:	682b      	ldr	r3, [r5, #0]
 800f78a:	2208      	movs	r2, #8
 800f78c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800f78e:	6828      	ldr	r0, [r5, #0]
 800f790:	f002 fe70 	bl	8012474 <USB_ReadInterrupts>
 800f794:	0180      	lsls	r0, r0, #6
 800f796:	d512      	bpl.n	800f7be <HAL_HCD_IRQHandler+0x162>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800f798:	6828      	ldr	r0, [r5, #0]
 800f79a:	f002 ffd0 	bl	801273e <USB_HC_ReadInterrupt>
 800f79e:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 800f7a2:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800f7a4:	f04f 0900 	mov.w	r9, #0
 800f7a8:	9301      	str	r3, [sp, #4]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800f7aa:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800f7ac:	f04f 0802 	mov.w	r8, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800f7b0:	68ab      	ldr	r3, [r5, #8]
 800f7b2:	6828      	ldr	r0, [r5, #0]
 800f7b4:	454b      	cmp	r3, r9
 800f7b6:	d84f      	bhi.n	800f858 <HAL_HCD_IRQHandler+0x1fc>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800f7b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f7bc:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800f7be:	6828      	ldr	r0, [r5, #0]
 800f7c0:	f002 fe58 	bl	8012474 <USB_ReadInterrupts>
 800f7c4:	06c3      	lsls	r3, r0, #27
 800f7c6:	d538      	bpl.n	800f83a <HAL_HCD_IRQHandler+0x1de>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f7c8:	682c      	ldr	r4, [r5, #0]
 800f7ca:	69a3      	ldr	r3, [r4, #24]
 800f7cc:	f023 0310 	bic.w	r3, r3, #16
 800f7d0:	61a3      	str	r3, [r4, #24]
  temp = hhcd->Instance->GRXSTSP;
 800f7d2:	6a26      	ldr	r6, [r4, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800f7d4:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 800f7d8:	2a02      	cmp	r2, #2
 800f7da:	d129      	bne.n	800f830 <HAL_HCD_IRQHandler+0x1d4>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f7dc:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800f7e0:	f1b8 0f00 	cmp.w	r8, #0
 800f7e4:	d024      	beq.n	800f830 <HAL_HCD_IRQHandler+0x1d4>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800f7e6:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800f7ea:	2728      	movs	r7, #40	; 0x28
 800f7ec:	fb07 5706 	mla	r7, r7, r6, r5
 800f7f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7f2:	b1e9      	cbz	r1, 800f830 <HAL_HCD_IRQHandler+0x1d4>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800f7f4:	4642      	mov	r2, r8
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f002 fe2e 	bl	8012458 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800f7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7fe:	4443      	add	r3, r8
 800f800:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800f802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f804:	4443      	add	r3, r8
 800f806:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800f808:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
 800f80c:	0173      	lsls	r3, r6, #5
 800f80e:	18e2      	adds	r2, r4, r3
 800f810:	6911      	ldr	r1, [r2, #16]
 800f812:	4ab1      	ldr	r2, [pc, #708]	; (800fad8 <HAL_HCD_IRQHandler+0x47c>)
 800f814:	400a      	ands	r2, r1
 800f816:	b15a      	cbz	r2, 800f830 <HAL_HCD_IRQHandler+0x1d4>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f818:	58e2      	ldr	r2, [r4, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f81a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f81e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f822:	50e2      	str	r2, [r4, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800f824:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800f828:	f083 0301 	eor.w	r3, r3, #1
 800f82c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f830:	682a      	ldr	r2, [r5, #0]
 800f832:	6993      	ldr	r3, [r2, #24]
 800f834:	f043 0310 	orr.w	r3, r3, #16
 800f838:	6193      	str	r3, [r2, #24]
}
 800f83a:	b005      	add	sp, #20
 800f83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800f840:	68eb      	ldr	r3, [r5, #12]
 800f842:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 800f844:	bf04      	itt	eq
 800f846:	f64e 2260 	movweq	r2, #60000	; 0xea60
 800f84a:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 800f84e:	e786      	b.n	800f75e <HAL_HCD_IRQHandler+0x102>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800f850:	4628      	mov	r0, r5
 800f852:	f006 fbf8 	bl	8016046 <HAL_HCD_PortDisabled_Callback>
 800f856:	e785      	b.n	800f764 <HAL_HCD_IRQHandler+0x108>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800f858:	9a00      	ldr	r2, [sp, #0]
 800f85a:	f009 030f 	and.w	r3, r9, #15
 800f85e:	fa22 f303 	lsr.w	r3, r2, r3
 800f862:	07d9      	lsls	r1, r3, #31
 800f864:	f140 8095 	bpl.w	800f992 <HAL_HCD_IRQHandler+0x336>
 800f868:	ea4f 1349 	mov.w	r3, r9, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800f86c:	9a01      	ldr	r2, [sp, #4]
 800f86e:	fa5f f689 	uxtb.w	r6, r9
 800f872:	58d1      	ldr	r1, [r2, r3]
 800f874:	f500 6ba0 	add.w	fp, r0, #1280	; 0x500
 800f878:	ea4f 1a46 	mov.w	sl, r6, lsl #5
 800f87c:	eb0b 040a 	add.w	r4, fp, sl
 800f880:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800f884:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800f886:	f000 811d 	beq.w	800fac4 <HAL_HCD_IRQHandler+0x468>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800f88a:	074a      	lsls	r2, r1, #29
 800f88c:	d513      	bpl.n	800f8b6 <HAL_HCD_IRQHandler+0x25a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800f88e:	2104      	movs	r1, #4
 800f890:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f892:	68e1      	ldr	r1, [r4, #12]
 800f894:	f041 0102 	orr.w	r1, r1, #2
 800f898:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800f89a:	68a1      	ldr	r1, [r4, #8]
 800f89c:	0588      	lsls	r0, r1, #22
 800f89e:	d54a      	bpl.n	800f936 <HAL_HCD_IRQHandler+0x2da>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f8a0:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f8a2:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f8a4:	f043 0302 	orr.w	r3, r3, #2
 800f8a8:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f8aa:	4631      	mov	r1, r6
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f8ac:	f002 ff4c 	bl	8012748 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800f8b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8b4:	e0e6      	b.n	800fa84 <HAL_HCD_IRQHandler+0x428>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800f8b6:	68a1      	ldr	r1, [r4, #8]
 800f8b8:	05cb      	lsls	r3, r1, #23
 800f8ba:	d510      	bpl.n	800f8de <HAL_HCD_IRQHandler+0x282>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800f8bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f8c0:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800f8c2:	fb07 5106 	mla	r1, r7, r6, r5
 800f8c6:	f04f 0c07 	mov.w	ip, #7
 800f8ca:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f8ce:	68e1      	ldr	r1, [r4, #12]
 800f8d0:	f041 0102 	orr.w	r1, r1, #2
 800f8d4:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f8d6:	4631      	mov	r1, r6
 800f8d8:	f002 ff36 	bl	8012748 <USB_HC_Halt>
 800f8dc:	e7dd      	b.n	800f89a <HAL_HCD_IRQHandler+0x23e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800f8de:	68a1      	ldr	r1, [r4, #8]
 800f8e0:	0689      	lsls	r1, r1, #26
 800f8e2:	d502      	bpl.n	800f8ea <HAL_HCD_IRQHandler+0x28e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800f8e4:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800f8e6:	60a1      	str	r1, [r4, #8]
 800f8e8:	e7d7      	b.n	800f89a <HAL_HCD_IRQHandler+0x23e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800f8ea:	68a1      	ldr	r1, [r4, #8]
 800f8ec:	070a      	lsls	r2, r1, #28
 800f8ee:	d50e      	bpl.n	800f90e <HAL_HCD_IRQHandler+0x2b2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f8f0:	68e1      	ldr	r1, [r4, #12]
 800f8f2:	f041 0102 	orr.w	r1, r1, #2
 800f8f6:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800f8f8:	fb07 5106 	mla	r1, r7, r6, r5
 800f8fc:	f04f 0c05 	mov.w	ip, #5
 800f900:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800f904:	2110      	movs	r1, #16
 800f906:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800f908:	2108      	movs	r1, #8
 800f90a:	60a1      	str	r1, [r4, #8]
 800f90c:	e7e3      	b.n	800f8d6 <HAL_HCD_IRQHandler+0x27a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800f90e:	68a1      	ldr	r1, [r4, #8]
 800f910:	054b      	lsls	r3, r1, #21
 800f912:	d5c2      	bpl.n	800f89a <HAL_HCD_IRQHandler+0x23e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f914:	68e1      	ldr	r1, [r4, #12]
 800f916:	f041 0102 	orr.w	r1, r1, #2
 800f91a:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f91c:	4631      	mov	r1, r6
 800f91e:	f002 ff13 	bl	8012748 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800f922:	2110      	movs	r1, #16
 800f924:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800f926:	fb07 5106 	mla	r1, r7, r6, r5
 800f92a:	2008      	movs	r0, #8
 800f92c:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800f930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f934:	e7d7      	b.n	800f8e6 <HAL_HCD_IRQHandler+0x28a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800f936:	68a1      	ldr	r1, [r4, #8]
 800f938:	07c9      	lsls	r1, r1, #31
 800f93a:	d548      	bpl.n	800f9ce <HAL_HCD_IRQHandler+0x372>
    if (hhcd->Init.dma_enable != 0U)
 800f93c:	6929      	ldr	r1, [r5, #16]
 800f93e:	b149      	cbz	r1, 800f954 <HAL_HCD_IRQHandler+0x2f8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800f940:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800f944:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800f946:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800f94a:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800f94e:	1a09      	subs	r1, r1, r0
 800f950:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 800f954:	fb07 5106 	mla	r1, r7, r6, r5
 800f958:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 800f95a:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 800f95c:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800f960:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800f962:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800f964:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 800f968:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 800f96c:	d114      	bne.n	800f998 <HAL_HCD_IRQHandler+0x33c>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f96e:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f970:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f972:	f043 0302 	orr.w	r3, r3, #2
 800f976:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f978:	4631      	mov	r1, r6
 800f97a:	f002 fee5 	bl	8012748 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800f97e:	2310      	movs	r3, #16
 800f980:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800f982:	fb07 5606 	mla	r6, r7, r6, r5
 800f986:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 800f98a:	f083 0301 	eor.w	r3, r3, #1
 800f98e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800f992:	f109 0901 	add.w	r9, r9, #1
 800f996:	e70b      	b.n	800f7b0 <HAL_HCD_IRQHandler+0x154>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800f998:	2a03      	cmp	r2, #3
 800f99a:	d10d      	bne.n	800f9b8 <HAL_HCD_IRQHandler+0x35c>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800f99c:	f85b 000a 	ldr.w	r0, [fp, sl]
 800f9a0:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800f9a4:	f84b 000a 	str.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800f9a8:	461a      	mov	r2, r3
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800f9aa:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800f9ae:	4631      	mov	r1, r6
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	f006 fb43 	bl	801603c <HAL_HCD_HC_NotifyURBChange_Callback>
 800f9b6:	e7e4      	b.n	800f982 <HAL_HCD_IRQHandler+0x326>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800f9b8:	2a01      	cmp	r2, #1
 800f9ba:	d1e2      	bne.n	800f982 <HAL_HCD_IRQHandler+0x326>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800f9bc:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800f9c0:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800f9c4:	f083 0301 	eor.w	r3, r3, #1
 800f9c8:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
 800f9cc:	e7ef      	b.n	800f9ae <HAL_HCD_IRQHandler+0x352>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800f9ce:	68a1      	ldr	r1, [r4, #8]
 800f9d0:	078a      	lsls	r2, r1, #30
 800f9d2:	d542      	bpl.n	800fa5a <HAL_HCD_IRQHandler+0x3fe>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800f9d4:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800f9d6:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800f9da:	f021 0102 	bic.w	r1, r1, #2
 800f9de:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800f9e0:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 800f9e4:	2901      	cmp	r1, #1
 800f9e6:	d102      	bne.n	800f9ee <HAL_HCD_IRQHandler+0x392>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800f9e8:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 800f9ec:	e02a      	b.n	800fa44 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800f9ee:	2905      	cmp	r1, #5
 800f9f0:	d0fa      	beq.n	800f9e8 <HAL_HCD_IRQHandler+0x38c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800f9f2:	2906      	cmp	r1, #6
 800f9f4:	d001      	beq.n	800f9fa <HAL_HCD_IRQHandler+0x39e>
 800f9f6:	2908      	cmp	r1, #8
 800f9f8:	d10f      	bne.n	800fa1a <HAL_HCD_IRQHandler+0x3be>
      hhcd->hc[ch_num].ErrCnt++;
 800f9fa:	fb07 5106 	mla	r1, r7, r6, r5
 800f9fe:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800fa00:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800fa02:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 800fa04:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].ErrCnt = 0U;
 800fa06:	bf81      	itttt	hi
 800fa08:	2000      	movhi	r0, #0
 800fa0a:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800fa0c:	2004      	movhi	r0, #4
 800fa0e:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800fa12:	bf98      	it	ls
 800fa14:	f881 805c 	strbls.w	r8, [r1, #92]	; 0x5c
 800fa18:	e003      	b.n	800fa22 <HAL_HCD_IRQHandler+0x3c6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800fa1a:	2903      	cmp	r1, #3
 800fa1c:	d10a      	bne.n	800fa34 <HAL_HCD_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800fa1e:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800fa22:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fa26:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fa2a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800fa2e:	f84b 100a 	str.w	r1, [fp, sl]
 800fa32:	e007      	b.n	800fa44 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800fa34:	2907      	cmp	r1, #7
 800fa36:	d105      	bne.n	800fa44 <HAL_HCD_IRQHandler+0x3e8>
      hhcd->hc[ch_num].ErrCnt++;
 800fa38:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	6583      	str	r3, [r0, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800fa3e:	2304      	movs	r3, #4
 800fa40:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800fa44:	fb07 5306 	mla	r3, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800fa48:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800fa4c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800fa50:	4631      	mov	r1, r6
 800fa52:	4628      	mov	r0, r5
 800fa54:	f006 faf2 	bl	801603c <HAL_HCD_HC_NotifyURBChange_Callback>
 800fa58:	e79b      	b.n	800f992 <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800fa5a:	68a1      	ldr	r1, [r4, #8]
 800fa5c:	6828      	ldr	r0, [r5, #0]
 800fa5e:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800fa62:	d011      	beq.n	800fa88 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fa64:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800fa66:	fb07 5206 	mla	r2, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fa6a:	f043 0302 	orr.w	r3, r3, #2
 800fa6e:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800fa70:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fa72:	3301      	adds	r3, #1
 800fa74:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 800fa76:	2306      	movs	r3, #6
 800fa78:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800fa7c:	4631      	mov	r1, r6
 800fa7e:	f002 fe63 	bl	8012748 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800fa82:	2380      	movs	r3, #128	; 0x80
 800fa84:	60a3      	str	r3, [r4, #8]
 800fa86:	e784      	b.n	800f992 <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800fa88:	68a3      	ldr	r3, [r4, #8]
 800fa8a:	06db      	lsls	r3, r3, #27
 800fa8c:	d581      	bpl.n	800f992 <HAL_HCD_IRQHandler+0x336>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800fa8e:	fb07 5206 	mla	r2, r7, r6, r5
 800fa92:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800fa96:	2b03      	cmp	r3, #3
 800fa98:	d109      	bne.n	800faae <HAL_HCD_IRQHandler+0x452>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800fa9a:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fa9c:	68e3      	ldr	r3, [r4, #12]
 800fa9e:	f043 0302 	orr.w	r3, r3, #2
 800faa2:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800faa4:	4631      	mov	r1, r6
 800faa6:	f002 fe4f 	bl	8012748 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800faaa:	2310      	movs	r3, #16
 800faac:	e7ea      	b.n	800fa84 <HAL_HCD_IRQHandler+0x428>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800faae:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 800fab2:	d1fa      	bne.n	800faaa <HAL_HCD_IRQHandler+0x44e>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800fab4:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 800fab6:	692b      	ldr	r3, [r5, #16]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1f6      	bne.n	800faaa <HAL_HCD_IRQHandler+0x44e>
        hhcd->hc[ch_num].state = HC_NAK;
 800fabc:	2303      	movs	r3, #3
 800fabe:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 800fac2:	e7eb      	b.n	800fa9c <HAL_HCD_IRQHandler+0x440>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800fac4:	f011 0c04 	ands.w	ip, r1, #4
 800fac8:	d008      	beq.n	800fadc <HAL_HCD_IRQHandler+0x480>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800faca:	2304      	movs	r3, #4
 800facc:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800face:	68e3      	ldr	r3, [r4, #12]
 800fad0:	f043 0302 	orr.w	r3, r3, #2
 800fad4:	60e3      	str	r3, [r4, #12]
 800fad6:	e75c      	b.n	800f992 <HAL_HCD_IRQHandler+0x336>
 800fad8:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800fadc:	68a1      	ldr	r1, [r4, #8]
 800fade:	f011 0120 	ands.w	r1, r1, #32
 800fae2:	d014      	beq.n	800fb0e <HAL_HCD_IRQHandler+0x4b2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800fae4:	2320      	movs	r3, #32
 800fae6:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800fae8:	fb07 5306 	mla	r3, r7, r6, r5
 800faec:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800faf0:	2a01      	cmp	r2, #1
 800faf2:	f47f af4e 	bne.w	800f992 <HAL_HCD_IRQHandler+0x336>
      hhcd->hc[ch_num].do_ping = 0U;
 800faf6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800fafa:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fafe:	68e3      	ldr	r3, [r4, #12]
 800fb00:	f043 0302 	orr.w	r3, r3, #2
 800fb04:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800fb06:	4631      	mov	r1, r6
 800fb08:	f002 fe1e 	bl	8012748 <USB_HC_Halt>
 800fb0c:	e741      	b.n	800f992 <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800fb0e:	68a3      	ldr	r3, [r4, #8]
 800fb10:	065a      	lsls	r2, r3, #25
 800fb12:	d511      	bpl.n	800fb38 <HAL_HCD_IRQHandler+0x4dc>
    hhcd->hc[ch_num].state = HC_NYET;
 800fb14:	fb07 5306 	mla	r3, r7, r6, r5
 800fb18:	2204      	movs	r2, #4
 800fb1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 800fb1e:	2201      	movs	r2, #1
 800fb20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800fb24:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fb26:	68e3      	ldr	r3, [r4, #12]
 800fb28:	f043 0302 	orr.w	r3, r3, #2
 800fb2c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800fb2e:	4631      	mov	r1, r6
 800fb30:	f002 fe0a 	bl	8012748 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800fb34:	2340      	movs	r3, #64	; 0x40
 800fb36:	e7a5      	b.n	800fa84 <HAL_HCD_IRQHandler+0x428>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800fb38:	68a1      	ldr	r1, [r4, #8]
 800fb3a:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 800fb3e:	d005      	beq.n	800fb4c <HAL_HCD_IRQHandler+0x4f0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fb40:	68e3      	ldr	r3, [r4, #12]
 800fb42:	f043 0302 	orr.w	r3, r3, #2
 800fb46:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800fb48:	4631      	mov	r1, r6
 800fb4a:	e6af      	b.n	800f8ac <HAL_HCD_IRQHandler+0x250>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800fb4c:	68a3      	ldr	r3, [r4, #8]
 800fb4e:	07db      	lsls	r3, r3, #31
 800fb50:	d50f      	bpl.n	800fb72 <HAL_HCD_IRQHandler+0x516>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fb52:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800fb54:	fb07 5a06 	mla	sl, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fb58:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 800fb5c:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fb60:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800fb62:	4631      	mov	r1, r6
 800fb64:	f002 fdf0 	bl	8012748 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800fb68:	2201      	movs	r2, #1
 800fb6a:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800fb6c:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 800fb70:	e70f      	b.n	800f992 <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800fb72:	68a1      	ldr	r1, [r4, #8]
 800fb74:	0709      	lsls	r1, r1, #28
 800fb76:	d50e      	bpl.n	800fb96 <HAL_HCD_IRQHandler+0x53a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800fb78:	2308      	movs	r3, #8
 800fb7a:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fb7c:	68e3      	ldr	r3, [r4, #12]
 800fb7e:	f043 0302 	orr.w	r3, r3, #2
 800fb82:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800fb84:	4631      	mov	r1, r6
 800fb86:	f002 fddf 	bl	8012748 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800fb8a:	fb07 5606 	mla	r6, r7, r6, r5
 800fb8e:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800fb90:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 800fb94:	e6fd      	b.n	800f992 <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800fb96:	68a1      	ldr	r1, [r4, #8]
 800fb98:	06ca      	lsls	r2, r1, #27
 800fb9a:	d514      	bpl.n	800fbc6 <HAL_HCD_IRQHandler+0x56a>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800fb9c:	fb07 5306 	mla	r3, r7, r6, r5
 800fba0:	2200      	movs	r2, #0
 800fba2:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 800fba4:	2203      	movs	r2, #3
 800fba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 800fbaa:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800fbae:	2a00      	cmp	r2, #0
 800fbb0:	f47f af74 	bne.w	800fa9c <HAL_HCD_IRQHandler+0x440>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800fbb4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800fbb8:	2a00      	cmp	r2, #0
 800fbba:	f47f af6f 	bne.w	800fa9c <HAL_HCD_IRQHandler+0x440>
        hhcd->hc[ch_num].do_ping = 1U;
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800fbc4:	e76a      	b.n	800fa9c <HAL_HCD_IRQHandler+0x440>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800fbc6:	68a1      	ldr	r1, [r4, #8]
 800fbc8:	060b      	lsls	r3, r1, #24
 800fbca:	d50c      	bpl.n	800fbe6 <HAL_HCD_IRQHandler+0x58a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fbcc:	68e3      	ldr	r3, [r4, #12]
 800fbce:	f043 0302 	orr.w	r3, r3, #2
 800fbd2:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800fbd4:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
 800fbd6:	fb07 5606 	mla	r6, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800fbda:	f002 fdb5 	bl	8012748 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800fbde:	2306      	movs	r3, #6
 800fbe0:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 800fbe4:	e74d      	b.n	800fa82 <HAL_HCD_IRQHandler+0x426>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800fbe6:	68a1      	ldr	r1, [r4, #8]
 800fbe8:	0549      	lsls	r1, r1, #21
 800fbea:	d50f      	bpl.n	800fc0c <HAL_HCD_IRQHandler+0x5b0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fbec:	68e3      	ldr	r3, [r4, #12]
 800fbee:	f043 0302 	orr.w	r3, r3, #2
 800fbf2:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800fbf4:	4631      	mov	r1, r6
 800fbf6:	f002 fda7 	bl	8012748 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800fbfa:	2310      	movs	r3, #16
 800fbfc:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800fbfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc02:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800fc04:	fb07 5606 	mla	r6, r7, r6, r5
 800fc08:	2308      	movs	r3, #8
 800fc0a:	e7c1      	b.n	800fb90 <HAL_HCD_IRQHandler+0x534>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800fc0c:	68a1      	ldr	r1, [r4, #8]
 800fc0e:	078a      	lsls	r2, r1, #30
 800fc10:	f57f aebf 	bpl.w	800f992 <HAL_HCD_IRQHandler+0x336>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800fc14:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800fc16:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800fc1a:	f021 0102 	bic.w	r1, r1, #2
 800fc1e:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800fc20:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 800fc24:	2901      	cmp	r1, #1
 800fc26:	d10e      	bne.n	800fc46 <HAL_HCD_IRQHandler+0x5ea>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800fc28:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800fc2c:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800fc30:	3b02      	subs	r3, #2
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	f63f af06 	bhi.w	800fa44 <HAL_HCD_IRQHandler+0x3e8>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800fc38:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800fc3c:	f083 0301 	eor.w	r3, r3, #1
 800fc40:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 800fc44:	e6fe      	b.n	800fa44 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800fc46:	2903      	cmp	r1, #3
 800fc48:	d102      	bne.n	800fc50 <HAL_HCD_IRQHandler+0x5f4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800fc4a:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 800fc4e:	e6f9      	b.n	800fa44 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800fc50:	2904      	cmp	r1, #4
 800fc52:	d0fa      	beq.n	800fc4a <HAL_HCD_IRQHandler+0x5ee>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800fc54:	2905      	cmp	r1, #5
 800fc56:	f43f aec7 	beq.w	800f9e8 <HAL_HCD_IRQHandler+0x38c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800fc5a:	2906      	cmp	r1, #6
 800fc5c:	f43f aecd 	beq.w	800f9fa <HAL_HCD_IRQHandler+0x39e>
 800fc60:	2908      	cmp	r1, #8
 800fc62:	f47f aeef 	bne.w	800fa44 <HAL_HCD_IRQHandler+0x3e8>
 800fc66:	e6c8      	b.n	800f9fa <HAL_HCD_IRQHandler+0x39e>

0800fc68 <HAL_HCD_Start>:
{
 800fc68:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 800fc6a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800fc6e:	2b01      	cmp	r3, #1
{
 800fc70:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800fc72:	d00d      	beq.n	800fc90 <HAL_HCD_Start+0x28>
 800fc74:	2501      	movs	r5, #1
 800fc76:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800fc7a:	6800      	ldr	r0, [r0, #0]
 800fc7c:	f002 fb92 	bl	80123a4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800fc80:	4629      	mov	r1, r5
 800fc82:	6820      	ldr	r0, [r4, #0]
 800fc84:	f002 fc38 	bl	80124f8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800fc88:	2000      	movs	r0, #0
 800fc8a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 800fc8e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 800fc90:	2002      	movs	r0, #2
 800fc92:	e7fc      	b.n	800fc8e <HAL_HCD_Start+0x26>

0800fc94 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 800fc94:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800fc98:	2b01      	cmp	r3, #1
{
 800fc9a:	b510      	push	{r4, lr}
 800fc9c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800fc9e:	d009      	beq.n	800fcb4 <HAL_HCD_Stop+0x20>
 800fca0:	2301      	movs	r3, #1
 800fca2:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800fca6:	6800      	ldr	r0, [r0, #0]
 800fca8:	f002 fe5e 	bl	8012968 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800fcac:	2000      	movs	r0, #0
 800fcae:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 800fcb2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800fcb4:	2002      	movs	r0, #2
 800fcb6:	e7fc      	b.n	800fcb2 <HAL_HCD_Stop+0x1e>

0800fcb8 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800fcb8:	6800      	ldr	r0, [r0, #0]
 800fcba:	f002 bbff 	b.w	80124bc <USB_ResetPort>

0800fcbe <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800fcbe:	2328      	movs	r3, #40	; 0x28
 800fcc0:	fb03 0101 	mla	r1, r3, r1, r0
}
 800fcc4:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800fcc8:	4770      	bx	lr

0800fcca <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800fcca:	2328      	movs	r3, #40	; 0x28
 800fccc:	fb03 0101 	mla	r1, r3, r1, r0
}
 800fcd0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800fcd2:	4770      	bx	lr

0800fcd4 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 800fcd4:	6800      	ldr	r0, [r0, #0]
 800fcd6:	f002 bcaa 	b.w	801262e <USB_GetCurrentFrame>

0800fcda <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800fcda:	6800      	ldr	r0, [r0, #0]
 800fcdc:	f002 bc9c 	b.w	8012618 <USB_GetHostSpeed>

0800fce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fce4:	4604      	mov	r4, r0
 800fce6:	b908      	cbnz	r0, 800fcec <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800fce8:	2001      	movs	r0, #1
 800fcea:	e03f      	b.n	800fd6c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fcec:	6803      	ldr	r3, [r0, #0]
 800fcee:	07dd      	lsls	r5, r3, #31
 800fcf0:	d410      	bmi.n	800fd14 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fcf2:	6823      	ldr	r3, [r4, #0]
 800fcf4:	0798      	lsls	r0, r3, #30
 800fcf6:	d45a      	bmi.n	800fdae <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fcf8:	6823      	ldr	r3, [r4, #0]
 800fcfa:	071a      	lsls	r2, r3, #28
 800fcfc:	f100 809c 	bmi.w	800fe38 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fd00:	6823      	ldr	r3, [r4, #0]
 800fd02:	075b      	lsls	r3, r3, #29
 800fd04:	f100 80ba 	bmi.w	800fe7c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fd08:	69a0      	ldr	r0, [r4, #24]
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	f040 811b 	bne.w	800ff46 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800fd10:	2000      	movs	r0, #0
 800fd12:	e02b      	b.n	800fd6c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fd14:	4ba7      	ldr	r3, [pc, #668]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
 800fd16:	689a      	ldr	r2, [r3, #8]
 800fd18:	f002 020c 	and.w	r2, r2, #12
 800fd1c:	2a04      	cmp	r2, #4
 800fd1e:	d007      	beq.n	800fd30 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fd20:	689a      	ldr	r2, [r3, #8]
 800fd22:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fd26:	2a08      	cmp	r2, #8
 800fd28:	d10a      	bne.n	800fd40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	0259      	lsls	r1, r3, #9
 800fd2e:	d507      	bpl.n	800fd40 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fd30:	4ba0      	ldr	r3, [pc, #640]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	039a      	lsls	r2, r3, #14
 800fd36:	d5dc      	bpl.n	800fcf2 <HAL_RCC_OscConfig+0x12>
 800fd38:	6863      	ldr	r3, [r4, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1d9      	bne.n	800fcf2 <HAL_RCC_OscConfig+0x12>
 800fd3e:	e7d3      	b.n	800fce8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fd40:	6863      	ldr	r3, [r4, #4]
 800fd42:	4d9c      	ldr	r5, [pc, #624]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
 800fd44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd48:	d113      	bne.n	800fd72 <HAL_RCC_OscConfig+0x92>
 800fd4a:	682b      	ldr	r3, [r5, #0]
 800fd4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fd50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fd52:	f7fe fe05 	bl	800e960 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fd56:	4d97      	ldr	r5, [pc, #604]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800fd58:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fd5a:	682b      	ldr	r3, [r5, #0]
 800fd5c:	039b      	lsls	r3, r3, #14
 800fd5e:	d4c8      	bmi.n	800fcf2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fd60:	f7fe fdfe 	bl	800e960 <HAL_GetTick>
 800fd64:	1b80      	subs	r0, r0, r6
 800fd66:	2864      	cmp	r0, #100	; 0x64
 800fd68:	d9f7      	bls.n	800fd5a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800fd6a:	2003      	movs	r0, #3
}
 800fd6c:	b002      	add	sp, #8
 800fd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fd72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fd76:	d104      	bne.n	800fd82 <HAL_RCC_OscConfig+0xa2>
 800fd78:	682b      	ldr	r3, [r5, #0]
 800fd7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fd7e:	602b      	str	r3, [r5, #0]
 800fd80:	e7e3      	b.n	800fd4a <HAL_RCC_OscConfig+0x6a>
 800fd82:	682a      	ldr	r2, [r5, #0]
 800fd84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fd88:	602a      	str	r2, [r5, #0]
 800fd8a:	682a      	ldr	r2, [r5, #0]
 800fd8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fd90:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d1dd      	bne.n	800fd52 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800fd96:	f7fe fde3 	bl	800e960 <HAL_GetTick>
 800fd9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fd9c:	682b      	ldr	r3, [r5, #0]
 800fd9e:	039f      	lsls	r7, r3, #14
 800fda0:	d5a7      	bpl.n	800fcf2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fda2:	f7fe fddd 	bl	800e960 <HAL_GetTick>
 800fda6:	1b80      	subs	r0, r0, r6
 800fda8:	2864      	cmp	r0, #100	; 0x64
 800fdaa:	d9f7      	bls.n	800fd9c <HAL_RCC_OscConfig+0xbc>
 800fdac:	e7dd      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fdae:	4b81      	ldr	r3, [pc, #516]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
 800fdb0:	689a      	ldr	r2, [r3, #8]
 800fdb2:	f012 0f0c 	tst.w	r2, #12
 800fdb6:	d007      	beq.n	800fdc8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fdb8:	689a      	ldr	r2, [r3, #8]
 800fdba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fdbe:	2a08      	cmp	r2, #8
 800fdc0:	d111      	bne.n	800fde6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	025e      	lsls	r6, r3, #9
 800fdc6:	d40e      	bmi.n	800fde6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fdc8:	4b7a      	ldr	r3, [pc, #488]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	0795      	lsls	r5, r2, #30
 800fdce:	d502      	bpl.n	800fdd6 <HAL_RCC_OscConfig+0xf6>
 800fdd0:	68e2      	ldr	r2, [r4, #12]
 800fdd2:	2a01      	cmp	r2, #1
 800fdd4:	d188      	bne.n	800fce8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	6921      	ldr	r1, [r4, #16]
 800fdda:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800fdde:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800fde2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fde4:	e788      	b.n	800fcf8 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800fde6:	68e2      	ldr	r2, [r4, #12]
 800fde8:	4b73      	ldr	r3, [pc, #460]	; (800ffb8 <HAL_RCC_OscConfig+0x2d8>)
 800fdea:	b1b2      	cbz	r2, 800fe1a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800fdec:	2201      	movs	r2, #1
 800fdee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800fdf0:	f7fe fdb6 	bl	800e960 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fdf4:	4d6f      	ldr	r5, [pc, #444]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800fdf6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fdf8:	682b      	ldr	r3, [r5, #0]
 800fdfa:	0798      	lsls	r0, r3, #30
 800fdfc:	d507      	bpl.n	800fe0e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fdfe:	682b      	ldr	r3, [r5, #0]
 800fe00:	6922      	ldr	r2, [r4, #16]
 800fe02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fe06:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fe0a:	602b      	str	r3, [r5, #0]
 800fe0c:	e774      	b.n	800fcf8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fe0e:	f7fe fda7 	bl	800e960 <HAL_GetTick>
 800fe12:	1b80      	subs	r0, r0, r6
 800fe14:	2802      	cmp	r0, #2
 800fe16:	d9ef      	bls.n	800fdf8 <HAL_RCC_OscConfig+0x118>
 800fe18:	e7a7      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800fe1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800fe1c:	f7fe fda0 	bl	800e960 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fe20:	4d64      	ldr	r5, [pc, #400]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800fe22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fe24:	682b      	ldr	r3, [r5, #0]
 800fe26:	0799      	lsls	r1, r3, #30
 800fe28:	f57f af66 	bpl.w	800fcf8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fe2c:	f7fe fd98 	bl	800e960 <HAL_GetTick>
 800fe30:	1b80      	subs	r0, r0, r6
 800fe32:	2802      	cmp	r0, #2
 800fe34:	d9f6      	bls.n	800fe24 <HAL_RCC_OscConfig+0x144>
 800fe36:	e798      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800fe38:	6962      	ldr	r2, [r4, #20]
 800fe3a:	4b60      	ldr	r3, [pc, #384]	; (800ffbc <HAL_RCC_OscConfig+0x2dc>)
 800fe3c:	b17a      	cbz	r2, 800fe5e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800fe3e:	2201      	movs	r2, #1
 800fe40:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800fe42:	f7fe fd8d 	bl	800e960 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fe46:	4d5b      	ldr	r5, [pc, #364]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800fe48:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fe4a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fe4c:	079f      	lsls	r7, r3, #30
 800fe4e:	f53f af57 	bmi.w	800fd00 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fe52:	f7fe fd85 	bl	800e960 <HAL_GetTick>
 800fe56:	1b80      	subs	r0, r0, r6
 800fe58:	2802      	cmp	r0, #2
 800fe5a:	d9f6      	bls.n	800fe4a <HAL_RCC_OscConfig+0x16a>
 800fe5c:	e785      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800fe5e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800fe60:	f7fe fd7e 	bl	800e960 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fe64:	4d53      	ldr	r5, [pc, #332]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800fe66:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fe68:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fe6a:	0798      	lsls	r0, r3, #30
 800fe6c:	f57f af48 	bpl.w	800fd00 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fe70:	f7fe fd76 	bl	800e960 <HAL_GetTick>
 800fe74:	1b80      	subs	r0, r0, r6
 800fe76:	2802      	cmp	r0, #2
 800fe78:	d9f6      	bls.n	800fe68 <HAL_RCC_OscConfig+0x188>
 800fe7a:	e776      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fe7c:	4b4d      	ldr	r3, [pc, #308]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
 800fe7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fe80:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800fe84:	d128      	bne.n	800fed8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800fe86:	9201      	str	r2, [sp, #4]
 800fe88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fe8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800fe8e:	641a      	str	r2, [r3, #64]	; 0x40
 800fe90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe96:	9301      	str	r3, [sp, #4]
 800fe98:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800fe9a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe9c:	4d48      	ldr	r5, [pc, #288]	; (800ffc0 <HAL_RCC_OscConfig+0x2e0>)
 800fe9e:	682b      	ldr	r3, [r5, #0]
 800fea0:	05d9      	lsls	r1, r3, #23
 800fea2:	d51b      	bpl.n	800fedc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fea4:	68a3      	ldr	r3, [r4, #8]
 800fea6:	4d43      	ldr	r5, [pc, #268]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d127      	bne.n	800fefc <HAL_RCC_OscConfig+0x21c>
 800feac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800feae:	f043 0301 	orr.w	r3, r3, #1
 800feb2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800feb4:	f7fe fd54 	bl	800e960 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800feb8:	4d3e      	ldr	r5, [pc, #248]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800feba:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800febc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fec0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fec2:	079b      	lsls	r3, r3, #30
 800fec4:	d539      	bpl.n	800ff3a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800fec6:	2e00      	cmp	r6, #0
 800fec8:	f43f af1e 	beq.w	800fd08 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800fecc:	4a39      	ldr	r2, [pc, #228]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
 800fece:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fed4:	6413      	str	r3, [r2, #64]	; 0x40
 800fed6:	e717      	b.n	800fd08 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800fed8:	2600      	movs	r6, #0
 800feda:	e7df      	b.n	800fe9c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fedc:	682b      	ldr	r3, [r5, #0]
 800fede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fee2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800fee4:	f7fe fd3c 	bl	800e960 <HAL_GetTick>
 800fee8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800feea:	682b      	ldr	r3, [r5, #0]
 800feec:	05da      	lsls	r2, r3, #23
 800feee:	d4d9      	bmi.n	800fea4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fef0:	f7fe fd36 	bl	800e960 <HAL_GetTick>
 800fef4:	1bc0      	subs	r0, r0, r7
 800fef6:	2802      	cmp	r0, #2
 800fef8:	d9f7      	bls.n	800feea <HAL_RCC_OscConfig+0x20a>
 800fefa:	e736      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fefc:	2b05      	cmp	r3, #5
 800fefe:	d104      	bne.n	800ff0a <HAL_RCC_OscConfig+0x22a>
 800ff00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ff02:	f043 0304 	orr.w	r3, r3, #4
 800ff06:	672b      	str	r3, [r5, #112]	; 0x70
 800ff08:	e7d0      	b.n	800feac <HAL_RCC_OscConfig+0x1cc>
 800ff0a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800ff0c:	f022 0201 	bic.w	r2, r2, #1
 800ff10:	672a      	str	r2, [r5, #112]	; 0x70
 800ff12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800ff14:	f022 0204 	bic.w	r2, r2, #4
 800ff18:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d1ca      	bne.n	800feb4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800ff1e:	f7fe fd1f 	bl	800e960 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff22:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800ff26:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ff28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ff2a:	0798      	lsls	r0, r3, #30
 800ff2c:	d5cb      	bpl.n	800fec6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff2e:	f7fe fd17 	bl	800e960 <HAL_GetTick>
 800ff32:	1bc0      	subs	r0, r0, r7
 800ff34:	4540      	cmp	r0, r8
 800ff36:	d9f7      	bls.n	800ff28 <HAL_RCC_OscConfig+0x248>
 800ff38:	e717      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff3a:	f7fe fd11 	bl	800e960 <HAL_GetTick>
 800ff3e:	1bc0      	subs	r0, r0, r7
 800ff40:	4540      	cmp	r0, r8
 800ff42:	d9bd      	bls.n	800fec0 <HAL_RCC_OscConfig+0x1e0>
 800ff44:	e711      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ff46:	4d1b      	ldr	r5, [pc, #108]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
 800ff48:	68ab      	ldr	r3, [r5, #8]
 800ff4a:	f003 030c 	and.w	r3, r3, #12
 800ff4e:	2b08      	cmp	r3, #8
 800ff50:	d047      	beq.n	800ffe2 <HAL_RCC_OscConfig+0x302>
 800ff52:	4e1c      	ldr	r6, [pc, #112]	; (800ffc4 <HAL_RCC_OscConfig+0x2e4>)
 800ff54:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ff56:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800ff58:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ff5a:	d135      	bne.n	800ffc8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800ff5c:	f7fe fd00 	bl	800e960 <HAL_GetTick>
 800ff60:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ff62:	682b      	ldr	r3, [r5, #0]
 800ff64:	0199      	lsls	r1, r3, #6
 800ff66:	d41e      	bmi.n	800ffa6 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ff68:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ff70:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800ff74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ff76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ff7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ff7c:	4c0d      	ldr	r4, [pc, #52]	; (800ffb4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ff7e:	0852      	lsrs	r2, r2, #1
 800ff80:	3a01      	subs	r2, #1
 800ff82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff86:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800ff88:	2301      	movs	r3, #1
 800ff8a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800ff8c:	f7fe fce8 	bl	800e960 <HAL_GetTick>
 800ff90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ff92:	6823      	ldr	r3, [r4, #0]
 800ff94:	019a      	lsls	r2, r3, #6
 800ff96:	f53f aebb 	bmi.w	800fd10 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff9a:	f7fe fce1 	bl	800e960 <HAL_GetTick>
 800ff9e:	1b40      	subs	r0, r0, r5
 800ffa0:	2802      	cmp	r0, #2
 800ffa2:	d9f6      	bls.n	800ff92 <HAL_RCC_OscConfig+0x2b2>
 800ffa4:	e6e1      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ffa6:	f7fe fcdb 	bl	800e960 <HAL_GetTick>
 800ffaa:	1bc0      	subs	r0, r0, r7
 800ffac:	2802      	cmp	r0, #2
 800ffae:	d9d8      	bls.n	800ff62 <HAL_RCC_OscConfig+0x282>
 800ffb0:	e6db      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
 800ffb2:	bf00      	nop
 800ffb4:	40023800 	.word	0x40023800
 800ffb8:	42470000 	.word	0x42470000
 800ffbc:	42470e80 	.word	0x42470e80
 800ffc0:	40007000 	.word	0x40007000
 800ffc4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800ffc8:	f7fe fcca 	bl	800e960 <HAL_GetTick>
 800ffcc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ffce:	682b      	ldr	r3, [r5, #0]
 800ffd0:	019b      	lsls	r3, r3, #6
 800ffd2:	f57f ae9d 	bpl.w	800fd10 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ffd6:	f7fe fcc3 	bl	800e960 <HAL_GetTick>
 800ffda:	1b00      	subs	r0, r0, r4
 800ffdc:	2802      	cmp	r0, #2
 800ffde:	d9f6      	bls.n	800ffce <HAL_RCC_OscConfig+0x2ee>
 800ffe0:	e6c3      	b.n	800fd6a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ffe2:	2801      	cmp	r0, #1
 800ffe4:	f43f aec2 	beq.w	800fd6c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 800ffe8:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ffea:	69e3      	ldr	r3, [r4, #28]
 800ffec:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 800fff0:	429a      	cmp	r2, r3
 800fff2:	f47f ae79 	bne.w	800fce8 <HAL_RCC_OscConfig+0x8>
 800fff6:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800fff8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fffc:	4293      	cmp	r3, r2
 800fffe:	f47f ae73 	bne.w	800fce8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010002:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010008:	4003      	ands	r3, r0
 801000a:	4293      	cmp	r3, r2
 801000c:	f47f ae6c 	bne.w	800fce8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010010:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010012:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010016:	4293      	cmp	r3, r2
 8010018:	f47f ae66 	bne.w	800fce8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801001c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801001e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8010022:	1ac0      	subs	r0, r0, r3
 8010024:	bf18      	it	ne
 8010026:	2001      	movne	r0, #1
 8010028:	e6a0      	b.n	800fd6c <HAL_RCC_OscConfig+0x8c>
 801002a:	bf00      	nop

0801002c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801002c:	4913      	ldr	r1, [pc, #76]	; (801007c <HAL_RCC_GetSysClockFreq+0x50>)
{
 801002e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010030:	688b      	ldr	r3, [r1, #8]
 8010032:	f003 030c 	and.w	r3, r3, #12
 8010036:	2b04      	cmp	r3, #4
 8010038:	d003      	beq.n	8010042 <HAL_RCC_GetSysClockFreq+0x16>
 801003a:	2b08      	cmp	r3, #8
 801003c:	d003      	beq.n	8010046 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801003e:	4810      	ldr	r0, [pc, #64]	; (8010080 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8010040:	e000      	b.n	8010044 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8010042:	4810      	ldr	r0, [pc, #64]	; (8010084 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8010044:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010046:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010048:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801004a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801004c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010050:	bf14      	ite	ne
 8010052:	480c      	ldrne	r0, [pc, #48]	; (8010084 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010054:	480a      	ldreq	r0, [pc, #40]	; (8010080 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010056:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801005a:	bf18      	it	ne
 801005c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801005e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010062:	fba1 0100 	umull	r0, r1, r1, r0
 8010066:	f7fc f843 	bl	800c0f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801006a:	4b04      	ldr	r3, [pc, #16]	; (801007c <HAL_RCC_GetSysClockFreq+0x50>)
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8010072:	3301      	adds	r3, #1
 8010074:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8010076:	fbb0 f0f3 	udiv	r0, r0, r3
 801007a:	e7e3      	b.n	8010044 <HAL_RCC_GetSysClockFreq+0x18>
 801007c:	40023800 	.word	0x40023800
 8010080:	00f42400 	.word	0x00f42400
 8010084:	017d7840 	.word	0x017d7840

08010088 <HAL_RCC_ClockConfig>:
{
 8010088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801008c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 801008e:	4604      	mov	r4, r0
 8010090:	b910      	cbnz	r0, 8010098 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8010092:	2001      	movs	r0, #1
}
 8010094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010098:	4b43      	ldr	r3, [pc, #268]	; (80101a8 <HAL_RCC_ClockConfig+0x120>)
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	f002 020f 	and.w	r2, r2, #15
 80100a0:	428a      	cmp	r2, r1
 80100a2:	d328      	bcc.n	80100f6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80100a4:	6821      	ldr	r1, [r4, #0]
 80100a6:	078f      	lsls	r7, r1, #30
 80100a8:	d42d      	bmi.n	8010106 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80100aa:	07c8      	lsls	r0, r1, #31
 80100ac:	d440      	bmi.n	8010130 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80100ae:	4b3e      	ldr	r3, [pc, #248]	; (80101a8 <HAL_RCC_ClockConfig+0x120>)
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	f002 020f 	and.w	r2, r2, #15
 80100b6:	42aa      	cmp	r2, r5
 80100b8:	d865      	bhi.n	8010186 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80100ba:	6822      	ldr	r2, [r4, #0]
 80100bc:	0751      	lsls	r1, r2, #29
 80100be:	d46b      	bmi.n	8010198 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80100c0:	0713      	lsls	r3, r2, #28
 80100c2:	d507      	bpl.n	80100d4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80100c4:	4a39      	ldr	r2, [pc, #228]	; (80101ac <HAL_RCC_ClockConfig+0x124>)
 80100c6:	6921      	ldr	r1, [r4, #16]
 80100c8:	6893      	ldr	r3, [r2, #8]
 80100ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80100ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80100d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80100d4:	f7ff ffaa 	bl	801002c <HAL_RCC_GetSysClockFreq>
 80100d8:	4b34      	ldr	r3, [pc, #208]	; (80101ac <HAL_RCC_ClockConfig+0x124>)
 80100da:	4a35      	ldr	r2, [pc, #212]	; (80101b0 <HAL_RCC_ClockConfig+0x128>)
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80100e2:	5cd3      	ldrb	r3, [r2, r3]
 80100e4:	40d8      	lsrs	r0, r3
 80100e6:	4b33      	ldr	r3, [pc, #204]	; (80101b4 <HAL_RCC_ClockConfig+0x12c>)
 80100e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80100ea:	4b33      	ldr	r3, [pc, #204]	; (80101b8 <HAL_RCC_ClockConfig+0x130>)
 80100ec:	6818      	ldr	r0, [r3, #0]
 80100ee:	f7fe f9c5 	bl	800e47c <HAL_InitTick>
  return HAL_OK;
 80100f2:	2000      	movs	r0, #0
 80100f4:	e7ce      	b.n	8010094 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100f6:	b2ca      	uxtb	r2, r1
 80100f8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	f003 030f 	and.w	r3, r3, #15
 8010100:	428b      	cmp	r3, r1
 8010102:	d1c6      	bne.n	8010092 <HAL_RCC_ClockConfig+0xa>
 8010104:	e7ce      	b.n	80100a4 <HAL_RCC_ClockConfig+0x1c>
 8010106:	4b29      	ldr	r3, [pc, #164]	; (80101ac <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010108:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801010c:	bf1e      	ittt	ne
 801010e:	689a      	ldrne	r2, [r3, #8]
 8010110:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8010114:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010116:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010118:	bf42      	ittt	mi
 801011a:	689a      	ldrmi	r2, [r3, #8]
 801011c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8010120:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010122:	689a      	ldr	r2, [r3, #8]
 8010124:	68a0      	ldr	r0, [r4, #8]
 8010126:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 801012a:	4302      	orrs	r2, r0
 801012c:	609a      	str	r2, [r3, #8]
 801012e:	e7bc      	b.n	80100aa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010130:	6862      	ldr	r2, [r4, #4]
 8010132:	4b1e      	ldr	r3, [pc, #120]	; (80101ac <HAL_RCC_ClockConfig+0x124>)
 8010134:	2a01      	cmp	r2, #1
 8010136:	d11c      	bne.n	8010172 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801013e:	d0a8      	beq.n	8010092 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010140:	4e1a      	ldr	r6, [pc, #104]	; (80101ac <HAL_RCC_ClockConfig+0x124>)
 8010142:	68b3      	ldr	r3, [r6, #8]
 8010144:	f023 0303 	bic.w	r3, r3, #3
 8010148:	4313      	orrs	r3, r2
 801014a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 801014c:	f7fe fc08 	bl	800e960 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010150:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8010154:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010156:	68b3      	ldr	r3, [r6, #8]
 8010158:	6862      	ldr	r2, [r4, #4]
 801015a:	f003 030c 	and.w	r3, r3, #12
 801015e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8010162:	d0a4      	beq.n	80100ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010164:	f7fe fbfc 	bl	800e960 <HAL_GetTick>
 8010168:	1bc0      	subs	r0, r0, r7
 801016a:	4540      	cmp	r0, r8
 801016c:	d9f3      	bls.n	8010156 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 801016e:	2003      	movs	r0, #3
 8010170:	e790      	b.n	8010094 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010172:	1e91      	subs	r1, r2, #2
 8010174:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010176:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010178:	d802      	bhi.n	8010180 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801017a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 801017e:	e7de      	b.n	801013e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010180:	f013 0f02 	tst.w	r3, #2
 8010184:	e7db      	b.n	801013e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010186:	b2ea      	uxtb	r2, r5
 8010188:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f003 030f 	and.w	r3, r3, #15
 8010190:	42ab      	cmp	r3, r5
 8010192:	f47f af7e 	bne.w	8010092 <HAL_RCC_ClockConfig+0xa>
 8010196:	e790      	b.n	80100ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010198:	4904      	ldr	r1, [pc, #16]	; (80101ac <HAL_RCC_ClockConfig+0x124>)
 801019a:	68e0      	ldr	r0, [r4, #12]
 801019c:	688b      	ldr	r3, [r1, #8]
 801019e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80101a2:	4303      	orrs	r3, r0
 80101a4:	608b      	str	r3, [r1, #8]
 80101a6:	e78b      	b.n	80100c0 <HAL_RCC_ClockConfig+0x38>
 80101a8:	40023c00 	.word	0x40023c00
 80101ac:	40023800 	.word	0x40023800
 80101b0:	08017ded 	.word	0x08017ded
 80101b4:	2000000c 	.word	0x2000000c
 80101b8:	20000014 	.word	0x20000014

080101bc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80101bc:	4b04      	ldr	r3, [pc, #16]	; (80101d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80101be:	4a05      	ldr	r2, [pc, #20]	; (80101d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80101c0:	689b      	ldr	r3, [r3, #8]
 80101c2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80101c6:	5cd3      	ldrb	r3, [r2, r3]
 80101c8:	4a03      	ldr	r2, [pc, #12]	; (80101d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80101ca:	6810      	ldr	r0, [r2, #0]
}
 80101cc:	40d8      	lsrs	r0, r3
 80101ce:	4770      	bx	lr
 80101d0:	40023800 	.word	0x40023800
 80101d4:	08017dfd 	.word	0x08017dfd
 80101d8:	2000000c 	.word	0x2000000c

080101dc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80101dc:	4b04      	ldr	r3, [pc, #16]	; (80101f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80101de:	4a05      	ldr	r2, [pc, #20]	; (80101f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80101e0:	689b      	ldr	r3, [r3, #8]
 80101e2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80101e6:	5cd3      	ldrb	r3, [r2, r3]
 80101e8:	4a03      	ldr	r2, [pc, #12]	; (80101f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80101ea:	6810      	ldr	r0, [r2, #0]
}
 80101ec:	40d8      	lsrs	r0, r3
 80101ee:	4770      	bx	lr
 80101f0:	40023800 	.word	0x40023800
 80101f4:	08017dfd 	.word	0x08017dfd
 80101f8:	2000000c 	.word	0x2000000c

080101fc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80101fc:	230f      	movs	r3, #15
 80101fe:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010200:	4b0b      	ldr	r3, [pc, #44]	; (8010230 <HAL_RCC_GetClockConfig+0x34>)
 8010202:	689a      	ldr	r2, [r3, #8]
 8010204:	f002 0203 	and.w	r2, r2, #3
 8010208:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801020a:	689a      	ldr	r2, [r3, #8]
 801020c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8010210:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010212:	689a      	ldr	r2, [r3, #8]
 8010214:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8010218:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	08db      	lsrs	r3, r3, #3
 801021e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8010222:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010224:	4b03      	ldr	r3, [pc, #12]	; (8010234 <HAL_RCC_GetClockConfig+0x38>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f003 030f 	and.w	r3, r3, #15
 801022c:	600b      	str	r3, [r1, #0]
}
 801022e:	4770      	bx	lr
 8010230:	40023800 	.word	0x40023800
 8010234:	40023c00 	.word	0x40023c00

08010238 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8010238:	6803      	ldr	r3, [r0, #0]
 801023a:	f013 0f05 	tst.w	r3, #5
{
 801023e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010240:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8010242:	d105      	bne.n	8010250 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010244:	6828      	ldr	r0, [r5, #0]
 8010246:	f010 0002 	ands.w	r0, r0, #2
 801024a:	d128      	bne.n	801029e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 801024c:	b003      	add	sp, #12
 801024e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8010250:	4c41      	ldr	r4, [pc, #260]	; (8010358 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8010252:	4e42      	ldr	r6, [pc, #264]	; (801035c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8010254:	2300      	movs	r3, #0
 8010256:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8010258:	f7fe fb82 	bl	800e960 <HAL_GetTick>
 801025c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801025e:	6833      	ldr	r3, [r6, #0]
 8010260:	011b      	lsls	r3, r3, #4
 8010262:	d415      	bmi.n	8010290 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8010264:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8010268:	071b      	lsls	r3, r3, #28
 801026a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801026e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8010272:	2301      	movs	r3, #1
 8010274:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8010276:	f7fe fb73 	bl	800e960 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801027a:	4c38      	ldr	r4, [pc, #224]	; (801035c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 801027c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801027e:	6823      	ldr	r3, [r4, #0]
 8010280:	0118      	lsls	r0, r3, #4
 8010282:	d4df      	bmi.n	8010244 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8010284:	f7fe fb6c 	bl	800e960 <HAL_GetTick>
 8010288:	1b80      	subs	r0, r0, r6
 801028a:	2802      	cmp	r0, #2
 801028c:	d9f7      	bls.n	801027e <HAL_RCCEx_PeriphCLKConfig+0x46>
 801028e:	e004      	b.n	801029a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8010290:	f7fe fb66 	bl	800e960 <HAL_GetTick>
 8010294:	1bc0      	subs	r0, r0, r7
 8010296:	2802      	cmp	r0, #2
 8010298:	d9e1      	bls.n	801025e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 801029a:	2003      	movs	r0, #3
 801029c:	e7d6      	b.n	801024c <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 801029e:	2300      	movs	r3, #0
 80102a0:	9301      	str	r3, [sp, #4]
 80102a2:	4b2e      	ldr	r3, [pc, #184]	; (801035c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 80102a4:	4c2e      	ldr	r4, [pc, #184]	; (8010360 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80102a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80102a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80102ac:	641a      	str	r2, [r3, #64]	; 0x40
 80102ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80102b4:	9301      	str	r3, [sp, #4]
 80102b6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80102b8:	6823      	ldr	r3, [r4, #0]
 80102ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102be:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80102c0:	f7fe fb4e 	bl	800e960 <HAL_GetTick>
 80102c4:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	05d9      	lsls	r1, r3, #23
 80102ca:	d51b      	bpl.n	8010304 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80102cc:	4c23      	ldr	r4, [pc, #140]	; (801035c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80102ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80102d0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80102d4:	d11c      	bne.n	8010310 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80102d6:	68eb      	ldr	r3, [r5, #12]
 80102d8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80102dc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80102e0:	4a1e      	ldr	r2, [pc, #120]	; (801035c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80102e2:	d134      	bne.n	801034e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80102e4:	6891      	ldr	r1, [r2, #8]
 80102e6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80102ea:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80102ee:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80102f2:	4301      	orrs	r1, r0
 80102f4:	6091      	str	r1, [r2, #8]
 80102f6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80102f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80102fc:	430b      	orrs	r3, r1
 80102fe:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8010300:	2000      	movs	r0, #0
 8010302:	e7a3      	b.n	801024c <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8010304:	f7fe fb2c 	bl	800e960 <HAL_GetTick>
 8010308:	1b80      	subs	r0, r0, r6
 801030a:	2802      	cmp	r0, #2
 801030c:	d9db      	bls.n	80102c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 801030e:	e7c4      	b.n	801029a <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8010310:	68ea      	ldr	r2, [r5, #12]
 8010312:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8010316:	4293      	cmp	r3, r2
 8010318:	d0dd      	beq.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801031a:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 801031c:	4a11      	ldr	r2, [pc, #68]	; (8010364 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801031e:	2101      	movs	r1, #1
 8010320:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010326:	2100      	movs	r1, #0
 8010328:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 801032a:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801032c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801032e:	07da      	lsls	r2, r3, #31
 8010330:	d5d1      	bpl.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8010332:	f7fe fb15 	bl	800e960 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010336:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 801033a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801033c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801033e:	079b      	lsls	r3, r3, #30
 8010340:	d4c9      	bmi.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010342:	f7fe fb0d 	bl	800e960 <HAL_GetTick>
 8010346:	1b80      	subs	r0, r0, r6
 8010348:	42b8      	cmp	r0, r7
 801034a:	d9f7      	bls.n	801033c <HAL_RCCEx_PeriphCLKConfig+0x104>
 801034c:	e7a5      	b.n	801029a <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801034e:	6891      	ldr	r1, [r2, #8]
 8010350:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8010354:	e7ce      	b.n	80102f4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8010356:	bf00      	nop
 8010358:	42470068 	.word	0x42470068
 801035c:	40023800 	.word	0x40023800
 8010360:	40007000 	.word	0x40007000
 8010364:	42470e40 	.word	0x42470e40

08010368 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8010368:	b570      	push	{r4, r5, r6, lr}

  /* Get Start Tick */
  tickstart = HAL_GetTick();

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801036a:	4c41      	ldr	r4, [pc, #260]	; (8010470 <HAL_RCC_DeInit+0x108>)
  tickstart = HAL_GetTick();
 801036c:	f7fe faf8 	bl	800e960 <HAL_GetTick>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8010370:	6823      	ldr	r3, [r4, #0]
 8010372:	f043 0301 	orr.w	r3, r3, #1
  tickstart = HAL_GetTick();
 8010376:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8010378:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 801037a:	6823      	ldr	r3, [r4, #0]
 801037c:	0798      	lsls	r0, r3, #30
 801037e:	d558      	bpl.n	8010432 <HAL_RCC_DeInit+0xca>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8010380:	6823      	ldr	r3, [r4, #0]
 8010382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010386:	6023      	str	r3, [r4, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8010388:	f7fe faea 	bl	800e960 <HAL_GetTick>

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 801038c:	2300      	movs	r3, #0
 801038e:	60a3      	str	r3, [r4, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8010390:	4c37      	ldr	r4, [pc, #220]	; (8010470 <HAL_RCC_DeInit+0x108>)
  tickstart = HAL_GetTick();
 8010392:	4605      	mov	r5, r0
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010394:	f241 3688 	movw	r6, #5000	; 0x1388
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8010398:	68a3      	ldr	r3, [r4, #8]
 801039a:	f013 0f0c 	tst.w	r3, #12
 801039e:	d14f      	bne.n	8010440 <HAL_RCC_DeInit+0xd8>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80103a0:	f7fe fade 	bl	800e960 <HAL_GetTick>

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80103a4:	6823      	ldr	r3, [r4, #0]
 80103a6:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80103aa:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80103ac:	4c30      	ldr	r4, [pc, #192]	; (8010470 <HAL_RCC_DeInit+0x108>)
  tickstart = HAL_GetTick();
 80103ae:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80103b0:	6823      	ldr	r3, [r4, #0]
 80103b2:	0399      	lsls	r1, r3, #14
 80103b4:	d44a      	bmi.n	801044c <HAL_RCC_DeInit+0xe4>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80103b6:	f7fe fad3 	bl	800e960 <HAL_GetTick>

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80103ba:	6823      	ldr	r3, [r4, #0]
 80103bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80103c0:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80103c2:	4c2b      	ldr	r4, [pc, #172]	; (8010470 <HAL_RCC_DeInit+0x108>)
  tickstart = HAL_GetTick();
 80103c4:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80103c6:	6823      	ldr	r3, [r4, #0]
 80103c8:	019a      	lsls	r2, r3, #6
 80103ca:	d445      	bmi.n	8010458 <HAL_RCC_DeInit+0xf0>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80103cc:	f7fe fac8 	bl	800e960 <HAL_GetTick>

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80103d6:	6023      	str	r3, [r4, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80103d8:	4c25      	ldr	r4, [pc, #148]	; (8010470 <HAL_RCC_DeInit+0x108>)
  tickstart = HAL_GetTick();
 80103da:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80103dc:	6823      	ldr	r3, [r4, #0]
 80103de:	011b      	lsls	r3, r3, #4
 80103e0:	d440      	bmi.n	8010464 <HAL_RCC_DeInit+0xfc>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80103e2:	4b24      	ldr	r3, [pc, #144]	; (8010474 <HAL_RCC_DeInit+0x10c>)
 80103e4:	6063      	str	r3, [r4, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80103e6:	4b24      	ldr	r3, [pc, #144]	; (8010478 <HAL_RCC_DeInit+0x110>)
 80103e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80103ec:	68e3      	ldr	r3, [r4, #12]

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80103ee:	4a23      	ldr	r2, [pc, #140]	; (801047c <HAL_RCC_DeInit+0x114>)
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80103f0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80103f4:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80103f6:	68e3      	ldr	r3, [r4, #12]
 80103f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80103fc:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80103fe:	68e3      	ldr	r3, [r4, #12]
 8010400:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8010404:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8010406:	68e3      	ldr	r3, [r4, #12]
 8010408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801040c:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 801040e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8010410:	f023 0301 	bic.w	r3, r3, #1
 8010414:	6763      	str	r3, [r4, #116]	; 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8010416:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8010418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801041c:	6763      	str	r3, [r4, #116]	; 0x74
  SystemCoreClock = HSI_VALUE;
 801041e:	4b18      	ldr	r3, [pc, #96]	; (8010480 <HAL_RCC_DeInit+0x118>)
 8010420:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8010422:	4b18      	ldr	r3, [pc, #96]	; (8010484 <HAL_RCC_DeInit+0x11c>)
 8010424:	6818      	ldr	r0, [r3, #0]
 8010426:	f7fe f829 	bl	800e47c <HAL_InitTick>
      return HAL_TIMEOUT;
 801042a:	3000      	adds	r0, #0
 801042c:	bf18      	it	ne
 801042e:	2001      	movne	r0, #1
 8010430:	e005      	b.n	801043e <HAL_RCC_DeInit+0xd6>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010432:	f7fe fa95 	bl	800e960 <HAL_GetTick>
 8010436:	1b40      	subs	r0, r0, r5
 8010438:	2802      	cmp	r0, #2
 801043a:	d99e      	bls.n	801037a <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 801043c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 801043e:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010440:	f7fe fa8e 	bl	800e960 <HAL_GetTick>
 8010444:	1b40      	subs	r0, r0, r5
 8010446:	42b0      	cmp	r0, r6
 8010448:	d9a6      	bls.n	8010398 <HAL_RCC_DeInit+0x30>
 801044a:	e7f7      	b.n	801043c <HAL_RCC_DeInit+0xd4>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801044c:	f7fe fa88 	bl	800e960 <HAL_GetTick>
 8010450:	1b40      	subs	r0, r0, r5
 8010452:	2864      	cmp	r0, #100	; 0x64
 8010454:	d9ac      	bls.n	80103b0 <HAL_RCC_DeInit+0x48>
 8010456:	e7f1      	b.n	801043c <HAL_RCC_DeInit+0xd4>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010458:	f7fe fa82 	bl	800e960 <HAL_GetTick>
 801045c:	1b40      	subs	r0, r0, r5
 801045e:	2802      	cmp	r0, #2
 8010460:	d9b1      	bls.n	80103c6 <HAL_RCC_DeInit+0x5e>
 8010462:	e7eb      	b.n	801043c <HAL_RCC_DeInit+0xd4>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8010464:	f7fe fa7c 	bl	800e960 <HAL_GetTick>
 8010468:	1b40      	subs	r0, r0, r5
 801046a:	2802      	cmp	r0, #2
 801046c:	d9b6      	bls.n	80103dc <HAL_RCC_DeInit+0x74>
 801046e:	e7e5      	b.n	801043c <HAL_RCC_DeInit+0xd4>
 8010470:	40023800 	.word	0x40023800
 8010474:	04003010 	.word	0x04003010
 8010478:	20003000 	.word	0x20003000
 801047c:	00f42400 	.word	0x00f42400
 8010480:	2000000c 	.word	0x2000000c
 8010484:	20000014 	.word	0x20000014

08010488 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8010488:	6802      	ldr	r2, [r0, #0]
{
 801048a:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801048c:	68d3      	ldr	r3, [r2, #12]
 801048e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010492:	60d3      	str	r3, [r2, #12]
{
 8010494:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8010496:	f7fe fa63 	bl	800e960 <HAL_GetTick>
 801049a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801049c:	6823      	ldr	r3, [r4, #0]
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	069b      	lsls	r3, r3, #26
 80104a2:	d501      	bpl.n	80104a8 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80104a4:	2000      	movs	r0, #0
}
 80104a6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80104a8:	f7fe fa5a 	bl	800e960 <HAL_GetTick>
 80104ac:	1b40      	subs	r0, r0, r5
 80104ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80104b2:	d9f3      	bls.n	801049c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80104b4:	2003      	movs	r0, #3
 80104b6:	e7f6      	b.n	80104a6 <HAL_RTC_WaitForSynchro+0x1e>

080104b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80104b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80104ba:	6803      	ldr	r3, [r0, #0]
 80104bc:	68da      	ldr	r2, [r3, #12]
 80104be:	0652      	lsls	r2, r2, #25
{
 80104c0:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80104c2:	d501      	bpl.n	80104c8 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80104c4:	2000      	movs	r0, #0
}
 80104c6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80104c8:	f04f 32ff 	mov.w	r2, #4294967295
 80104cc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80104ce:	f7fe fa47 	bl	800e960 <HAL_GetTick>
 80104d2:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80104d4:	6823      	ldr	r3, [r4, #0]
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	065b      	lsls	r3, r3, #25
 80104da:	d4f3      	bmi.n	80104c4 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80104dc:	f7fe fa40 	bl	800e960 <HAL_GetTick>
 80104e0:	1b40      	subs	r0, r0, r5
 80104e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80104e6:	d9f5      	bls.n	80104d4 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80104e8:	2003      	movs	r0, #3
 80104ea:	e7ec      	b.n	80104c6 <RTC_EnterInitMode+0xe>

080104ec <HAL_RTC_Init>:
{
 80104ec:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80104ee:	4604      	mov	r4, r0
 80104f0:	b1b8      	cbz	r0, 8010522 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80104f2:	7f43      	ldrb	r3, [r0, #29]
 80104f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80104f8:	b913      	cbnz	r3, 8010500 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80104fa:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80104fc:	f7fd fce2 	bl	800dec4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010500:	2302      	movs	r3, #2
 8010502:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010504:	6823      	ldr	r3, [r4, #0]
 8010506:	22ca      	movs	r2, #202	; 0xca
 8010508:	625a      	str	r2, [r3, #36]	; 0x24
 801050a:	2253      	movs	r2, #83	; 0x53
 801050c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801050e:	4620      	mov	r0, r4
 8010510:	f7ff ffd2 	bl	80104b8 <RTC_EnterInitMode>
 8010514:	6823      	ldr	r3, [r4, #0]
 8010516:	4605      	mov	r5, r0
 8010518:	b128      	cbz	r0, 8010526 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801051a:	22ff      	movs	r2, #255	; 0xff
 801051c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801051e:	2304      	movs	r3, #4
 8010520:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8010522:	2501      	movs	r5, #1
 8010524:	e02e      	b.n	8010584 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010526:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010528:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801052a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 801052e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010532:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010534:	6862      	ldr	r2, [r4, #4]
 8010536:	6899      	ldr	r1, [r3, #8]
 8010538:	4302      	orrs	r2, r0
 801053a:	6960      	ldr	r0, [r4, #20]
 801053c:	4302      	orrs	r2, r0
 801053e:	430a      	orrs	r2, r1
 8010540:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010542:	68e2      	ldr	r2, [r4, #12]
 8010544:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8010546:	691a      	ldr	r2, [r3, #16]
 8010548:	68a1      	ldr	r1, [r4, #8]
 801054a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801054e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8010550:	68da      	ldr	r2, [r3, #12]
 8010552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010556:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010558:	689b      	ldr	r3, [r3, #8]
 801055a:	069b      	lsls	r3, r3, #26
 801055c:	d405      	bmi.n	801056a <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801055e:	4620      	mov	r0, r4
 8010560:	f7ff ff92 	bl	8010488 <HAL_RTC_WaitForSynchro>
 8010564:	b108      	cbz	r0, 801056a <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010566:	6823      	ldr	r3, [r4, #0]
 8010568:	e7d7      	b.n	801051a <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801056a:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 801056c:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801056e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010570:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010574:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8010576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010578:	430a      	orrs	r2, r1
 801057a:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801057c:	22ff      	movs	r2, #255	; 0xff
 801057e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8010580:	2301      	movs	r3, #1
 8010582:	7763      	strb	r3, [r4, #29]
}
 8010584:	4628      	mov	r0, r5
 8010586:	bd38      	pop	{r3, r4, r5, pc}

08010588 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8010588:	2300      	movs	r3, #0

  while(Value >= 10U)
 801058a:	2809      	cmp	r0, #9
 801058c:	d803      	bhi.n	8010596 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 801058e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8010592:	b2c0      	uxtb	r0, r0
 8010594:	4770      	bx	lr
    Value -= 10U;
 8010596:	380a      	subs	r0, #10
    bcdhigh++;
 8010598:	3301      	adds	r3, #1
    Value -= 10U;
 801059a:	b2c0      	uxtb	r0, r0
 801059c:	e7f5      	b.n	801058a <RTC_ByteToBcd2+0x2>

0801059e <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 801059e:	7f03      	ldrb	r3, [r0, #28]
 80105a0:	2b01      	cmp	r3, #1
{
 80105a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105a6:	4606      	mov	r6, r0
 80105a8:	460f      	mov	r7, r1
 80105aa:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 80105ae:	d02e      	beq.n	801060e <HAL_RTC_SetTime+0x70>
 80105b0:	2301      	movs	r3, #1
 80105b2:	6801      	ldr	r1, [r0, #0]
 80105b4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80105b6:	7745      	strb	r5, [r0, #29]
 80105b8:	7838      	ldrb	r0, [r7, #0]
 80105ba:	787d      	ldrb	r5, [r7, #1]
 80105bc:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80105be:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 80105c0:	bb42      	cbnz	r2, 8010614 <HAL_RTC_SetTime+0x76>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80105c2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 80105c6:	bf08      	it	eq
 80105c8:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80105ca:	f7ff ffdd 	bl	8010588 <RTC_ByteToBcd2>
 80105ce:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80105d0:	4628      	mov	r0, r5
 80105d2:	f7ff ffd9 	bl	8010588 <RTC_ByteToBcd2>
 80105d6:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80105d8:	4620      	mov	r0, r4
 80105da:	f7ff ffd5 	bl	8010588 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80105de:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80105e0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80105e4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80105e8:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80105ec:	23ca      	movs	r3, #202	; 0xca
 80105ee:	624b      	str	r3, [r1, #36]	; 0x24
 80105f0:	2353      	movs	r3, #83	; 0x53
 80105f2:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80105f4:	4630      	mov	r0, r6
 80105f6:	f7ff ff5f 	bl	80104b8 <RTC_EnterInitMode>
 80105fa:	6833      	ldr	r3, [r6, #0]
 80105fc:	4605      	mov	r5, r0
 80105fe:	b1b0      	cbz	r0, 801062e <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010600:	22ff      	movs	r2, #255	; 0xff
 8010602:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010604:	2304      	movs	r3, #4
 8010606:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8010608:	2300      	movs	r3, #0
 801060a:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 801060c:	2501      	movs	r5, #1
}
 801060e:	4628      	mov	r0, r5
 8010610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010614:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010618:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 801061c:	bf08      	it	eq
 801061e:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010620:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010624:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8010626:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010628:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 801062c:	e7de      	b.n	80105ec <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801062e:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8010632:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8010636:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8010638:	689a      	ldr	r2, [r3, #8]
 801063a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801063e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010640:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 8010644:	6899      	ldr	r1, [r3, #8]
 8010646:	4302      	orrs	r2, r0
 8010648:	430a      	orrs	r2, r1
 801064a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 801064c:	68da      	ldr	r2, [r3, #12]
 801064e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010652:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010654:	689b      	ldr	r3, [r3, #8]
 8010656:	069b      	lsls	r3, r3, #26
 8010658:	d40a      	bmi.n	8010670 <HAL_RTC_SetTime+0xd2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801065a:	4630      	mov	r0, r6
 801065c:	f7ff ff14 	bl	8010488 <HAL_RTC_WaitForSynchro>
 8010660:	b130      	cbz	r0, 8010670 <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010662:	6833      	ldr	r3, [r6, #0]
 8010664:	22ff      	movs	r2, #255	; 0xff
 8010666:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010668:	2304      	movs	r3, #4
 801066a:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 801066c:	7735      	strb	r5, [r6, #28]
 801066e:	e7cd      	b.n	801060c <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010670:	6833      	ldr	r3, [r6, #0]
 8010672:	22ff      	movs	r2, #255	; 0xff
 8010674:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8010676:	2301      	movs	r3, #1
 8010678:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 801067a:	2300      	movs	r3, #0
 801067c:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 801067e:	e7c6      	b.n	801060e <HAL_RTC_SetTime+0x70>

08010680 <HAL_RTC_SetDate>:
{
 8010680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8010682:	7f03      	ldrb	r3, [r0, #28]
 8010684:	2b01      	cmp	r3, #1
{
 8010686:	4606      	mov	r6, r0
 8010688:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 801068c:	d030      	beq.n	80106f0 <HAL_RTC_SetDate+0x70>
 801068e:	2301      	movs	r3, #1
 8010690:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010692:	7745      	strb	r5, [r0, #29]
 8010694:	780d      	ldrb	r5, [r1, #0]
 8010696:	78c8      	ldrb	r0, [r1, #3]
 8010698:	784c      	ldrb	r4, [r1, #1]
 801069a:	788f      	ldrb	r7, [r1, #2]
 801069c:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801069e:	2a00      	cmp	r2, #0
 80106a0:	d147      	bne.n	8010732 <HAL_RTC_SetDate+0xb2>
 80106a2:	06e2      	lsls	r2, r4, #27
 80106a4:	d503      	bpl.n	80106ae <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80106a6:	f024 0410 	bic.w	r4, r4, #16
 80106aa:	340a      	adds	r4, #10
 80106ac:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80106ae:	f7ff ff6b 	bl	8010588 <RTC_ByteToBcd2>
 80106b2:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80106b4:	7848      	ldrb	r0, [r1, #1]
 80106b6:	f7ff ff67 	bl	8010588 <RTC_ByteToBcd2>
 80106ba:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80106bc:	4638      	mov	r0, r7
 80106be:	f7ff ff63 	bl	8010588 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80106c2:	4328      	orrs	r0, r5
 80106c4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80106c8:	6833      	ldr	r3, [r6, #0]
 80106ca:	22ca      	movs	r2, #202	; 0xca
 80106cc:	625a      	str	r2, [r3, #36]	; 0x24
 80106ce:	2253      	movs	r2, #83	; 0x53
 80106d0:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80106d2:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80106d6:	4630      	mov	r0, r6
 80106d8:	f7ff feee 	bl	80104b8 <RTC_EnterInitMode>
 80106dc:	6833      	ldr	r3, [r6, #0]
 80106de:	4605      	mov	r5, r0
 80106e0:	b140      	cbz	r0, 80106f4 <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80106e2:	22ff      	movs	r2, #255	; 0xff
 80106e4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80106e6:	2304      	movs	r3, #4
 80106e8:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 80106ea:	2300      	movs	r3, #0
 80106ec:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 80106ee:	2501      	movs	r5, #1
}
 80106f0:	4628      	mov	r0, r5
 80106f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80106f4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80106f8:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80106fc:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80106fe:	68da      	ldr	r2, [r3, #12]
 8010700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010704:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010706:	689b      	ldr	r3, [r3, #8]
 8010708:	069b      	lsls	r3, r3, #26
 801070a:	d40a      	bmi.n	8010722 <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801070c:	4630      	mov	r0, r6
 801070e:	f7ff febb 	bl	8010488 <HAL_RTC_WaitForSynchro>
 8010712:	b130      	cbz	r0, 8010722 <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010714:	6833      	ldr	r3, [r6, #0]
 8010716:	22ff      	movs	r2, #255	; 0xff
 8010718:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801071a:	2304      	movs	r3, #4
 801071c:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 801071e:	7735      	strb	r5, [r6, #28]
 8010720:	e7e5      	b.n	80106ee <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010722:	6833      	ldr	r3, [r6, #0]
 8010724:	22ff      	movs	r2, #255	; 0xff
 8010726:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8010728:	2301      	movs	r3, #1
 801072a:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 801072c:	2300      	movs	r3, #0
 801072e:	7733      	strb	r3, [r6, #28]
    return HAL_OK;
 8010730:	e7de      	b.n	80106f0 <HAL_RTC_SetDate+0x70>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010732:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8010736:	4338      	orrs	r0, r7
 8010738:	e7c6      	b.n	80106c8 <HAL_RTC_SetDate+0x48>

0801073a <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 801073a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8010740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010744:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8010746:	4770      	bx	lr

08010748 <HAL_SD_DeInit>:
{
 8010748:	b510      	push	{r4, lr}
  if(hsd == NULL)
 801074a:	4604      	mov	r4, r0
 801074c:	b168      	cbz	r0, 801076a <HAL_SD_DeInit+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 801074e:	2303      	movs	r3, #3
 8010750:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
  /* Set Power State to OFF */
  (void)SDIO_PowerState_OFF(hsd->Instance);
 8010754:	6800      	ldr	r0, [r0, #0]
 8010756:	f001 fbc5 	bl	8011ee4 <SDIO_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 801075a:	4620      	mov	r0, r4
 801075c:	f7fd fc7e 	bl	800e05c <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010760:	2000      	movs	r0, #0
 8010762:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8010764:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8010768:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801076a:	2001      	movs	r0, #1
 801076c:	e7fc      	b.n	8010768 <HAL_SD_DeInit+0x20>
	...

08010770 <HAL_SD_ReadBlocks_DMA>:
{
 8010770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010774:	4604      	mov	r4, r0
 8010776:	b087      	sub	sp, #28
 8010778:	4617      	mov	r7, r2
 801077a:	4698      	mov	r8, r3
  if(NULL == pData)
 801077c:	b941      	cbnz	r1, 8010790 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801077e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010784:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8010786:	2501      	movs	r5, #1
}
 8010788:	4628      	mov	r0, r5
 801078a:	b007      	add	sp, #28
 801078c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8010790:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 8010794:	b2f6      	uxtb	r6, r6
 8010796:	2e01      	cmp	r6, #1
 8010798:	d176      	bne.n	8010888 <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801079a:	2200      	movs	r2, #0
 801079c:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801079e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80107a0:	18fb      	adds	r3, r7, r3
 80107a2:	4283      	cmp	r3, r0
 80107a4:	d903      	bls.n	80107ae <HAL_SD_ReadBlocks_DMA+0x3e>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80107a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80107a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80107ac:	e7ea      	b.n	8010784 <HAL_SD_ReadBlocks_DMA+0x14>
    hsd->Instance->DCTRL = 0U;
 80107ae:	6825      	ldr	r5, [r4, #0]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80107b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
    hsd->State = HAL_SD_STATE_BUSY;
 80107b2:	2303      	movs	r3, #3
 80107b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80107b8:	62ea      	str	r2, [r5, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80107ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80107bc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80107c0:	f043 0302 	orr.w	r3, r3, #2
 80107c4:	63eb      	str	r3, [r5, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80107c6:	4b31      	ldr	r3, [pc, #196]	; (801088c <HAL_SD_ReadBlocks_DMA+0x11c>)
 80107c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80107ca:	4b31      	ldr	r3, [pc, #196]	; (8010890 <HAL_SD_ReadBlocks_DMA+0x120>)
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80107cc:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferAbortCallback = NULL;
 80107d0:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80107d4:	460a      	mov	r2, r1
 80107d6:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80107da:	f105 0180 	add.w	r1, r5, #128	; 0x80
 80107de:	f7fe fa0f 	bl	800ec00 <HAL_DMA_Start_IT>
 80107e2:	4605      	mov	r5, r0
 80107e4:	b168      	cbz	r0, 8010802 <HAL_SD_ReadBlocks_DMA+0x92>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80107e6:	6823      	ldr	r3, [r4, #0]
 80107e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107ea:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80107ee:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80107f0:	4a28      	ldr	r2, [pc, #160]	; (8010894 <HAL_SD_ReadBlocks_DMA+0x124>)
 80107f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80107f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80107f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80107fa:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80107fc:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8010800:	e7c1      	b.n	8010786 <HAL_SD_ReadBlocks_DMA+0x16>
      __HAL_SD_DMA_ENABLE(hsd);
 8010802:	4b25      	ldr	r3, [pc, #148]	; (8010898 <HAL_SD_ReadBlocks_DMA+0x128>)
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010804:	6820      	ldr	r0, [r4, #0]
      __HAL_SD_DMA_ENABLE(hsd);
 8010806:	601e      	str	r6, [r3, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010808:	6c63      	ldr	r3, [r4, #68]	; 0x44
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801080a:	f44f 7100 	mov.w	r1, #512	; 0x200
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801080e:	2b01      	cmp	r3, #1
        add *= 512U;
 8010810:	bf18      	it	ne
 8010812:	027f      	lslne	r7, r7, #9
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010814:	f001 fb97 	bl	8011f46 <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 8010818:	b148      	cbz	r0, 801082e <HAL_SD_ReadBlocks_DMA+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801081a:	6823      	ldr	r3, [r4, #0]
 801081c:	4a1d      	ldr	r2, [pc, #116]	; (8010894 <HAL_SD_ReadBlocks_DMA+0x124>)
 801081e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8010820:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010822:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8010824:	4318      	orrs	r0, r3
 8010826:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010828:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        return HAL_ERROR;
 801082c:	e7ac      	b.n	8010788 <HAL_SD_ReadBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801082e:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8010832:	e9cd 3900 	strd	r3, r9, [sp]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8010836:	2290      	movs	r2, #144	; 0x90
 8010838:	2302      	movs	r3, #2
 801083a:	e9cd 2302 	strd	r2, r3, [sp, #8]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 801083e:	9004      	str	r0, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8010840:	2301      	movs	r3, #1
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8010842:	4669      	mov	r1, sp
 8010844:	6820      	ldr	r0, [r4, #0]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8010846:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8010848:	f001 fb6a 	bl	8011f20 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 801084c:	f1b8 0f01 	cmp.w	r8, #1
 8010850:	d913      	bls.n	801087a <HAL_SD_ReadBlocks_DMA+0x10a>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8010852:	2382      	movs	r3, #130	; 0x82
 8010854:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8010856:	4639      	mov	r1, r7
 8010858:	6820      	ldr	r0, [r4, #0]
 801085a:	f001 fba4 	bl	8011fa6 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 801085e:	2800      	cmp	r0, #0
 8010860:	d092      	beq.n	8010788 <HAL_SD_ReadBlocks_DMA+0x18>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010862:	6823      	ldr	r3, [r4, #0]
 8010864:	4a0b      	ldr	r2, [pc, #44]	; (8010894 <HAL_SD_ReadBlocks_DMA+0x124>)
 8010866:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8010868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 801086a:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 801086c:	4318      	orrs	r0, r3
        hsd->Context = SD_CONTEXT_NONE;
 801086e:	2300      	movs	r3, #0
        hsd->ErrorCode |= errorstate;
 8010870:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010872:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8010876:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8010878:	e786      	b.n	8010788 <HAL_SD_ReadBlocks_DMA+0x18>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801087a:	2381      	movs	r3, #129	; 0x81
 801087c:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801087e:	4639      	mov	r1, r7
 8010880:	6820      	ldr	r0, [r4, #0]
 8010882:	f001 fb78 	bl	8011f76 <SDMMC_CmdReadSingleBlock>
 8010886:	e7ea      	b.n	801085e <HAL_SD_ReadBlocks_DMA+0xee>
    return HAL_BUSY;
 8010888:	2502      	movs	r5, #2
 801088a:	e77d      	b.n	8010788 <HAL_SD_ReadBlocks_DMA+0x18>
 801088c:	080109cf 	.word	0x080109cf
 8010890:	08010de9 	.word	0x08010de9
 8010894:	004005ff 	.word	0x004005ff
 8010898:	4225858c 	.word	0x4225858c

0801089c <HAL_SD_WriteBlocks_DMA>:
{
 801089c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108a0:	4604      	mov	r4, r0
 80108a2:	b087      	sub	sp, #28
 80108a4:	4616      	mov	r6, r2
 80108a6:	461f      	mov	r7, r3
  if(NULL == pData)
 80108a8:	4689      	mov	r9, r1
 80108aa:	b941      	cbnz	r1, 80108be <HAL_SD_WriteBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80108ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80108ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80108b2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80108b4:	2501      	movs	r5, #1
}
 80108b6:	4628      	mov	r0, r5
 80108b8:	b007      	add	sp, #28
 80108ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80108be:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 80108c2:	b2ed      	uxtb	r5, r5
 80108c4:	2d01      	cmp	r5, #1
 80108c6:	d177      	bne.n	80109b8 <HAL_SD_WriteBlocks_DMA+0x11c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80108c8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80108ca:	18f3      	adds	r3, r6, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80108cc:	2200      	movs	r2, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80108ce:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80108d0:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80108d2:	d904      	bls.n	80108de <HAL_SD_WriteBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80108d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80108d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80108da:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 80108dc:	e7eb      	b.n	80108b6 <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 80108de:	2303      	movs	r3, #3
 80108e0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80108e4:	6800      	ldr	r0, [r0, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80108e6:	4935      	ldr	r1, [pc, #212]	; (80109bc <HAL_SD_WriteBlocks_DMA+0x120>)
    hsd->Instance->DCTRL = 0U;
 80108e8:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80108ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80108ec:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80108f0:	f043 0302 	orr.w	r3, r3, #2
 80108f4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80108f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80108f8:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80108fa:	4931      	ldr	r1, [pc, #196]	; (80109c0 <HAL_SD_WriteBlocks_DMA+0x124>)
    hsd->hdmatx->XferAbortCallback = NULL;
 80108fc:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010900:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010902:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010906:	2b01      	cmp	r3, #1
      add *= 512U;
 8010908:	bf18      	it	ne
 801090a:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801090c:	f001 fb1b 	bl	8011f46 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010910:	4602      	mov	r2, r0
 8010912:	6820      	ldr	r0, [r4, #0]
 8010914:	b142      	cbz	r2, 8010928 <HAL_SD_WriteBlocks_DMA+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010916:	4b2b      	ldr	r3, [pc, #172]	; (80109c4 <HAL_SD_WriteBlocks_DMA+0x128>)
 8010918:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801091a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801091c:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 801091e:	4313      	orrs	r3, r2
 8010920:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010922:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 8010926:	e7c6      	b.n	80108b6 <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 8010928:	2f01      	cmp	r7, #1
 801092a:	d912      	bls.n	8010952 <HAL_SD_WriteBlocks_DMA+0xb6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801092c:	23a0      	movs	r3, #160	; 0xa0
 801092e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010930:	4631      	mov	r1, r6
 8010932:	f001 fb68 	bl	8012006 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010936:	4606      	mov	r6, r0
 8010938:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 801093a:	b180      	cbz	r0, 801095e <HAL_SD_WriteBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801093c:	4b21      	ldr	r3, [pc, #132]	; (80109c4 <HAL_SD_WriteBlocks_DMA+0x128>)
 801093e:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010942:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8010944:	431e      	orrs	r6, r3
      hsd->Context = SD_CONTEXT_NONE;
 8010946:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8010948:	63a6      	str	r6, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801094a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801094e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8010950:	e7b1      	b.n	80108b6 <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8010952:	2390      	movs	r3, #144	; 0x90
 8010954:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010956:	4631      	mov	r1, r6
 8010958:	f001 fb3d 	bl	8011fd6 <SDMMC_CmdWriteSingleBlock>
 801095c:	e7eb      	b.n	8010936 <HAL_SD_WriteBlocks_DMA+0x9a>
    __HAL_SD_DMA_ENABLE(hsd);
 801095e:	4b1a      	ldr	r3, [pc, #104]	; (80109c8 <HAL_SD_WriteBlocks_DMA+0x12c>)
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8010960:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    __HAL_SD_DMA_ENABLE(hsd);
 8010962:	f04f 0801 	mov.w	r8, #1
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8010966:	027f      	lsls	r7, r7, #9
    __HAL_SD_DMA_ENABLE(hsd);
 8010968:	f8c3 8000 	str.w	r8, [r3]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 801096c:	3280      	adds	r2, #128	; 0x80
 801096e:	08bb      	lsrs	r3, r7, #2
 8010970:	4649      	mov	r1, r9
 8010972:	f7fe f945 	bl	800ec00 <HAL_DMA_Start_IT>
 8010976:	4605      	mov	r5, r0
 8010978:	b180      	cbz	r0, 801099c <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 801097a:	6822      	ldr	r2, [r4, #0]
 801097c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801097e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8010982:	f023 0302 	bic.w	r3, r3, #2
 8010986:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010988:	4b0e      	ldr	r3, [pc, #56]	; (80109c4 <HAL_SD_WriteBlocks_DMA+0x128>)
 801098a:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 801098c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801098e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010992:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010994:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010998:	6326      	str	r6, [r4, #48]	; 0x30
 801099a:	e78b      	b.n	80108b4 <HAL_SD_WriteBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801099c:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80109a0:	e9cd 3700 	strd	r3, r7, [sp]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80109a4:	4669      	mov	r1, sp
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80109a6:	2390      	movs	r3, #144	; 0x90
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80109a8:	6820      	ldr	r0, [r4, #0]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80109aa:	e9cd 3602 	strd	r3, r6, [sp, #8]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80109ae:	e9cd 6804 	strd	r6, r8, [sp, #16]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80109b2:	f001 fab5 	bl	8011f20 <SDIO_ConfigData>
      return HAL_OK;
 80109b6:	e77e      	b.n	80108b6 <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 80109b8:	2502      	movs	r5, #2
 80109ba:	e77c      	b.n	80108b6 <HAL_SD_WriteBlocks_DMA+0x1a>
 80109bc:	0801073b 	.word	0x0801073b
 80109c0:	08010de9 	.word	0x08010de9
 80109c4:	004005ff 	.word	0x004005ff
 80109c8:	4225858c 	.word	0x4225858c

080109cc <HAL_SD_ErrorCallback>:
 80109cc:	4770      	bx	lr

080109ce <SD_DMAReceiveCplt>:
{
 80109ce:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80109d0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80109d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80109d4:	2b82      	cmp	r3, #130	; 0x82
 80109d6:	d109      	bne.n	80109ec <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80109d8:	6820      	ldr	r0, [r4, #0]
 80109da:	f001 fb2d 	bl	8012038 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80109de:	b128      	cbz	r0, 80109ec <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 80109e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80109e2:	4318      	orrs	r0, r3
 80109e4:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 80109e6:	4620      	mov	r0, r4
 80109e8:	f7ff fff0 	bl	80109cc <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80109ec:	6823      	ldr	r3, [r4, #0]
 80109ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109f0:	f022 0208 	bic.w	r2, r2, #8
 80109f4:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80109f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80109fa:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80109fc:	2301      	movs	r3, #1
 80109fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8010a02:	2300      	movs	r3, #0
 8010a04:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8010a06:	4620      	mov	r0, r4
 8010a08:	f002 f845 	bl	8012a96 <HAL_SD_RxCpltCallback>
}
 8010a0c:	bd10      	pop	{r4, pc}
	...

08010a10 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010a10:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8010a12:	0f9a      	lsrs	r2, r3, #30
 8010a14:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010a16:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8010a1a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010a1c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8010a20:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010a22:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010a26:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010a28:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010a2c:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010a2e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010a30:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010a32:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8010a34:	0d1a      	lsrs	r2, r3, #20
 8010a36:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010a38:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8010a3c:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010a3e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8010a42:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010a44:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8010a48:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010a4a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8010a4e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010a50:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8010a54:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010a56:	2200      	movs	r2, #0
 8010a58:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8010a5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8010a5c:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8010a5e:	2a00      	cmp	r2, #0
 8010a60:	d16b      	bne.n	8010b3a <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010a62:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8010a64:	f640 74fc 	movw	r4, #4092	; 0xffc
 8010a68:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8010a6c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8010a70:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010a72:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8010a76:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8010a78:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8010a7c:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8010a7e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8010a82:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010a84:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010a88:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010a8c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010a8e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010a90:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010a92:	7e0a      	ldrb	r2, [r1, #24]
 8010a94:	f002 0207 	and.w	r2, r2, #7
 8010a98:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010a9a:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010a9c:	4093      	lsls	r3, r2
 8010a9e:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010aa0:	7a0a      	ldrb	r2, [r1, #8]
 8010aa2:	f002 040f 	and.w	r4, r2, #15
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	40a2      	lsls	r2, r4
 8010aaa:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010aac:	0a52      	lsrs	r2, r2, #9
 8010aae:	4353      	muls	r3, r2
 8010ab0:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8010ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010ab6:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8010ab8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8010aba:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8010abe:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010ac0:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010ac8:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010aca:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010acc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8010ace:	0fda      	lsrs	r2, r3, #31
 8010ad0:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010ad2:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8010ad6:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010ad8:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8010adc:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010ade:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8010ae2:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8010ae4:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8010ae8:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8010aec:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010aee:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8010af2:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010af6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010afa:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8010afe:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010b02:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8010b06:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010b0a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8010b0e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010b12:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8010b16:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010b1a:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8010b1e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010b22:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010b26:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010b2a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010b2e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8010b32:	2301      	movs	r3, #1
 8010b34:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8010b38:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010b3a:	2a01      	cmp	r2, #1
 8010b3c:	d10f      	bne.n	8010b5e <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010b3e:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8010b42:	041b      	lsls	r3, r3, #16
 8010b44:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010b48:	4313      	orrs	r3, r2
 8010b4a:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010b4c:	690b      	ldr	r3, [r1, #16]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	029b      	lsls	r3, r3, #10
 8010b52:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010b54:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8010b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b5a:	6583      	str	r3, [r0, #88]	; 0x58
 8010b5c:	e7ab      	b.n	8010ab6 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010b5e:	6803      	ldr	r3, [r0, #0]
 8010b60:	4a05      	ldr	r2, [pc, #20]	; (8010b78 <HAL_SD_GetCardCSD+0x168>)
 8010b62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010b64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b6a:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8010b72:	4618      	mov	r0, r3
 8010b74:	e7e0      	b.n	8010b38 <HAL_SD_GetCardCSD+0x128>
 8010b76:	bf00      	nop
 8010b78:	004005ff 	.word	0x004005ff

08010b7c <HAL_SD_InitCard>:
{
 8010b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8010b80:	2300      	movs	r3, #0
{
 8010b82:	b099      	sub	sp, #100	; 0x64
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8010b84:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8010b88:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8010b8c:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8010b8e:	2376      	movs	r3, #118	; 0x76
 8010b90:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 8010b92:	ab0a      	add	r3, sp, #40	; 0x28
{
 8010b94:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 8010b96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b9a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010b9e:	ab07      	add	r3, sp, #28
 8010ba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ba2:	6820      	ldr	r0, [r4, #0]
 8010ba4:	f001 f972 	bl	8011e8c <SDIO_Init>
  if(status != HAL_OK)
 8010ba8:	4605      	mov	r5, r0
 8010baa:	2800      	cmp	r0, #0
 8010bac:	f040 80d4 	bne.w	8010d58 <HAL_SD_InitCard+0x1dc>
  __HAL_SD_DISABLE(hsd);
 8010bb0:	4f6a      	ldr	r7, [pc, #424]	; (8010d5c <HAL_SD_InitCard+0x1e0>)
  __HAL_SD_ENABLE(hsd);
 8010bb2:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 8010bb4:	6038      	str	r0, [r7, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8010bb6:	6820      	ldr	r0, [r4, #0]
 8010bb8:	f001 f98c 	bl	8011ed4 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8010bbc:	603e      	str	r6, [r7, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010bbe:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8010bc0:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010bc2:	f001 fa6b 	bl	801209c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010bc6:	4605      	mov	r5, r0
 8010bc8:	b940      	cbnz	r0, 8010bdc <HAL_SD_InitCard+0x60>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8010bca:	6820      	ldr	r0, [r4, #0]
 8010bcc:	f001 fa8e 	bl	80120ec <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010bd0:	b158      	cbz	r0, 8010bea <HAL_SD_InitCard+0x6e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8010bd2:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010bd4:	6820      	ldr	r0, [r4, #0]
 8010bd6:	f001 fa61 	bl	801209c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010bda:	b138      	cbz	r0, 8010bec <HAL_SD_InitCard+0x70>
    hsd->State = HAL_SD_STATE_READY;
 8010bdc:	2501      	movs	r5, #1
 8010bde:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8010be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010be4:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 8010be6:	63a0      	str	r0, [r4, #56]	; 0x38
 8010be8:	e084      	b.n	8010cf4 <HAL_SD_InitCard+0x178>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8010bea:	64a6      	str	r6, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8010bec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	d134      	bne.n	8010c5c <HAL_SD_InitCard+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	6820      	ldr	r0, [r4, #0]
 8010bf6:	f001 fab9 	bl	801216c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010bfa:	b378      	cbz	r0, 8010c5c <HAL_SD_InitCard+0xe0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010bfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010c00:	e7ec      	b.n	8010bdc <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010c02:	4631      	mov	r1, r6
 8010c04:	6820      	ldr	r0, [r4, #0]
 8010c06:	f001 fab1 	bl	801216c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d1e6      	bne.n	8010bdc <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010c0e:	4649      	mov	r1, r9
 8010c10:	6820      	ldr	r0, [r4, #0]
 8010c12:	f001 fac3 	bl	801219c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d1f0      	bne.n	8010bfc <HAL_SD_InitCard+0x80>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8010c1a:	4631      	mov	r1, r6
 8010c1c:	6820      	ldr	r0, [r4, #0]
 8010c1e:	f001 f97c 	bl	8011f1a <SDIO_GetResponse>
    count++;
 8010c22:	9b06      	ldr	r3, [sp, #24]
 8010c24:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8010c26:	4605      	mov	r5, r0
    count++;
 8010c28:	9306      	str	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8010c2a:	0fc6      	lsrs	r6, r0, #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010c2c:	9b06      	ldr	r3, [sp, #24]
 8010c2e:	42bb      	cmp	r3, r7
 8010c30:	d801      	bhi.n	8010c36 <HAL_SD_InitCard+0xba>
 8010c32:	2e00      	cmp	r6, #0
 8010c34:	d0e5      	beq.n	8010c02 <HAL_SD_InitCard+0x86>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8010c36:	9b06      	ldr	r3, [sp, #24]
 8010c38:	4543      	cmp	r3, r8
 8010c3a:	d816      	bhi.n	8010c6a <HAL_SD_InitCard+0xee>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010c3c:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 8010c40:	f04f 0301 	mov.w	r3, #1
 8010c44:	bf18      	it	ne
 8010c46:	461d      	movne	r5, r3
 8010c48:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8010c4a:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8010c4c:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8010c50:	f001 f94c 	bl	8011eec <SDIO_GetPowerState>
 8010c54:	b960      	cbnz	r0, 8010c70 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010c56:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8010c5a:	e056      	b.n	8010d0a <HAL_SD_InitCard+0x18e>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010c5c:	f64f 77fe 	movw	r7, #65534	; 0xfffe
{
 8010c60:	2600      	movs	r6, #0
 8010c62:	46b8      	mov	r8, r7
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010c64:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8010d60 <HAL_SD_InitCard+0x1e4>
 8010c68:	e7e0      	b.n	8010c2c <HAL_SD_InitCard+0xb0>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010c6a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8010c6e:	e7b5      	b.n	8010bdc <HAL_SD_InitCard+0x60>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c72:	2b03      	cmp	r3, #3
 8010c74:	d019      	beq.n	8010caa <HAL_SD_InitCard+0x12e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8010c76:	6820      	ldr	r0, [r4, #0]
 8010c78:	f001 faa9 	bl	80121ce <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	d144      	bne.n	8010d0a <HAL_SD_InitCard+0x18e>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8010c80:	4601      	mov	r1, r0
 8010c82:	6820      	ldr	r0, [r4, #0]
 8010c84:	f001 f949 	bl	8011f1a <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8010c88:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8010c8a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8010c8c:	6820      	ldr	r0, [r4, #0]
 8010c8e:	f001 f944 	bl	8011f1a <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8010c92:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8010c94:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8010c96:	6820      	ldr	r0, [r4, #0]
 8010c98:	f001 f93f 	bl	8011f1a <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8010c9c:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8010c9e:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8010ca0:	6820      	ldr	r0, [r4, #0]
 8010ca2:	f001 f93a 	bl	8011f1a <SDIO_GetResponse>
 8010ca6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010caa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010cac:	2b03      	cmp	r3, #3
 8010cae:	d125      	bne.n	8010cfc <HAL_SD_InitCard+0x180>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010cb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d12f      	bne.n	8010d16 <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8010cb6:	2104      	movs	r1, #4
 8010cb8:	6820      	ldr	r0, [r4, #0]
 8010cba:	f001 f92e 	bl	8011f1a <SDIO_GetResponse>
 8010cbe:	0d00      	lsrs	r0, r0, #20
 8010cc0:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010cc2:	a90d      	add	r1, sp, #52	; 0x34
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f7ff fea3 	bl	8010a10 <HAL_SD_GetCardCSD>
 8010cca:	4605      	mov	r5, r0
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	d140      	bne.n	8010d52 <HAL_SD_InitCard+0x1d6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010cd0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	0412      	lsls	r2, r2, #16
 8010cd6:	6820      	ldr	r0, [r4, #0]
 8010cd8:	f001 f9c8 	bl	801206c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010cdc:	b9a8      	cbnz	r0, 8010d0a <HAL_SD_InitCard+0x18e>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8010cde:	f104 0310 	add.w	r3, r4, #16
 8010ce2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010ce6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010cea:	1d23      	adds	r3, r4, #4
 8010cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010cee:	6820      	ldr	r0, [r4, #0]
 8010cf0:	f001 f8cc 	bl	8011e8c <SDIO_Init>
}
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	b019      	add	sp, #100	; 0x64
 8010cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010cfc:	f10d 0116 	add.w	r1, sp, #22
 8010d00:	6820      	ldr	r0, [r4, #0]
 8010d02:	f001 fa8f 	bl	8012224 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010d06:	2800      	cmp	r0, #0
 8010d08:	d0d2      	beq.n	8010cb0 <HAL_SD_InitCard+0x134>
    hsd->State = HAL_SD_STATE_READY;
 8010d0a:	2501      	movs	r5, #1
 8010d0c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8010d10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010d12:	4308      	orrs	r0, r1
 8010d14:	e767      	b.n	8010be6 <HAL_SD_InitCard+0x6a>
    hsd->SdCard.RelCardAdd = sd_rca;
 8010d16:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8010d1a:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010d1c:	6820      	ldr	r0, [r4, #0]
 8010d1e:	0409      	lsls	r1, r1, #16
 8010d20:	f001 fa6a 	bl	80121f8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010d24:	2800      	cmp	r0, #0
 8010d26:	d1f0      	bne.n	8010d0a <HAL_SD_InitCard+0x18e>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8010d28:	4601      	mov	r1, r0
 8010d2a:	6820      	ldr	r0, [r4, #0]
 8010d2c:	f001 f8f5 	bl	8011f1a <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8010d30:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8010d32:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8010d34:	6820      	ldr	r0, [r4, #0]
 8010d36:	f001 f8f0 	bl	8011f1a <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8010d3a:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8010d3c:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8010d3e:	6820      	ldr	r0, [r4, #0]
 8010d40:	f001 f8eb 	bl	8011f1a <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8010d44:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8010d46:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8010d48:	6820      	ldr	r0, [r4, #0]
 8010d4a:	f001 f8e6 	bl	8011f1a <SDIO_GetResponse>
 8010d4e:	6720      	str	r0, [r4, #112]	; 0x70
 8010d50:	e7b1      	b.n	8010cb6 <HAL_SD_InitCard+0x13a>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010d52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010d56:	e7d8      	b.n	8010d0a <HAL_SD_InitCard+0x18e>
    return HAL_ERROR;
 8010d58:	2501      	movs	r5, #1
 8010d5a:	e7cb      	b.n	8010cf4 <HAL_SD_InitCard+0x178>
 8010d5c:	422580a0 	.word	0x422580a0
 8010d60:	c1100000 	.word	0xc1100000

08010d64 <HAL_SD_Init>:
{
 8010d64:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8010d66:	4604      	mov	r4, r0
 8010d68:	b908      	cbnz	r0, 8010d6e <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8010d6a:	2001      	movs	r0, #1
}
 8010d6c:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8010d6e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8010d72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010d76:	b913      	cbnz	r3, 8010d7e <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8010d78:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8010d7a:	f7fd f8bf 	bl	800defc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8010d7e:	2303      	movs	r3, #3
 8010d80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8010d84:	4620      	mov	r0, r4
 8010d86:	f7ff fef9 	bl	8010b7c <HAL_SD_InitCard>
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	d1ed      	bne.n	8010d6a <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8010d8e:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010d90:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8010d92:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8010d94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8010d98:	e7e8      	b.n	8010d6c <HAL_SD_Init+0x8>

08010d9a <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8010d9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010d9c:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010d9e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8010da0:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8010da2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010da4:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010da6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010da8:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8010daa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8010dac:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010dae:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8010db0:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8010db2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8010db4:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010db6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8010db8:	61cb      	str	r3, [r1, #28]
}
 8010dba:	2000      	movs	r0, #0
 8010dbc:	4770      	bx	lr

08010dbe <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010dbe:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8010dc0:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010dc2:	0409      	lsls	r1, r1, #16
{
 8010dc4:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010dc6:	6800      	ldr	r0, [r0, #0]
 8010dc8:	f001 fa7c 	bl	80122c4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010dcc:	4601      	mov	r1, r0
 8010dce:	b928      	cbnz	r0, 8010ddc <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8010dd0:	6820      	ldr	r0, [r4, #0]
 8010dd2:	f001 f8a2 	bl	8011f1a <SDIO_GetResponse>
}
 8010dd6:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8010dda:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8010ddc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010dde:	4319      	orrs	r1, r3
 8010de0:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8010de2:	2000      	movs	r0, #0
 8010de4:	e7f7      	b.n	8010dd6 <HAL_SD_GetCardState+0x18>
	...

08010de8 <SD_DMAError>:
{
 8010de8:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010dea:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010dec:	f7fe f812 	bl	800ee14 <HAL_DMA_GetError>
 8010df0:	2802      	cmp	r0, #2
 8010df2:	d026      	beq.n	8010e42 <SD_DMAError+0x5a>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8010df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010df6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8010df8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8010dfa:	2a01      	cmp	r2, #1
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8010dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8010dfe:	d001      	beq.n	8010e04 <SD_DMAError+0x1c>
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	d11b      	bne.n	8010e3c <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010e04:	6823      	ldr	r3, [r4, #0]
 8010e06:	4a0f      	ldr	r2, [pc, #60]	; (8010e44 <SD_DMAError+0x5c>)
 8010e08:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8010e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010e0c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8010e10:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8010e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010e18:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f7ff ffcf 	bl	8010dbe <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010e20:	3805      	subs	r0, #5
 8010e22:	2801      	cmp	r0, #1
 8010e24:	d805      	bhi.n	8010e32 <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010e26:	6820      	ldr	r0, [r4, #0]
 8010e28:	f001 f906 	bl	8012038 <SDMMC_CmdStopTransfer>
 8010e2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e2e:	4318      	orrs	r0, r3
 8010e30:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8010e32:	2301      	movs	r3, #1
 8010e34:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f7ff fdc5 	bl	80109cc <HAL_SD_ErrorCallback>
}
 8010e42:	bd10      	pop	{r4, pc}
 8010e44:	004005ff 	.word	0x004005ff

08010e48 <SD_DMATxAbort>:
{
 8010e48:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010e4a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8010e4c:	6823      	ldr	r3, [r4, #0]
 8010e4e:	f240 523a 	movw	r2, #1338	; 0x53a
 8010e52:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8010e54:	4620      	mov	r0, r4
 8010e56:	f7ff ffb2 	bl	8010dbe <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8010e5a:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010e5c:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 8010e5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010e62:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 8010e64:	f04f 0300 	mov.w	r3, #0
 8010e68:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010e6a:	d805      	bhi.n	8010e78 <SD_DMATxAbort+0x30>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010e6c:	6820      	ldr	r0, [r4, #0]
 8010e6e:	f001 f8e3 	bl	8012038 <SDMMC_CmdStopTransfer>
 8010e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e74:	4318      	orrs	r0, r3
 8010e76:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8010e78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 8010e7a:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8010e7c:	b913      	cbnz	r3, 8010e84 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8010e7e:	f001 fe02 	bl	8012a86 <HAL_SD_AbortCallback>
}
 8010e82:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 8010e84:	f7ff fda2 	bl	80109cc <HAL_SD_ErrorCallback>
}
 8010e88:	e7fb      	b.n	8010e82 <SD_DMATxAbort+0x3a>
	...

08010e8c <HAL_SD_IRQHandler>:
{
 8010e8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 8010e90:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 8010e92:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8010e94:	6800      	ldr	r0, [r0, #0]
 8010e96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010e98:	041a      	lsls	r2, r3, #16
 8010e9a:	d51f      	bpl.n	8010edc <HAL_SD_IRQHandler+0x50>
 8010e9c:	072b      	lsls	r3, r5, #28
 8010e9e:	d51d      	bpl.n	8010edc <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8010ea0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 8010ea2:	b1c7      	cbz	r7, 8010ed6 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 8010ea4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ea6:	1d35      	adds	r5, r6, #4
 8010ea8:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8010eac:	6820      	ldr	r0, [r4, #0]
 8010eae:	f001 f809 	bl	8011ec4 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8010eb2:	0a03      	lsrs	r3, r0, #8
      *tmp = (uint8_t)(data & 0xFFU);
 8010eb4:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8010eb8:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8010ebc:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010ebe:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8010ec0:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010ec4:	f805 0c01 	strb.w	r0, [r5, #-1]
 8010ec8:	3504      	adds	r5, #4
    for(count = 0U; count < 8U; count++)
 8010eca:	4545      	cmp	r5, r8
 8010ecc:	d1ee      	bne.n	8010eac <HAL_SD_IRQHandler+0x20>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 8010ece:	3620      	adds	r6, #32
    hsd->RxXferSize = dataremaining;
 8010ed0:	3f20      	subs	r7, #32
    hsd->pRxBuffPtr = tmp;
 8010ed2:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8010ed4:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 8010ed6:	b002      	add	sp, #8
 8010ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8010edc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010ede:	05df      	lsls	r7, r3, #23
 8010ee0:	d545      	bpl.n	8010f6e <HAL_SD_IRQHandler+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8010ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ee6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8010ee8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8010eea:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8010eee:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8010ef2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8010ef4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8010ef6:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8010ef8:	f023 0301 	bic.w	r3, r3, #1
 8010efc:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8010efe:	d51b      	bpl.n	8010f38 <HAL_SD_IRQHandler+0xac>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010f00:	f015 0f22 	tst.w	r5, #34	; 0x22
 8010f04:	d008      	beq.n	8010f18 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010f06:	f001 f897 	bl	8012038 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8010f0a:	b128      	cbz	r0, 8010f18 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 8010f0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f0e:	4318      	orrs	r0, r3
 8010f10:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8010f12:	4620      	mov	r0, r4
 8010f14:	f7ff fd5a 	bl	80109cc <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8010f18:	6823      	ldr	r3, [r4, #0]
 8010f1a:	f240 523a 	movw	r2, #1338	; 0x53a
 8010f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010f20:	2301      	movs	r3, #1
 8010f22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010f26:	07a9      	lsls	r1, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 8010f28:	f04f 0300 	mov.w	r3, #0
 8010f2c:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_RxCpltCallback(hsd);
 8010f2e:	4620      	mov	r0, r4
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010f30:	d01a      	beq.n	8010f68 <HAL_SD_IRQHandler+0xdc>
        HAL_SD_RxCpltCallback(hsd);
 8010f32:	f001 fdb0 	bl	8012a96 <HAL_SD_RxCpltCallback>
 8010f36:	e7ce      	b.n	8010ed6 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8010f38:	062a      	lsls	r2, r5, #24
 8010f3a:	d5cc      	bpl.n	8010ed6 <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8010f3c:	06ab      	lsls	r3, r5, #26
 8010f3e:	d508      	bpl.n	8010f52 <HAL_SD_IRQHandler+0xc6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010f40:	f001 f87a 	bl	8012038 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8010f44:	b128      	cbz	r0, 8010f52 <HAL_SD_IRQHandler+0xc6>
          hsd->ErrorCode |= errorstate;
 8010f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f48:	4318      	orrs	r0, r3
 8010f4a:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	f7ff fd3d 	bl	80109cc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8010f52:	07af      	lsls	r7, r5, #30
 8010f54:	d1bf      	bne.n	8010ed6 <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8010f56:	6822      	ldr	r2, [r4, #0]
 8010f58:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8010f5a:	f023 0308 	bic.w	r3, r3, #8
 8010f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8010f60:	2301      	movs	r3, #1
 8010f62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8010f66:	4620      	mov	r0, r4
 8010f68:	f001 fd91 	bl	8012a8e <HAL_SD_TxCpltCallback>
 8010f6c:	e7b3      	b.n	8010ed6 <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8010f6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010f70:	045e      	lsls	r6, r3, #17
 8010f72:	d526      	bpl.n	8010fc2 <HAL_SD_IRQHandler+0x136>
 8010f74:	0729      	lsls	r1, r5, #28
 8010f76:	d524      	bpl.n	8010fc2 <HAL_SD_IRQHandler+0x136>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8010f78:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 8010f7a:	2f00      	cmp	r7, #0
 8010f7c:	d0ab      	beq.n	8010ed6 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 8010f7e:	6a26      	ldr	r6, [r4, #32]
 8010f80:	1d35      	adds	r5, r6, #4
 8010f82:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8010f86:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8010f8a:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 8010f8c:	f815 2c03 	ldrb.w	r2, [r5, #-3]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8010f90:	6820      	ldr	r0, [r4, #0]
      data |= ((uint32_t)(*tmp) << 8U);
 8010f92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010f96:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8010f98:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8010f9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fa0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8010fa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8010fa6:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 8010fa8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010fac:	3504      	adds	r5, #4
 8010fae:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8010fb0:	f000 ff8b 	bl	8011eca <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8010fb4:	4545      	cmp	r5, r8
 8010fb6:	d1e6      	bne.n	8010f86 <HAL_SD_IRQHandler+0xfa>
    }

    hsd->pTxBuffPtr = tmp;
 8010fb8:	3620      	adds	r6, #32
    hsd->TxXferSize = dataremaining;
 8010fba:	3f20      	subs	r7, #32
    hsd->pTxBuffPtr = tmp;
 8010fbc:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 8010fbe:	6267      	str	r7, [r4, #36]	; 0x24
 8010fc0:	e789      	b.n	8010ed6 <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8010fc2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010fc4:	f240 233a 	movw	r3, #570	; 0x23a
 8010fc8:	421a      	tst	r2, r3
 8010fca:	d084      	beq.n	8010ed6 <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8010fcc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010fce:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010fd0:	bf42      	ittt	mi
 8010fd2:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8010fd4:	f043 0302 	orrmi.w	r3, r3, #2
 8010fd8:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8010fda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010fdc:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010fde:	bf42      	ittt	mi
 8010fe0:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8010fe2:	f043 0308 	orrmi.w	r3, r3, #8
 8010fe6:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8010fe8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010fea:	069f      	lsls	r7, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8010fec:	bf42      	ittt	mi
 8010fee:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8010ff0:	f043 0320 	orrmi.w	r3, r3, #32
 8010ff4:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8010ff6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010ff8:	06de      	lsls	r6, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8010ffa:	bf42      	ittt	mi
 8010ffc:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8010ffe:	f043 0310 	orrmi.w	r3, r3, #16
 8011002:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8011004:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011006:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8011008:	bf42      	ittt	mi
 801100a:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 801100c:	f043 0308 	orrmi.w	r3, r3, #8
 8011010:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8011012:	f240 733a 	movw	r3, #1850	; 0x73a
 8011016:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8011018:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801101a:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 801101e:	f023 0302 	bic.w	r3, r3, #2
 8011022:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011024:	f001 f808 	bl	8012038 <SDMMC_CmdStopTransfer>
 8011028:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 801102a:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801102c:	ea40 0003 	orr.w	r0, r0, r3
 8011030:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8011032:	d508      	bpl.n	8011046 <HAL_SD_IRQHandler+0x1ba>
      hsd->State = HAL_SD_STATE_READY;
 8011034:	2301      	movs	r3, #1
 8011036:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801103a:	2300      	movs	r3, #0
 801103c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 801103e:	4620      	mov	r0, r4
 8011040:	f7ff fcc4 	bl	80109cc <HAL_SD_ErrorCallback>
 8011044:	e747      	b.n	8010ed6 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8011046:	062b      	lsls	r3, r5, #24
 8011048:	f57f af45 	bpl.w	8010ed6 <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801104c:	f015 0f30 	tst.w	r5, #48	; 0x30
 8011050:	d00b      	beq.n	801106a <HAL_SD_IRQHandler+0x1de>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8011052:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011054:	4b10      	ldr	r3, [pc, #64]	; (8011098 <HAL_SD_IRQHandler+0x20c>)
 8011056:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8011058:	f7fd fe0c 	bl	800ec74 <HAL_DMA_Abort_IT>
 801105c:	2800      	cmp	r0, #0
 801105e:	f43f af3a 	beq.w	8010ed6 <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 8011062:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          SD_DMARxAbort(hsd->hdmarx);
 8011064:	f7ff fef0 	bl	8010e48 <SD_DMATxAbort>
 8011068:	e735      	b.n	8010ed6 <HAL_SD_IRQHandler+0x4a>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801106a:	f015 0503 	ands.w	r5, r5, #3
 801106e:	d009      	beq.n	8011084 <HAL_SD_IRQHandler+0x1f8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8011070:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011072:	4b0a      	ldr	r3, [pc, #40]	; (801109c <HAL_SD_IRQHandler+0x210>)
 8011074:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8011076:	f7fd fdfd 	bl	800ec74 <HAL_DMA_Abort_IT>
 801107a:	2800      	cmp	r0, #0
 801107c:	f43f af2b 	beq.w	8010ed6 <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 8011080:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011082:	e7ef      	b.n	8011064 <HAL_SD_IRQHandler+0x1d8>
        hsd->State = HAL_SD_STATE_READY;
 8011084:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011086:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8011088:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 801108a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 801108e:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8011090:	f001 fcf9 	bl	8012a86 <HAL_SD_AbortCallback>
}
 8011094:	e71f      	b.n	8010ed6 <HAL_SD_IRQHandler+0x4a>
 8011096:	bf00      	nop
 8011098:	08010e49 	.word	0x08010e49
 801109c:	080110a1 	.word	0x080110a1

080110a0 <SD_DMARxAbort>:
 80110a0:	f7ff bed2 	b.w	8010e48 <SD_DMATxAbort>

080110a4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80110a4:	6a03      	ldr	r3, [r0, #32]
 80110a6:	f023 0301 	bic.w	r3, r3, #1
 80110aa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110ac:	6a03      	ldr	r3, [r0, #32]
{
 80110ae:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80110b2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80110b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80110b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80110ba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80110bc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80110be:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80110c2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80110c4:	4d0e      	ldr	r5, [pc, #56]	; (8011100 <TIM_OC1_SetConfig+0x5c>)
 80110c6:	42a8      	cmp	r0, r5
 80110c8:	d002      	beq.n	80110d0 <TIM_OC1_SetConfig+0x2c>
 80110ca:	4e0e      	ldr	r6, [pc, #56]	; (8011104 <TIM_OC1_SetConfig+0x60>)
 80110cc:	42b0      	cmp	r0, r6
 80110ce:	d110      	bne.n	80110f2 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80110d0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80110d2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80110d6:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110d8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80110da:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110de:	d002      	beq.n	80110e6 <TIM_OC1_SetConfig+0x42>
 80110e0:	4d08      	ldr	r5, [pc, #32]	; (8011104 <TIM_OC1_SetConfig+0x60>)
 80110e2:	42a8      	cmp	r0, r5
 80110e4:	d105      	bne.n	80110f2 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80110e6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80110ea:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80110ee:	4335      	orrs	r5, r6
 80110f0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110f2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80110f4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80110f6:	684a      	ldr	r2, [r1, #4]
 80110f8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110fa:	6203      	str	r3, [r0, #32]
}
 80110fc:	bd70      	pop	{r4, r5, r6, pc}
 80110fe:	bf00      	nop
 8011100:	40010000 	.word	0x40010000
 8011104:	40010400 	.word	0x40010400

08011108 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011108:	6a03      	ldr	r3, [r0, #32]
 801110a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801110e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011110:	6a03      	ldr	r3, [r0, #32]
{
 8011112:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011114:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011116:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011118:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801111a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 801111e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011120:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8011122:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011126:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801112a:	4d11      	ldr	r5, [pc, #68]	; (8011170 <TIM_OC3_SetConfig+0x68>)
 801112c:	42a8      	cmp	r0, r5
 801112e:	d003      	beq.n	8011138 <TIM_OC3_SetConfig+0x30>
 8011130:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8011134:	42a8      	cmp	r0, r5
 8011136:	d114      	bne.n	8011162 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011138:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 801113a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801113e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011142:	4d0b      	ldr	r5, [pc, #44]	; (8011170 <TIM_OC3_SetConfig+0x68>)
 8011144:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8011146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801114a:	d003      	beq.n	8011154 <TIM_OC3_SetConfig+0x4c>
 801114c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8011150:	42a8      	cmp	r0, r5
 8011152:	d106      	bne.n	8011162 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011154:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011158:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801115c:	4335      	orrs	r5, r6
 801115e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011162:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011164:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011166:	684a      	ldr	r2, [r1, #4]
 8011168:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801116a:	6203      	str	r3, [r0, #32]
}
 801116c:	bd70      	pop	{r4, r5, r6, pc}
 801116e:	bf00      	nop
 8011170:	40010000 	.word	0x40010000

08011174 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011174:	6a03      	ldr	r3, [r0, #32]
 8011176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801117a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801117c:	6a03      	ldr	r3, [r0, #32]
{
 801117e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011180:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011182:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011184:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011186:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801118a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801118e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8011190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011194:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011198:	4d08      	ldr	r5, [pc, #32]	; (80111bc <TIM_OC4_SetConfig+0x48>)
 801119a:	42a8      	cmp	r0, r5
 801119c:	d003      	beq.n	80111a6 <TIM_OC4_SetConfig+0x32>
 801119e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80111a2:	42a8      	cmp	r0, r5
 80111a4:	d104      	bne.n	80111b0 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80111a6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80111a8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80111ac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80111b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80111b4:	684a      	ldr	r2, [r1, #4]
 80111b6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80111b8:	6203      	str	r3, [r0, #32]
}
 80111ba:	bd30      	pop	{r4, r5, pc}
 80111bc:	40010000 	.word	0x40010000

080111c0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80111c0:	6803      	ldr	r3, [r0, #0]
 80111c2:	68da      	ldr	r2, [r3, #12]
 80111c4:	f042 0201 	orr.w	r2, r2, #1
 80111c8:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80111ca:	689a      	ldr	r2, [r3, #8]
 80111cc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111d0:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80111d2:	bf1e      	ittt	ne
 80111d4:	681a      	ldrne	r2, [r3, #0]
 80111d6:	f042 0201 	orrne.w	r2, r2, #1
 80111da:	601a      	strne	r2, [r3, #0]
}
 80111dc:	2000      	movs	r0, #0
 80111de:	4770      	bx	lr

080111e0 <HAL_TIM_PWM_MspInit>:
 80111e0:	4770      	bx	lr

080111e2 <HAL_TIM_OC_DelayElapsedCallback>:
 80111e2:	4770      	bx	lr

080111e4 <HAL_TIM_IC_CaptureCallback>:
 80111e4:	4770      	bx	lr

080111e6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80111e6:	4770      	bx	lr

080111e8 <HAL_TIM_TriggerCallback>:
 80111e8:	4770      	bx	lr

080111ea <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80111ea:	6803      	ldr	r3, [r0, #0]
 80111ec:	691a      	ldr	r2, [r3, #16]
 80111ee:	0791      	lsls	r1, r2, #30
{
 80111f0:	b510      	push	{r4, lr}
 80111f2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80111f4:	d50e      	bpl.n	8011214 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80111f6:	68da      	ldr	r2, [r3, #12]
 80111f8:	0792      	lsls	r2, r2, #30
 80111fa:	d50b      	bpl.n	8011214 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80111fc:	f06f 0202 	mvn.w	r2, #2
 8011200:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011202:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011204:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011206:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011208:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801120a:	d077      	beq.n	80112fc <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 801120c:	f7ff ffea 	bl	80111e4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011210:	2300      	movs	r3, #0
 8011212:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011214:	6823      	ldr	r3, [r4, #0]
 8011216:	691a      	ldr	r2, [r3, #16]
 8011218:	0750      	lsls	r0, r2, #29
 801121a:	d510      	bpl.n	801123e <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801121c:	68da      	ldr	r2, [r3, #12]
 801121e:	0751      	lsls	r1, r2, #29
 8011220:	d50d      	bpl.n	801123e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011222:	f06f 0204 	mvn.w	r2, #4
 8011226:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011228:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801122a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801122c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011230:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8011232:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011234:	d068      	beq.n	8011308 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8011236:	f7ff ffd5 	bl	80111e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801123a:	2300      	movs	r3, #0
 801123c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801123e:	6823      	ldr	r3, [r4, #0]
 8011240:	691a      	ldr	r2, [r3, #16]
 8011242:	0712      	lsls	r2, r2, #28
 8011244:	d50f      	bpl.n	8011266 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011246:	68da      	ldr	r2, [r3, #12]
 8011248:	0710      	lsls	r0, r2, #28
 801124a:	d50c      	bpl.n	8011266 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801124c:	f06f 0208 	mvn.w	r2, #8
 8011250:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011252:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011254:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011256:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011258:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 801125a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801125c:	d05a      	beq.n	8011314 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 801125e:	f7ff ffc1 	bl	80111e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011262:	2300      	movs	r3, #0
 8011264:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011266:	6823      	ldr	r3, [r4, #0]
 8011268:	691a      	ldr	r2, [r3, #16]
 801126a:	06d2      	lsls	r2, r2, #27
 801126c:	d510      	bpl.n	8011290 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801126e:	68da      	ldr	r2, [r3, #12]
 8011270:	06d0      	lsls	r0, r2, #27
 8011272:	d50d      	bpl.n	8011290 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011274:	f06f 0210 	mvn.w	r2, #16
 8011278:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801127a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801127c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801127e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011282:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8011284:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011286:	d04b      	beq.n	8011320 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8011288:	f7ff ffac 	bl	80111e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801128c:	2300      	movs	r3, #0
 801128e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011290:	6823      	ldr	r3, [r4, #0]
 8011292:	691a      	ldr	r2, [r3, #16]
 8011294:	07d1      	lsls	r1, r2, #31
 8011296:	d508      	bpl.n	80112aa <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011298:	68da      	ldr	r2, [r3, #12]
 801129a:	07d2      	lsls	r2, r2, #31
 801129c:	d505      	bpl.n	80112aa <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801129e:	f06f 0201 	mvn.w	r2, #1
 80112a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80112a4:	4620      	mov	r0, r4
 80112a6:	f7fc fd59 	bl	800dd5c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	691a      	ldr	r2, [r3, #16]
 80112ae:	0610      	lsls	r0, r2, #24
 80112b0:	d508      	bpl.n	80112c4 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80112b2:	68da      	ldr	r2, [r3, #12]
 80112b4:	0611      	lsls	r1, r2, #24
 80112b6:	d505      	bpl.n	80112c4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80112b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80112bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 fa79 	bl	80117b6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	691a      	ldr	r2, [r3, #16]
 80112c8:	0652      	lsls	r2, r2, #25
 80112ca:	d508      	bpl.n	80112de <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80112cc:	68da      	ldr	r2, [r3, #12]
 80112ce:	0650      	lsls	r0, r2, #25
 80112d0:	d505      	bpl.n	80112de <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80112d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80112d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80112d8:	4620      	mov	r0, r4
 80112da:	f7ff ff85 	bl	80111e8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80112de:	6823      	ldr	r3, [r4, #0]
 80112e0:	691a      	ldr	r2, [r3, #16]
 80112e2:	0691      	lsls	r1, r2, #26
 80112e4:	d522      	bpl.n	801132c <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80112e6:	68da      	ldr	r2, [r3, #12]
 80112e8:	0692      	lsls	r2, r2, #26
 80112ea:	d51f      	bpl.n	801132c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80112ec:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80112f0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80112f2:	611a      	str	r2, [r3, #16]
}
 80112f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80112f8:	f000 ba5c 	b.w	80117b4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80112fc:	f7ff ff71 	bl	80111e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011300:	4620      	mov	r0, r4
 8011302:	f7ff ff70 	bl	80111e6 <HAL_TIM_PWM_PulseFinishedCallback>
 8011306:	e783      	b.n	8011210 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011308:	f7ff ff6b 	bl	80111e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801130c:	4620      	mov	r0, r4
 801130e:	f7ff ff6a 	bl	80111e6 <HAL_TIM_PWM_PulseFinishedCallback>
 8011312:	e792      	b.n	801123a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011314:	f7ff ff65 	bl	80111e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011318:	4620      	mov	r0, r4
 801131a:	f7ff ff64 	bl	80111e6 <HAL_TIM_PWM_PulseFinishedCallback>
 801131e:	e7a0      	b.n	8011262 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011320:	f7ff ff5f 	bl	80111e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011324:	4620      	mov	r0, r4
 8011326:	f7ff ff5e 	bl	80111e6 <HAL_TIM_PWM_PulseFinishedCallback>
 801132a:	e7af      	b.n	801128c <HAL_TIM_IRQHandler+0xa2>
}
 801132c:	bd10      	pop	{r4, pc}
	...

08011330 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011330:	4a30      	ldr	r2, [pc, #192]	; (80113f4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8011332:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011334:	4290      	cmp	r0, r2
 8011336:	d012      	beq.n	801135e <TIM_Base_SetConfig+0x2e>
 8011338:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801133c:	d00f      	beq.n	801135e <TIM_Base_SetConfig+0x2e>
 801133e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8011342:	4290      	cmp	r0, r2
 8011344:	d00b      	beq.n	801135e <TIM_Base_SetConfig+0x2e>
 8011346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801134a:	4290      	cmp	r0, r2
 801134c:	d007      	beq.n	801135e <TIM_Base_SetConfig+0x2e>
 801134e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011352:	4290      	cmp	r0, r2
 8011354:	d003      	beq.n	801135e <TIM_Base_SetConfig+0x2e>
 8011356:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801135a:	4290      	cmp	r0, r2
 801135c:	d119      	bne.n	8011392 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 801135e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011364:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011366:	4a23      	ldr	r2, [pc, #140]	; (80113f4 <TIM_Base_SetConfig+0xc4>)
 8011368:	4290      	cmp	r0, r2
 801136a:	d029      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 801136c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011370:	d026      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 8011372:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8011376:	4290      	cmp	r0, r2
 8011378:	d022      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 801137a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801137e:	4290      	cmp	r0, r2
 8011380:	d01e      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 8011382:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011386:	4290      	cmp	r0, r2
 8011388:	d01a      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 801138a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801138e:	4290      	cmp	r0, r2
 8011390:	d016      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 8011392:	4a19      	ldr	r2, [pc, #100]	; (80113f8 <TIM_Base_SetConfig+0xc8>)
 8011394:	4290      	cmp	r0, r2
 8011396:	d013      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 8011398:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801139c:	4290      	cmp	r0, r2
 801139e:	d00f      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 80113a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80113a4:	4290      	cmp	r0, r2
 80113a6:	d00b      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 80113a8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80113ac:	4290      	cmp	r0, r2
 80113ae:	d007      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 80113b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80113b4:	4290      	cmp	r0, r2
 80113b6:	d003      	beq.n	80113c0 <TIM_Base_SetConfig+0x90>
 80113b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80113bc:	4290      	cmp	r0, r2
 80113be:	d103      	bne.n	80113c8 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80113c0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80113c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80113c6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80113c8:	694a      	ldr	r2, [r1, #20]
 80113ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113ce:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80113d0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80113d2:	688b      	ldr	r3, [r1, #8]
 80113d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80113d6:	680b      	ldr	r3, [r1, #0]
 80113d8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80113da:	4b06      	ldr	r3, [pc, #24]	; (80113f4 <TIM_Base_SetConfig+0xc4>)
 80113dc:	4298      	cmp	r0, r3
 80113de:	d003      	beq.n	80113e8 <TIM_Base_SetConfig+0xb8>
 80113e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113e4:	4298      	cmp	r0, r3
 80113e6:	d101      	bne.n	80113ec <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80113e8:	690b      	ldr	r3, [r1, #16]
 80113ea:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80113ec:	2301      	movs	r3, #1
 80113ee:	6143      	str	r3, [r0, #20]
}
 80113f0:	4770      	bx	lr
 80113f2:	bf00      	nop
 80113f4:	40010000 	.word	0x40010000
 80113f8:	40014000 	.word	0x40014000

080113fc <HAL_TIM_Base_Init>:
{
 80113fc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80113fe:	4604      	mov	r4, r0
 8011400:	b1a0      	cbz	r0, 801142c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011402:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8011406:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801140a:	b91b      	cbnz	r3, 8011414 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 801140c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8011410:	f7fd f8d2 	bl	800e5b8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8011414:	2302      	movs	r3, #2
 8011416:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801141a:	6820      	ldr	r0, [r4, #0]
 801141c:	1d21      	adds	r1, r4, #4
 801141e:	f7ff ff87 	bl	8011330 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8011422:	2301      	movs	r3, #1
 8011424:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8011428:	2000      	movs	r0, #0
}
 801142a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801142c:	2001      	movs	r0, #1
 801142e:	e7fc      	b.n	801142a <HAL_TIM_Base_Init+0x2e>

08011430 <HAL_TIM_PWM_Init>:
{
 8011430:	b510      	push	{r4, lr}
  if (htim == NULL)
 8011432:	4604      	mov	r4, r0
 8011434:	b1a0      	cbz	r0, 8011460 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011436:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801143a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801143e:	b91b      	cbnz	r3, 8011448 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8011440:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8011444:	f7ff fecc 	bl	80111e0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8011448:	2302      	movs	r3, #2
 801144a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801144e:	6820      	ldr	r0, [r4, #0]
 8011450:	1d21      	adds	r1, r4, #4
 8011452:	f7ff ff6d 	bl	8011330 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8011456:	2301      	movs	r3, #1
 8011458:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 801145c:	2000      	movs	r0, #0
}
 801145e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8011460:	2001      	movs	r0, #1
 8011462:	e7fc      	b.n	801145e <HAL_TIM_PWM_Init+0x2e>

08011464 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011464:	6a03      	ldr	r3, [r0, #32]
 8011466:	f023 0310 	bic.w	r3, r3, #16
 801146a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 801146c:	6a03      	ldr	r3, [r0, #32]
{
 801146e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8011470:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8011472:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011474:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011476:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801147a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801147e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8011480:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011484:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011488:	4d10      	ldr	r5, [pc, #64]	; (80114cc <TIM_OC2_SetConfig+0x68>)
 801148a:	42a8      	cmp	r0, r5
 801148c:	d003      	beq.n	8011496 <TIM_OC2_SetConfig+0x32>
 801148e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8011492:	42a8      	cmp	r0, r5
 8011494:	d114      	bne.n	80114c0 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011496:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8011498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801149c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114a0:	4d0a      	ldr	r5, [pc, #40]	; (80114cc <TIM_OC2_SetConfig+0x68>)
 80114a2:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80114a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114a8:	d003      	beq.n	80114b2 <TIM_OC2_SetConfig+0x4e>
 80114aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80114ae:	42a8      	cmp	r0, r5
 80114b0:	d106      	bne.n	80114c0 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80114b2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80114b6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80114ba:	4335      	orrs	r5, r6
 80114bc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80114c0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80114c2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80114c4:	684a      	ldr	r2, [r1, #4]
 80114c6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80114c8:	6203      	str	r3, [r0, #32]
}
 80114ca:	bd70      	pop	{r4, r5, r6, pc}
 80114cc:	40010000 	.word	0x40010000

080114d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80114d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80114d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80114d6:	2b01      	cmp	r3, #1
{
 80114d8:	4604      	mov	r4, r0
 80114da:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80114de:	d025      	beq.n	801152c <HAL_TIM_PWM_ConfigChannel+0x5c>
 80114e0:	2301      	movs	r3, #1
 80114e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80114e6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80114ea:	2a0c      	cmp	r2, #12
 80114ec:	d818      	bhi.n	8011520 <HAL_TIM_PWM_ConfigChannel+0x50>
 80114ee:	e8df f002 	tbb	[pc, r2]
 80114f2:	1707      	.short	0x1707
 80114f4:	171e1717 	.word	0x171e1717
 80114f8:	172f1717 	.word	0x172f1717
 80114fc:	1717      	.short	0x1717
 80114fe:	40          	.byte	0x40
 80114ff:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011500:	6820      	ldr	r0, [r4, #0]
 8011502:	f7ff fdcf 	bl	80110a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011506:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011508:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801150a:	699a      	ldr	r2, [r3, #24]
 801150c:	f042 0208 	orr.w	r2, r2, #8
 8011510:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011512:	699a      	ldr	r2, [r3, #24]
 8011514:	f022 0204 	bic.w	r2, r2, #4
 8011518:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801151a:	699a      	ldr	r2, [r3, #24]
 801151c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801151e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8011520:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8011522:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8011524:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011528:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 801152c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801152e:	6820      	ldr	r0, [r4, #0]
 8011530:	f7ff ff98 	bl	8011464 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011534:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011536:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011538:	699a      	ldr	r2, [r3, #24]
 801153a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801153e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011540:	699a      	ldr	r2, [r3, #24]
 8011542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011548:	699a      	ldr	r2, [r3, #24]
 801154a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801154e:	e7e6      	b.n	801151e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011550:	6820      	ldr	r0, [r4, #0]
 8011552:	f7ff fdd9 	bl	8011108 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011556:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011558:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801155a:	69da      	ldr	r2, [r3, #28]
 801155c:	f042 0208 	orr.w	r2, r2, #8
 8011560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011562:	69da      	ldr	r2, [r3, #28]
 8011564:	f022 0204 	bic.w	r2, r2, #4
 8011568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801156a:	69da      	ldr	r2, [r3, #28]
 801156c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801156e:	61da      	str	r2, [r3, #28]
      break;
 8011570:	e7d6      	b.n	8011520 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011572:	6820      	ldr	r0, [r4, #0]
 8011574:	f7ff fdfe 	bl	8011174 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011578:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801157a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801157c:	69da      	ldr	r2, [r3, #28]
 801157e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011582:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011584:	69da      	ldr	r2, [r3, #28]
 8011586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801158a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801158c:	69da      	ldr	r2, [r3, #28]
 801158e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011592:	e7ec      	b.n	801156e <HAL_TIM_PWM_ConfigChannel+0x9e>

08011594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011594:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011596:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011598:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801159a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801159e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80115a2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80115a4:	6083      	str	r3, [r0, #8]
}
 80115a6:	bd10      	pop	{r4, pc}

080115a8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80115a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80115ac:	2b01      	cmp	r3, #1
{
 80115ae:	b570      	push	{r4, r5, r6, lr}
 80115b0:	4604      	mov	r4, r0
 80115b2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80115b6:	d019      	beq.n	80115ec <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80115b8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80115bc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80115be:	2301      	movs	r3, #1
 80115c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80115c4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80115c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80115ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80115ce:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80115d0:	680b      	ldr	r3, [r1, #0]
 80115d2:	2b40      	cmp	r3, #64	; 0x40
 80115d4:	d065      	beq.n	80116a2 <HAL_TIM_ConfigClockSource+0xfa>
 80115d6:	d815      	bhi.n	8011604 <HAL_TIM_ConfigClockSource+0x5c>
 80115d8:	2b10      	cmp	r3, #16
 80115da:	d00c      	beq.n	80115f6 <HAL_TIM_ConfigClockSource+0x4e>
 80115dc:	d807      	bhi.n	80115ee <HAL_TIM_ConfigClockSource+0x46>
 80115de:	b153      	cbz	r3, 80115f6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80115e0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80115e2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80115e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80115e8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80115ec:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80115ee:	2b20      	cmp	r3, #32
 80115f0:	d001      	beq.n	80115f6 <HAL_TIM_ConfigClockSource+0x4e>
 80115f2:	2b30      	cmp	r3, #48	; 0x30
 80115f4:	d1f4      	bne.n	80115e0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80115f6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80115f8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80115fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011600:	4313      	orrs	r3, r2
 8011602:	e01a      	b.n	801163a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8011604:	2b60      	cmp	r3, #96	; 0x60
 8011606:	d034      	beq.n	8011672 <HAL_TIM_ConfigClockSource+0xca>
 8011608:	d819      	bhi.n	801163e <HAL_TIM_ConfigClockSource+0x96>
 801160a:	2b50      	cmp	r3, #80	; 0x50
 801160c:	d1e8      	bne.n	80115e0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801160e:	684a      	ldr	r2, [r1, #4]
 8011610:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8011612:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011614:	6a05      	ldr	r5, [r0, #32]
 8011616:	f025 0501 	bic.w	r5, r5, #1
 801161a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801161c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801161e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011626:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 801162a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 801162c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 801162e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8011630:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8011632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011636:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 801163a:	6083      	str	r3, [r0, #8]
 801163c:	e7d0      	b.n	80115e0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 801163e:	2b70      	cmp	r3, #112	; 0x70
 8011640:	d00c      	beq.n	801165c <HAL_TIM_ConfigClockSource+0xb4>
 8011642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011646:	d1cb      	bne.n	80115e0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8011648:	68cb      	ldr	r3, [r1, #12]
 801164a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801164e:	f7ff ffa1 	bl	8011594 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011652:	6822      	ldr	r2, [r4, #0]
 8011654:	6893      	ldr	r3, [r2, #8]
 8011656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801165a:	e008      	b.n	801166e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 801165c:	68cb      	ldr	r3, [r1, #12]
 801165e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011662:	f7ff ff97 	bl	8011594 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8011666:	6822      	ldr	r2, [r4, #0]
 8011668:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801166a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801166e:	6093      	str	r3, [r2, #8]
      break;
 8011670:	e7b6      	b.n	80115e0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011672:	684d      	ldr	r5, [r1, #4]
 8011674:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011676:	6a01      	ldr	r1, [r0, #32]
 8011678:	f021 0110 	bic.w	r1, r1, #16
 801167c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801167e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8011680:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011682:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 801168a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801168e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8011692:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8011694:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8011696:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8011698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801169c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80116a0:	e7cb      	b.n	801163a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80116a2:	684a      	ldr	r2, [r1, #4]
 80116a4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80116a6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80116a8:	6a05      	ldr	r5, [r0, #32]
 80116aa:	f025 0501 	bic.w	r5, r5, #1
 80116ae:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80116b0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80116b2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80116b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80116ba:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80116be:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80116c0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80116c2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80116c4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80116c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80116ca:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80116ce:	e7b4      	b.n	801163a <HAL_TIM_ConfigClockSource+0x92>

080116d0 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80116d0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80116d2:	f001 011f 	and.w	r1, r1, #31
{
 80116d6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80116d8:	2401      	movs	r4, #1
 80116da:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80116dc:	ea23 0304 	bic.w	r3, r3, r4
 80116e0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80116e2:	6a03      	ldr	r3, [r0, #32]
 80116e4:	408a      	lsls	r2, r1
 80116e6:	431a      	orrs	r2, r3
 80116e8:	6202      	str	r2, [r0, #32]
}
 80116ea:	bd10      	pop	{r4, pc}

080116ec <HAL_TIM_OC_Start>:
{
 80116ec:	b510      	push	{r4, lr}
 80116ee:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80116f0:	2201      	movs	r2, #1
 80116f2:	6800      	ldr	r0, [r0, #0]
 80116f4:	f7ff ffec 	bl	80116d0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80116f8:	6823      	ldr	r3, [r4, #0]
 80116fa:	4a0b      	ldr	r2, [pc, #44]	; (8011728 <HAL_TIM_OC_Start+0x3c>)
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d003      	beq.n	8011708 <HAL_TIM_OC_Start+0x1c>
 8011700:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011704:	4293      	cmp	r3, r2
 8011706:	d103      	bne.n	8011710 <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8011708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801170a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801170e:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011710:	689a      	ldr	r2, [r3, #8]
 8011712:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011716:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8011718:	bf1e      	ittt	ne
 801171a:	681a      	ldrne	r2, [r3, #0]
 801171c:	f042 0201 	orrne.w	r2, r2, #1
 8011720:	601a      	strne	r2, [r3, #0]
}
 8011722:	2000      	movs	r0, #0
 8011724:	bd10      	pop	{r4, pc}
 8011726:	bf00      	nop
 8011728:	40010000 	.word	0x40010000

0801172c <HAL_TIM_PWM_Start>:
 801172c:	f7ff bfde 	b.w	80116ec <HAL_TIM_OC_Start>

08011730 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011730:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011734:	2b01      	cmp	r3, #1
{
 8011736:	b530      	push	{r4, r5, lr}
 8011738:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 801173c:	d035      	beq.n	80117aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801173e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011742:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011744:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8011746:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8011748:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 801174c:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801174e:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8011750:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8011754:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011756:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011758:	4c15      	ldr	r4, [pc, #84]	; (80117b0 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 801175a:	42a3      	cmp	r3, r4
 801175c:	d01a      	beq.n	8011794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 801175e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011762:	d017      	beq.n	8011794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8011764:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8011768:	42a3      	cmp	r3, r4
 801176a:	d013      	beq.n	8011794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 801176c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8011770:	42a3      	cmp	r3, r4
 8011772:	d00f      	beq.n	8011794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8011774:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8011778:	42a3      	cmp	r3, r4
 801177a:	d00b      	beq.n	8011794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 801177c:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8011780:	42a3      	cmp	r3, r4
 8011782:	d007      	beq.n	8011794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8011784:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8011788:	42a3      	cmp	r3, r4
 801178a:	d003      	beq.n	8011794 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 801178c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8011790:	42a3      	cmp	r3, r4
 8011792:	d104      	bne.n	801179e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011794:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801179a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801179c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801179e:	2301      	movs	r3, #1
 80117a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80117a4:	2300      	movs	r3, #0
 80117a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80117aa:	4618      	mov	r0, r3

  return HAL_OK;
}
 80117ac:	bd30      	pop	{r4, r5, pc}
 80117ae:	bf00      	nop
 80117b0:	40010000 	.word	0x40010000

080117b4 <HAL_TIMEx_CommutCallback>:
 80117b4:	4770      	bx	lr

080117b6 <HAL_TIMEx_BreakCallback>:
 80117b6:	4770      	bx	lr

080117b8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80117b8:	6803      	ldr	r3, [r0, #0]
 80117ba:	68da      	ldr	r2, [r3, #12]
 80117bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80117c0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117c2:	695a      	ldr	r2, [r3, #20]
 80117c4:	f022 0201 	bic.w	r2, r2, #1
 80117c8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80117ca:	2320      	movs	r3, #32
 80117cc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80117d0:	4770      	bx	lr
	...

080117d4 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80117d4:	6803      	ldr	r3, [r0, #0]
 80117d6:	68c1      	ldr	r1, [r0, #12]
 80117d8:	691a      	ldr	r2, [r3, #16]
{
 80117da:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80117dc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 80117e0:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80117e2:	430a      	orrs	r2, r1
 80117e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80117e6:	6925      	ldr	r5, [r4, #16]
 80117e8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80117ea:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80117ec:	69c0      	ldr	r0, [r0, #28]
 80117ee:	432a      	orrs	r2, r5
 80117f0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80117f2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80117f6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80117f8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80117fc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80117fe:	430a      	orrs	r2, r1
 8011800:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011802:	695a      	ldr	r2, [r3, #20]
 8011804:	69a1      	ldr	r1, [r4, #24]
 8011806:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801180a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801180c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011810:	615a      	str	r2, [r3, #20]
 8011812:	4a26      	ldr	r2, [pc, #152]	; (80118ac <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011814:	d129      	bne.n	801186a <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011816:	4293      	cmp	r3, r2
 8011818:	d003      	beq.n	8011822 <UART_SetConfig+0x4e>
 801181a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801181e:	4293      	cmp	r3, r2
 8011820:	d120      	bne.n	8011864 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011822:	f7fe fcdb 	bl	80101dc <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011826:	6862      	ldr	r2, [r4, #4]
 8011828:	2600      	movs	r6, #0
 801182a:	1892      	adds	r2, r2, r2
 801182c:	f04f 0119 	mov.w	r1, #25
 8011830:	eb46 0306 	adc.w	r3, r6, r6
 8011834:	fba0 0101 	umull	r0, r1, r0, r1
 8011838:	f7fa fc5a 	bl	800c0f0 <__aeabi_uldivmod>
 801183c:	2164      	movs	r1, #100	; 0x64
 801183e:	fbb0 f5f1 	udiv	r5, r0, r1
 8011842:	fb01 0315 	mls	r3, r1, r5, r0
 8011846:	00db      	lsls	r3, r3, #3
 8011848:	3332      	adds	r3, #50	; 0x32
 801184a:	fbb3 f3f1 	udiv	r3, r3, r1
 801184e:	f003 0207 	and.w	r2, r3, #7
 8011852:	005b      	lsls	r3, r3, #1
 8011854:	6821      	ldr	r1, [r4, #0]
 8011856:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 801185a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801185e:	4413      	add	r3, r2
 8011860:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011862:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8011864:	f7fe fcaa 	bl	80101bc <HAL_RCC_GetPCLK1Freq>
 8011868:	e7dd      	b.n	8011826 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801186a:	4293      	cmp	r3, r2
 801186c:	d002      	beq.n	8011874 <UART_SetConfig+0xa0>
 801186e:	4a10      	ldr	r2, [pc, #64]	; (80118b0 <UART_SetConfig+0xdc>)
 8011870:	4293      	cmp	r3, r2
 8011872:	d117      	bne.n	80118a4 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011874:	f7fe fcb2 	bl	80101dc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011878:	6863      	ldr	r3, [r4, #4]
 801187a:	2119      	movs	r1, #25
 801187c:	009a      	lsls	r2, r3, #2
 801187e:	fba0 0101 	umull	r0, r1, r0, r1
 8011882:	0f9b      	lsrs	r3, r3, #30
 8011884:	f7fa fc34 	bl	800c0f0 <__aeabi_uldivmod>
 8011888:	2264      	movs	r2, #100	; 0x64
 801188a:	fbb0 f1f2 	udiv	r1, r0, r2
 801188e:	fb02 0311 	mls	r3, r2, r1, r0
 8011892:	6824      	ldr	r4, [r4, #0]
 8011894:	011b      	lsls	r3, r3, #4
 8011896:	3332      	adds	r3, #50	; 0x32
 8011898:	fbb3 f3f2 	udiv	r3, r3, r2
 801189c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80118a0:	60a3      	str	r3, [r4, #8]
}
 80118a2:	e7de      	b.n	8011862 <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 80118a4:	f7fe fc8a 	bl	80101bc <HAL_RCC_GetPCLK1Freq>
 80118a8:	e7e6      	b.n	8011878 <UART_SetConfig+0xa4>
 80118aa:	bf00      	nop
 80118ac:	40011000 	.word	0x40011000
 80118b0:	40011400 	.word	0x40011400

080118b4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80118b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b6:	4604      	mov	r4, r0
 80118b8:	460e      	mov	r6, r1
 80118ba:	4617      	mov	r7, r2
 80118bc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80118be:	6821      	ldr	r1, [r4, #0]
 80118c0:	680b      	ldr	r3, [r1, #0]
 80118c2:	ea36 0303 	bics.w	r3, r6, r3
 80118c6:	d101      	bne.n	80118cc <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80118c8:	2000      	movs	r0, #0
 80118ca:	e014      	b.n	80118f6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80118cc:	1c6b      	adds	r3, r5, #1
 80118ce:	d0f7      	beq.n	80118c0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80118d0:	b995      	cbnz	r5, 80118f8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80118d2:	6823      	ldr	r3, [r4, #0]
 80118d4:	68da      	ldr	r2, [r3, #12]
 80118d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80118da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118dc:	695a      	ldr	r2, [r3, #20]
 80118de:	f022 0201 	bic.w	r2, r2, #1
 80118e2:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80118e4:	2320      	movs	r3, #32
 80118e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80118ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80118ee:	2300      	movs	r3, #0
 80118f0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80118f4:	2003      	movs	r0, #3
}
 80118f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80118f8:	f7fd f832 	bl	800e960 <HAL_GetTick>
 80118fc:	1bc0      	subs	r0, r0, r7
 80118fe:	4285      	cmp	r5, r0
 8011900:	d2dd      	bcs.n	80118be <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8011902:	e7e6      	b.n	80118d2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08011904 <HAL_UART_Init>:
{
 8011904:	b510      	push	{r4, lr}
  if (huart == NULL)
 8011906:	4604      	mov	r4, r0
 8011908:	b340      	cbz	r0, 801195c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 801190a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801190e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011912:	b91b      	cbnz	r3, 801191c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8011914:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8011918:	f7fc ff1c 	bl	800e754 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 801191c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801191e:	2324      	movs	r3, #36	; 0x24
 8011920:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8011924:	68d3      	ldr	r3, [r2, #12]
 8011926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801192a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 801192c:	4620      	mov	r0, r4
 801192e:	f7ff ff51 	bl	80117d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011932:	6823      	ldr	r3, [r4, #0]
 8011934:	691a      	ldr	r2, [r3, #16]
 8011936:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801193a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801193c:	695a      	ldr	r2, [r3, #20]
 801193e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011942:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8011944:	68da      	ldr	r2, [r3, #12]
 8011946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801194a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801194c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 801194e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011950:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8011952:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8011956:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 801195a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801195c:	2001      	movs	r0, #1
 801195e:	e7fc      	b.n	801195a <HAL_UART_Init+0x56>

08011960 <HAL_UART_DeInit>:
{
 8011960:	b510      	push	{r4, lr}
  if (huart == NULL)
 8011962:	4604      	mov	r4, r0
 8011964:	b190      	cbz	r0, 801198c <HAL_UART_DeInit+0x2c>
  __HAL_UART_DISABLE(huart);
 8011966:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011968:	2324      	movs	r3, #36	; 0x24
 801196a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 801196e:	68d3      	ldr	r3, [r2, #12]
 8011970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011974:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8011976:	f7fc ff5f 	bl	800e838 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801197a:	2000      	movs	r0, #0
 801197c:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 801197e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 8011982:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8011986:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
}
 801198a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801198c:	2001      	movs	r0, #1
 801198e:	e7fc      	b.n	801198a <HAL_UART_DeInit+0x2a>

08011990 <HAL_UART_Transmit>:
{
 8011990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011994:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8011996:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801199a:	2b20      	cmp	r3, #32
{
 801199c:	4604      	mov	r4, r0
 801199e:	460d      	mov	r5, r1
 80119a0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80119a2:	d14f      	bne.n	8011a44 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80119a4:	2900      	cmp	r1, #0
 80119a6:	d04b      	beq.n	8011a40 <HAL_UART_Transmit+0xb0>
 80119a8:	2a00      	cmp	r2, #0
 80119aa:	d049      	beq.n	8011a40 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 80119ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80119b0:	2b01      	cmp	r3, #1
 80119b2:	d047      	beq.n	8011a44 <HAL_UART_Transmit+0xb4>
 80119b4:	2301      	movs	r3, #1
 80119b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119ba:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80119be:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119c0:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80119c4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80119c8:	f7fc ffca 	bl	800e960 <HAL_GetTick>
    huart->TxXferSize = Size;
 80119cc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80119d0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80119d2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80119d6:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80119da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80119dc:	b29b      	uxth	r3, r3
 80119de:	b953      	cbnz	r3, 80119f6 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80119e0:	463b      	mov	r3, r7
 80119e2:	4632      	mov	r2, r6
 80119e4:	2140      	movs	r1, #64	; 0x40
 80119e6:	4620      	mov	r0, r4
 80119e8:	f7ff ff64 	bl	80118b4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80119ec:	b998      	cbnz	r0, 8011a16 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 80119ee:	2320      	movs	r3, #32
 80119f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80119f4:	e010      	b.n	8011a18 <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 80119f6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80119f8:	3b01      	subs	r3, #1
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80119fe:	68a3      	ldr	r3, [r4, #8]
 8011a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011a04:	4632      	mov	r2, r6
 8011a06:	463b      	mov	r3, r7
 8011a08:	f04f 0180 	mov.w	r1, #128	; 0x80
 8011a0c:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011a0e:	d10e      	bne.n	8011a2e <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011a10:	f7ff ff50 	bl	80118b4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011a14:	b110      	cbz	r0, 8011a1c <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 8011a16:	2003      	movs	r0, #3
}
 8011a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8011a1c:	882b      	ldrh	r3, [r5, #0]
 8011a1e:	6822      	ldr	r2, [r4, #0]
 8011a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a24:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011a26:	6923      	ldr	r3, [r4, #16]
 8011a28:	b943      	cbnz	r3, 8011a3c <HAL_UART_Transmit+0xac>
          pData += 2U;
 8011a2a:	3502      	adds	r5, #2
 8011a2c:	e7d5      	b.n	80119da <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011a2e:	f7ff ff41 	bl	80118b4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d1ef      	bne.n	8011a16 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8011a36:	6823      	ldr	r3, [r4, #0]
 8011a38:	782a      	ldrb	r2, [r5, #0]
 8011a3a:	605a      	str	r2, [r3, #4]
 8011a3c:	3501      	adds	r5, #1
 8011a3e:	e7cc      	b.n	80119da <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8011a40:	2001      	movs	r0, #1
 8011a42:	e7e9      	b.n	8011a18 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8011a44:	2002      	movs	r0, #2
 8011a46:	e7e7      	b.n	8011a18 <HAL_UART_Transmit+0x88>

08011a48 <HAL_UART_Receive>:
{
 8011a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a4c:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8011a4e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8011a52:	2b20      	cmp	r3, #32
{
 8011a54:	4604      	mov	r4, r0
 8011a56:	460d      	mov	r5, r1
 8011a58:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8011a5a:	d155      	bne.n	8011b08 <HAL_UART_Receive+0xc0>
    if ((pData == NULL) || (Size == 0U))
 8011a5c:	2900      	cmp	r1, #0
 8011a5e:	d051      	beq.n	8011b04 <HAL_UART_Receive+0xbc>
 8011a60:	2a00      	cmp	r2, #0
 8011a62:	d04f      	beq.n	8011b04 <HAL_UART_Receive+0xbc>
    __HAL_LOCK(huart);
 8011a64:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011a68:	2b01      	cmp	r3, #1
 8011a6a:	d04d      	beq.n	8011b08 <HAL_UART_Receive+0xc0>
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a72:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011a76:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a78:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011a7c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8011a80:	f7fc ff6e 	bl	800e960 <HAL_GetTick>
    huart->RxXferSize = Size;
 8011a84:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8011a88:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8011a8a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8011a8e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8011a92:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8011a94:	b280      	uxth	r0, r0
 8011a96:	b918      	cbnz	r0, 8011aa0 <HAL_UART_Receive+0x58>
    huart->RxState = HAL_UART_STATE_READY;
 8011a98:	2320      	movs	r3, #32
 8011a9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8011a9e:	e010      	b.n	8011ac2 <HAL_UART_Receive+0x7a>
      huart->RxXferCount--;
 8011aa0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8011aa2:	3b01      	subs	r3, #1
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011aa8:	68a3      	ldr	r3, [r4, #8]
 8011aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011aae:	4632      	mov	r2, r6
 8011ab0:	463b      	mov	r3, r7
 8011ab2:	f04f 0120 	mov.w	r1, #32
 8011ab6:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011ab8:	d116      	bne.n	8011ae8 <HAL_UART_Receive+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011aba:	f7ff fefb 	bl	80118b4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011abe:	b110      	cbz	r0, 8011ac6 <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 8011ac0:	2003      	movs	r0, #3
}
 8011ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011ac6:	6922      	ldr	r2, [r4, #16]
 8011ac8:	6823      	ldr	r3, [r4, #0]
 8011aca:	b93a      	cbnz	r2, 8011adc <HAL_UART_Receive+0x94>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011acc:	685a      	ldr	r2, [r3, #4]
 8011ace:	462b      	mov	r3, r5
 8011ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011ad4:	f823 2b02 	strh.w	r2, [r3], #2
{
 8011ad8:	461d      	mov	r5, r3
 8011ada:	e7da      	b.n	8011a92 <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8011adc:	685a      	ldr	r2, [r3, #4]
 8011ade:	462b      	mov	r3, r5
 8011ae0:	b2d2      	uxtb	r2, r2
 8011ae2:	f823 2b01 	strh.w	r2, [r3], #1
 8011ae6:	e7f7      	b.n	8011ad8 <HAL_UART_Receive+0x90>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011ae8:	f7ff fee4 	bl	80118b4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011aec:	2800      	cmp	r0, #0
 8011aee:	d1e7      	bne.n	8011ac0 <HAL_UART_Receive+0x78>
 8011af0:	6822      	ldr	r2, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011af2:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011af4:	6852      	ldr	r2, [r2, #4]
 8011af6:	1c6b      	adds	r3, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011af8:	b909      	cbnz	r1, 8011afe <HAL_UART_Receive+0xb6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011afa:	702a      	strb	r2, [r5, #0]
 8011afc:	e7ec      	b.n	8011ad8 <HAL_UART_Receive+0x90>
 8011afe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011b02:	e7fa      	b.n	8011afa <HAL_UART_Receive+0xb2>
      return  HAL_ERROR;
 8011b04:	2001      	movs	r0, #1
 8011b06:	e7dc      	b.n	8011ac2 <HAL_UART_Receive+0x7a>
    return HAL_BUSY;
 8011b08:	2002      	movs	r0, #2
 8011b0a:	e7da      	b.n	8011ac2 <HAL_UART_Receive+0x7a>

08011b0c <HAL_UART_TxCpltCallback>:
 8011b0c:	4770      	bx	lr

08011b0e <HAL_UART_RxCpltCallback>:
 8011b0e:	4770      	bx	lr

08011b10 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b10:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8011b14:	2b22      	cmp	r3, #34	; 0x22
{
 8011b16:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b18:	d133      	bne.n	8011b82 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011b1a:	6881      	ldr	r1, [r0, #8]
 8011b1c:	6904      	ldr	r4, [r0, #16]
 8011b1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011b20:	6802      	ldr	r2, [r0, #0]
 8011b22:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8011b26:	d123      	bne.n	8011b70 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011b28:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011b2a:	b9ec      	cbnz	r4, 8011b68 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011b30:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8011b34:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8011b36:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8011b38:	3c01      	subs	r4, #1
 8011b3a:	b2a4      	uxth	r4, r4
 8011b3c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8011b3e:	b98c      	cbnz	r4, 8011b64 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011b40:	6803      	ldr	r3, [r0, #0]
 8011b42:	68da      	ldr	r2, [r3, #12]
 8011b44:	f022 0220 	bic.w	r2, r2, #32
 8011b48:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011b4a:	68da      	ldr	r2, [r3, #12]
 8011b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011b50:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011b52:	695a      	ldr	r2, [r3, #20]
 8011b54:	f022 0201 	bic.w	r2, r2, #1
 8011b58:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8011b5a:	2320      	movs	r3, #32
 8011b5c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8011b60:	f7ff ffd5 	bl	8011b0e <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8011b64:	2000      	movs	r0, #0
 8011b66:	e00d      	b.n	8011b84 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8011b68:	b2d2      	uxtb	r2, r2
 8011b6a:	f823 2b01 	strh.w	r2, [r3], #1
 8011b6e:	e7e1      	b.n	8011b34 <UART_Receive_IT+0x24>
 8011b70:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011b72:	6852      	ldr	r2, [r2, #4]
 8011b74:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011b76:	b90c      	cbnz	r4, 8011b7c <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011b78:	701a      	strb	r2, [r3, #0]
 8011b7a:	e7dc      	b.n	8011b36 <UART_Receive_IT+0x26>
 8011b7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011b80:	e7fa      	b.n	8011b78 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8011b82:	2002      	movs	r0, #2
}
 8011b84:	bd10      	pop	{r4, pc}

08011b86 <HAL_UART_ErrorCallback>:
 8011b86:	4770      	bx	lr

08011b88 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011b88:	6803      	ldr	r3, [r0, #0]
 8011b8a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011b8c:	68d9      	ldr	r1, [r3, #12]
{
 8011b8e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8011b90:	0716      	lsls	r6, r2, #28
{
 8011b92:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011b94:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8011b96:	d107      	bne.n	8011ba8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011b98:	0696      	lsls	r6, r2, #26
 8011b9a:	d55a      	bpl.n	8011c52 <HAL_UART_IRQHandler+0xca>
 8011b9c:	068d      	lsls	r5, r1, #26
 8011b9e:	d558      	bpl.n	8011c52 <HAL_UART_IRQHandler+0xca>
}
 8011ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8011ba4:	f7ff bfb4 	b.w	8011b10 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011ba8:	f015 0501 	ands.w	r5, r5, #1
 8011bac:	d102      	bne.n	8011bb4 <HAL_UART_IRQHandler+0x2c>
 8011bae:	f411 7f90 	tst.w	r1, #288	; 0x120
 8011bb2:	d04e      	beq.n	8011c52 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8011bb4:	07d0      	lsls	r0, r2, #31
 8011bb6:	d505      	bpl.n	8011bc4 <HAL_UART_IRQHandler+0x3c>
 8011bb8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011bba:	bf42      	ittt	mi
 8011bbc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8011bbe:	f043 0301 	orrmi.w	r3, r3, #1
 8011bc2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011bc4:	0756      	lsls	r6, r2, #29
 8011bc6:	d504      	bpl.n	8011bd2 <HAL_UART_IRQHandler+0x4a>
 8011bc8:	b11d      	cbz	r5, 8011bd2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011bca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011bcc:	f043 0302 	orr.w	r3, r3, #2
 8011bd0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011bd2:	0790      	lsls	r0, r2, #30
 8011bd4:	d504      	bpl.n	8011be0 <HAL_UART_IRQHandler+0x58>
 8011bd6:	b11d      	cbz	r5, 8011be0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011bd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011bda:	f043 0304 	orr.w	r3, r3, #4
 8011bde:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8011be0:	0713      	lsls	r3, r2, #28
 8011be2:	d506      	bpl.n	8011bf2 <HAL_UART_IRQHandler+0x6a>
 8011be4:	068e      	lsls	r6, r1, #26
 8011be6:	d400      	bmi.n	8011bea <HAL_UART_IRQHandler+0x62>
 8011be8:	b11d      	cbz	r5, 8011bf2 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011bea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011bec:	f043 0308 	orr.w	r3, r3, #8
 8011bf0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011bf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011bf4:	b343      	cbz	r3, 8011c48 <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011bf6:	0695      	lsls	r5, r2, #26
 8011bf8:	d504      	bpl.n	8011c04 <HAL_UART_IRQHandler+0x7c>
 8011bfa:	0688      	lsls	r0, r1, #26
 8011bfc:	d502      	bpl.n	8011c04 <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 8011bfe:	4620      	mov	r0, r4
 8011c00:	f7ff ff86 	bl	8011b10 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011c04:	6823      	ldr	r3, [r4, #0]
 8011c06:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011c08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8011c0a:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8011c0c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011c0e:	d402      	bmi.n	8011c16 <HAL_UART_IRQHandler+0x8e>
 8011c10:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8011c14:	d019      	beq.n	8011c4a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8011c16:	f7ff fdcf 	bl	80117b8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011c1a:	6823      	ldr	r3, [r4, #0]
 8011c1c:	695a      	ldr	r2, [r3, #20]
 8011c1e:	0652      	lsls	r2, r2, #25
 8011c20:	d50f      	bpl.n	8011c42 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c22:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8011c24:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011c2a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8011c2c:	b148      	cbz	r0, 8011c42 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011c2e:	4b26      	ldr	r3, [pc, #152]	; (8011cc8 <HAL_UART_IRQHandler+0x140>)
 8011c30:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011c32:	f7fd f81f 	bl	800ec74 <HAL_DMA_Abort_IT>
 8011c36:	b138      	cbz	r0, 8011c48 <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011c38:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8011c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011c3e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011c40:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8011c42:	4620      	mov	r0, r4
 8011c44:	f7ff ff9f 	bl	8011b86 <HAL_UART_ErrorCallback>
}
 8011c48:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8011c4a:	f7ff ff9c 	bl	8011b86 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c4e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8011c50:	e7fa      	b.n	8011c48 <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011c52:	0616      	lsls	r6, r2, #24
 8011c54:	d528      	bpl.n	8011ca8 <HAL_UART_IRQHandler+0x120>
 8011c56:	060d      	lsls	r5, r1, #24
 8011c58:	d526      	bpl.n	8011ca8 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011c5a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8011c5e:	2a21      	cmp	r2, #33	; 0x21
 8011c60:	d1f2      	bne.n	8011c48 <HAL_UART_IRQHandler+0xc0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011c62:	68a1      	ldr	r1, [r4, #8]
 8011c64:	6a22      	ldr	r2, [r4, #32]
 8011c66:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8011c6a:	d118      	bne.n	8011c9e <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011c6c:	8811      	ldrh	r1, [r2, #0]
 8011c6e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8011c72:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011c74:	6921      	ldr	r1, [r4, #16]
 8011c76:	b981      	cbnz	r1, 8011c9a <HAL_UART_IRQHandler+0x112>
        huart->pTxBuffPtr += 2U;
 8011c78:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8011c7a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8011c7c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8011c7e:	3a01      	subs	r2, #1
 8011c80:	b292      	uxth	r2, r2
 8011c82:	84e2      	strh	r2, [r4, #38]	; 0x26
 8011c84:	2a00      	cmp	r2, #0
 8011c86:	d1df      	bne.n	8011c48 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011c88:	68da      	ldr	r2, [r3, #12]
 8011c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011c8e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011c90:	68da      	ldr	r2, [r3, #12]
 8011c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c96:	60da      	str	r2, [r3, #12]
 8011c98:	e7d6      	b.n	8011c48 <HAL_UART_IRQHandler+0xc0>
        huart->pTxBuffPtr += 1U;
 8011c9a:	3201      	adds	r2, #1
 8011c9c:	e7ed      	b.n	8011c7a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011c9e:	1c51      	adds	r1, r2, #1
 8011ca0:	6221      	str	r1, [r4, #32]
 8011ca2:	7812      	ldrb	r2, [r2, #0]
 8011ca4:	605a      	str	r2, [r3, #4]
 8011ca6:	e7e9      	b.n	8011c7c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011ca8:	0650      	lsls	r0, r2, #25
 8011caa:	d5cd      	bpl.n	8011c48 <HAL_UART_IRQHandler+0xc0>
 8011cac:	064a      	lsls	r2, r1, #25
 8011cae:	d5cb      	bpl.n	8011c48 <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011cb0:	68da      	ldr	r2, [r3, #12]
 8011cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011cb6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8011cb8:	2320      	movs	r3, #32
 8011cba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f7ff ff24 	bl	8011b0c <HAL_UART_TxCpltCallback>
 8011cc4:	e7c0      	b.n	8011c48 <HAL_UART_IRQHandler+0xc0>
 8011cc6:	bf00      	nop
 8011cc8:	08011ccd 	.word	0x08011ccd

08011ccc <UART_DMAAbortOnError>:
{
 8011ccc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011cce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011cd4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8011cd6:	f7ff ff56 	bl	8011b86 <HAL_UART_ErrorCallback>
}
 8011cda:	bd08      	pop	{r3, pc}

08011cdc <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011cdc:	4b12      	ldr	r3, [pc, #72]	; (8011d28 <SDMMC_GetCmdResp2+0x4c>)
 8011cde:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	fbb3 f2f2 	udiv	r2, r3, r2
 8011ce8:	f241 3388 	movw	r3, #5000	; 0x1388
 8011cec:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8011cee:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011cf2:	d315      	bcc.n	8011d20 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8011cf4:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011cf6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8011cfa:	d0f8      	beq.n	8011cee <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011cfc:	0512      	lsls	r2, r2, #20
 8011cfe:	d4f6      	bmi.n	8011cee <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011d00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d02:	075b      	lsls	r3, r3, #29
 8011d04:	d503      	bpl.n	8011d0e <SDMMC_GetCmdResp2+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011d06:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011d08:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011d0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d10:	f013 0301 	ands.w	r3, r3, #1
 8011d14:	d001      	beq.n	8011d1a <SDMMC_GetCmdResp2+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011d16:	2301      	movs	r3, #1
 8011d18:	e7f6      	b.n	8011d08 <SDMMC_GetCmdResp2+0x2c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011d1a:	22c5      	movs	r2, #197	; 0xc5
 8011d1c:	6382      	str	r2, [r0, #56]	; 0x38
 8011d1e:	e7f4      	b.n	8011d0a <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8011d20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011d24:	e7f1      	b.n	8011d0a <SDMMC_GetCmdResp2+0x2e>
 8011d26:	bf00      	nop
 8011d28:	2000000c 	.word	0x2000000c

08011d2c <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011d2c:	4b0f      	ldr	r3, [pc, #60]	; (8011d6c <SDMMC_GetCmdResp3+0x40>)
 8011d2e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	fbb3 f2f2 	udiv	r2, r3, r2
 8011d38:	f241 3388 	movw	r3, #5000	; 0x1388
 8011d3c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8011d3e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011d42:	d30f      	bcc.n	8011d64 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8011d44:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011d46:	f012 0f45 	tst.w	r2, #69	; 0x45
 8011d4a:	d0f8      	beq.n	8011d3e <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011d4c:	0512      	lsls	r2, r2, #20
 8011d4e:	d4f6      	bmi.n	8011d3e <SDMMC_GetCmdResp3+0x12>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011d50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d52:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011d56:	bf15      	itete	ne
 8011d58:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011d5a:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011d5c:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011d5e:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011d60:	4618      	mov	r0, r3
 8011d62:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8011d64:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8011d68:	4770      	bx	lr
 8011d6a:	bf00      	nop
 8011d6c:	2000000c 	.word	0x2000000c

08011d70 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011d70:	4b44      	ldr	r3, [pc, #272]	; (8011e84 <SDMMC_GetCmdResp1+0x114>)
{
 8011d72:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8011d7a:	fbb3 f3f4 	udiv	r3, r3, r4
 8011d7e:	435a      	muls	r2, r3
    if (count-- == 0U)
 8011d80:	2a00      	cmp	r2, #0
 8011d82:	d04a      	beq.n	8011e1a <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 8011d84:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011d86:	f013 0f45 	tst.w	r3, #69	; 0x45
 8011d8a:	d008      	beq.n	8011d9e <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011d8c:	051c      	lsls	r4, r3, #20
 8011d8e:	d406      	bmi.n	8011d9e <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011d90:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d92:	075b      	lsls	r3, r3, #29
 8011d94:	d505      	bpl.n	8011da2 <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011d96:	2304      	movs	r3, #4
 8011d98:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011d9a:	4618      	mov	r0, r3
}
 8011d9c:	bd10      	pop	{r4, pc}
 8011d9e:	3a01      	subs	r2, #1
 8011da0:	e7ee      	b.n	8011d80 <SDMMC_GetCmdResp1+0x10>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011da2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011da4:	07dc      	lsls	r4, r3, #31
 8011da6:	d503      	bpl.n	8011db0 <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011da8:	2301      	movs	r3, #1
 8011daa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011dac:	2001      	movs	r0, #1
 8011dae:	e7f5      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011db0:	23c5      	movs	r3, #197	; 0xc5
 8011db2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8011db4:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	4299      	cmp	r1, r3
 8011dba:	d1f7      	bne.n	8011dac <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8011dbc:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011dbe:	4832      	ldr	r0, [pc, #200]	; (8011e88 <SDMMC_GetCmdResp1+0x118>)
 8011dc0:	4018      	ands	r0, r3
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	d0ea      	beq.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	db2a      	blt.n	8011e20 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011dca:	005a      	lsls	r2, r3, #1
 8011dcc:	d42b      	bmi.n	8011e26 <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011dce:	009c      	lsls	r4, r3, #2
 8011dd0:	d42b      	bmi.n	8011e2a <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011dd2:	00d9      	lsls	r1, r3, #3
 8011dd4:	d42b      	bmi.n	8011e2e <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011dd6:	011a      	lsls	r2, r3, #4
 8011dd8:	d42c      	bmi.n	8011e34 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011dda:	015c      	lsls	r4, r3, #5
 8011ddc:	d42d      	bmi.n	8011e3a <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011dde:	01d9      	lsls	r1, r3, #7
 8011de0:	d42e      	bmi.n	8011e40 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011de2:	021a      	lsls	r2, r3, #8
 8011de4:	d42f      	bmi.n	8011e46 <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011de6:	025c      	lsls	r4, r3, #9
 8011de8:	d430      	bmi.n	8011e4c <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011dea:	0299      	lsls	r1, r3, #10
 8011dec:	d431      	bmi.n	8011e52 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011dee:	02da      	lsls	r2, r3, #11
 8011df0:	d432      	bmi.n	8011e58 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011df2:	035c      	lsls	r4, r3, #13
 8011df4:	d433      	bmi.n	8011e5e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011df6:	0399      	lsls	r1, r3, #14
 8011df8:	d434      	bmi.n	8011e64 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011dfa:	03da      	lsls	r2, r3, #15
 8011dfc:	d435      	bmi.n	8011e6a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011dfe:	041c      	lsls	r4, r3, #16
 8011e00:	d436      	bmi.n	8011e70 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011e02:	0459      	lsls	r1, r3, #17
 8011e04:	d437      	bmi.n	8011e76 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011e06:	049a      	lsls	r2, r3, #18
 8011e08:	d438      	bmi.n	8011e7c <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011e0a:	f013 0f08 	tst.w	r3, #8
 8011e0e:	bf0c      	ite	eq
 8011e10:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8011e14:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8011e18:	e7c0      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8011e1a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8011e1e:	e7bd      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011e20:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8011e24:	e7ba      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011e26:	2040      	movs	r0, #64	; 0x40
 8011e28:	e7b8      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011e2a:	2080      	movs	r0, #128	; 0x80
 8011e2c:	e7b6      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011e2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011e32:	e7b3      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011e34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011e38:	e7b0      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011e3a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011e3e:	e7ad      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011e40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011e44:	e7aa      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011e46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011e4a:	e7a7      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011e4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8011e50:	e7a4      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011e52:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011e56:	e7a1      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8011e58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011e5c:	e79e      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011e5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8011e62:	e79b      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011e64:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8011e68:	e798      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011e6a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011e6e:	e795      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011e70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011e74:	e792      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011e76:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8011e7a:	e78f      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8011e7c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011e80:	e78c      	b.n	8011d9c <SDMMC_GetCmdResp1+0x2c>
 8011e82:	bf00      	nop
 8011e84:	2000000c 	.word	0x2000000c
 8011e88:	fdffe008 	.word	0xfdffe008

08011e8c <SDIO_Init>:
{
 8011e8c:	b084      	sub	sp, #16
 8011e8e:	b510      	push	{r4, lr}
 8011e90:	ac03      	add	r4, sp, #12
 8011e92:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8011e96:	460b      	mov	r3, r1
 8011e98:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011e9a:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8011e9c:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8011e9e:	9905      	ldr	r1, [sp, #20]
 8011ea0:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8011ea2:	9906      	ldr	r1, [sp, #24]
 8011ea4:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8011ea6:	9907      	ldr	r1, [sp, #28]
 8011ea8:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8011eaa:	9908      	ldr	r1, [sp, #32]
}
 8011eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011eb0:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8011eb4:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011eb6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	6043      	str	r3, [r0, #4]
}
 8011ebe:	b004      	add	sp, #16
 8011ec0:	2000      	movs	r0, #0
 8011ec2:	4770      	bx	lr

08011ec4 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8011ec4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8011ec8:	4770      	bx	lr

08011eca <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8011eca:	680b      	ldr	r3, [r1, #0]
 8011ecc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	4770      	bx	lr

08011ed4 <SDIO_PowerState_ON>:
{  
 8011ed4:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8011ed6:	2303      	movs	r3, #3
 8011ed8:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8011eda:	2002      	movs	r0, #2
 8011edc:	f7fc fd46 	bl	800e96c <HAL_Delay>
}
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	bd08      	pop	{r3, pc}

08011ee4 <SDIO_PowerState_OFF>:
  SDIOx->POWER = (uint32_t)0x00000000;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	6003      	str	r3, [r0, #0]
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	4770      	bx	lr

08011eec <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8011eec:	6800      	ldr	r0, [r0, #0]
}
 8011eee:	f000 0003 	and.w	r0, r0, #3
 8011ef2:	4770      	bx	lr

08011ef4 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8011ef4:	680b      	ldr	r3, [r1, #0]
{
 8011ef6:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8011ef8:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011efa:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011efe:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011f00:	4323      	orrs	r3, r4
                       Command->Response         |\
 8011f02:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8011f04:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8011f06:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011f08:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8011f0c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011f0e:	f022 020f 	bic.w	r2, r2, #15
 8011f12:	4313      	orrs	r3, r2
 8011f14:	60c3      	str	r3, [r0, #12]
}
 8011f16:	2000      	movs	r0, #0
 8011f18:	bd10      	pop	{r4, pc}

08011f1a <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8011f1a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8011f1c:	5840      	ldr	r0, [r0, r1]
}  
 8011f1e:	4770      	bx	lr

08011f20 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8011f20:	680b      	ldr	r3, [r1, #0]
{
 8011f22:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8011f24:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8011f26:	684b      	ldr	r3, [r1, #4]
 8011f28:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011f2a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8011f2e:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8011f30:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011f32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 8011f34:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8011f36:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8011f38:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011f3a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8011f3e:	4313      	orrs	r3, r2
 8011f40:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8011f42:	2000      	movs	r0, #0
 8011f44:	bd10      	pop	{r4, pc}

08011f46 <SDMMC_CmdBlockLength>:
{
 8011f46:	b530      	push	{r4, r5, lr}
 8011f48:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f4a:	2410      	movs	r4, #16
 8011f4c:	2340      	movs	r3, #64	; 0x40
{
 8011f4e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011f50:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f52:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f56:	2200      	movs	r2, #0
 8011f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f5c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f62:	f7ff ffc7 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8011f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f6a:	4621      	mov	r1, r4
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f7ff feff 	bl	8011d70 <SDMMC_GetCmdResp1>
}
 8011f72:	b007      	add	sp, #28
 8011f74:	bd30      	pop	{r4, r5, pc}

08011f76 <SDMMC_CmdReadSingleBlock>:
{
 8011f76:	b530      	push	{r4, r5, lr}
 8011f78:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f7a:	2411      	movs	r4, #17
 8011f7c:	2340      	movs	r3, #64	; 0x40
{
 8011f7e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f80:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f82:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f86:	2200      	movs	r2, #0
 8011f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f8c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f92:	f7ff ffaf 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f9a:	4621      	mov	r1, r4
 8011f9c:	4628      	mov	r0, r5
 8011f9e:	f7ff fee7 	bl	8011d70 <SDMMC_GetCmdResp1>
}
 8011fa2:	b007      	add	sp, #28
 8011fa4:	bd30      	pop	{r4, r5, pc}

08011fa6 <SDMMC_CmdReadMultiBlock>:
{
 8011fa6:	b530      	push	{r4, r5, lr}
 8011fa8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011faa:	2412      	movs	r4, #18
 8011fac:	2340      	movs	r3, #64	; 0x40
{
 8011fae:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011fb0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011fb2:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011fbc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011fc2:	f7ff ff97 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fca:	4621      	mov	r1, r4
 8011fcc:	4628      	mov	r0, r5
 8011fce:	f7ff fecf 	bl	8011d70 <SDMMC_GetCmdResp1>
}
 8011fd2:	b007      	add	sp, #28
 8011fd4:	bd30      	pop	{r4, r5, pc}

08011fd6 <SDMMC_CmdWriteSingleBlock>:
{
 8011fd6:	b530      	push	{r4, r5, lr}
 8011fd8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011fda:	2418      	movs	r4, #24
 8011fdc:	2340      	movs	r3, #64	; 0x40
{
 8011fde:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011fe0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011fe2:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011fec:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ff2:	f7ff ff7f 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ffa:	4621      	mov	r1, r4
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	f7ff feb7 	bl	8011d70 <SDMMC_GetCmdResp1>
}
 8012002:	b007      	add	sp, #28
 8012004:	bd30      	pop	{r4, r5, pc}

08012006 <SDMMC_CmdWriteMultiBlock>:
{
 8012006:	b530      	push	{r4, r5, lr}
 8012008:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801200a:	2419      	movs	r4, #25
 801200c:	2340      	movs	r3, #64	; 0x40
{
 801200e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012010:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012012:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012016:	2200      	movs	r2, #0
 8012018:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801201c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801201e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012022:	f7ff ff67 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012026:	f241 3288 	movw	r2, #5000	; 0x1388
 801202a:	4621      	mov	r1, r4
 801202c:	4628      	mov	r0, r5
 801202e:	f7ff fe9f 	bl	8011d70 <SDMMC_GetCmdResp1>
}
 8012032:	b007      	add	sp, #28
 8012034:	bd30      	pop	{r4, r5, pc}
	...

08012038 <SDMMC_CmdStopTransfer>:
{
 8012038:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801203a:	2300      	movs	r3, #0
{
 801203c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801203e:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012040:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012042:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8012046:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012048:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801204c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801204e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012052:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012054:	f7ff ff4e 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8012058:	4a03      	ldr	r2, [pc, #12]	; (8012068 <SDMMC_CmdStopTransfer+0x30>)
 801205a:	4621      	mov	r1, r4
 801205c:	4628      	mov	r0, r5
 801205e:	f7ff fe87 	bl	8011d70 <SDMMC_GetCmdResp1>
}
 8012062:	b007      	add	sp, #28
 8012064:	bd30      	pop	{r4, r5, pc}
 8012066:	bf00      	nop
 8012068:	05f5e100 	.word	0x05f5e100

0801206c <SDMMC_CmdSelDesel>:
{
 801206c:	b530      	push	{r4, r5, lr}
 801206e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012070:	2407      	movs	r4, #7
 8012072:	2340      	movs	r3, #64	; 0x40
{
 8012074:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012076:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012078:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801207c:	2200      	movs	r2, #0
 801207e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012082:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012084:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012088:	f7ff ff34 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012090:	4621      	mov	r1, r4
 8012092:	4628      	mov	r0, r5
 8012094:	f7ff fe6c 	bl	8011d70 <SDMMC_GetCmdResp1>
}
 8012098:	b007      	add	sp, #28
 801209a:	bd30      	pop	{r4, r5, pc}

0801209c <SDMMC_CmdGoIdleState>:
{
 801209c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 801209e:	2300      	movs	r3, #0
{
 80120a0:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80120a2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80120a6:	e9cd 3303 	strd	r3, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80120aa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80120ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120b0:	9305      	str	r3, [sp, #20]
{
 80120b2:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80120b4:	f7ff ff1e 	bl	8011ef4 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80120b8:	4b0b      	ldr	r3, [pc, #44]	; (80120e8 <SDMMC_CmdGoIdleState+0x4c>)
 80120ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80120c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80120c8:	4353      	muls	r3, r2
    if (count-- == 0U)
 80120ca:	f113 33ff 	adds.w	r3, r3, #4294967295
 80120ce:	d307      	bcc.n	80120e0 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80120d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80120d2:	0612      	lsls	r2, r2, #24
 80120d4:	d5f9      	bpl.n	80120ca <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80120d6:	23c5      	movs	r3, #197	; 0xc5
 80120d8:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80120da:	2000      	movs	r0, #0
}
 80120dc:	b006      	add	sp, #24
 80120de:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80120e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80120e4:	e7fa      	b.n	80120dc <SDMMC_CmdGoIdleState+0x40>
 80120e6:	bf00      	nop
 80120e8:	2000000c 	.word	0x2000000c

080120ec <SDMMC_CmdOperCond>:
{
 80120ec:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80120ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 80120f2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80120f4:	2308      	movs	r3, #8
 80120f6:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80120fa:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80120fe:	2300      	movs	r3, #0
 8012100:	e9cd c303 	strd	ip, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012104:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801210a:	9305      	str	r3, [sp, #20]
{
 801210c:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801210e:	f7ff fef1 	bl	8011ef4 <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012112:	4b15      	ldr	r3, [pc, #84]	; (8012168 <SDMMC_CmdOperCond+0x7c>)
 8012114:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	fbb3 f2f2 	udiv	r2, r3, r2
 801211e:	f241 3388 	movw	r3, #5000	; 0x1388
 8012122:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8012124:	f113 33ff 	adds.w	r3, r3, #4294967295
 8012128:	d31a      	bcc.n	8012160 <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 801212a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801212c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8012130:	d0f8      	beq.n	8012124 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012132:	0512      	lsls	r2, r2, #20
 8012134:	d4f6      	bmi.n	8012124 <SDMMC_CmdOperCond+0x38>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012136:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012138:	075b      	lsls	r3, r3, #29
 801213a:	d503      	bpl.n	8012144 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801213c:	2004      	movs	r0, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801213e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8012140:	b006      	add	sp, #24
 8012142:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012144:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012146:	f012 0201 	ands.w	r2, r2, #1
 801214a:	d001      	beq.n	8012150 <SDMMC_CmdOperCond+0x64>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801214c:	2001      	movs	r0, #1
 801214e:	e7f6      	b.n	801213e <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8012150:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012152:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8012156:	d0f3      	beq.n	8012140 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8012158:	2340      	movs	r3, #64	; 0x40
 801215a:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801215c:	4610      	mov	r0, r2
 801215e:	e7ef      	b.n	8012140 <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 8012160:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8012164:	e7ec      	b.n	8012140 <SDMMC_CmdOperCond+0x54>
 8012166:	bf00      	nop
 8012168:	2000000c 	.word	0x2000000c

0801216c <SDMMC_CmdAppCommand>:
{
 801216c:	b530      	push	{r4, r5, lr}
 801216e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012170:	2437      	movs	r4, #55	; 0x37
 8012172:	2340      	movs	r3, #64	; 0x40
{
 8012174:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012176:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012178:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801217c:	2200      	movs	r2, #0
 801217e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012182:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012184:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012188:	f7ff feb4 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012190:	4621      	mov	r1, r4
 8012192:	4628      	mov	r0, r5
 8012194:	f7ff fdec 	bl	8011d70 <SDMMC_GetCmdResp1>
}
 8012198:	b007      	add	sp, #28
 801219a:	bd30      	pop	{r4, r5, pc}

0801219c <SDMMC_CmdAppOperCommand>:
{
 801219c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801219e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 80121a2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80121a4:	2229      	movs	r2, #41	; 0x29
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80121a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80121aa:	2340      	movs	r3, #64	; 0x40
 80121ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80121b0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80121b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121b6:	2100      	movs	r1, #0
 80121b8:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 80121bc:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80121be:	a901      	add	r1, sp, #4
 80121c0:	f7ff fe98 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80121c4:	4620      	mov	r0, r4
 80121c6:	f7ff fdb1 	bl	8011d2c <SDMMC_GetCmdResp3>
}
 80121ca:	b006      	add	sp, #24
 80121cc:	bd10      	pop	{r4, pc}

080121ce <SDMMC_CmdSendCID>:
{
 80121ce:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80121d0:	2300      	movs	r3, #0
{
 80121d2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80121d4:	2202      	movs	r2, #2
 80121d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80121da:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80121dc:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 80121e0:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80121e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80121e6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80121e8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80121ea:	f7ff fe83 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80121ee:	4620      	mov	r0, r4
 80121f0:	f7ff fd74 	bl	8011cdc <SDMMC_GetCmdResp2>
}
 80121f4:	b006      	add	sp, #24
 80121f6:	bd10      	pop	{r4, pc}

080121f8 <SDMMC_CmdSendCSD>:
{
 80121f8:	b510      	push	{r4, lr}
 80121fa:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80121fc:	2209      	movs	r2, #9
 80121fe:	23c0      	movs	r3, #192	; 0xc0
 8012200:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8012204:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801220a:	2100      	movs	r1, #0
 801220c:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8012210:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012212:	a901      	add	r1, sp, #4
 8012214:	f7ff fe6e 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8012218:	4620      	mov	r0, r4
 801221a:	f7ff fd5f 	bl	8011cdc <SDMMC_GetCmdResp2>
}
 801221e:	b006      	add	sp, #24
 8012220:	bd10      	pop	{r4, pc}
	...

08012224 <SDMMC_CmdSetRelAdd>:
{
 8012224:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012226:	2300      	movs	r3, #0
{
 8012228:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801222a:	2203      	movs	r2, #3
 801222c:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012230:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012232:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8012236:	460d      	mov	r5, r1
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012238:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801223c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801223e:	9305      	str	r3, [sp, #20]
{
 8012240:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012242:	f7ff fe57 	bl	8011ef4 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012246:	4b1e      	ldr	r3, [pc, #120]	; (80122c0 <SDMMC_CmdSetRelAdd+0x9c>)
 8012248:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	fbb3 f2f2 	udiv	r2, r3, r2
 8012252:	f241 3388 	movw	r3, #5000	; 0x1388
 8012256:	4353      	muls	r3, r2
    if (count-- == 0U)
 8012258:	f113 33ff 	adds.w	r3, r3, #4294967295
 801225c:	d328      	bcc.n	80122b0 <SDMMC_CmdSetRelAdd+0x8c>
    sta_reg = SDIOx->STA;
 801225e:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012260:	f012 0f45 	tst.w	r2, #69	; 0x45
 8012264:	d0f8      	beq.n	8012258 <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012266:	0512      	lsls	r2, r2, #20
 8012268:	d4f6      	bmi.n	8012258 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801226a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801226c:	0758      	lsls	r0, r3, #29
 801226e:	d503      	bpl.n	8012278 <SDMMC_CmdSetRelAdd+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012270:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012272:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8012274:	b007      	add	sp, #28
 8012276:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801227a:	07d9      	lsls	r1, r3, #31
 801227c:	d501      	bpl.n	8012282 <SDMMC_CmdSetRelAdd+0x5e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801227e:	2001      	movs	r0, #1
 8012280:	e7f7      	b.n	8012272 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDIOx->RESPCMD);
 8012282:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012284:	b2db      	uxtb	r3, r3
 8012286:	2b03      	cmp	r3, #3
 8012288:	d115      	bne.n	80122b6 <SDMMC_CmdSetRelAdd+0x92>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801228a:	23c5      	movs	r3, #197	; 0xc5
 801228c:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 801228e:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012290:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8012294:	d102      	bne.n	801229c <SDMMC_CmdSetRelAdd+0x78>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012296:	0c1b      	lsrs	r3, r3, #16
 8012298:	802b      	strh	r3, [r5, #0]
 801229a:	e7eb      	b.n	8012274 <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801229c:	045a      	lsls	r2, r3, #17
 801229e:	d40c      	bmi.n	80122ba <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80122a0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80122a4:	bf0c      	ite	eq
 80122a6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80122aa:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80122ae:	e7e1      	b.n	8012274 <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 80122b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80122b4:	e7de      	b.n	8012274 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122b6:	2001      	movs	r0, #1
 80122b8:	e7dc      	b.n	8012274 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80122ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80122be:	e7d9      	b.n	8012274 <SDMMC_CmdSetRelAdd+0x50>
 80122c0:	2000000c 	.word	0x2000000c

080122c4 <SDMMC_CmdSendStatus>:
{
 80122c4:	b530      	push	{r4, r5, lr}
 80122c6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80122c8:	240d      	movs	r4, #13
 80122ca:	2340      	movs	r3, #64	; 0x40
{
 80122cc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80122ce:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80122d0:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80122d4:	2200      	movs	r2, #0
 80122d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80122da:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80122dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80122e0:	f7ff fe08 	bl	8011ef4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80122e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80122e8:	4621      	mov	r1, r4
 80122ea:	4628      	mov	r0, r5
 80122ec:	f7ff fd40 	bl	8011d70 <SDMMC_GetCmdResp1>
}
 80122f0:	b007      	add	sp, #28
 80122f2:	bd30      	pop	{r4, r5, pc}

080122f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80122f4:	4b0a      	ldr	r3, [pc, #40]	; (8012320 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80122f6:	3b01      	subs	r3, #1
 80122f8:	d00f      	beq.n	801231a <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80122fa:	6902      	ldr	r2, [r0, #16]
 80122fc:	2a00      	cmp	r2, #0
 80122fe:	dafa      	bge.n	80122f6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012300:	6903      	ldr	r3, [r0, #16]
 8012302:	4a07      	ldr	r2, [pc, #28]	; (8012320 <USB_CoreReset+0x2c>)
 8012304:	f043 0301 	orr.w	r3, r3, #1
 8012308:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 801230a:	3a01      	subs	r2, #1
 801230c:	d005      	beq.n	801231a <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801230e:	6903      	ldr	r3, [r0, #16]
 8012310:	f013 0301 	ands.w	r3, r3, #1
 8012314:	d1f9      	bne.n	801230a <USB_CoreReset+0x16>

  return HAL_OK;
 8012316:	4618      	mov	r0, r3
 8012318:	4770      	bx	lr
      return HAL_TIMEOUT;
 801231a:	2003      	movs	r0, #3
}
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop
 8012320:	00030d41 	.word	0x00030d41

08012324 <USB_CoreInit>:
{
 8012324:	b084      	sub	sp, #16
 8012326:	b538      	push	{r3, r4, r5, lr}
 8012328:	ad05      	add	r5, sp, #20
 801232a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801232e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012330:	2b01      	cmp	r3, #1
{
 8012332:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012334:	d125      	bne.n	8012382 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012336:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8012338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801233c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801233e:	68c3      	ldr	r3, [r0, #12]
 8012340:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8012344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012348:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801234a:	68c3      	ldr	r3, [r0, #12]
 801234c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012350:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8012352:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012354:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012356:	bf02      	ittt	eq
 8012358:	68c3      	ldreq	r3, [r0, #12]
 801235a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 801235e:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8012360:	f7ff ffc8 	bl	80122f4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8012364:	9b08      	ldr	r3, [sp, #32]
 8012366:	2b01      	cmp	r3, #1
 8012368:	d107      	bne.n	801237a <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801236a:	68a3      	ldr	r3, [r4, #8]
 801236c:	f043 0306 	orr.w	r3, r3, #6
 8012370:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012372:	68a3      	ldr	r3, [r4, #8]
 8012374:	f043 0320 	orr.w	r3, r3, #32
 8012378:	60a3      	str	r3, [r4, #8]
}
 801237a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801237e:	b004      	add	sp, #16
 8012380:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012382:	68c3      	ldr	r3, [r0, #12]
 8012384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012388:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 801238a:	f7ff ffb3 	bl	80122f4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 801238e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012390:	b923      	cbnz	r3, 801239c <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012392:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012398:	63a3      	str	r3, [r4, #56]	; 0x38
 801239a:	e7e3      	b.n	8012364 <USB_CoreInit+0x40>
 801239c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80123a2:	e7f9      	b.n	8012398 <USB_CoreInit+0x74>

080123a4 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80123a4:	6883      	ldr	r3, [r0, #8]
 80123a6:	f043 0301 	orr.w	r3, r3, #1
 80123aa:	6083      	str	r3, [r0, #8]
}
 80123ac:	2000      	movs	r0, #0
 80123ae:	4770      	bx	lr

080123b0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80123b0:	6883      	ldr	r3, [r0, #8]
 80123b2:	f023 0301 	bic.w	r3, r3, #1
 80123b6:	6083      	str	r3, [r0, #8]
}
 80123b8:	2000      	movs	r0, #0
 80123ba:	4770      	bx	lr

080123bc <USB_SetCurrentMode>:
{
 80123bc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80123be:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80123c0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80123c2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80123c6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80123c8:	d108      	bne.n	80123dc <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80123ca:	68c3      	ldr	r3, [r0, #12]
 80123cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80123d0:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80123d2:	2032      	movs	r0, #50	; 0x32
 80123d4:	f7fc faca 	bl	800e96c <HAL_Delay>
  return HAL_OK;
 80123d8:	2000      	movs	r0, #0
}
 80123da:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80123dc:	b919      	cbnz	r1, 80123e6 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80123de:	68c3      	ldr	r3, [r0, #12]
 80123e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80123e4:	e7f4      	b.n	80123d0 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80123e6:	2001      	movs	r0, #1
 80123e8:	e7f7      	b.n	80123da <USB_SetCurrentMode+0x1e>
	...

080123ec <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80123ec:	0189      	lsls	r1, r1, #6
 80123ee:	f041 0120 	orr.w	r1, r1, #32
 80123f2:	4a06      	ldr	r2, [pc, #24]	; (801240c <USB_FlushTxFifo+0x20>)
 80123f4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80123f6:	3a01      	subs	r2, #1
 80123f8:	d005      	beq.n	8012406 <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80123fa:	6903      	ldr	r3, [r0, #16]
 80123fc:	f013 0320 	ands.w	r3, r3, #32
 8012400:	d1f9      	bne.n	80123f6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8012402:	4618      	mov	r0, r3
 8012404:	4770      	bx	lr
      return HAL_TIMEOUT;
 8012406:	2003      	movs	r0, #3
}
 8012408:	4770      	bx	lr
 801240a:	bf00      	nop
 801240c:	00030d41 	.word	0x00030d41

08012410 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012410:	2310      	movs	r3, #16
 8012412:	4a06      	ldr	r2, [pc, #24]	; (801242c <USB_FlushRxFifo+0x1c>)
 8012414:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8012416:	3a01      	subs	r2, #1
 8012418:	d005      	beq.n	8012426 <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801241a:	6903      	ldr	r3, [r0, #16]
 801241c:	f013 0310 	ands.w	r3, r3, #16
 8012420:	d1f9      	bne.n	8012416 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8012422:	4618      	mov	r0, r3
 8012424:	4770      	bx	lr
      return HAL_TIMEOUT;
 8012426:	2003      	movs	r0, #3
}
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop
 801242c:	00030d41 	.word	0x00030d41

08012430 <USB_WritePacket>:
{
 8012430:	b510      	push	{r4, lr}
 8012432:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8012436:	b94c      	cbnz	r4, 801244c <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8012438:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801243a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b = ((uint32_t)len + 3U) / 4U;
 801243e:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012440:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8012444:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8012448:	4299      	cmp	r1, r3
 801244a:	d101      	bne.n	8012450 <USB_WritePacket+0x20>
}
 801244c:	2000      	movs	r0, #0
 801244e:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012450:	f851 2b04 	ldr.w	r2, [r1], #4
 8012454:	6002      	str	r2, [r0, #0]
 8012456:	e7f7      	b.n	8012448 <USB_WritePacket+0x18>

08012458 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012458:	3203      	adds	r2, #3
 801245a:	0892      	lsrs	r2, r2, #2
 801245c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012460:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8012464:	4291      	cmp	r1, r2
 8012466:	d101      	bne.n	801246c <USB_ReadPacket+0x14>
}
 8012468:	4608      	mov	r0, r1
 801246a:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801246c:	6803      	ldr	r3, [r0, #0]
 801246e:	f841 3b04 	str.w	r3, [r1], #4
 8012472:	e7f7      	b.n	8012464 <USB_ReadPacket+0xc>

08012474 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8012474:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8012476:	6980      	ldr	r0, [r0, #24]
}
 8012478:	4010      	ands	r0, r2
 801247a:	4770      	bx	lr

0801247c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 801247c:	6940      	ldr	r0, [r0, #20]
}
 801247e:	f000 0001 	and.w	r0, r0, #1
 8012482:	4770      	bx	lr

08012484 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8012484:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8012488:	f023 0303 	bic.w	r3, r3, #3
{
 801248c:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801248e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8012492:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8012496:	f001 0303 	and.w	r3, r1, #3
 801249a:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 801249c:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801249e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80124a2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80124a6:	d104      	bne.n	80124b2 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80124a8:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80124ac:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80124ae:	2000      	movs	r0, #0
 80124b0:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80124b2:	2902      	cmp	r1, #2
 80124b4:	d1fb      	bne.n	80124ae <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 80124b6:	f241 7370 	movw	r3, #6000	; 0x1770
 80124ba:	e7f7      	b.n	80124ac <USB_InitFSLSPClkSel+0x28>

080124bc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80124bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80124be:	2500      	movs	r5, #0
 80124c0:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80124c2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80124c6:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80124c8:	9b01      	ldr	r3, [sp, #4]
 80124ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80124ce:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80124d0:	9b01      	ldr	r3, [sp, #4]
 80124d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80124d6:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80124d8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80124dc:	2064      	movs	r0, #100	; 0x64
 80124de:	f7fc fa45 	bl	800e96c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80124e2:	9b01      	ldr	r3, [sp, #4]
 80124e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124e8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 80124ec:	200a      	movs	r0, #10
 80124ee:	f7fc fa3d 	bl	800e96c <HAL_Delay>

  return HAL_OK;
}
 80124f2:	4628      	mov	r0, r5
 80124f4:	b003      	add	sp, #12
 80124f6:	bd30      	pop	{r4, r5, pc}

080124f8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80124f8:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80124fa:	2300      	movs	r3, #0
 80124fc:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80124fe:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8012502:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8012504:	9b01      	ldr	r3, [sp, #4]
 8012506:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801250a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 801250c:	9b01      	ldr	r3, [sp, #4]
 801250e:	04da      	lsls	r2, r3, #19
 8012510:	d406      	bmi.n	8012520 <USB_DriveVbus+0x28>
 8012512:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8012514:	bf02      	ittt	eq
 8012516:	9b01      	ldreq	r3, [sp, #4]
 8012518:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 801251c:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8012520:	9b01      	ldr	r3, [sp, #4]
 8012522:	04db      	lsls	r3, r3, #19
 8012524:	d505      	bpl.n	8012532 <USB_DriveVbus+0x3a>
 8012526:	b921      	cbnz	r1, 8012532 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8012528:	9b01      	ldr	r3, [sp, #4]
 801252a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801252e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8012532:	2000      	movs	r0, #0
 8012534:	b002      	add	sp, #8
 8012536:	4770      	bx	lr

08012538 <USB_HostInit>:
{
 8012538:	b084      	sub	sp, #16
 801253a:	b538      	push	{r3, r4, r5, lr}
 801253c:	4604      	mov	r4, r0
 801253e:	a805      	add	r0, sp, #20
 8012540:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8012544:	2300      	movs	r3, #0
 8012546:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801254a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801254c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012550:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8012552:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012554:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8012558:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801255a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801255c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012560:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8012562:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012564:	05da      	lsls	r2, r3, #23
 8012566:	d53f      	bpl.n	80125e8 <USB_HostInit+0xb0>
    if (cfg.speed == USBH_FSLS_SPEED)
 8012568:	9b07      	ldr	r3, [sp, #28]
 801256a:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 801256c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 8012570:	d13c      	bne.n	80125ec <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8012572:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8012576:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 801257a:	2110      	movs	r1, #16
 801257c:	4620      	mov	r0, r4
 801257e:	f7ff ff35 	bl	80123ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012582:	4620      	mov	r0, r4
 8012584:	f7ff ff44 	bl	8012410 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8012588:	2300      	movs	r3, #0
 801258a:	9906      	ldr	r1, [sp, #24]
 801258c:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8012590:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8012594:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8012596:	4299      	cmp	r1, r3
 8012598:	d12b      	bne.n	80125f2 <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 801259a:	2101      	movs	r1, #1
 801259c:	4620      	mov	r0, r4
 801259e:	f7ff ffab 	bl	80124f8 <USB_DriveVbus>
  HAL_Delay(200U);
 80125a2:	20c8      	movs	r0, #200	; 0xc8
 80125a4:	f7fc f9e2 	bl	800e96c <HAL_Delay>
  USBx->GINTMSK = 0U;
 80125a8:	2300      	movs	r3, #0
 80125aa:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80125ac:	f04f 33ff 	mov.w	r3, #4294967295
 80125b0:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80125b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80125b4:	05db      	lsls	r3, r3, #23
 80125b6:	d521      	bpl.n	80125fc <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 80125b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80125bc:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80125be:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80125c2:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80125c4:	4b11      	ldr	r3, [pc, #68]	; (801260c <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80125c6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 80125ca:	9b08      	ldr	r3, [sp, #32]
 80125cc:	b91b      	cbnz	r3, 80125d6 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80125ce:	69a3      	ldr	r3, [r4, #24]
 80125d0:	f043 0310 	orr.w	r3, r3, #16
 80125d4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80125d6:	69a2      	ldr	r2, [r4, #24]
 80125d8:	4b0d      	ldr	r3, [pc, #52]	; (8012610 <USB_HostInit+0xd8>)
 80125da:	4313      	orrs	r3, r2
 80125dc:	61a3      	str	r3, [r4, #24]
}
 80125de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125e2:	2000      	movs	r0, #0
 80125e4:	b004      	add	sp, #16
 80125e6:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80125e8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80125ec:	f023 0304 	bic.w	r3, r3, #4
 80125f0:	e7c1      	b.n	8012576 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80125f2:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 80125f4:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 80125f6:	60d5      	str	r5, [r2, #12]
 80125f8:	3220      	adds	r2, #32
 80125fa:	e7cc      	b.n	8012596 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 80125fc:	2380      	movs	r3, #128	; 0x80
 80125fe:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8012600:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8012604:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8012606:	4b03      	ldr	r3, [pc, #12]	; (8012614 <USB_HostInit+0xdc>)
 8012608:	e7dd      	b.n	80125c6 <USB_HostInit+0x8e>
 801260a:	bf00      	nop
 801260c:	00e00300 	.word	0x00e00300
 8012610:	a3200008 	.word	0xa3200008
 8012614:	004000e0 	.word	0x004000e0

08012618 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012618:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 801261a:	2300      	movs	r3, #0
 801261c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 801261e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8012622:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8012624:	9801      	ldr	r0, [sp, #4]
}
 8012626:	f3c0 4041 	ubfx	r0, r0, #17, #2
 801262a:	b002      	add	sp, #8
 801262c:	4770      	bx	lr

0801262e <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801262e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8012632:	6880      	ldr	r0, [r0, #8]
}
 8012634:	b280      	uxth	r0, r0
 8012636:	4770      	bx	lr

08012638 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8012638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 801263c:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8012640:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8012644:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8012648:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 801264a:	f04f 30ff 	mov.w	r0, #4294967295
 801264e:	60a0      	str	r0, [r4, #8]
 8012650:	fa4f f882 	sxtb.w	r8, r2
 8012654:	f505 6e80 	add.w	lr, r5, #1024	; 0x400
 8012658:	f001 0c0f 	and.w	ip, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801265c:	2e03      	cmp	r6, #3
 801265e:	d86c      	bhi.n	801273a <USB_HC_Init+0x102>
 8012660:	e8df f006 	tbb	[pc, r6]
 8012664:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012668:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801266c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012670:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8012672:	da03      	bge.n	801267c <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012674:	68e1      	ldr	r1, [r4, #12]
 8012676:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801267a:	e005      	b.n	8012688 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 801267c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801267e:	05c9      	lsls	r1, r1, #23
 8012680:	d542      	bpl.n	8012708 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8012682:	68e1      	ldr	r1, [r4, #12]
 8012684:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8012688:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801268a:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 801268c:	f8de 4018 	ldr.w	r4, [lr, #24]
 8012690:	2101      	movs	r1, #1
 8012692:	fa01 f10c 	lsl.w	r1, r1, ip
 8012696:	4321      	orrs	r1, r4
 8012698:	f8ce 1018 	str.w	r1, [lr, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801269c:	69a9      	ldr	r1, [r5, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 801269e:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80126a2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80126a6:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80126a8:	bfac      	ite	ge
 80126aa:	2400      	movge	r4, #0
 80126ac:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80126b0:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80126b4:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80126b8:	059b      	lsls	r3, r3, #22
 80126ba:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80126be:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80126c2:	02d2      	lsls	r2, r2, #11
 80126c4:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80126c8:	432b      	orrs	r3, r5
 80126ca:	4313      	orrs	r3, r2
 80126cc:	04b2      	lsls	r2, r6, #18
 80126ce:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80126d2:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80126d4:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80126d8:	bf14      	ite	ne
 80126da:	2100      	movne	r1, #0
 80126dc:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80126e0:	4323      	orrs	r3, r4
 80126e2:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 80126e4:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80126e6:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 80126ea:	d105      	bne.n	80126f8 <USB_HC_Init+0xc0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80126ec:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80126f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80126f4:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 80126f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80126fc:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8012700:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012704:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8012706:	dbb5      	blt.n	8012674 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8012708:	f8de 0018 	ldr.w	r0, [lr, #24]
 801270c:	2101      	movs	r1, #1
 801270e:	fa01 f10c 	lsl.w	r1, r1, ip
 8012712:	4301      	orrs	r1, r0
 8012714:	f8ce 1018 	str.w	r1, [lr, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8012718:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 801271a:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801271c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8012720:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8012722:	4604      	mov	r4, r0
 8012724:	e7c4      	b.n	80126b0 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012726:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 801272a:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801272e:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8012730:	daea      	bge.n	8012708 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8012732:	68e1      	ldr	r1, [r4, #12]
 8012734:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012738:	e7a6      	b.n	8012688 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 801273a:	2001      	movs	r0, #1
 801273c:	e7a6      	b.n	801268c <USB_HC_Init+0x54>

0801273e <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801273e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8012742:	6940      	ldr	r0, [r0, #20]
}
 8012744:	b280      	uxth	r0, r0
 8012746:	4770      	bx	lr

08012748 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012748:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 801274c:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8012750:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012754:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012758:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 801275c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012760:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012764:	d11e      	bne.n	80127a4 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012766:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012768:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801276c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012770:	d137      	bne.n	80127e2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012772:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012776:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801277a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 801277e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012782:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8012786:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 801278a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801278e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8012792:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8012796:	3b01      	subs	r3, #1
 8012798:	d002      	beq.n	80127a0 <USB_HC_Halt+0x58>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801279a:	6811      	ldr	r1, [r2, #0]
 801279c:	2900      	cmp	r1, #0
 801279e:	dbfa      	blt.n	8012796 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80127a0:	2000      	movs	r0, #0
 80127a2:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80127a4:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80127a8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80127ac:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80127b0:	d117      	bne.n	80127e2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80127b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127b6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80127ba:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80127be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80127c2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80127c6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80127ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80127ce:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80127d2:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 80127d6:	3b01      	subs	r3, #1
 80127d8:	d0e2      	beq.n	80127a0 <USB_HC_Halt+0x58>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80127da:	6811      	ldr	r1, [r2, #0]
 80127dc:	2900      	cmp	r1, #0
 80127de:	dbfa      	blt.n	80127d6 <USB_HC_Halt+0x8e>
 80127e0:	e7de      	b.n	80127a0 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80127e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80127e6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80127ea:	e7d9      	b.n	80127a0 <USB_HC_Halt+0x58>

080127ec <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80127ec:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80127f0:	4a06      	ldr	r2, [pc, #24]	; (801280c <USB_DoPing+0x20>)
 80127f2:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80127f6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80127fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80127fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8012802:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8012806:	2000      	movs	r0, #0
 8012808:	4770      	bx	lr
 801280a:	bf00      	nop
 801280c:	80080000 	.word	0x80080000

08012810 <USB_HC_StartXfer>:
{
 8012810:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8012814:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8012816:	05db      	lsls	r3, r3, #23
{
 8012818:	4616      	mov	r6, r2
 801281a:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801281c:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 801281e:	d517      	bpl.n	8012850 <USB_HC_StartXfer+0x40>
 8012820:	790d      	ldrb	r5, [r1, #4]
 8012822:	b9ad      	cbnz	r5, 8012850 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8012824:	b94e      	cbnz	r6, 801283a <USB_HC_StartXfer+0x2a>
 8012826:	794b      	ldrb	r3, [r1, #5]
 8012828:	2b01      	cmp	r3, #1
 801282a:	d111      	bne.n	8012850 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 801282c:	4611      	mov	r1, r2
 801282e:	f7ff ffdd 	bl	80127ec <USB_DoPing>
}
 8012832:	2000      	movs	r0, #0
 8012834:	b002      	add	sp, #8
 8012836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 801283a:	2e01      	cmp	r6, #1
 801283c:	d108      	bne.n	8012850 <USB_HC_StartXfer+0x40>
 801283e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8012842:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8012846:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801284a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 801284e:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8012850:	6908      	ldr	r0, [r1, #16]
 8012852:	2800      	cmp	r0, #0
 8012854:	d062      	beq.n	801291c <USB_HC_StartXfer+0x10c>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8012856:	890b      	ldrh	r3, [r1, #8]
 8012858:	3801      	subs	r0, #1
 801285a:	4418      	add	r0, r3
 801285c:	fbb0 f0f3 	udiv	r0, r0, r3
 8012860:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8012862:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8012866:	d903      	bls.n	8012870 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8012868:	021b      	lsls	r3, r3, #8
 801286a:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 801286c:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8012870:	78cf      	ldrb	r7, [r1, #3]
 8012872:	b117      	cbz	r7, 801287a <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8012874:	890b      	ldrh	r3, [r1, #8]
 8012876:	4343      	muls	r3, r0
 8012878:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801287a:	f891 c00a 	ldrb.w	ip, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801287e:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8012880:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8012884:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8012888:	f3c3 0812 	ubfx	r8, r3, #0, #19
 801288c:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012890:	ea4c 0c08 	orr.w	ip, ip, r8
 8012894:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8012898:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 801289c:	b116      	cbz	r6, 80128a4 <USB_HC_StartXfer+0x94>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801289e:	68c8      	ldr	r0, [r1, #12]
 80128a0:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80128a4:	f504 6c80 	add.w	ip, r4, #1024	; 0x400
 80128a8:	f8dc 0008 	ldr.w	r0, [ip, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80128ac:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 80128b0:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
 80128b4:	f8c5 e500 	str.w	lr, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80128b8:	43c0      	mvns	r0, r0
 80128ba:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 80128be:	0740      	lsls	r0, r0, #29
 80128c0:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 80128c4:	ea40 000e 	orr.w	r0, r0, lr
 80128c8:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80128cc:	4825      	ldr	r0, [pc, #148]	; (8012964 <USB_HC_StartXfer+0x154>)
 80128ce:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 80128d2:	f8c0 e000 	str.w	lr, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80128d6:	f8d0 e000 	ldr.w	lr, [r0]
 80128da:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
 80128de:	f8c0 e000 	str.w	lr, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80128e2:	f8d0 e000 	ldr.w	lr, [r0]
  if (hc->ep_is_in != 0U)
 80128e6:	b1df      	cbz	r7, 8012920 <USB_HC_StartXfer+0x110>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80128e8:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80128ec:	f8c0 e000 	str.w	lr, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80128f0:	f8d0 e000 	ldr.w	lr, [r0]
 80128f4:	f04e 4e00 	orr.w	lr, lr, #2147483648	; 0x80000000
 80128f8:	f8c0 e000 	str.w	lr, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80128fc:	6800      	ldr	r0, [r0, #0]
 80128fe:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 8012902:	2e00      	cmp	r6, #0
 8012904:	d195      	bne.n	8012832 <USB_HC_StartXfer+0x22>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8012906:	2f00      	cmp	r7, #0
 8012908:	d193      	bne.n	8012832 <USB_HC_StartXfer+0x22>
 801290a:	2b00      	cmp	r3, #0
 801290c:	d091      	beq.n	8012832 <USB_HC_StartXfer+0x22>
    switch (hc->ep_type)
 801290e:	79c8      	ldrb	r0, [r1, #7]
 8012910:	2803      	cmp	r0, #3
 8012912:	d813      	bhi.n	801293c <USB_HC_StartXfer+0x12c>
 8012914:	e8df f000 	tbb	[pc, r0]
 8012918:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 801291c:	2001      	movs	r0, #1
 801291e:	e7a7      	b.n	8012870 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8012920:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 8012924:	e7e2      	b.n	80128ec <USB_HC_StartXfer+0xdc>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8012926:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012928:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801292a:	b2ad      	uxth	r5, r5
 801292c:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8012930:	4285      	cmp	r5, r0
 8012932:	d203      	bcs.n	801293c <USB_HC_StartXfer+0x12c>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8012934:	69a0      	ldr	r0, [r4, #24]
 8012936:	f040 0020 	orr.w	r0, r0, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801293a:	61a0      	str	r0, [r4, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801293c:	2000      	movs	r0, #0
 801293e:	9000      	str	r0, [sp, #0]
 8012940:	b29b      	uxth	r3, r3
 8012942:	68c9      	ldr	r1, [r1, #12]
 8012944:	4620      	mov	r0, r4
 8012946:	f7ff fd73 	bl	8012430 <USB_WritePacket>
 801294a:	e772      	b.n	8012832 <USB_HC_StartXfer+0x22>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801294c:	f8dc 5010 	ldr.w	r5, [ip, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012950:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8012952:	b2ad      	uxth	r5, r5
 8012954:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8012958:	4285      	cmp	r5, r0
 801295a:	d2ef      	bcs.n	801293c <USB_HC_StartXfer+0x12c>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801295c:	69a0      	ldr	r0, [r4, #24]
 801295e:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8012962:	e7ea      	b.n	801293a <USB_HC_StartXfer+0x12a>
 8012964:	20000230 	.word	0x20000230

08012968 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012968:	6883      	ldr	r3, [r0, #8]
 801296a:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 801296e:	b510      	push	{r4, lr}
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8012970:	2110      	movs	r1, #16
{
 8012972:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012974:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8012976:	f7ff fd39 	bl	80123ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801297a:	4620      	mov	r0, r4
 801297c:	f7ff fd48 	bl	8012410 <USB_FlushRxFifo>
 8012980:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8012984:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8012988:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 801298a:	6811      	ldr	r1, [r2, #0]
 801298c:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012990:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8012994:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8012998:	4282      	cmp	r2, r0
 801299a:	d1f6      	bne.n	801298a <USB_StopHost+0x22>
  uint32_t count = 0U;
 801299c:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 801299e:	6819      	ldr	r1, [r3, #0]
 80129a0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80129a4:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80129a8:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 80129aa:	3001      	adds	r0, #1
 80129ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80129b0:	d802      	bhi.n	80129b8 <USB_StopHost+0x50>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80129b2:	6819      	ldr	r1, [r3, #0]
 80129b4:	2900      	cmp	r1, #0
 80129b6:	dbf8      	blt.n	80129aa <USB_StopHost+0x42>
 80129b8:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d1ef      	bne.n	801299e <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80129be:	f04f 33ff 	mov.w	r3, #4294967295
 80129c2:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80129c6:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80129c8:	68a3      	ldr	r3, [r4, #8]
 80129ca:	f043 0301 	orr.w	r3, r3, #1
 80129ce:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80129d0:	2000      	movs	r0, #0
 80129d2:	bd10      	pop	{r4, pc}

080129d4 <MX_FATFS_Init>:
    return FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80129d4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80129d6:	4906      	ldr	r1, [pc, #24]	; (80129f0 <MX_FATFS_Init+0x1c>)
 80129d8:	4806      	ldr	r0, [pc, #24]	; (80129f4 <MX_FATFS_Init+0x20>)
 80129da:	f003 fa1f 	bl	8015e1c <FATFS_LinkDriver>
 80129de:	4b06      	ldr	r3, [pc, #24]	; (80129f8 <MX_FATFS_Init+0x24>)
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80129e0:	4906      	ldr	r1, [pc, #24]	; (80129fc <MX_FATFS_Init+0x28>)
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80129e2:	7018      	strb	r0, [r3, #0]
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80129e4:	4806      	ldr	r0, [pc, #24]	; (8012a00 <MX_FATFS_Init+0x2c>)
 80129e6:	f003 fa19 	bl	8015e1c <FATFS_LinkDriver>
 80129ea:	4b06      	ldr	r3, [pc, #24]	; (8012a04 <MX_FATFS_Init+0x30>)
 80129ec:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80129ee:	bd08      	pop	{r3, pc}
 80129f0:	20001725 	.word	0x20001725
 80129f4:	080182a8 	.word	0x080182a8
 80129f8:	20001720 	.word	0x20001720
 80129fc:	20001721 	.word	0x20001721
 8012a00:	080182bc 	.word	0x080182bc
 8012a04:	200057fc 	.word	0x200057fc

08012a08 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8012a08:	2000      	movs	r0, #0
 8012a0a:	4770      	bx	lr

08012a0c <MX_FATFS_DeInit>:

/* USER CODE BEGIN Application */
void MX_FATFS_DeInit(void)
{
 8012a0c:	b508      	push	{r3, lr}
	FATFS_UnLinkDriver(SDPath);
 8012a0e:	4805      	ldr	r0, [pc, #20]	; (8012a24 <MX_FATFS_DeInit+0x18>)
 8012a10:	f003 fa20 	bl	8015e54 <FATFS_UnLinkDriver>
	FATFS_UnLinkDriver(USBHPath);
 8012a14:	4804      	ldr	r0, [pc, #16]	; (8012a28 <MX_FATFS_DeInit+0x1c>)
 8012a16:	f003 fa1d 	bl	8015e54 <FATFS_UnLinkDriver>
	BSP_SD_DeInit();
}
 8012a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BSP_SD_DeInit();
 8012a1e:	f000 b85b 	b.w	8012ad8 <BSP_SD_DeInit>
 8012a22:	bf00      	nop
 8012a24:	20001725 	.word	0x20001725
 8012a28:	20001721 	.word	0x20001721

08012a2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012a2c:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012a2e:	4613      	mov	r3, r2
 8012a30:	460a      	mov	r2, r1
 8012a32:	4601      	mov	r1, r0
 8012a34:	4803      	ldr	r0, [pc, #12]	; (8012a44 <BSP_SD_ReadBlocks_DMA+0x18>)
 8012a36:	f7fd fe9b 	bl	8010770 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8012a3a:	3000      	adds	r0, #0
 8012a3c:	bf18      	it	ne
 8012a3e:	2001      	movne	r0, #1
 8012a40:	bd08      	pop	{r3, pc}
 8012a42:	bf00      	nop
 8012a44:	20001570 	.word	0x20001570

08012a48 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012a48:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	460a      	mov	r2, r1
 8012a4e:	4601      	mov	r1, r0
 8012a50:	4803      	ldr	r0, [pc, #12]	; (8012a60 <BSP_SD_WriteBlocks_DMA+0x18>)
 8012a52:	f7fd ff23 	bl	801089c <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8012a56:	3000      	adds	r0, #0
 8012a58:	bf18      	it	ne
 8012a5a:	2001      	movne	r0, #1
 8012a5c:	bd08      	pop	{r3, pc}
 8012a5e:	bf00      	nop
 8012a60:	20001570 	.word	0x20001570

08012a64 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012a64:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012a66:	4803      	ldr	r0, [pc, #12]	; (8012a74 <BSP_SD_GetCardState+0x10>)
 8012a68:	f7fe f9a9 	bl	8010dbe <HAL_SD_GetCardState>
}
 8012a6c:	3804      	subs	r0, #4
 8012a6e:	bf18      	it	ne
 8012a70:	2001      	movne	r0, #1
 8012a72:	bd08      	pop	{r3, pc}
 8012a74:	20001570 	.word	0x20001570

08012a78 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012a78:	4601      	mov	r1, r0
 8012a7a:	4801      	ldr	r0, [pc, #4]	; (8012a80 <BSP_SD_GetCardInfo+0x8>)
 8012a7c:	f7fe b98d 	b.w	8010d9a <HAL_SD_GetCardInfo>
 8012a80:	20001570 	.word	0x20001570

08012a84 <BSP_SD_AbortCallback>:
 8012a84:	4770      	bx	lr

08012a86 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012a86:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8012a88:	f7ff fffc 	bl	8012a84 <BSP_SD_AbortCallback>
}
 8012a8c:	bd08      	pop	{r3, pc}

08012a8e <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012a8e:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8012a90:	f000 f920 	bl	8012cd4 <BSP_SD_WriteCpltCallback>
}
 8012a94:	bd08      	pop	{r3, pc}

08012a96 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012a96:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8012a98:	f000 f922 	bl	8012ce0 <BSP_SD_ReadCpltCallback>
}
 8012a9c:	bd08      	pop	{r3, pc}

08012a9e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012a9e:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012aa6:	f000 f843 	bl	8012b30 <BSP_PlatformIsDetected>
 8012aaa:	b908      	cbnz	r0, 8012ab0 <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8012aac:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8012ab0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8012ab4:	b003      	add	sp, #12
 8012ab6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012abc <BSP_SD_Init>:
{
 8012abc:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012abe:	f7ff ffee 	bl	8012a9e <BSP_SD_IsDetected>
 8012ac2:	2801      	cmp	r0, #1
 8012ac4:	d104      	bne.n	8012ad0 <BSP_SD_Init+0x14>
  sd_state = HAL_SD_Init(&hsd);
 8012ac6:	4803      	ldr	r0, [pc, #12]	; (8012ad4 <BSP_SD_Init+0x18>)
}
 8012ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sd_state = HAL_SD_Init(&hsd);
 8012acc:	f7fe b94a 	b.w	8010d64 <HAL_SD_Init>
}
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	bd08      	pop	{r3, pc}
 8012ad4:	20001570 	.word	0x20001570

08012ad8 <BSP_SD_DeInit>:

/* USER CODE BEGIN AdditionalCode */
/* user code can be inserted here */
uint8_t BSP_SD_DeInit(void)
{
 8012ad8:	b510      	push	{r4, lr}
    /* HAL SD de-initialization */
    HAL_SD_DeInit(&hsd);
 8012ada:	4c13      	ldr	r4, [pc, #76]	; (8012b28 <BSP_SD_DeInit+0x50>)
 8012adc:	4620      	mov	r0, r4
 8012ade:	f7fd fe33 	bl	8010748 <HAL_SD_DeInit>

    /* Msp SD de-initialization */
    HAL_SD_MspDeInit(&hsd);
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	f7fb faba 	bl	800e05c <HAL_SD_MspDeInit>

    /* SDMMC Reset */
    __HAL_RCC_SDIO_FORCE_RESET();
 8012ae8:	4b10      	ldr	r3, [pc, #64]	; (8012b2c <BSP_SD_DeInit+0x54>)
 8012aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012af0:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_SDIO_RELEASE_RESET();
 8012af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24

    /* Misc */
    hsd.State               = HAL_SD_STATE_RESET;
 8012af4:	2000      	movs	r0, #0
    __HAL_RCC_SDIO_RELEASE_RESET();
 8012af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012afa:	625a      	str	r2, [r3, #36]	; 0x24
    hsd.State               = HAL_SD_STATE_RESET;
 8012afc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd.Context             = 0;
    hsd.ErrorCode           = 0;
    hsd.SdCard.CardType     = 0;
    hsd.SdCard.CardVersion  = 0;
 8012b00:	e9c4 0011 	strd	r0, r0, [r4, #68]	; 0x44
    hsd.Context             = 0;
 8012b04:	6320      	str	r0, [r4, #48]	; 0x30
    hsd.SdCard.Class        = 0;
    hsd.SdCard.RelCardAdd   = 0;
 8012b06:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
    hsd.ErrorCode           = 0;
 8012b0a:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd.SdCard.BlockNbr     = 0;
    hsd.SdCard.BlockSize    = 0;
 8012b0c:	e9c4 0015 	strd	r0, r0, [r4, #84]	; 0x54
    hsd.SdCard.LogBlockNbr  = 0;
    hsd.SdCard.LogBlockSize = 0;
 8012b10:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
    hsd.CSD[0]              = 0;
    hsd.CSD[1]              = 0;
 8012b14:	e9c4 0019 	strd	r0, r0, [r4, #100]	; 0x64
    hsd.CSD[2]              = 0;
    hsd.CSD[3]              = 0;
 8012b18:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
    hsd.CID[0]              = 0;
    hsd.CID[1]              = 0;
 8012b1c:	e9c4 001d 	strd	r0, r0, [r4, #116]	; 0x74
    hsd.CID[2]              = 0;
    hsd.CID[3]              = 0;
 8012b20:	e9c4 001f 	strd	r0, r0, [r4, #124]	; 0x7c

    return MSD_OK;
}
 8012b24:	bd10      	pop	{r4, pc}
 8012b26:	bf00      	nop
 8012b28:	20001570 	.word	0x20001570
 8012b2c:	40023800 	.word	0x40023800

08012b30 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012b30:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012b32:	2102      	movs	r1, #2
 8012b34:	4803      	ldr	r0, [pc, #12]	; (8012b44 <BSP_PlatformIsDetected+0x14>)
 8012b36:	f7fc fc8f 	bl	800f458 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8012b3a:	fab0 f080 	clz	r0, r0
 8012b3e:	0940      	lsrs	r0, r0, #5
 8012b40:	bd08      	pop	{r3, pc}
 8012b42:	bf00      	nop
 8012b44:	40020c00 	.word	0x40020c00

08012b48 <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 8012b48:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8012b4a:	4c06      	ldr	r4, [pc, #24]	; (8012b64 <SD_CheckStatus.isra.0+0x1c>)
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012b50:	f7ff ff88 	bl	8012a64 <BSP_SD_GetCardState>
 8012b54:	4623      	mov	r3, r4
 8012b56:	b918      	cbnz	r0, 8012b60 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8012b58:	7822      	ldrb	r2, [r4, #0]
 8012b5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012b5e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8012b60:	7818      	ldrb	r0, [r3, #0]
}
 8012b62:	bd10      	pop	{r4, pc}
 8012b64:	20000018 	.word	0x20000018

08012b68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012b68:	b510      	push	{r4, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012b6a:	f7ff ffa7 	bl	8012abc <BSP_SD_Init>
 8012b6e:	4c03      	ldr	r4, [pc, #12]	; (8012b7c <SD_initialize+0x14>)
 8012b70:	b910      	cbnz	r0, 8012b78 <SD_initialize+0x10>
  {
    Stat = SD_CheckStatus(lun);
 8012b72:	f7ff ffe9 	bl	8012b48 <SD_CheckStatus.isra.0>
 8012b76:	7020      	strb	r0, [r4, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012b78:	7820      	ldrb	r0, [r4, #0]
}
 8012b7a:	bd10      	pop	{r4, pc}
 8012b7c:	20000018 	.word	0x20000018

08012b80 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8012b80:	f7ff bfe2 	b.w	8012b48 <SD_CheckStatus.isra.0>

08012b84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012b84:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012b86:	4b12      	ldr	r3, [pc, #72]	; (8012bd0 <SD_ioctl+0x4c>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	07db      	lsls	r3, r3, #31
{
 8012b8c:	b088      	sub	sp, #32
 8012b8e:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012b90:	d41b      	bmi.n	8012bca <SD_ioctl+0x46>

  switch (cmd)
 8012b92:	2903      	cmp	r1, #3
 8012b94:	d803      	bhi.n	8012b9e <SD_ioctl+0x1a>
 8012b96:	e8df f001 	tbb	[pc, r1]
 8012b9a:	0510      	.short	0x0510
 8012b9c:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8012b9e:	2004      	movs	r0, #4
  }

  return res;
}
 8012ba0:	b008      	add	sp, #32
 8012ba2:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8012ba4:	4668      	mov	r0, sp
 8012ba6:	f7ff ff67 	bl	8012a78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012baa:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012bac:	6023      	str	r3, [r4, #0]
 8012bae:	e004      	b.n	8012bba <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8012bb0:	4668      	mov	r0, sp
 8012bb2:	f7ff ff61 	bl	8012a78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012bb6:	9b07      	ldr	r3, [sp, #28]
 8012bb8:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8012bba:	2000      	movs	r0, #0
 8012bbc:	e7f0      	b.n	8012ba0 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8012bbe:	4668      	mov	r0, sp
 8012bc0:	f7ff ff5a 	bl	8012a78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012bc4:	9b07      	ldr	r3, [sp, #28]
 8012bc6:	0a5b      	lsrs	r3, r3, #9
 8012bc8:	e7f0      	b.n	8012bac <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012bca:	2003      	movs	r0, #3
 8012bcc:	e7e8      	b.n	8012ba0 <SD_ioctl+0x1c>
 8012bce:	bf00      	nop
 8012bd0:	20000018 	.word	0x20000018

08012bd4 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8012bd4:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = HAL_GetTick();
 8012bd6:	f7fb fec3 	bl	800e960 <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 8012bda:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = HAL_GetTick();
 8012bde:	4605      	mov	r5, r0
  while(HAL_GetTick() - timer < timeout)
 8012be0:	f7fb febe 	bl	800e960 <HAL_GetTick>
 8012be4:	1b40      	subs	r0, r0, r5
 8012be6:	42a0      	cmp	r0, r4
 8012be8:	d902      	bls.n	8012bf0 <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 8012bea:	f04f 30ff 	mov.w	r0, #4294967295
 8012bee:	e003      	b.n	8012bf8 <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012bf0:	f7ff ff38 	bl	8012a64 <BSP_SD_GetCardState>
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	d1f3      	bne.n	8012be0 <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 8012bf8:	bd38      	pop	{r3, r4, r5, pc}
	...

08012bfc <SD_write>:
{
 8012bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   WriteStatus = 0;
 8012bfe:	4c19      	ldr	r4, [pc, #100]	; (8012c64 <SD_write+0x68>)
{
 8012c00:	461f      	mov	r7, r3
   WriteStatus = 0;
 8012c02:	2300      	movs	r3, #0
{
 8012c04:	460d      	mov	r5, r1
 8012c06:	4616      	mov	r6, r2
   WriteStatus = 0;
 8012c08:	6023      	str	r3, [r4, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012c0a:	f7ff ffe3 	bl	8012bd4 <SD_CheckStatusWithTimeout.constprop.4>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	da01      	bge.n	8012c16 <SD_write+0x1a>
    return res;
 8012c12:	2001      	movs	r0, #1
}
 8012c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012c16:	463a      	mov	r2, r7
 8012c18:	4631      	mov	r1, r6
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	f7ff ff14 	bl	8012a48 <BSP_SD_WriteBlocks_DMA>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	d1f6      	bne.n	8012c12 <SD_write+0x16>
      timeout = HAL_GetTick();
 8012c24:	f7fb fe9c 	bl	800e960 <HAL_GetTick>
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012c28:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8012c2c:	4606      	mov	r6, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012c2e:	6823      	ldr	r3, [r4, #0]
 8012c30:	b923      	cbnz	r3, 8012c3c <SD_write+0x40>
 8012c32:	f7fb fe95 	bl	800e960 <HAL_GetTick>
 8012c36:	1b80      	subs	r0, r0, r6
 8012c38:	42a8      	cmp	r0, r5
 8012c3a:	d9f8      	bls.n	8012c2e <SD_write+0x32>
      if (WriteStatus == 0)
 8012c3c:	6823      	ldr	r3, [r4, #0]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d0e7      	beq.n	8012c12 <SD_write+0x16>
        WriteStatus = 0;
 8012c42:	2300      	movs	r3, #0
 8012c44:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8012c46:	f7fb fe8b 	bl	800e960 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012c4a:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8012c4e:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012c50:	f7fb fe86 	bl	800e960 <HAL_GetTick>
 8012c54:	1b40      	subs	r0, r0, r5
 8012c56:	42a0      	cmp	r0, r4
 8012c58:	d8db      	bhi.n	8012c12 <SD_write+0x16>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012c5a:	f7ff ff03 	bl	8012a64 <BSP_SD_GetCardState>
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	d1f6      	bne.n	8012c50 <SD_write+0x54>
 8012c62:	e7d7      	b.n	8012c14 <SD_write+0x18>
 8012c64:	20000238 	.word	0x20000238

08012c68 <SD_read>:
{
 8012c68:	b570      	push	{r4, r5, r6, lr}
 8012c6a:	460c      	mov	r4, r1
 8012c6c:	4615      	mov	r5, r2
 8012c6e:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012c70:	f7ff ffb0 	bl	8012bd4 <SD_CheckStatusWithTimeout.constprop.4>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	da01      	bge.n	8012c7c <SD_read+0x14>
    return res;
 8012c78:	2001      	movs	r0, #1
}
 8012c7a:	bd70      	pop	{r4, r5, r6, pc}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8012c7c:	4632      	mov	r2, r6
 8012c7e:	4629      	mov	r1, r5
 8012c80:	4620      	mov	r0, r4
 8012c82:	f7ff fed3 	bl	8012a2c <BSP_SD_ReadBlocks_DMA>
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d1f6      	bne.n	8012c78 <SD_read+0x10>
      ReadStatus = 0;
 8012c8a:	4c11      	ldr	r4, [pc, #68]	; (8012cd0 <SD_read+0x68>)
 8012c8c:	6020      	str	r0, [r4, #0]
      timeout = HAL_GetTick();
 8012c8e:	f7fb fe67 	bl	800e960 <HAL_GetTick>
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012c92:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8012c96:	4606      	mov	r6, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	b923      	cbnz	r3, 8012ca6 <SD_read+0x3e>
 8012c9c:	f7fb fe60 	bl	800e960 <HAL_GetTick>
 8012ca0:	1b80      	subs	r0, r0, r6
 8012ca2:	42a8      	cmp	r0, r5
 8012ca4:	d9f8      	bls.n	8012c98 <SD_read+0x30>
      if (ReadStatus == 0)
 8012ca6:	6823      	ldr	r3, [r4, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d0e5      	beq.n	8012c78 <SD_read+0x10>
        ReadStatus = 0;
 8012cac:	2300      	movs	r3, #0
 8012cae:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8012cb0:	f7fb fe56 	bl	800e960 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012cb4:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8012cb8:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012cba:	f7fb fe51 	bl	800e960 <HAL_GetTick>
 8012cbe:	1b40      	subs	r0, r0, r5
 8012cc0:	42a0      	cmp	r0, r4
 8012cc2:	d8d9      	bhi.n	8012c78 <SD_read+0x10>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012cc4:	f7ff fece 	bl	8012a64 <BSP_SD_GetCardState>
 8012cc8:	2800      	cmp	r0, #0
 8012cca:	d1f6      	bne.n	8012cba <SD_read+0x52>
 8012ccc:	e7d5      	b.n	8012c7a <SD_read+0x12>
 8012cce:	bf00      	nop
 8012cd0:	20000234 	.word	0x20000234

08012cd4 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 8012cd4:	4b01      	ldr	r3, [pc, #4]	; (8012cdc <BSP_SD_WriteCpltCallback+0x8>)
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	601a      	str	r2, [r3, #0]
}
 8012cda:	4770      	bx	lr
 8012cdc:	20000238 	.word	0x20000238

08012ce0 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8012ce0:	4b01      	ldr	r3, [pc, #4]	; (8012ce8 <BSP_SD_ReadCpltCallback+0x8>)
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	601a      	str	r2, [r3, #0]
}
 8012ce6:	4770      	bx	lr
 8012ce8:	20000234 	.word	0x20000234

08012cec <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 8012cec:	2000      	movs	r0, #0
 8012cee:	4770      	bx	lr

08012cf0 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8012cf0:	4601      	mov	r1, r0
{
 8012cf2:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8012cf4:	4803      	ldr	r0, [pc, #12]	; (8012d04 <USBH_status+0x14>)
 8012cf6:	f000 fae8 	bl	80132ca <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 8012cfa:	fab0 f080 	clz	r0, r0
 8012cfe:	0940      	lsrs	r0, r0, #5
 8012d00:	bd08      	pop	{r3, pc}
 8012d02:	bf00      	nop
 8012d04:	20005800 	.word	0x20005800

08012d08 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d0c:	4690      	mov	r8, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8012d0e:	078a      	lsls	r2, r1, #30
{
 8012d10:	b090      	sub	sp, #64	; 0x40
 8012d12:	4607      	mov	r7, r0
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8012d14:	d034      	beq.n	8012d80 <USBH_read+0x78>
 8012d16:	4e20      	ldr	r6, [pc, #128]	; (8012d98 <USBH_read+0x90>)
 8012d18:	f8d6 23d0 	ldr.w	r2, [r6, #976]	; 0x3d0
 8012d1c:	6912      	ldr	r2, [r2, #16]
 8012d1e:	b37a      	cbz	r2, 8012d80 <USBH_read+0x78>
  {
    while ((count--)&&(status == USBH_OK))
    {
      status = USBH_MSC_Read(&hUSB_Host, lun, sector + count, (uint8_t *)scratch, 1);
 8012d20:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8012d9c <USBH_read+0x94>
 8012d24:	1e5d      	subs	r5, r3, #1
 8012d26:	eb01 3403 	add.w	r4, r1, r3, lsl #12
 8012d2a:	f04f 0a01 	mov.w	sl, #1
    while ((count--)&&(status == USBH_OK))
 8012d2e:	1c6b      	adds	r3, r5, #1
 8012d30:	d101      	bne.n	8012d36 <USBH_read+0x2e>
    status = USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count);
  }

  if(status == USBH_OK)
  {
    res = RES_OK;
 8012d32:	2000      	movs	r0, #0
 8012d34:	e01a      	b.n	8012d6c <USBH_read+0x64>
      status = USBH_MSC_Read(&hUSB_Host, lun, sector + count, (uint8_t *)scratch, 1);
 8012d36:	eb08 0205 	add.w	r2, r8, r5
 8012d3a:	f8cd a000 	str.w	sl, [sp]
 8012d3e:	464b      	mov	r3, r9
 8012d40:	4639      	mov	r1, r7
 8012d42:	4630      	mov	r0, r6
 8012d44:	f000 faea 	bl	801331c <USBH_MSC_Read>
 8012d48:	3d01      	subs	r5, #1
 8012d4a:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
      if(status == USBH_OK)
 8012d4e:	b180      	cbz	r0, 8012d72 <USBH_read+0x6a>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8012d50:	aa03      	add	r2, sp, #12
 8012d52:	4639      	mov	r1, r7
 8012d54:	4810      	ldr	r0, [pc, #64]	; (8012d98 <USBH_read+0x90>)
 8012d56:	f000 fac9 	bl	80132ec <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8012d5a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012d5e:	2b28      	cmp	r3, #40	; 0x28
 8012d60:	d018      	beq.n	8012d94 <USBH_read+0x8c>
 8012d62:	2b3a      	cmp	r3, #58	; 0x3a
 8012d64:	d016      	beq.n	8012d94 <USBH_read+0x8c>
 8012d66:	2b04      	cmp	r3, #4
 8012d68:	d014      	beq.n	8012d94 <USBH_read+0x8c>
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
      break;

    default:
      res = RES_ERROR;
 8012d6a:	2001      	movs	r0, #1
      break;
    }
  }

  return res;
}
 8012d6c:	b010      	add	sp, #64	; 0x40
 8012d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 8012d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012d76:	4649      	mov	r1, r9
 8012d78:	4620      	mov	r0, r4
 8012d7a:	f003 fa87 	bl	801628c <memcpy>
 8012d7e:	e7d6      	b.n	8012d2e <USBH_read+0x26>
    status = USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count);
 8012d80:	9300      	str	r3, [sp, #0]
 8012d82:	4642      	mov	r2, r8
 8012d84:	460b      	mov	r3, r1
 8012d86:	4804      	ldr	r0, [pc, #16]	; (8012d98 <USBH_read+0x90>)
 8012d88:	4639      	mov	r1, r7
 8012d8a:	f000 fac7 	bl	801331c <USBH_MSC_Read>
  if(status == USBH_OK)
 8012d8e:	2800      	cmp	r0, #0
 8012d90:	d0cf      	beq.n	8012d32 <USBH_read+0x2a>
 8012d92:	e7dd      	b.n	8012d50 <USBH_read+0x48>
      res = RES_NOTRDY;
 8012d94:	2003      	movs	r0, #3
 8012d96:	e7e9      	b.n	8012d6c <USBH_read+0x64>
 8012d98:	20005800 	.word	0x20005800
 8012d9c:	2000023c 	.word	0x2000023c

08012da0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012da0:	b510      	push	{r4, lr}
 8012da2:	4614      	mov	r4, r2
 8012da4:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 8012da6:	2903      	cmp	r1, #3
 8012da8:	d803      	bhi.n	8012db2 <USBH_ioctl+0x12>
 8012daa:	e8df f001 	tbb	[pc, r1]
 8012dae:	0525      	.short	0x0525
 8012db0:	1a10      	.short	0x1a10
      res = RES_ERROR;
    }
    break;

  default:
    res = RES_PARERR;
 8012db2:	2004      	movs	r0, #4
  }

  return res;
}
 8012db4:	b00e      	add	sp, #56	; 0x38
 8012db6:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8012db8:	4601      	mov	r1, r0
 8012dba:	aa01      	add	r2, sp, #4
 8012dbc:	480f      	ldr	r0, [pc, #60]	; (8012dfc <USBH_ioctl+0x5c>)
 8012dbe:	f000 fa95 	bl	80132ec <USBH_MSC_GetLUNInfo>
 8012dc2:	b108      	cbz	r0, 8012dc8 <USBH_ioctl+0x28>
      res = RES_ERROR;
 8012dc4:	2001      	movs	r0, #1
 8012dc6:	e7f5      	b.n	8012db4 <USBH_ioctl+0x14>
      *(DWORD*)buff = info.capacity.block_nbr;
 8012dc8:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 8012dca:	6023      	str	r3, [r4, #0]
 8012dcc:	e7f2      	b.n	8012db4 <USBH_ioctl+0x14>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8012dce:	4601      	mov	r1, r0
 8012dd0:	aa01      	add	r2, sp, #4
 8012dd2:	480a      	ldr	r0, [pc, #40]	; (8012dfc <USBH_ioctl+0x5c>)
 8012dd4:	f000 fa8a 	bl	80132ec <USBH_MSC_GetLUNInfo>
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	d1f3      	bne.n	8012dc4 <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_size;
 8012ddc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012de0:	e7f3      	b.n	8012dca <USBH_ioctl+0x2a>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8012de2:	4601      	mov	r1, r0
 8012de4:	aa01      	add	r2, sp, #4
 8012de6:	4805      	ldr	r0, [pc, #20]	; (8012dfc <USBH_ioctl+0x5c>)
 8012de8:	f000 fa80 	bl	80132ec <USBH_MSC_GetLUNInfo>
 8012dec:	2800      	cmp	r0, #0
 8012dee:	d1e9      	bne.n	8012dc4 <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8012df0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012df4:	0a5b      	lsrs	r3, r3, #9
 8012df6:	e7e8      	b.n	8012dca <USBH_ioctl+0x2a>
    res = RES_OK;
 8012df8:	2000      	movs	r0, #0
 8012dfa:	e7db      	b.n	8012db4 <USBH_ioctl+0x14>
 8012dfc:	20005800 	.word	0x20005800

08012e00 <USBH_write>:
{
 8012e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e04:	4617      	mov	r7, r2
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8012e06:	078a      	lsls	r2, r1, #30
{
 8012e08:	b091      	sub	sp, #68	; 0x44
 8012e0a:	4606      	mov	r6, r0
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8012e0c:	d004      	beq.n	8012e18 <USBH_write+0x18>
 8012e0e:	4a22      	ldr	r2, [pc, #136]	; (8012e98 <USBH_write+0x98>)
 8012e10:	f8d2 03d0 	ldr.w	r0, [r2, #976]	; 0x3d0
 8012e14:	6900      	ldr	r0, [r0, #16]
 8012e16:	bb78      	cbnz	r0, 8012e78 <USBH_write+0x78>
    status = USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count);
 8012e18:	9300      	str	r3, [sp, #0]
 8012e1a:	463a      	mov	r2, r7
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	481e      	ldr	r0, [pc, #120]	; (8012e98 <USBH_write+0x98>)
 8012e20:	4631      	mov	r1, r6
 8012e22:	f000 fabe 	bl	80133a2 <USBH_MSC_Write>
 8012e26:	e030      	b.n	8012e8a <USBH_write+0x8a>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8012e28:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
 8012e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012e30:	4621      	mov	r1, r4
 8012e32:	4640      	mov	r0, r8
 8012e34:	f003 fa2a 	bl	801628c <memcpy>
      status = USBH_MSC_Write(&hUSB_Host, lun, sector + count, (BYTE *)scratch, 1) ;
 8012e38:	2301      	movs	r3, #1
 8012e3a:	9300      	str	r3, [sp, #0]
 8012e3c:	197a      	adds	r2, r7, r5
 8012e3e:	4643      	mov	r3, r8
 8012e40:	4631      	mov	r1, r6
 8012e42:	4648      	mov	r0, r9
 8012e44:	f000 faad 	bl	80133a2 <USBH_MSC_Write>
      if(status == USBH_FAIL)
 8012e48:	2802      	cmp	r0, #2
 8012e4a:	f105 35ff 	add.w	r5, r5, #4294967295
 8012e4e:	d11a      	bne.n	8012e86 <USBH_write+0x86>
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8012e50:	aa03      	add	r2, sp, #12
 8012e52:	4631      	mov	r1, r6
 8012e54:	4810      	ldr	r0, [pc, #64]	; (8012e98 <USBH_write+0x98>)
 8012e56:	f000 fa49 	bl	80132ec <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8012e5a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012e5e:	2b27      	cmp	r3, #39	; 0x27
 8012e60:	d018      	beq.n	8012e94 <USBH_write+0x94>
 8012e62:	d805      	bhi.n	8012e70 <USBH_write+0x70>
 8012e64:	2b04      	cmp	r3, #4
 8012e66:	d113      	bne.n	8012e90 <USBH_write+0x90>
      res = RES_NOTRDY;
 8012e68:	2003      	movs	r0, #3
}
 8012e6a:	b011      	add	sp, #68	; 0x44
 8012e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (info.sense.asc)
 8012e70:	2b28      	cmp	r3, #40	; 0x28
 8012e72:	d0f9      	beq.n	8012e68 <USBH_write+0x68>
 8012e74:	2b3a      	cmp	r3, #58	; 0x3a
 8012e76:	e7f6      	b.n	8012e66 <USBH_write+0x66>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8012e78:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8012e9c <USBH_write+0x9c>
 8012e7c:	1e5d      	subs	r5, r3, #1
 8012e7e:	eb01 3403 	add.w	r4, r1, r3, lsl #12
  USBH_StatusTypeDef  status = USBH_OK;
 8012e82:	2000      	movs	r0, #0
      status = USBH_MSC_Write(&hUSB_Host, lun, sector + count, (BYTE *)scratch, 1) ;
 8012e84:	4691      	mov	r9, r2
    while (count--)
 8012e86:	1c6b      	adds	r3, r5, #1
 8012e88:	d1ce      	bne.n	8012e28 <USBH_write+0x28>
  if(status == USBH_OK)
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	d0ed      	beq.n	8012e6a <USBH_write+0x6a>
 8012e8e:	e7df      	b.n	8012e50 <USBH_write+0x50>
      res = RES_ERROR;
 8012e90:	2001      	movs	r0, #1
 8012e92:	e7ea      	b.n	8012e6a <USBH_write+0x6a>
      res = RES_WRPRT;
 8012e94:	2002      	movs	r0, #2
 8012e96:	e7e8      	b.n	8012e6a <USBH_write+0x6a>
 8012e98:	20005800 	.word	0x20005800
 8012e9c:	2000023c 	.word	0x2000023c

08012ea0 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8012ea0:	2000      	movs	r0, #0
 8012ea2:	4770      	bx	lr

08012ea4 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8012ea4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8012ea8:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8012eaa:	69dd      	ldr	r5, [r3, #28]
  switch (MSC_Handle->state)
 8012eac:	7b2b      	ldrb	r3, [r5, #12]
{
 8012eae:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 8012eb0:	b123      	cbz	r3, 8012ebc <USBH_MSC_Process+0x18>
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	f000 80e6 	beq.w	8013084 <USBH_MSC_Process+0x1e0>
  USBH_StatusTypeDef error = USBH_BUSY;
 8012eb8:	2001      	movs	r0, #1
            break;
 8012eba:	e075      	b.n	8012fa8 <USBH_MSC_Process+0x104>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8012ebc:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8012ec0:	782a      	ldrb	r2, [r5, #0]
 8012ec2:	428a      	cmp	r2, r1
 8012ec4:	f04f 0401 	mov.w	r4, #1
 8012ec8:	f240 80d4 	bls.w	8013074 <USBH_MSC_Process+0x1d0>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8012ecc:	2234      	movs	r2, #52	; 0x34
 8012ece:	fb02 5301 	mla	r3, r2, r1, r5
 8012ed2:	f883 4091 	strb.w	r4, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8012ed6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8012eda:	4614      	mov	r4, r2
 8012edc:	2b08      	cmp	r3, #8
 8012ede:	d8eb      	bhi.n	8012eb8 <USBH_MSC_Process+0x14>
 8012ee0:	a201      	add	r2, pc, #4	; (adr r2, 8012ee8 <USBH_MSC_Process+0x44>)
 8012ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ee6:	bf00      	nop
 8012ee8:	08012f0d 	.word	0x08012f0d
 8012eec:	08012eb9 	.word	0x08012eb9
 8012ef0:	08012f41 	.word	0x08012f41
 8012ef4:	08012fc7 	.word	0x08012fc7
 8012ef8:	08012f21 	.word	0x08012f21
 8012efc:	0801300f 	.word	0x0801300f
 8012f00:	08012eb9 	.word	0x08012eb9
 8012f04:	08012eb9 	.word	0x08012eb9
 8012f08:	0801306d 	.word	0x0801306d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8012f0c:	fb04 5101 	mla	r1, r4, r1, r5
 8012f10:	2304      	movs	r3, #4
 8012f12:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 8012f16:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8012f1a:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
 8012f1e:	e7cb      	b.n	8012eb8 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8012f20:	fb04 5201 	mla	r2, r4, r1, r5
 8012f24:	329f      	adds	r2, #159	; 0x9f
 8012f26:	b2c9      	uxtb	r1, r1
 8012f28:	f000 fbea 	bl	8013700 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	d15e      	bne.n	8012fee <USBH_MSC_Process+0x14a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8012f30:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8012f34:	2302      	movs	r3, #2
 8012f36:	fb04 5501 	mla	r5, r4, r1, r5
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8012f3a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 8012f3e:	e7bb      	b.n	8012eb8 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8012f40:	b2c9      	uxtb	r1, r1
 8012f42:	f000 fb83 	bl	801364c <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 8012f46:	b9a8      	cbnz	r0, 8012f74 <USBH_MSC_Process+0xd0>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8012f48:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8012f4c:	2234      	movs	r2, #52	; 0x34
 8012f4e:	fb02 5103 	mla	r1, r2, r3, r5
 8012f52:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8012f56:	b100      	cbz	r0, 8012f5a <USBH_MSC_Process+0xb6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8012f58:	2001      	movs	r0, #1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8012f5a:	fb02 5503 	mla	r5, r2, r3, r5
 8012f5e:	2303      	movs	r3, #3
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8012f60:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8012f64:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8012f6e:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 8012f72:	e7a1      	b.n	8012eb8 <USBH_MSC_Process+0x14>
            if (ready_status == USBH_FAIL)
 8012f74:	2802      	cmp	r0, #2
 8012f76:	d118      	bne.n	8012faa <USBH_MSC_Process+0x106>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8012f78:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8012f7c:	2234      	movs	r2, #52	; 0x34
 8012f7e:	fb02 5103 	mla	r1, r2, r3, r5
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8012f82:	fb02 5503 	mla	r5, r2, r3, r5
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8012f86:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8012f8a:	2802      	cmp	r0, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8012f8c:	bf14      	ite	ne
 8012f8e:	2001      	movne	r0, #1
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8012f90:	2000      	moveq	r0, #0
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8012f92:	2305      	movs	r3, #5
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8012f94:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8012f98:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8012f9c:	2001      	movs	r0, #1
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8012f9e:	2302      	movs	r3, #2
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8012fa0:	f885 0091 	strb.w	r0, [r5, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8012fa4:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
}
 8012fa8:	bd70      	pop	{r4, r5, r6, pc}
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8012faa:	2804      	cmp	r0, #4
 8012fac:	d184      	bne.n	8012eb8 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012fae:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8012fb2:	2234      	movs	r2, #52	; 0x34
 8012fb4:	fb02 5503 	mla	r5, r2, r3, r5
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012fb8:	2001      	movs	r0, #1
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8012fba:	2302      	movs	r3, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012fbc:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8012fc0:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 8012fc4:	e7f0      	b.n	8012fa8 <USBH_MSC_Process+0x104>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8012fc6:	fb04 5201 	mla	r2, r4, r1, r5
 8012fca:	3294      	adds	r2, #148	; 0x94
 8012fcc:	b2c9      	uxtb	r1, r1
 8012fce:	f000 fb63 	bl	8013698 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 8012fd2:	b960      	cbnz	r0, 8012fee <USBH_MSC_Process+0x14a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8012fd4:	f8b5 20f8 	ldrh.w	r2, [r5, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012fd8:	2301      	movs	r3, #1
 8012fda:	fb04 5402 	mla	r4, r4, r2, r5
              MSC_Handle->current_lun++;
 8012fde:	441a      	add	r2, r3
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012fe0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8012fe4:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
              MSC_Handle->current_lun++;
 8012fe8:	f8a5 20f8 	strh.w	r2, [r5, #248]	; 0xf8
 8012fec:	e764      	b.n	8012eb8 <USBH_MSC_Process+0x14>
            else if (scsi_status == USBH_FAIL)
 8012fee:	2802      	cmp	r0, #2
 8012ff0:	d105      	bne.n	8012ffe <USBH_MSC_Process+0x15a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8012ff2:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8012ff6:	2305      	movs	r3, #5
 8012ff8:	fb04 5501 	mla	r5, r4, r1, r5
 8012ffc:	e79d      	b.n	8012f3a <USBH_MSC_Process+0x96>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8012ffe:	2804      	cmp	r0, #4
 8013000:	f47f af5a 	bne.w	8012eb8 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8013004:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8013008:	fb04 5501 	mla	r5, r4, r1, r5
 801300c:	e7d4      	b.n	8012fb8 <USBH_MSC_Process+0x114>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 801300e:	fb04 5201 	mla	r2, r4, r1, r5
 8013012:	329c      	adds	r2, #156	; 0x9c
 8013014:	b2c9      	uxtb	r1, r1
 8013016:	f000 fbdf 	bl	80137d8 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 801301a:	b9f8      	cbnz	r0, 801305c <USBH_MSC_Process+0x1b8>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 801301c:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8013020:	fb04 5403 	mla	r4, r4, r3, r5
 8013024:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 8013028:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 801302c:	2a02      	cmp	r2, #2
 801302e:	d10b      	bne.n	8013048 <USBH_MSC_Process+0x1a4>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8013030:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
 8013034:	f8d6 03c4 	ldr.w	r0, [r6, #964]	; 0x3c4
 8013038:	1a40      	subs	r0, r0, r1
 801303a:	f242 710f 	movw	r1, #9999	; 0x270f
 801303e:	4288      	cmp	r0, r1
 8013040:	d802      	bhi.n	8013048 <USBH_MSC_Process+0x1a4>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8013042:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 8013046:	e737      	b.n	8012eb8 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8013048:	2234      	movs	r2, #52	; 0x34
 801304a:	fb02 5203 	mla	r2, r2, r3, r5
 801304e:	2001      	movs	r0, #1
              MSC_Handle->current_lun++;
 8013050:	4403      	add	r3, r0
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8013052:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
 8013056:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 801305a:	e7a5      	b.n	8012fa8 <USBH_MSC_Process+0x104>
            if (scsi_status == USBH_FAIL)
 801305c:	2802      	cmp	r0, #2
 801305e:	d1ce      	bne.n	8012ffe <USBH_MSC_Process+0x15a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8013060:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8013064:	2308      	movs	r3, #8
 8013066:	fb04 5501 	mla	r5, r4, r1, r5
 801306a:	e766      	b.n	8012f3a <USBH_MSC_Process+0x96>
            MSC_Handle->current_lun++;
 801306c:	3101      	adds	r1, #1
 801306e:	f8a5 10f8 	strh.w	r1, [r5, #248]	; 0xf8
 8013072:	e721      	b.n	8012eb8 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
 8013074:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8013078:	732c      	strb	r4, [r5, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801307a:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 801307e:	2102      	movs	r1, #2
 8013080:	4798      	blx	r3
 8013082:	e719      	b.n	8012eb8 <USBH_MSC_Process+0x14>
      error = USBH_OK;
 8013084:	2000      	movs	r0, #0
 8013086:	e78f      	b.n	8012fa8 <USBH_MSC_Process+0x104>

08013088 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013088:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 801308c:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801308e:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8013090:	7ba3      	ldrb	r3, [r4, #14]
 8013092:	2b02      	cmp	r3, #2
{
 8013094:	4602      	mov	r2, r0
  switch (MSC_Handle->req_state)
 8013096:	d002      	beq.n	801309e <USBH_MSC_ClassRequest+0x16>
 8013098:	2b03      	cmp	r3, #3
 801309a:	d022      	beq.n	80130e2 <USBH_MSC_ClassRequest+0x5a>
 801309c:	bb3b      	cbnz	r3, 80130ee <USBH_MSC_ClassRequest+0x66>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 801309e:	4621      	mov	r1, r4
 80130a0:	4610      	mov	r0, r2
 80130a2:	f000 f9c9 	bl	8013438 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 80130a6:	2803      	cmp	r0, #3
 80130a8:	d118      	bne.n	80130dc <USBH_MSC_ClassRequest+0x54>
        MSC_Handle->max_lun = 0U;
 80130aa:	2300      	movs	r3, #0
 80130ac:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80130ae:	7823      	ldrb	r3, [r4, #0]
 80130b0:	2b02      	cmp	r3, #2
 80130b2:	f04f 0202 	mov.w	r2, #2
 80130b6:	bf99      	ittee	ls
 80130b8:	3301      	addls	r3, #1
 80130ba:	b2db      	uxtbls	r3, r3
 80130bc:	4613      	movhi	r3, r2
 80130be:	7022      	strbhi	r2, [r4, #0]
 80130c0:	bf98      	it	ls
 80130c2:	7023      	strbls	r3, [r4, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80130c4:	2000      	movs	r0, #0
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80130c6:	2b01      	cmp	r3, #1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80130c8:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 80130cc:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80130d0:	d006      	beq.n	80130e0 <USBH_MSC_ClassRequest+0x58>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80130d2:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 80130d6:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
 80130da:	e001      	b.n	80130e0 <USBH_MSC_ClassRequest+0x58>
      if (status == USBH_OK)
 80130dc:	2800      	cmp	r0, #0
 80130de:	d0e6      	beq.n	80130ae <USBH_MSC_ClassRequest+0x26>
}
 80130e0:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80130e2:	2100      	movs	r1, #0
 80130e4:	f001 f8fa 	bl	80142dc <USBH_ClrFeature>
 80130e8:	b908      	cbnz	r0, 80130ee <USBH_MSC_ClassRequest+0x66>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80130ea:	7be3      	ldrb	r3, [r4, #15]
 80130ec:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 80130ee:	2001      	movs	r0, #1
 80130f0:	e7f6      	b.n	80130e0 <USBH_MSC_ClassRequest+0x58>

080130f2 <USBH_MSC_InterfaceDeInit>:
{
 80130f2:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80130f4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80130f8:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 80130fa:	7969      	ldrb	r1, [r5, #5]
{
 80130fc:	4604      	mov	r4, r0
  if (MSC_Handle->OutPipe)
 80130fe:	b139      	cbz	r1, 8013110 <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8013100:	f001 f967 	bl	80143d2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8013104:	7969      	ldrb	r1, [r5, #5]
 8013106:	4620      	mov	r0, r4
 8013108:	f001 f980 	bl	801440c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 801310c:	2300      	movs	r3, #0
 801310e:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
 8013110:	7929      	ldrb	r1, [r5, #4]
 8013112:	b141      	cbz	r1, 8013126 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8013114:	4620      	mov	r0, r4
 8013116:	f001 f95c 	bl	80143d2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 801311a:	7929      	ldrb	r1, [r5, #4]
 801311c:	4620      	mov	r0, r4
 801311e:	f001 f975 	bl	801440c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8013122:	2300      	movs	r3, #0
 8013124:	712b      	strb	r3, [r5, #4]
  if (phost->pActiveClass->pData)
 8013126:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 801312a:	69d8      	ldr	r0, [r3, #28]
 801312c:	b128      	cbz	r0, 801313a <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 801312e:	f003 f8a5 	bl	801627c <free>
    phost->pActiveClass->pData = 0U;
 8013132:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8013136:	2200      	movs	r2, #0
 8013138:	61da      	str	r2, [r3, #28]
}
 801313a:	2000      	movs	r0, #0
 801313c:	bd38      	pop	{r3, r4, r5, pc}

0801313e <USBH_MSC_InterfaceInit>:
{
 801313e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8013142:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8013146:	2350      	movs	r3, #80	; 0x50
 8013148:	2206      	movs	r2, #6
 801314a:	7909      	ldrb	r1, [r1, #4]
{
 801314c:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 801314e:	f000 fc83 	bl	8013a58 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8013152:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8013154:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8013156:	d904      	bls.n	8013162 <USBH_MSC_InterfaceInit+0x24>
    return USBH_FAIL;
 8013158:	2702      	movs	r7, #2
}
 801315a:	4638      	mov	r0, r7
 801315c:	b004      	add	sp, #16
 801315e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 8013162:	4601      	mov	r1, r0
 8013164:	4628      	mov	r0, r5
 8013166:	f000 fc6e 	bl	8013a46 <USBH_SelectInterface>
  if (status != USBH_OK)
 801316a:	4607      	mov	r7, r0
 801316c:	2800      	cmp	r0, #0
 801316e:	d1f3      	bne.n	8013158 <USBH_MSC_InterfaceInit+0x1a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8013170:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013174:	f8d5 837c 	ldr.w	r8, [r5, #892]	; 0x37c
 8013178:	f003 f878 	bl	801626c <malloc>
 801317c:	4604      	mov	r4, r0
 801317e:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 8013182:	2800      	cmp	r0, #0
 8013184:	d0e8      	beq.n	8013158 <USBH_MSC_InterfaceInit+0x1a>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8013186:	4639      	mov	r1, r7
 8013188:	f44f 7280 	mov.w	r2, #256	; 0x100
 801318c:	f003 f889 	bl	80162a2 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8013190:	231a      	movs	r3, #26
 8013192:	fb03 5106 	mla	r1, r3, r6, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8013196:	fb03 5606 	mla	r6, r3, r6, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 801319a:	f891 234e 	ldrb.w	r2, [r1, #846]	; 0x34e
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 801319e:	f896 3356 	ldrb.w	r3, [r6, #854]	; 0x356
 80131a2:	f8b1 1350 	ldrh.w	r1, [r1, #848]	; 0x350
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80131a6:	0610      	lsls	r0, r2, #24
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80131a8:	bf53      	iteet	pl
 80131aa:	71a2      	strbpl	r2, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80131ac:	71e2      	strbmi	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80131ae:	8161      	strhmi	r1, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80131b0:	8121      	strhpl	r1, [r4, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80131b2:	0619      	lsls	r1, r3, #24
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80131b4:	bf58      	it	pl
 80131b6:	71a3      	strbpl	r3, [r4, #6]
 80131b8:	f8b6 2358 	ldrh.w	r2, [r6, #856]	; 0x358
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80131bc:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80131be:	bf48      	it	mi
 80131c0:	71e3      	strbmi	r3, [r4, #7]
  MSC_Handle->state = MSC_INIT;
 80131c2:	f04f 0600 	mov.w	r6, #0
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80131c6:	4628      	mov	r0, r5
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80131c8:	bf4c      	ite	mi
 80131ca:	8162      	strhmi	r2, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80131cc:	8122      	strhpl	r2, [r4, #8]
  MSC_Handle->state = MSC_INIT;
 80131ce:	7326      	strb	r6, [r4, #12]
  MSC_Handle->error = MSC_OK;
 80131d0:	7366      	strb	r6, [r4, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80131d2:	73a6      	strb	r6, [r4, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80131d4:	f001 f902 	bl	80143dc <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80131d8:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80131da:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80131dc:	4628      	mov	r0, r5
 80131de:	f001 f8fd 	bl	80143dc <USBH_AllocPipe>
 80131e2:	7120      	strb	r0, [r4, #4]
  USBH_MSC_BOT_Init(phost);
 80131e4:	4628      	mov	r0, r5
 80131e6:	f000 f931 	bl	801344c <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80131ea:	8920      	ldrh	r0, [r4, #8]
 80131ec:	9002      	str	r0, [sp, #8]
 80131ee:	f04f 0802 	mov.w	r8, #2
 80131f2:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80131f6:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80131fa:	79a2      	ldrb	r2, [r4, #6]
 80131fc:	7961      	ldrb	r1, [r4, #5]
 80131fe:	9000      	str	r0, [sp, #0]
 8013200:	f8cd 8004 	str.w	r8, [sp, #4]
 8013204:	4628      	mov	r0, r5
 8013206:	f001 f8d5 	bl	80143b4 <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 801320a:	8960      	ldrh	r0, [r4, #10]
 801320c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8013210:	79e2      	ldrb	r2, [r4, #7]
 8013212:	7921      	ldrb	r1, [r4, #4]
 8013214:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8013218:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 801321c:	9000      	str	r0, [sp, #0]
 801321e:	4628      	mov	r0, r5
 8013220:	f001 f8c8 	bl	80143b4 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8013224:	4632      	mov	r2, r6
 8013226:	7921      	ldrb	r1, [r4, #4]
 8013228:	4628      	mov	r0, r5
 801322a:	f002 ffc7 	bl	80161bc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 801322e:	4632      	mov	r2, r6
 8013230:	7961      	ldrb	r1, [r4, #5]
 8013232:	4628      	mov	r0, r5
 8013234:	f002 ffc2 	bl	80161bc <USBH_LL_SetToggle>
  return USBH_OK;
 8013238:	e78f      	b.n	801315a <USBH_MSC_InterfaceInit+0x1c>

0801323a <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801323a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 801323e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013240:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8013242:	2634      	movs	r6, #52	; 0x34
 8013244:	fb06 5401 	mla	r4, r6, r1, r5
 8013248:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 801324c:	2b06      	cmp	r3, #6
 801324e:	d010      	beq.n	8013272 <USBH_MSC_RdWrProcess+0x38>
 8013250:	2b07      	cmp	r3, #7
 8013252:	d019      	beq.n	8013288 <USBH_MSC_RdWrProcess+0x4e>
 8013254:	2b05      	cmp	r3, #5
 8013256:	d122      	bne.n	801329e <USBH_MSC_RdWrProcess+0x64>
#endif
#endif
      break;

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8013258:	fb06 5201 	mla	r2, r6, r1, r5
 801325c:	329c      	adds	r2, #156	; 0x9c
 801325e:	f000 fabb 	bl	80137d8 <USBH_MSC_SCSI_RequestSense>

      if (scsi_status == USBH_OK)
 8013262:	b9f0      	cbnz	r0, 80132a2 <USBH_MSC_RdWrProcess+0x68>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8013264:	2301      	movs	r3, #1
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8013266:	2002      	movs	r0, #2
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8013268:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 801326c:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
 8013270:	e008      	b.n	8013284 <USBH_MSC_RdWrProcess+0x4a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8013272:	2300      	movs	r3, #0
 8013274:	9300      	str	r3, [sp, #0]
 8013276:	461a      	mov	r2, r3
 8013278:	f000 fb3b 	bl	80138f2 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 801327c:	b950      	cbnz	r0, 8013294 <USBH_MSC_RdWrProcess+0x5a>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 801327e:	2301      	movs	r3, #1
 8013280:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    default:
      break;

  }
  return error;
}
 8013284:	b002      	add	sp, #8
 8013286:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8013288:	2300      	movs	r3, #0
 801328a:	9300      	str	r3, [sp, #0]
 801328c:	461a      	mov	r2, r3
 801328e:	f000 faec 	bl	801386a <USBH_MSC_SCSI_Write>
 8013292:	e7f3      	b.n	801327c <USBH_MSC_RdWrProcess+0x42>
      else if (scsi_status == USBH_FAIL)
 8013294:	2802      	cmp	r0, #2
 8013296:	d104      	bne.n	80132a2 <USBH_MSC_RdWrProcess+0x68>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8013298:	2305      	movs	r3, #5
 801329a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 801329e:	2001      	movs	r0, #1
 80132a0:	e7f0      	b.n	8013284 <USBH_MSC_RdWrProcess+0x4a>
      if (scsi_status == USBH_FAIL)
 80132a2:	2804      	cmp	r0, #4
 80132a4:	d1fb      	bne.n	801329e <USBH_MSC_RdWrProcess+0x64>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80132a6:	2308      	movs	r3, #8
 80132a8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 80132ac:	2002      	movs	r0, #2
 80132ae:	e7e9      	b.n	8013284 <USBH_MSC_RdWrProcess+0x4a>

080132b0 <USBH_MSC_IsReady>:
uint8_t  USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
 80132b0:	7803      	ldrb	r3, [r0, #0]
 80132b2:	2b0b      	cmp	r3, #11
 80132b4:	d107      	bne.n	80132c6 <USBH_MSC_IsReady+0x16>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80132b6:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
 80132ba:	69db      	ldr	r3, [r3, #28]
 80132bc:	7b18      	ldrb	r0, [r3, #12]
  {
    res = 1U;
 80132be:	1e43      	subs	r3, r0, #1
 80132c0:	4258      	negs	r0, r3
 80132c2:	4158      	adcs	r0, r3
 80132c4:	4770      	bx	lr
  }
  else
  {
    res = 0U;
 80132c6:	2000      	movs	r0, #0
  }

  return res;
}
 80132c8:	4770      	bx	lr

080132ca <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80132ca:	7803      	ldrb	r3, [r0, #0]
 80132cc:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80132ce:	bf01      	itttt	eq
 80132d0:	f8d0 337c 	ldreq.w	r3, [r0, #892]	; 0x37c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80132d4:	69db      	ldreq	r3, [r3, #28]
 80132d6:	2234      	moveq	r2, #52	; 0x34
 80132d8:	fb02 3101 	mlaeq	r1, r2, r1, r3
 80132dc:	bf03      	ittte	eq
 80132de:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
 80132e2:	fab0 f080 	clzeq	r0, r0
 80132e6:	0940      	lsreq	r0, r0, #5
  }
  else
  {
    res = 0U;
 80132e8:	2000      	movne	r0, #0
  }

  return res;
}
 80132ea:	4770      	bx	lr

080132ec <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 80132ec:	7803      	ldrb	r3, [r0, #0]
 80132ee:	2b0b      	cmp	r3, #11
{
 80132f0:	b510      	push	{r4, lr}
  if (phost->gState == HOST_CLASS)
 80132f2:	d111      	bne.n	8013318 <USBH_MSC_GetLUNInfo+0x2c>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80132f4:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80132f8:	2334      	movs	r3, #52	; 0x34
 80132fa:	2490      	movs	r4, #144	; 0x90
 80132fc:	fb13 4301 	smlabb	r3, r3, r1, r4
 8013300:	69c1      	ldr	r1, [r0, #28]
 8013302:	4419      	add	r1, r3
 8013304:	f101 0334 	add.w	r3, r1, #52	; 0x34
 8013308:	f851 0b04 	ldr.w	r0, [r1], #4
 801330c:	f842 0b04 	str.w	r0, [r2], #4
 8013310:	4299      	cmp	r1, r3
 8013312:	d1f9      	bne.n	8013308 <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 8013314:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
 8013316:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
 8013318:	2002      	movs	r0, #2
 801331a:	e7fc      	b.n	8013316 <USBH_MSC_GetLUNInfo+0x2a>

0801331c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 801331c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8013320:	f890 5320 	ldrb.w	r5, [r0, #800]	; 0x320
{
 8013324:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8013328:	4604      	mov	r4, r0
 801332a:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0U) ||
 801332c:	b3bd      	cbz	r5, 801339e <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) ||
 801332e:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 8013330:	2d0b      	cmp	r5, #11
 8013332:	d134      	bne.n	801339e <USBH_MSC_Read+0x82>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013334:	f8d0 537c 	ldr.w	r5, [r0, #892]	; 0x37c
 8013338:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 801333a:	2634      	movs	r6, #52	; 0x34
 801333c:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) ||
 8013340:	f896 c090 	ldrb.w	ip, [r6, #144]	; 0x90
 8013344:	f1bc 0f01 	cmp.w	ip, #1
 8013348:	d129      	bne.n	801339e <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
 801334a:	f04f 0c06 	mov.w	ip, #6
 801334e:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8013352:	f886 c090 	strb.w	ip, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8013356:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 801335a:	f8cd 8000 	str.w	r8, [sp]
 801335e:	f000 fac8 	bl	80138f2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8013362:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 8013366:	f8d4 93c4 	ldr.w	r9, [r4, #964]	; 0x3c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 801336a:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 801336e:	4639      	mov	r1, r7
 8013370:	4620      	mov	r0, r4
 8013372:	f7ff ff62 	bl	801323a <USBH_MSC_RdWrProcess>
 8013376:	2801      	cmp	r0, #1
 8013378:	d005      	beq.n	8013386 <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 801337a:	2301      	movs	r3, #1
 801337c:	732b      	strb	r3, [r5, #12]

  return USBH_OK;
 801337e:	2000      	movs	r0, #0
}
 8013380:	b003      	add	sp, #12
 8013382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8013386:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 801338a:	eba3 0309 	sub.w	r3, r3, r9
 801338e:	42b3      	cmp	r3, r6
 8013390:	d803      	bhi.n	801339a <USBH_MSC_Read+0x7e>
 8013392:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8013396:	2b00      	cmp	r3, #0
 8013398:	d1e9      	bne.n	801336e <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 801339a:	2301      	movs	r3, #1
 801339c:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 801339e:	2002      	movs	r0, #2
 80133a0:	e7ee      	b.n	8013380 <USBH_MSC_Read+0x64>

080133a2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80133a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 80133a6:	f890 5320 	ldrb.w	r5, [r0, #800]	; 0x320
{
 80133aa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80133ae:	4604      	mov	r4, r0
 80133b0:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0U) ||
 80133b2:	b3bd      	cbz	r5, 8013424 <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) ||
 80133b4:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 80133b6:	2d0b      	cmp	r5, #11
 80133b8:	d134      	bne.n	8013424 <USBH_MSC_Write+0x82>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80133ba:	f8d0 537c 	ldr.w	r5, [r0, #892]	; 0x37c
 80133be:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80133c0:	2634      	movs	r6, #52	; 0x34
 80133c2:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) ||
 80133c6:	f896 c090 	ldrb.w	ip, [r6, #144]	; 0x90
 80133ca:	f1bc 0f01 	cmp.w	ip, #1
 80133ce:	d129      	bne.n	8013424 <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
 80133d0:	f04f 0c07 	mov.w	ip, #7
 80133d4:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80133d8:	f886 c090 	strb.w	ip, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 80133dc:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80133e0:	f8cd 8000 	str.w	r8, [sp]
 80133e4:	f000 fa41 	bl	801386a <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80133e8:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 80133ec:	f8d4 93c4 	ldr.w	r9, [r4, #964]	; 0x3c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80133f0:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80133f4:	4639      	mov	r1, r7
 80133f6:	4620      	mov	r0, r4
 80133f8:	f7ff ff1f 	bl	801323a <USBH_MSC_RdWrProcess>
 80133fc:	2801      	cmp	r0, #1
 80133fe:	d005      	beq.n	801340c <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8013400:	2301      	movs	r3, #1
 8013402:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 8013404:	2000      	movs	r0, #0
}
 8013406:	b003      	add	sp, #12
 8013408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 801340c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8013410:	eba3 0309 	sub.w	r3, r3, r9
 8013414:	42b3      	cmp	r3, r6
 8013416:	d803      	bhi.n	8013420 <USBH_MSC_Write+0x7e>
 8013418:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 801341c:	2b00      	cmp	r3, #0
 801341e:	d1e9      	bne.n	80133f4 <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 8013420:	2301      	movs	r3, #1
 8013422:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8013424:	2002      	movs	r0, #2
 8013426:	e7ee      	b.n	8013406 <USBH_MSC_Write+0x64>

08013428 <USBH_MSC_BOT_REQ_Reset>:

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
 8013428:	f64f 7121 	movw	r1, #65313	; 0xff21
 801342c:	2200      	movs	r2, #0
 801342e:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
 8013432:	4611      	mov	r1, r2
 8013434:	f000 bd4f 	b.w	8013ed6 <USBH_CtlReq>

08013438 <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
 8013438:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801343c:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 8013440:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 8013444:	2201      	movs	r2, #1
 8013446:	f000 bd46 	b.w	8013ed6 <USBH_CtlReq>
	...

0801344c <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801344c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8013450:	4905      	ldr	r1, [pc, #20]	; (8013468 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013452:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8013454:	4a05      	ldr	r2, [pc, #20]	; (801346c <USBH_MSC_BOT_Init+0x20>)
 8013456:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 801345a:	2201      	movs	r2, #1
 801345c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8013460:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
}
 8013464:	2000      	movs	r0, #0
 8013466:	4770      	bx	lr
 8013468:	43425355 	.word	0x43425355
 801346c:	20304050 	.word	0x20304050

08013470 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013470:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8013474:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013476:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 8013478:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 801347c:	3b01      	subs	r3, #1
{
 801347e:	4606      	mov	r6, r0
  switch (MSC_Handle->hbot.state)
 8013480:	2b0a      	cmp	r3, #10
 8013482:	d859      	bhi.n	8013538 <USBH_MSC_BOT_Process+0xc8>
 8013484:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013488:	001a000b 	.word	0x001a000b
 801348c:	003d0033 	.word	0x003d0033
 8013490:	0068005e 	.word	0x0068005e
 8013494:	0093008b 	.word	0x0093008b
 8013498:	00be00b4 	.word	0x00be00b4
 801349c:	00d6      	.short	0x00d6
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 801349e:	2302      	movs	r3, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80134a0:	2501      	movs	r5, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80134a2:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80134a6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80134aa:	221f      	movs	r2, #31
 80134ac:	7963      	ldrb	r3, [r4, #5]
 80134ae:	9500      	str	r5, [sp, #0]
 80134b0:	f104 0154 	add.w	r1, r4, #84	; 0x54
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80134b4:	4630      	mov	r0, r6
 80134b6:	f000 ff56 	bl	8014366 <USBH_BulkSendData>
 80134ba:	e03d      	b.n	8013538 <USBH_MSC_BOT_Process+0xc8>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80134bc:	7961      	ldrb	r1, [r4, #5]
 80134be:	f002 fe6d 	bl	801619c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80134c2:	2801      	cmp	r0, #1
 80134c4:	d10c      	bne.n	80134e0 <USBH_MSC_BOT_Process+0x70>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80134c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80134c8:	b143      	cbz	r3, 80134dc <USBH_MSC_BOT_Process+0x6c>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80134ca:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 80134ce:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80134d0:	bfb4      	ite	lt
 80134d2:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80134d4:	2305      	movge	r3, #5

    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80134d6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80134da:	e006      	b.n	80134ea <USBH_MSC_BOT_Process+0x7a>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80134dc:	2307      	movs	r3, #7
 80134de:	e7fa      	b.n	80134d6 <USBH_MSC_BOT_Process+0x66>
      else if (URB_Status == USBH_URB_NOTREADY)
 80134e0:	2802      	cmp	r0, #2
 80134e2:	d158      	bne.n	8013596 <USBH_MSC_BOT_Process+0x126>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80134e4:	2001      	movs	r0, #1
 80134e6:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50

    default:
      break;
  }
  return status;
}
 80134ea:	b002      	add	sp, #8
 80134ec:	bd70      	pop	{r4, r5, r6, pc}
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80134ee:	7923      	ldrb	r3, [r4, #4]
 80134f0:	8962      	ldrh	r2, [r4, #10]
 80134f2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80134f6:	f000 ff4d 	bl	8014394 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80134fa:	2304      	movs	r3, #4
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80134fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8013500:	e01a      	b.n	8013538 <USBH_MSC_BOT_Process+0xc8>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8013502:	7921      	ldrb	r1, [r4, #4]
 8013504:	f002 fe4a 	bl	801619c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013508:	2801      	cmp	r0, #1
 801350a:	d117      	bne.n	801353c <USBH_MSC_BOT_Process+0xcc>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 801350c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801350e:	8962      	ldrh	r2, [r4, #10]
 8013510:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8013512:	bf8a      	itet	hi
 8013514:	1a9b      	subhi	r3, r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8013516:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8013518:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 801351c:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 801351e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8013520:	bf84      	itt	hi
 8013522:	1889      	addhi	r1, r1, r2
 8013524:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8013528:	2b00      	cmp	r3, #0
 801352a:	d065      	beq.n	80135f8 <USBH_MSC_BOT_Process+0x188>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 801352c:	7923      	ldrb	r3, [r4, #4]
 801352e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8013532:	4630      	mov	r0, r6
 8013534:	f000 ff2e 	bl	8014394 <USBH_BulkReceiveData>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8013538:	2001      	movs	r0, #1
 801353a:	e7d6      	b.n	80134ea <USBH_MSC_BOT_Process+0x7a>
      else if (URB_Status == USBH_URB_STALL)
 801353c:	2805      	cmp	r0, #5
 801353e:	d1fb      	bne.n	8013538 <USBH_MSC_BOT_Process+0xc8>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8013540:	2309      	movs	r3, #9
 8013542:	e7db      	b.n	80134fc <USBH_MSC_BOT_Process+0x8c>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8013544:	2501      	movs	r5, #1
 8013546:	7963      	ldrb	r3, [r4, #5]
 8013548:	8922      	ldrh	r2, [r4, #8]
 801354a:	9500      	str	r5, [sp, #0]
 801354c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8013550:	f000 ff09 	bl	8014366 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8013554:	2306      	movs	r3, #6
 8013556:	e7d1      	b.n	80134fc <USBH_MSC_BOT_Process+0x8c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8013558:	7961      	ldrb	r1, [r4, #5]
 801355a:	f002 fe1f 	bl	801619c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801355e:	2801      	cmp	r0, #1
 8013560:	d115      	bne.n	801358e <USBH_MSC_BOT_Process+0x11e>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8013562:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8013564:	8922      	ldrh	r2, [r4, #8]
 8013566:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8013568:	bf8a      	itet	hi
 801356a:	1a9b      	subhi	r3, r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 801356c:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 801356e:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8013572:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8013574:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8013576:	bf84      	itt	hi
 8013578:	1889      	addhi	r1, r1, r2
 801357a:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
 801357e:	2501      	movs	r5, #1
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8013580:	2b00      	cmp	r3, #0
 8013582:	d039      	beq.n	80135f8 <USBH_MSC_BOT_Process+0x188>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8013584:	7963      	ldrb	r3, [r4, #5]
 8013586:	9500      	str	r5, [sp, #0]
 8013588:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 801358c:	e792      	b.n	80134b4 <USBH_MSC_BOT_Process+0x44>
      else if (URB_Status == USBH_URB_NOTREADY)
 801358e:	2802      	cmp	r0, #2
 8013590:	d101      	bne.n	8013596 <USBH_MSC_BOT_Process+0x126>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8013592:	2305      	movs	r3, #5
 8013594:	e7b2      	b.n	80134fc <USBH_MSC_BOT_Process+0x8c>
      else if (URB_Status == USBH_URB_STALL)
 8013596:	2805      	cmp	r0, #5
 8013598:	d1ce      	bne.n	8013538 <USBH_MSC_BOT_Process+0xc8>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 801359a:	230a      	movs	r3, #10
 801359c:	e7ae      	b.n	80134fc <USBH_MSC_BOT_Process+0x8c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 801359e:	7923      	ldrb	r3, [r4, #4]
 80135a0:	220d      	movs	r2, #13
 80135a2:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80135a6:	f000 fef5 	bl	8014394 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80135aa:	2308      	movs	r3, #8
 80135ac:	e7a6      	b.n	80134fc <USBH_MSC_BOT_Process+0x8c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80135ae:	7921      	ldrb	r1, [r4, #4]
 80135b0:	f002 fdf4 	bl	801619c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80135b4:	2801      	cmp	r0, #1
 80135b6:	d1c1      	bne.n	801353c <USBH_MSC_BOT_Process+0xcc>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80135b8:	f8d6 337c 	ldr.w	r3, [r6, #892]	; 0x37c
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80135bc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80135c0:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80135c4:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80135c6:	4630      	mov	r0, r6
 80135c8:	7921      	ldrb	r1, [r4, #4]
 80135ca:	f002 fda3 	bl	8016114 <USBH_LL_GetLastXferSize>
 80135ce:	280d      	cmp	r0, #13
 80135d0:	d137      	bne.n	8013642 <USBH_MSC_BOT_Process+0x1d2>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80135d2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80135d4:	4b1c      	ldr	r3, [pc, #112]	; (8013648 <USBH_MSC_BOT_Process+0x1d8>)
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d133      	bne.n	8013642 <USBH_MSC_BOT_Process+0x1d2>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80135da:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80135dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80135de:	429a      	cmp	r2, r3
 80135e0:	d12f      	bne.n	8013642 <USBH_MSC_BOT_Process+0x1d2>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80135e2:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
          status = USBH_OK;
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	bf14      	ite	ne
 80135ea:	2002      	movne	r0, #2
 80135ec:	2000      	moveq	r0, #0
 80135ee:	e77c      	b.n	80134ea <USBH_MSC_BOT_Process+0x7a>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80135f0:	79e1      	ldrb	r1, [r4, #7]
 80135f2:	f000 fe73 	bl	80142dc <USBH_ClrFeature>
      if (error == USBH_OK)
 80135f6:	b908      	cbnz	r0, 80135fc <USBH_MSC_BOT_Process+0x18c>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80135f8:	2307      	movs	r3, #7
 80135fa:	e77f      	b.n	80134fc <USBH_MSC_BOT_Process+0x8c>
      else if (error == USBH_UNRECOVERED_ERROR)
 80135fc:	2804      	cmp	r0, #4
 80135fe:	d19b      	bne.n	8013538 <USBH_MSC_BOT_Process+0xc8>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8013600:	230b      	movs	r3, #11
 8013602:	e77b      	b.n	80134fc <USBH_MSC_BOT_Process+0x8c>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8013604:	79a1      	ldrb	r1, [r4, #6]
 8013606:	f000 fe69 	bl	80142dc <USBH_ClrFeature>
      if (error == USBH_OK)
 801360a:	4605      	mov	r5, r0
 801360c:	b980      	cbnz	r0, 8013630 <USBH_MSC_BOT_Process+0x1c0>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 801360e:	7961      	ldrb	r1, [r4, #5]
 8013610:	4630      	mov	r0, r6
 8013612:	f002 fde2 	bl	80161da <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8013616:	f1c0 0201 	rsb	r2, r0, #1
 801361a:	7961      	ldrb	r1, [r4, #5]
 801361c:	b2d2      	uxtb	r2, r2
 801361e:	4630      	mov	r0, r6
 8013620:	f002 fdcc 	bl	80161bc <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8013624:	462a      	mov	r2, r5
 8013626:	7921      	ldrb	r1, [r4, #4]
 8013628:	4630      	mov	r0, r6
 801362a:	f002 fdc7 	bl	80161bc <USBH_LL_SetToggle>
 801362e:	e787      	b.n	8013540 <USBH_MSC_BOT_Process+0xd0>
        if (error == USBH_UNRECOVERED_ERROR)
 8013630:	2804      	cmp	r0, #4
 8013632:	e7e4      	b.n	80135fe <USBH_MSC_BOT_Process+0x18e>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8013634:	f7ff fef8 	bl	8013428 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 8013638:	2800      	cmp	r0, #0
 801363a:	f47f af56 	bne.w	80134ea <USBH_MSC_BOT_Process+0x7a>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 801363e:	2301      	movs	r3, #1
 8013640:	e749      	b.n	80134d6 <USBH_MSC_BOT_Process+0x66>
          status = USBH_FAIL;
 8013642:	2002      	movs	r0, #2
 8013644:	e751      	b.n	80134ea <USBH_MSC_BOT_Process+0x7a>
 8013646:	bf00      	nop
 8013648:	53425355 	.word	0x53425355

0801364c <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801364c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8013650:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013652:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8013654:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8013658:	2d01      	cmp	r5, #1
 801365a:	d003      	beq.n	8013664 <USBH_MSC_SCSI_TestUnitReady+0x18>
 801365c:	2d02      	cmp	r5, #2
 801365e:	d017      	beq.n	8013690 <USBH_MSC_SCSI_TestUnitReady+0x44>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8013660:	2002      	movs	r0, #2
 8013662:	e014      	b.n	801368e <USBH_MSC_SCSI_TestUnitReady+0x42>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8013664:	2600      	movs	r6, #0
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8013666:	230a      	movs	r3, #10
 8013668:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 801366c:	65e6      	str	r6, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 801366e:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8013672:	2210      	movs	r2, #16
 8013674:	4631      	mov	r1, r6
 8013676:	f104 0063 	add.w	r0, r4, #99	; 0x63
 801367a:	f002 fe12 	bl	80162a2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;

      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801367e:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8013680:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8013684:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8013688:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      error = USBH_BUSY;
 801368c:	4628      	mov	r0, r5
    default:
      break;
  }

  return error;
}
 801368e:	bd70      	pop	{r4, r5, r6, pc}
 8013690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8013694:	f7ff beec 	b.w	8013470 <USBH_MSC_BOT_Process>

08013698 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013698:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 801369c:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801369e:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80136a0:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80136a4:	2d01      	cmp	r5, #1
{
 80136a6:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 80136a8:	d003      	beq.n	80136b2 <USBH_MSC_SCSI_ReadCapacity+0x1a>
 80136aa:	2d02      	cmp	r5, #2
 80136ac:	d01c      	beq.n	80136e8 <USBH_MSC_SCSI_ReadCapacity+0x50>
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80136ae:	2001      	movs	r0, #1
 80136b0:	e025      	b.n	80136fe <USBH_MSC_SCSI_ReadCapacity+0x66>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80136b2:	2308      	movs	r3, #8
 80136b4:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80136b6:	2380      	movs	r3, #128	; 0x80
 80136b8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80136bc:	230a      	movs	r3, #10
 80136be:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80136c2:	2210      	movs	r2, #16
 80136c4:	2100      	movs	r1, #0
 80136c6:	f104 0063 	add.w	r0, r4, #99	; 0x63
 80136ca:	f002 fdea 	bl	80162a2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80136ce:	2325      	movs	r3, #37	; 0x25
 80136d0:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

      MSC_Handle->hbot.state = BOT_SEND_CBW;

      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80136d4:	2302      	movs	r3, #2
 80136d6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80136da:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80136de:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80136e2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80136e6:	e7e2      	b.n	80136ae <USBH_MSC_SCSI_ReadCapacity+0x16>
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:

      error = USBH_MSC_BOT_Process(phost, lun);
 80136e8:	f7ff fec2 	bl	8013470 <USBH_MSC_BOT_Process>

      if (error == USBH_OK)
 80136ec:	b938      	cbnz	r0, 80136fe <USBH_MSC_SCSI_ReadCapacity+0x66>
      {
        /*assign the capacity*/
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80136ee:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80136f2:	6813      	ldr	r3, [r2, #0]
 80136f4:	ba1b      	rev	r3, r3
 80136f6:	6033      	str	r3, [r6, #0]
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);

        /*assign the page length*/
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80136f8:	88d3      	ldrh	r3, [r2, #6]
 80136fa:	ba5b      	rev16	r3, r3
 80136fc:	80b3      	strh	r3, [r6, #4]
    default:
      break;
  }

  return error;
}
 80136fe:	bd70      	pop	{r4, r5, r6, pc}

08013700 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8013700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013702:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013706:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8013708:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 801370c:	2d01      	cmp	r5, #1
{
 801370e:	460f      	mov	r7, r1
 8013710:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 8013712:	d003      	beq.n	801371c <USBH_MSC_SCSI_Inquiry+0x1c>
 8013714:	2d02      	cmp	r5, #2
 8013716:	d025      	beq.n	8013764 <USBH_MSC_SCSI_Inquiry+0x64>
  USBH_StatusTypeDef error = USBH_FAIL;
 8013718:	2502      	movs	r5, #2
 801371a:	e021      	b.n	8013760 <USBH_MSC_SCSI_Inquiry+0x60>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801371c:	2380      	movs	r3, #128	; 0x80
 801371e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8013722:	230a      	movs	r3, #10
 8013724:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8013728:	2300      	movs	r3, #0
 801372a:	f8c4 3069 	str.w	r3, [r4, #105]	; 0x69
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 801372e:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8013732:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8013736:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

      MSC_Handle->hbot.state = BOT_SEND_CBW;

      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801373a:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 801373c:	2224      	movs	r2, #36	; 0x24
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 801373e:	2112      	movs	r1, #18
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8013740:	017f      	lsls	r7, r7, #5
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8013742:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8013746:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 801374a:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 801374c:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8013750:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8013754:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8013758:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 801375c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    default:
      break;
  }

  return error;
}
 8013760:	4628      	mov	r0, r5
 8013762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      error = USBH_MSC_BOT_Process(phost, lun);
 8013764:	f7ff fe84 	bl	8013470 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8013768:	4605      	mov	r5, r0
 801376a:	2800      	cmp	r0, #0
 801376c:	d1f8      	bne.n	8013760 <USBH_MSC_SCSI_Inquiry+0x60>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 801376e:	4601      	mov	r1, r0
 8013770:	2222      	movs	r2, #34	; 0x22
 8013772:	4630      	mov	r0, r6
 8013774:	f002 fd95 	bl	80162a2 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8013778:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801377c:	781b      	ldrb	r3, [r3, #0]
 801377e:	f003 031f 	and.w	r3, r3, #31
 8013782:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8013784:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	095b      	lsrs	r3, r3, #5
 801378c:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 801378e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8013792:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013796:	2b00      	cmp	r3, #0
          inquiry->RemovableMedia = 1U;
 8013798:	bfba      	itte	lt
 801379a:	2301      	movlt	r3, #1
 801379c:	70b3      	strblt	r3, [r6, #2]
          inquiry->RemovableMedia = 0U;
 801379e:	70b5      	strbge	r5, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80137a0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80137a4:	f852 3f08 	ldr.w	r3, [r2, #8]!
 80137a8:	f8c6 3003 	str.w	r3, [r6, #3]
 80137ac:	6853      	ldr	r3, [r2, #4]
 80137ae:	f8c6 3007 	str.w	r3, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80137b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80137b6:	3310      	adds	r3, #16
 80137b8:	f106 020c 	add.w	r2, r6, #12
 80137bc:	f103 0110 	add.w	r1, r3, #16
 80137c0:	f853 0b04 	ldr.w	r0, [r3], #4
 80137c4:	f842 0b04 	str.w	r0, [r2], #4
 80137c8:	428b      	cmp	r3, r1
 80137ca:	d1f9      	bne.n	80137c0 <USBH_MSC_SCSI_Inquiry+0xc0>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80137cc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80137d0:	6a1b      	ldr	r3, [r3, #32]
 80137d2:	f8c6 301d 	str.w	r3, [r6, #29]
 80137d6:	e7c3      	b.n	8013760 <USBH_MSC_SCSI_Inquiry+0x60>

080137d8 <USBH_MSC_SCSI_RequestSense>:
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80137d8:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 80137dc:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80137de:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80137e0:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80137e4:	2b01      	cmp	r3, #1
{
 80137e6:	460e      	mov	r6, r1
 80137e8:	4615      	mov	r5, r2
  switch (MSC_Handle->hbot.cmd_state)
 80137ea:	d003      	beq.n	80137f4 <USBH_MSC_SCSI_RequestSense+0x1c>
 80137ec:	2b02      	cmp	r3, #2
 80137ee:	d029      	beq.n	8013844 <USBH_MSC_SCSI_RequestSense+0x6c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80137f0:	2002      	movs	r0, #2
 80137f2:	e026      	b.n	8013842 <USBH_MSC_SCSI_RequestSense+0x6a>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80137f4:	2280      	movs	r2, #128	; 0x80
 80137f6:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80137fa:	220a      	movs	r2, #10
 80137fc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8013800:	2200      	movs	r2, #0
 8013802:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
 8013806:	f8c4 206d 	str.w	r2, [r4, #109]	; 0x6d
 801380a:	f8a4 2071 	strh.w	r2, [r4, #113]	; 0x71
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 801380e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8013812:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8013816:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68

      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801381a:	2202      	movs	r2, #2
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 801381c:	210e      	movs	r1, #14
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 801381e:	2003      	movs	r0, #3
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8013820:	0176      	lsls	r6, r6, #5
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8013822:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8013826:	f104 0210 	add.w	r2, r4, #16
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 801382a:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 801382e:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8013830:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8013834:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8013838:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 801383c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      error = USBH_BUSY;
 8013840:	4618      	mov	r0, r3
    default:
      break;
  }

  return error;
}
 8013842:	bd70      	pop	{r4, r5, r6, pc}
      error = USBH_MSC_BOT_Process(phost, lun);
 8013844:	f7ff fe14 	bl	8013470 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8013848:	2800      	cmp	r0, #0
 801384a:	d1fa      	bne.n	8013842 <USBH_MSC_SCSI_RequestSense+0x6a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 801384c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8013850:	789b      	ldrb	r3, [r3, #2]
 8013852:	f003 030f 	and.w	r3, r3, #15
 8013856:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8013858:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801385c:	7b1b      	ldrb	r3, [r3, #12]
 801385e:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8013860:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8013864:	7b5b      	ldrb	r3, [r3, #13]
 8013866:	70ab      	strb	r3, [r5, #2]
 8013868:	e7eb      	b.n	8013842 <USBH_MSC_SCSI_RequestSense+0x6a>

0801386a <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 801386a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801386e:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013870:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8013874:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013876:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8013878:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 801387c:	2d01      	cmp	r5, #1
{
 801387e:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 8013880:	d003      	beq.n	801388a <USBH_MSC_SCSI_Write+0x20>
 8013882:	2d02      	cmp	r5, #2
 8013884:	d031      	beq.n	80138ea <USBH_MSC_SCSI_Write+0x80>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8013886:	2002      	movs	r0, #2
 8013888:	e02d      	b.n	80138e6 <USBH_MSC_SCSI_Write+0x7c>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 801388a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801388e:	230a      	movs	r3, #10
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8013890:	437a      	muls	r2, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8013892:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8013894:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8013896:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 801389a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801389e:	2210      	movs	r2, #16
 80138a0:	f104 0063 	add.w	r0, r4, #99	; 0x63
 80138a4:	f002 fcfd 	bl	80162a2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80138a8:	232a      	movs	r3, #42	; 0x2a
 80138aa:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

      /*logical block address*/
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80138ae:	f3c6 6307 	ubfx	r3, r6, #24, #8
 80138b2:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80138b6:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80138ba:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80138be:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80138c2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);


      /*Transfer length */
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80138c6:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80138ca:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;


      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80138ce:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80138d0:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80138d4:	f884 706b 	strb.w	r7, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80138d8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80138dc:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80138e0:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      error = USBH_BUSY;
 80138e4:	4628      	mov	r0, r5
    default:
      break;
  }

  return error;
}
 80138e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 80138ee:	f7ff bdbf 	b.w	8013470 <USBH_MSC_BOT_Process>

080138f2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80138f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f6:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80138f8:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 80138fc:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80138fe:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8013900:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8013904:	2d01      	cmp	r5, #1
{
 8013906:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 8013908:	d003      	beq.n	8013912 <USBH_MSC_SCSI_Read+0x20>
 801390a:	2d02      	cmp	r5, #2
 801390c:	d032      	beq.n	8013974 <USBH_MSC_SCSI_Read+0x82>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 801390e:	2002      	movs	r0, #2
 8013910:	e02e      	b.n	8013970 <USBH_MSC_SCSI_Read+0x7e>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8013912:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8013916:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8013918:	437a      	muls	r2, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801391a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801391e:	230a      	movs	r3, #10
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8013920:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8013922:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8013926:	2210      	movs	r2, #16
 8013928:	2100      	movs	r1, #0
 801392a:	f104 0063 	add.w	r0, r4, #99	; 0x63
 801392e:	f002 fcb8 	bl	80162a2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8013932:	2328      	movs	r3, #40	; 0x28
 8013934:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

      /*logical block address*/
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8013938:	f3c6 6307 	ubfx	r3, r6, #24, #8
 801393c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8013940:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8013944:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8013948:	f3c6 2307 	ubfx	r3, r6, #8, #8
 801394c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);


      /*Transfer length */
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8013950:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8013954:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;


      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8013958:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 801395a:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 801395e:	f884 706b 	strb.w	r7, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8013962:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8013966:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 801396a:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      error = USBH_BUSY;
 801396e:	4628      	mov	r0, r5
    default:
      break;
  }

  return error;
}
 8013970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8013978:	f7ff bd7a 	b.w	8013470 <USBH_MSC_BOT_Process>

0801397c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 801397c:	f500 7361 	add.w	r3, r0, #900	; 0x384
 8013980:	f500 7270 	add.w	r2, r0, #960	; 0x3c0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8013984:	2100      	movs	r1, #0
 8013986:	f843 1b04 	str.w	r1, [r3], #4
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801398a:	4293      	cmp	r3, r2
 801398c:	d1fb      	bne.n	8013986 <DeInitStateMachine+0xa>
 801398e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8013992:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8013996:	2300      	movs	r3, #0
 8013998:	f802 3b01 	strb.w	r3, [r2], #1
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801399c:	4291      	cmp	r1, r2
 801399e:	d1fb      	bne.n	8013998 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80139a0:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
 80139a2:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80139a4:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 80139a6:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 80139a8:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80139ac:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
  phost->Control.errorcount = 0U;
 80139ae:	7643      	strb	r3, [r0, #25]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80139b0:	2240      	movs	r2, #64	; 0x40

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80139b2:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80139b6:	7182      	strb	r2, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80139b8:	f8c0 331c 	str.w	r3, [r0, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
 80139bc:	2000      	movs	r0, #0
 80139be:	4770      	bx	lr

080139c0 <USBH_Init>:
{
 80139c0:	b570      	push	{r4, r5, r6, lr}
 80139c2:	460e      	mov	r6, r1
  if (phost == NULL)
 80139c4:	4604      	mov	r4, r0
 80139c6:	b1c0      	cbz	r0, 80139fa <USBH_Init+0x3a>
  phost->pActiveClass = NULL;
 80139c8:	2500      	movs	r5, #0
  phost->id = id;
 80139ca:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 80139ce:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80139d2:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  DeInitStateMachine(phost);
 80139d6:	f7ff ffd1 	bl	801397c <DeInitStateMachine>
  phost->device.is_connected = 0U;
 80139da:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80139de:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 80139e2:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80139e6:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 80139ea:	b10e      	cbz	r6, 80139f0 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 80139ec:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  USBH_LL_Init(phost);
 80139f0:	4620      	mov	r0, r4
 80139f2:	f002 fb2d 	bl	8016050 <USBH_LL_Init>
  return USBH_OK;
 80139f6:	2000      	movs	r0, #0
}
 80139f8:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 80139fa:	2002      	movs	r0, #2
 80139fc:	e7fc      	b.n	80139f8 <USBH_Init+0x38>

080139fe <USBH_DeInit>:
{
 80139fe:	b510      	push	{r4, lr}
 8013a00:	4604      	mov	r4, r0
  DeInitStateMachine(phost);
 8013a02:	f7ff ffbb 	bl	801397c <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 8013a06:	2300      	movs	r3, #0
  phost->device.is_connected = 0U;
 8013a08:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8013a0c:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 8013a10:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  phost->device.EnumCnt = 0U;
 8013a14:	f8a4 331e 	strh.w	r3, [r4, #798]	; 0x31e
  phost->device.is_ReEnumerated = 0U;
 8013a18:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  if (phost->pData != NULL)
 8013a1c:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8013a20:	b113      	cbz	r3, 8013a28 <USBH_DeInit+0x2a>
    USBH_LL_Stop(phost);
 8013a22:	4620      	mov	r0, r4
 8013a24:	f002 fb4c 	bl	80160c0 <USBH_LL_Stop>
}
 8013a28:	2000      	movs	r0, #0
 8013a2a:	bd10      	pop	{r4, pc}

08013a2c <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 8013a2c:	b149      	cbz	r1, 8013a42 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8013a2e:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8013a32:	b933      	cbnz	r3, 8013a42 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8013a34:	2201      	movs	r2, #1
 8013a36:	f8c0 2380 	str.w	r2, [r0, #896]	; 0x380
 8013a3a:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
      status = USBH_OK;
 8013a3e:	4618      	mov	r0, r3
 8013a40:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8013a42:	2002      	movs	r0, #2
  }

  return status;
}
 8013a44:	4770      	bx	lr

08013a46 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8013a46:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 8013a4a:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8013a4c:	bf86      	itte	hi
 8013a4e:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8013a52:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8013a54:	2002      	movls	r0, #2
  }

  return status;
}
 8013a56:	4770      	bx	lr

08013a58 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8013a58:	b570      	push	{r4, r5, r6, lr}
 8013a5a:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013a5c:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
 8013a60:	428e      	cmp	r6, r1
 8013a62:	b2e5      	uxtb	r5, r4
 8013a64:	d001      	beq.n	8013a6a <USBH_FindInterface+0x12>
 8013a66:	29ff      	cmp	r1, #255	; 0xff
 8013a68:	d10b      	bne.n	8013a82 <USBH_FindInterface+0x2a>
 8013a6a:	f890 6348 	ldrb.w	r6, [r0, #840]	; 0x348
 8013a6e:	4296      	cmp	r6, r2
 8013a70:	d001      	beq.n	8013a76 <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013a72:	2aff      	cmp	r2, #255	; 0xff
 8013a74:	d105      	bne.n	8013a82 <USBH_FindInterface+0x2a>
 8013a76:	f890 6349 	ldrb.w	r6, [r0, #841]	; 0x349
 8013a7a:	429e      	cmp	r6, r3
 8013a7c:	d004      	beq.n	8013a88 <USBH_FindInterface+0x30>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013a7e:	2bff      	cmp	r3, #255	; 0xff
 8013a80:	d002      	beq.n	8013a88 <USBH_FindInterface+0x30>
 8013a82:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013a84:	b114      	cbz	r4, 8013a8c <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8013a86:	25ff      	movs	r5, #255	; 0xff
}
 8013a88:	4628      	mov	r0, r5
 8013a8a:	bd70      	pop	{r4, r5, r6, pc}
 8013a8c:	2401      	movs	r4, #1
 8013a8e:	e7e5      	b.n	8013a5c <USBH_FindInterface+0x4>

08013a90 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8013a90:	b510      	push	{r4, lr}
 8013a92:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8013a94:	f002 fb06 	bl	80160a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8013a98:	2101      	movs	r1, #1
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	f002 fb82 	bl	80161a4 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8013aa0:	2000      	movs	r0, #0
 8013aa2:	bd10      	pop	{r4, pc}

08013aa4 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Stop(USBH_HandleTypeDef *phost)
{
 8013aa4:	b510      	push	{r4, lr}
  /* DeActivate VBUS on the port */
  USBH_LL_DriverVBUS(phost, FALSE);
 8013aa6:	2100      	movs	r1, #0
{
 8013aa8:	4604      	mov	r4, r0
  USBH_LL_DriverVBUS(phost, FALSE);
 8013aaa:	f002 fb7b 	bl	80161a4 <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  USBH_LL_Stop(phost);
 8013aae:	4620      	mov	r0, r4
 8013ab0:	f002 fb06 	bl	80160c0 <USBH_LL_Stop>

  /* Free Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8013ab4:	7921      	ldrb	r1, [r4, #4]
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f000 fca8 	bl	801440c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8013abc:	7961      	ldrb	r1, [r4, #5]
 8013abe:	4620      	mov	r0, r4
 8013ac0:	f000 fca4 	bl	801440c <USBH_FreePipe>

  return USBH_OK;
}
 8013ac4:	2000      	movs	r0, #0
 8013ac6:	bd10      	pop	{r4, pc}

08013ac8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8013ac8:	b570      	push	{r4, r5, r6, lr}
 8013aca:	b086      	sub	sp, #24
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8013acc:	2302      	movs	r3, #2
 8013ace:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8013ad2:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8013ad6:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8013ad8:	bf04      	itt	eq
 8013ada:	2303      	moveq	r3, #3
 8013adc:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 8013ade:	7803      	ldrb	r3, [r0, #0]
{
 8013ae0:	4604      	mov	r4, r0
  switch (phost->gState)
 8013ae2:	2b0b      	cmp	r3, #11
 8013ae4:	d81d      	bhi.n	8013b22 <USBH_Process+0x5a>
 8013ae6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013aea:	000c      	.short	0x000c
 8013aec:	0041001f 	.word	0x0041001f
 8013af0:	001c019b 	.word	0x001c019b
 8013af4:	017f0076 	.word	0x017f0076
 8013af8:	0147013f 	.word	0x0147013f
 8013afc:	015c0150 	.word	0x015c0150
 8013b00:	0193      	.short	0x0193
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8013b02:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 8013b06:	b163      	cbz	r3, 8013b22 <USBH_Process+0x5a>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	7003      	strb	r3, [r0, #0]
        USBH_Delay(200U);
 8013b0c:	20c8      	movs	r0, #200	; 0xc8
 8013b0e:	f002 fb72 	bl	80161f6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8013b12:	4620      	mov	r0, r4
 8013b14:	f002 faf0 	bl	80160f8 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8013b1e:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 8013b22:	2000      	movs	r0, #0
 8013b24:	b006      	add	sp, #24
 8013b26:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
 8013b28:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
 8013b2c:	2b01      	cmp	r3, #1
 8013b2e:	d105      	bne.n	8013b3c <USBH_Process+0x74>
        phost->device.RstCnt = 0U;
 8013b30:	2300      	movs	r3, #0
 8013b32:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8013b36:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
 8013b38:	7023      	strb	r3, [r4, #0]
 8013b3a:	e7f2      	b.n	8013b22 <USBH_Process+0x5a>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8013b3c:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8013b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013b44:	d90b      	bls.n	8013b5e <USBH_Process+0x96>
          phost->device.RstCnt++;
 8013b46:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 8013b4e:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 8013b50:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8013b54:	d901      	bls.n	8013b5a <USBH_Process+0x92>
        phost->gState = HOST_ABORT_STATE;
 8013b56:	230d      	movs	r3, #13
 8013b58:	e7ee      	b.n	8013b38 <USBH_Process+0x70>
            phost->gState = HOST_IDLE;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	e7ec      	b.n	8013b38 <USBH_Process+0x70>
          phost->Timeout += 10U;
 8013b5e:	330a      	adds	r3, #10
 8013b60:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
          USBH_Delay(10U);
 8013b64:	200a      	movs	r0, #10
 8013b66:	f002 fb46 	bl	80161f6 <USBH_Delay>
 8013b6a:	e7da      	b.n	8013b22 <USBH_Process+0x5a>
      if (phost->pUser != NULL)
 8013b6c:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8013b70:	b10b      	cbz	r3, 8013b76 <USBH_Process+0xae>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8013b72:	2104      	movs	r1, #4
 8013b74:	4798      	blx	r3
      USBH_Delay(100U);
 8013b76:	2064      	movs	r0, #100	; 0x64
 8013b78:	f002 fb3d 	bl	80161f6 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8013b7c:	4620      	mov	r0, r4
 8013b7e:	f002 faad 	bl	80160dc <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 8013b82:	2305      	movs	r3, #5
 8013b84:	7023      	strb	r3, [r4, #0]
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8013b86:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	f000 fc25 	bl	80143dc <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013b92:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013b94:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013b96:	4620      	mov	r0, r4
 8013b98:	f000 fc20 	bl	80143dc <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013b9c:	79a2      	ldrb	r2, [r4, #6]
 8013b9e:	9202      	str	r2, [sp, #8]
 8013ba0:	2500      	movs	r5, #0
 8013ba2:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013ba6:	7120      	strb	r0, [r4, #4]
 8013ba8:	4601      	mov	r1, r0
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013baa:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8013bae:	9200      	str	r2, [sp, #0]
 8013bb0:	9501      	str	r5, [sp, #4]
 8013bb2:	2280      	movs	r2, #128	; 0x80
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	f000 fbfd 	bl	80143b4 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013bba:	79a2      	ldrb	r2, [r4, #6]
 8013bbc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8013bc0:	7961      	ldrb	r1, [r4, #5]
 8013bc2:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8013bc6:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8013bca:	9200      	str	r2, [sp, #0]
 8013bcc:	4620      	mov	r0, r4
 8013bce:	462a      	mov	r2, r5
 8013bd0:	f000 fbf0 	bl	80143b4 <USBH_OpenPipe>
      break;
 8013bd4:	e7a5      	b.n	8013b22 <USBH_Process+0x5a>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 8013bd6:	7843      	ldrb	r3, [r0, #1]
 8013bd8:	2b07      	cmp	r3, #7
 8013bda:	d82b      	bhi.n	8013c34 <USBH_Process+0x16c>
 8013bdc:	e8df f003 	tbb	[pc, r3]
 8013be0:	64484104 	.word	0x64484104
 8013be4:	a294866a 	.word	0xa294866a
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013be8:	2108      	movs	r1, #8
 8013bea:	f000 fa54 	bl	8014096 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8013bee:	4606      	mov	r6, r0
 8013bf0:	b9f0      	cbnz	r0, 8013c30 <USBH_Process+0x168>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8013bf2:	f894 232d 	ldrb.w	r2, [r4, #813]	; 0x32d
 8013bf6:	71a2      	strb	r2, [r4, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013bf8:	2501      	movs	r5, #1

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013bfa:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8013bfe:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8013c02:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8013c06:	7921      	ldrb	r1, [r4, #4]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013c08:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013c0a:	9200      	str	r2, [sp, #0]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013c0c:	2280      	movs	r2, #128	; 0x80
 8013c0e:	4620      	mov	r0, r4
 8013c10:	f000 fbd0 	bl	80143b4 <USBH_OpenPipe>
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013c14:	79a2      	ldrb	r2, [r4, #6]
 8013c16:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8013c1a:	7961      	ldrb	r1, [r4, #5]
 8013c1c:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8013c20:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8013c24:	9200      	str	r2, [sp, #0]
 8013c26:	4620      	mov	r0, r4
 8013c28:	4632      	mov	r2, r6
 8013c2a:	f000 fbc3 	bl	80143b4 <USBH_OpenPipe>
 8013c2e:	e001      	b.n	8013c34 <USBH_Process+0x16c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013c30:	2803      	cmp	r0, #3
 8013c32:	d001      	beq.n	8013c38 <USBH_Process+0x170>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013c34:	2301      	movs	r3, #1
 8013c36:	e079      	b.n	8013d2c <USBH_Process+0x264>
        phost->device.EnumCnt++;
 8013c38:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8013c3c:	3301      	adds	r3, #1
 8013c3e:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8013c40:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8013c42:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013c46:	d901      	bls.n	8013c4c <USBH_Process+0x184>
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 8013c48:	230d      	movs	r3, #13
 8013c4a:	e008      	b.n	8013c5e <USBH_Process+0x196>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013c4c:	7961      	ldrb	r1, [r4, #5]
 8013c4e:	4620      	mov	r0, r4
 8013c50:	f000 fbdc 	bl	801440c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013c54:	7921      	ldrb	r1, [r4, #4]
 8013c56:	4620      	mov	r0, r4
 8013c58:	f000 fbd8 	bl	801440c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8013c5c:	2300      	movs	r3, #0
          USBH_FreePipe(phost, phost->Control.pipe_out);
          USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 8013c5e:	7023      	strb	r3, [r4, #0]
 8013c60:	e7e8      	b.n	8013c34 <USBH_Process+0x16c>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8013c62:	2112      	movs	r1, #18
 8013c64:	f000 fa17 	bl	8014096 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8013c68:	bb58      	cbnz	r0, 8013cc2 <USBH_Process+0x1fa>
        phost->EnumState = ENUM_SET_ADDR;
 8013c6a:	2302      	movs	r3, #2
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013c6c:	7063      	strb	r3, [r4, #1]
 8013c6e:	e7e1      	b.n	8013c34 <USBH_Process+0x16c>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8013c70:	2101      	movs	r1, #1
 8013c72:	f000 fb0c 	bl	801428e <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8013c76:	4606      	mov	r6, r0
 8013c78:	b980      	cbnz	r0, 8013c9c <USBH_Process+0x1d4>
        USBH_Delay(2U);
 8013c7a:	2002      	movs	r0, #2
 8013c7c:	f002 fabb 	bl	80161f6 <USBH_Delay>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8013c80:	2303      	movs	r3, #3
 8013c82:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013c84:	79a3      	ldrb	r3, [r4, #6]
 8013c86:	7921      	ldrb	r1, [r4, #4]
        phost->device.address = USBH_DEVICE_ADDRESS;
 8013c88:	2501      	movs	r5, #1
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013c8a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8013c8e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8013c92:	9300      	str	r3, [sp, #0]
        phost->device.address = USBH_DEVICE_ADDRESS;
 8013c94:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013c98:	462b      	mov	r3, r5
 8013c9a:	e7b7      	b.n	8013c0c <USBH_Process+0x144>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013c9c:	2803      	cmp	r0, #3
 8013c9e:	d1c9      	bne.n	8013c34 <USBH_Process+0x16c>
        phost->gState = HOST_ABORT_STATE;
 8013ca0:	230d      	movs	r3, #13
 8013ca2:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	e7e1      	b.n	8013c6c <USBH_Process+0x1a4>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8013ca8:	2109      	movs	r1, #9
 8013caa:	f000 fa3c 	bl	8014126 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8013cae:	b940      	cbnz	r0, 8013cc2 <USBH_Process+0x1fa>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8013cb0:	2304      	movs	r3, #4
 8013cb2:	e7db      	b.n	8013c6c <USBH_Process+0x1a4>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8013cb4:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 8013cb8:	f000 fa35 	bl	8014126 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8013cbc:	b908      	cbnz	r0, 8013cc2 <USBH_Process+0x1fa>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8013cbe:	2305      	movs	r3, #5
 8013cc0:	e7d4      	b.n	8013c6c <USBH_Process+0x1a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013cc2:	2803      	cmp	r0, #3
 8013cc4:	d1b6      	bne.n	8013c34 <USBH_Process+0x16c>
        phost->device.EnumCnt++;
 8013cc6:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8013cca:	3301      	adds	r3, #1
 8013ccc:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8013cce:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8013cd0:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013cd4:	d8b8      	bhi.n	8013c48 <USBH_Process+0x180>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013cd6:	7961      	ldrb	r1, [r4, #5]
 8013cd8:	4620      	mov	r0, r4
 8013cda:	f000 fb97 	bl	801440c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013cde:	7921      	ldrb	r1, [r4, #4]
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	f000 fb93 	bl	801440c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	7063      	strb	r3, [r4, #1]
 8013cea:	e7b8      	b.n	8013c5e <USBH_Process+0x196>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8013cec:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 8013cf0:	b129      	cbz	r1, 8013cfe <USBH_Process+0x236>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013cf2:	23ff      	movs	r3, #255	; 0xff
 8013cf4:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8013cf8:	f000 faa2 	bl	8014240 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8013cfc:	b908      	cbnz	r0, 8013d02 <USBH_Process+0x23a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013cfe:	2306      	movs	r3, #6
 8013d00:	e7b4      	b.n	8013c6c <USBH_Process+0x1a4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013d02:	2803      	cmp	r0, #3
 8013d04:	d196      	bne.n	8013c34 <USBH_Process+0x16c>
 8013d06:	e7fa      	b.n	8013cfe <USBH_Process+0x236>
      if (phost->device.DevDesc.iProduct != 0U)
 8013d08:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 8013d0c:	b129      	cbz	r1, 8013d1a <USBH_Process+0x252>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013d0e:	23ff      	movs	r3, #255	; 0xff
 8013d10:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8013d14:	f000 fa94 	bl	8014240 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8013d18:	b908      	cbnz	r0, 8013d1e <USBH_Process+0x256>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013d1a:	2307      	movs	r3, #7
 8013d1c:	e7a6      	b.n	8013c6c <USBH_Process+0x1a4>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013d1e:	2803      	cmp	r0, #3
 8013d20:	d188      	bne.n	8013c34 <USBH_Process+0x16c>
 8013d22:	e7fa      	b.n	8013d1a <USBH_Process+0x252>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8013d24:	f890 1336 	ldrb.w	r1, [r0, #822]	; 0x336
 8013d28:	b989      	cbnz	r1, 8013d4e <USBH_Process+0x286>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 8013d2a:	2300      	movs	r3, #0
      status = USBH_HandleEnum(phost);
 8013d2c:	f88d 3017 	strb.w	r3, [sp, #23]
      if (status == USBH_OK)
 8013d30:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8013d34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	f47f aef2 	bne.w	8013b22 <USBH_Process+0x5a>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8013d3e:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
        phost->device.current_interface = 0U;
 8013d42:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8013d46:	2b01      	cmp	r3, #1
 8013d48:	d10c      	bne.n	8013d64 <USBH_Process+0x29c>
        phost->gState = HOST_SET_CONFIGURATION;
 8013d4a:	2308      	movs	r3, #8
 8013d4c:	e6f4      	b.n	8013b38 <USBH_Process+0x70>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013d4e:	23ff      	movs	r3, #255	; 0xff
 8013d50:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8013d54:	f000 fa74 	bl	8014240 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	d0e6      	beq.n	8013d2a <USBH_Process+0x262>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013d5c:	1ec3      	subs	r3, r0, #3
 8013d5e:	bf18      	it	ne
 8013d60:	2301      	movne	r3, #1
 8013d62:	e7e3      	b.n	8013d2c <USBH_Process+0x264>
          phost->gState = HOST_INPUT;
 8013d64:	2307      	movs	r3, #7
 8013d66:	e6e7      	b.n	8013b38 <USBH_Process+0x70>
      if (phost->pUser != NULL)
 8013d68:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	f43f aed8 	beq.w	8013b22 <USBH_Process+0x5a>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8013d72:	2101      	movs	r1, #1
 8013d74:	4798      	blx	r3
 8013d76:	e7e8      	b.n	8013d4a <USBH_Process+0x282>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8013d78:	f890 133d 	ldrb.w	r1, [r0, #829]	; 0x33d
 8013d7c:	f000 fa94 	bl	80142a8 <USBH_SetCfg>
 8013d80:	2800      	cmp	r0, #0
 8013d82:	f47f aece 	bne.w	8013b22 <USBH_Process+0x5a>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8013d86:	2309      	movs	r3, #9
 8013d88:	e6d6      	b.n	8013b38 <USBH_Process+0x70>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8013d8a:	f890 333f 	ldrb.w	r3, [r0, #831]	; 0x33f
 8013d8e:	069b      	lsls	r3, r3, #26
 8013d90:	d505      	bpl.n	8013d9e <USBH_Process+0x2d6>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8013d92:	2101      	movs	r1, #1
 8013d94:	f000 fa95 	bl	80142c2 <USBH_SetFeature>
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	f47f aec2 	bne.w	8013b22 <USBH_Process+0x5a>
        phost->gState = HOST_CHECK_CLASS;
 8013d9e:	230a      	movs	r3, #10
 8013da0:	e6ca      	b.n	8013b38 <USBH_Process+0x70>
      if (phost->ClassNumber == 0U)
 8013da2:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	f43f aebb 	beq.w	8013b22 <USBH_Process+0x5a>
        phost->pActiveClass = NULL;
 8013dac:	2300      	movs	r3, #0
 8013dae:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8013db2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8013db6:	f890 2347 	ldrb.w	r2, [r0, #839]	; 0x347
 8013dba:	7919      	ldrb	r1, [r3, #4]
 8013dbc:	4291      	cmp	r1, r2
            phost->pActiveClass = phost->pClass[idx];
 8013dbe:	bf08      	it	eq
 8013dc0:	f8c0 337c 	streq.w	r3, [r0, #892]	; 0x37c
        if (phost->pActiveClass != NULL)
 8013dc4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	f43f aec4 	beq.w	8013b56 <USBH_Process+0x8e>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8013dce:	689b      	ldr	r3, [r3, #8]
 8013dd0:	4798      	blx	r3
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	f47f aebf 	bne.w	8013b56 <USBH_Process+0x8e>
            phost->gState = HOST_CLASS_REQUEST;
 8013dd8:	2306      	movs	r3, #6
 8013dda:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8013ddc:	2103      	movs	r1, #3
 8013dde:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8013de2:	4620      	mov	r0, r4
 8013de4:	4798      	blx	r3
 8013de6:	e69c      	b.n	8013b22 <USBH_Process+0x5a>
      if (phost->pActiveClass != NULL)
 8013de8:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	f43f aeb2 	beq.w	8013b56 <USBH_Process+0x8e>
        status = phost->pActiveClass->Requests(phost);
 8013df2:	691b      	ldr	r3, [r3, #16]
 8013df4:	4798      	blx	r3
 8013df6:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8013dfa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8013dfe:	b90b      	cbnz	r3, 8013e04 <USBH_Process+0x33c>
          phost->gState = HOST_CLASS;
 8013e00:	230b      	movs	r3, #11
 8013e02:	e699      	b.n	8013b38 <USBH_Process+0x70>
        else if (status == USBH_FAIL)
 8013e04:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8013e08:	2b02      	cmp	r3, #2
 8013e0a:	f47f ae8a 	bne.w	8013b22 <USBH_Process+0x5a>
 8013e0e:	e6a2      	b.n	8013b56 <USBH_Process+0x8e>
      if (phost->pActiveClass != NULL)
 8013e10:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	f43f ae84 	beq.w	8013b22 <USBH_Process+0x5a>
        phost->pActiveClass->BgndProcess(phost);
 8013e1a:	695b      	ldr	r3, [r3, #20]
 8013e1c:	4798      	blx	r3
 8013e1e:	e680      	b.n	8013b22 <USBH_Process+0x5a>
      phost->device.is_disconnected = 0U;
 8013e20:	2500      	movs	r5, #0
 8013e22:	f880 5321 	strb.w	r5, [r0, #801]	; 0x321
      DeInitStateMachine(phost);
 8013e26:	f7ff fda9 	bl	801397c <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 8013e2a:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8013e2e:	b123      	cbz	r3, 8013e3a <USBH_Process+0x372>
        phost->pActiveClass->DeInit(phost);
 8013e30:	68db      	ldr	r3, [r3, #12]
 8013e32:	4620      	mov	r0, r4
 8013e34:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8013e36:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 8013e3a:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8013e3e:	b113      	cbz	r3, 8013e46 <USBH_Process+0x37e>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8013e40:	2105      	movs	r1, #5
 8013e42:	4620      	mov	r0, r4
 8013e44:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8013e46:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8013e4a:	2b01      	cmp	r3, #1
 8013e4c:	d106      	bne.n	8013e5c <USBH_Process+0x394>
        phost->device.is_ReEnumerated = 0U;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        USBH_Start(phost);
 8013e54:	4620      	mov	r0, r4
 8013e56:	f7ff fe1b 	bl	8013a90 <USBH_Start>
 8013e5a:	e662      	b.n	8013b22 <USBH_Process+0x5a>
        USBH_LL_Start(phost);
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	f002 f921 	bl	80160a4 <USBH_LL_Start>
 8013e62:	e65e      	b.n	8013b22 <USBH_Process+0x5a>

08013e64 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8013e64:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8013e68:	4770      	bx	lr

08013e6a <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 8013e6a:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 8013e6e:	3201      	adds	r2, #1
 8013e70:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8013e74:	7802      	ldrb	r2, [r0, #0]
 8013e76:	2a0b      	cmp	r2, #11
 8013e78:	d104      	bne.n	8013e84 <USBH_LL_IncTimer+0x1a>
 8013e7a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013e7e:	b10b      	cbz	r3, 8013e84 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013e80:	699b      	ldr	r3, [r3, #24]
 8013e82:	4718      	bx	r3
}
 8013e84:	4770      	bx	lr

08013e86 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8013e86:	2301      	movs	r3, #1
 8013e88:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8013e8c:	4770      	bx	lr

08013e8e <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8013e94:	4770      	bx	lr

08013e96 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 8013e96:	2301      	movs	r3, #1
 8013e98:	f880 3320 	strb.w	r3, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8013ea2:	f880 3322 	strb.w	r3, [r0, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	4770      	bx	lr

08013eaa <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8013eaa:	b538      	push	{r3, r4, r5, lr}
 8013eac:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8013eae:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 8013eb0:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 8013eb2:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 8013eb6:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 8013eba:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320

  /* Stop Host */
  USBH_LL_Stop(phost);
 8013ebe:	f002 f8ff 	bl	80160c0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8013ec2:	7921      	ldrb	r1, [r4, #4]
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	f000 faa1 	bl	801440c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8013eca:	7961      	ldrb	r1, [r4, #5]
 8013ecc:	4620      	mov	r0, r4
 8013ece:	f000 fa9d 	bl	801440c <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	bd38      	pop	{r3, r4, r5, pc}

08013ed6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013ed6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ed8:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8013eda:	7880      	ldrb	r0, [r0, #2]
 8013edc:	2801      	cmp	r0, #1
 8013ede:	d003      	beq.n	8013ee8 <USBH_CtlReq+0x12>
 8013ee0:	2802      	cmp	r0, #2
 8013ee2:	d008      	beq.n	8013ef6 <USBH_CtlReq+0x20>
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
        {
          phost->Control.state = CTRL_ERROR;
 8013ee4:	2001      	movs	r0, #1
  return status;
 8013ee6:	e004      	b.n	8013ef2 <USBH_CtlReq+0x1c>
      phost->RequestState = CMD_WAIT;
 8013ee8:	2302      	movs	r3, #2
      phost->Control.buff = buff;
 8013eea:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 8013eec:	81a2      	strh	r2, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 8013eee:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_WAIT;
 8013ef0:	70a3      	strb	r3, [r4, #2]
}
 8013ef2:	b003      	add	sp, #12
 8013ef4:	bd30      	pop	{r4, r5, pc}
  switch (phost->Control.state)
 8013ef6:	7e23      	ldrb	r3, [r4, #24]
 8013ef8:	3b01      	subs	r3, #1
 8013efa:	2101      	movs	r1, #1
 8013efc:	2b0a      	cmp	r3, #10
 8013efe:	d8f1      	bhi.n	8013ee4 <USBH_CtlReq+0xe>
 8013f00:	e8df f003 	tbb	[pc, r3]
 8013f04:	372c0f06 	.word	0x372c0f06
 8013f08:	6f644d41 	.word	0x6f644d41
 8013f0c:	897d      	.short	0x897d
 8013f0e:	92          	.byte	0x92
 8013f0f:	00          	.byte	0x00
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013f10:	7962      	ldrb	r2, [r4, #5]
 8013f12:	f104 0110 	add.w	r1, r4, #16
 8013f16:	4620      	mov	r0, r4
 8013f18:	f000 f9ed 	bl	80142f6 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 8013f1c:	2302      	movs	r3, #2

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8013f1e:	7623      	strb	r3, [r4, #24]
 8013f20:	e7e0      	b.n	8013ee4 <USBH_CtlReq+0xe>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013f22:	7961      	ldrb	r1, [r4, #5]
 8013f24:	4620      	mov	r0, r4
 8013f26:	f002 f939 	bl	801619c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013f2a:	2801      	cmp	r0, #1
 8013f2c:	d110      	bne.n	8013f50 <USBH_CtlReq+0x7a>
        if (phost->Control.setup.b.wLength.w != 0U)
 8013f2e:	8ae2      	ldrh	r2, [r4, #22]
 8013f30:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8013f34:	b132      	cbz	r2, 8013f44 <USBH_CtlReq+0x6e>
          if (direction == USB_D2H)
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	da02      	bge.n	8013f40 <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
 8013f3a:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
 8013f3c:	7623      	strb	r3, [r4, #24]
 8013f3e:	e7d8      	b.n	8013ef2 <USBH_CtlReq+0x1c>
            phost->Control.state = CTRL_DATA_OUT;
 8013f40:	2305      	movs	r3, #5
 8013f42:	e7ec      	b.n	8013f1e <USBH_CtlReq+0x48>
          if (direction == USB_D2H)
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	da01      	bge.n	8013f4c <USBH_CtlReq+0x76>
        phost->Control.state = CTRL_STATUS_OUT;
 8013f48:	2309      	movs	r3, #9
 8013f4a:	e7e8      	b.n	8013f1e <USBH_CtlReq+0x48>
            phost->Control.state = CTRL_STATUS_IN;
 8013f4c:	2307      	movs	r3, #7
 8013f4e:	e7e6      	b.n	8013f1e <USBH_CtlReq+0x48>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8013f50:	2804      	cmp	r0, #4
 8013f52:	d001      	beq.n	8013f58 <USBH_CtlReq+0x82>
 8013f54:	2802      	cmp	r0, #2
 8013f56:	d1c5      	bne.n	8013ee4 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8013f58:	230b      	movs	r3, #11
 8013f5a:	e7e0      	b.n	8013f1e <USBH_CtlReq+0x48>
      phost->Control.timer = (uint16_t)phost->Timer;
 8013f5c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8013f60:	81e3      	strh	r3, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8013f62:	89a2      	ldrh	r2, [r4, #12]
 8013f64:	7923      	ldrb	r3, [r4, #4]
 8013f66:	68a1      	ldr	r1, [r4, #8]
 8013f68:	4620      	mov	r0, r4
 8013f6a:	f000 f9ec 	bl	8014346 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8013f6e:	2304      	movs	r3, #4
 8013f70:	e7d5      	b.n	8013f1e <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013f72:	7921      	ldrb	r1, [r4, #4]
 8013f74:	4620      	mov	r0, r4
 8013f76:	f002 f911 	bl	801619c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013f7a:	2801      	cmp	r0, #1
 8013f7c:	d0e4      	beq.n	8013f48 <USBH_CtlReq+0x72>
      if (URB_Status == USBH_URB_STALL)
 8013f7e:	2805      	cmp	r0, #5
 8013f80:	d015      	beq.n	8013fae <USBH_CtlReq+0xd8>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8013f82:	2804      	cmp	r0, #4
 8013f84:	e7e7      	b.n	8013f56 <USBH_CtlReq+0x80>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8013f86:	7963      	ldrb	r3, [r4, #5]
 8013f88:	9100      	str	r1, [sp, #0]
 8013f8a:	89a2      	ldrh	r2, [r4, #12]
 8013f8c:	68a1      	ldr	r1, [r4, #8]
 8013f8e:	4620      	mov	r0, r4
 8013f90:	f000 f9c2 	bl	8014318 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8013f94:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8013f98:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8013f9a:	2306      	movs	r3, #6
 8013f9c:	e7bf      	b.n	8013f1e <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013f9e:	7961      	ldrb	r1, [r4, #5]
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f002 f8fb 	bl	801619c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013fa6:	2801      	cmp	r0, #1
 8013fa8:	d0d0      	beq.n	8013f4c <USBH_CtlReq+0x76>
      else if (URB_Status == USBH_URB_STALL)
 8013faa:	2805      	cmp	r0, #5
 8013fac:	d104      	bne.n	8013fb8 <USBH_CtlReq+0xe2>
        status = USBH_OK;
 8013fae:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	e7c1      	b.n	8013f3c <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013fb8:	2802      	cmp	r0, #2
 8013fba:	d0c1      	beq.n	8013f40 <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
 8013fbc:	2804      	cmp	r0, #4
 8013fbe:	d191      	bne.n	8013ee4 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8013fc0:	230b      	movs	r3, #11
 8013fc2:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	70a3      	strb	r3, [r4, #2]
      status = USBH_HandleControl(phost);
 8013fc8:	2002      	movs	r0, #2
 8013fca:	e792      	b.n	8013ef2 <USBH_CtlReq+0x1c>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8013fcc:	2200      	movs	r2, #0
 8013fce:	7923      	ldrb	r3, [r4, #4]
 8013fd0:	4611      	mov	r1, r2
 8013fd2:	4620      	mov	r0, r4
 8013fd4:	f000 f9b7 	bl	8014346 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8013fd8:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8013fdc:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8013fde:	2308      	movs	r3, #8
 8013fe0:	e79d      	b.n	8013f1e <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013fe2:	7921      	ldrb	r1, [r4, #4]
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	f002 f8d9 	bl	801619c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013fea:	2801      	cmp	r0, #1
 8013fec:	d101      	bne.n	8013ff2 <USBH_CtlReq+0x11c>
        status = USBH_OK;
 8013fee:	2000      	movs	r0, #0
 8013ff0:	e7de      	b.n	8013fb0 <USBH_CtlReq+0xda>
      else if (URB_Status == USBH_URB_ERROR)
 8013ff2:	2804      	cmp	r0, #4
 8013ff4:	d0b0      	beq.n	8013f58 <USBH_CtlReq+0x82>
        if (URB_Status == USBH_URB_STALL)
 8013ff6:	2805      	cmp	r0, #5
 8013ff8:	f47f af74 	bne.w	8013ee4 <USBH_CtlReq+0xe>
 8013ffc:	e7d7      	b.n	8013fae <USBH_CtlReq+0xd8>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8013ffe:	2200      	movs	r2, #0
 8014000:	7963      	ldrb	r3, [r4, #5]
 8014002:	9100      	str	r1, [sp, #0]
 8014004:	4620      	mov	r0, r4
 8014006:	4611      	mov	r1, r2
 8014008:	f000 f986 	bl	8014318 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801400c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8014010:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014012:	230a      	movs	r3, #10
 8014014:	e783      	b.n	8013f1e <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014016:	7961      	ldrb	r1, [r4, #5]
 8014018:	4620      	mov	r0, r4
 801401a:	f002 f8bf 	bl	801619c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801401e:	2801      	cmp	r0, #1
 8014020:	d0e5      	beq.n	8013fee <USBH_CtlReq+0x118>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014022:	2802      	cmp	r0, #2
 8014024:	d1ad      	bne.n	8013f82 <USBH_CtlReq+0xac>
 8014026:	e78f      	b.n	8013f48 <USBH_CtlReq+0x72>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014028:	7e63      	ldrb	r3, [r4, #25]
 801402a:	3301      	adds	r3, #1
 801402c:	b2db      	uxtb	r3, r3
 801402e:	2b02      	cmp	r3, #2
 8014030:	7663      	strb	r3, [r4, #25]
 8014032:	d803      	bhi.n	801403c <USBH_CtlReq+0x166>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8014034:	2001      	movs	r0, #1
 8014036:	7620      	strb	r0, [r4, #24]
        phost->RequestState = CMD_SEND;
 8014038:	70a0      	strb	r0, [r4, #2]
 801403a:	e75a      	b.n	8013ef2 <USBH_CtlReq+0x1c>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801403c:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8014040:	2106      	movs	r1, #6
 8014042:	4620      	mov	r0, r4
        phost->Control.errorcount = 0U;
 8014044:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8014046:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8014048:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 801404a:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801404c:	4620      	mov	r0, r4
 801404e:	f000 f9dd 	bl	801440c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8014052:	7921      	ldrb	r1, [r4, #4]
 8014054:	4620      	mov	r0, r4
 8014056:	f000 f9d9 	bl	801440c <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 801405a:	7025      	strb	r5, [r4, #0]
 801405c:	e7b2      	b.n	8013fc4 <USBH_CtlReq+0xee>

0801405e <USBH_GetDescriptor>:
{
 801405e:	b430      	push	{r4, r5}
  if (phost->RequestState == CMD_SEND)
 8014060:	7884      	ldrb	r4, [r0, #2]
{
 8014062:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8014066:	2c01      	cmp	r4, #1
 8014068:	d110      	bne.n	801408c <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801406a:	f061 047f 	orn	r4, r1, #127	; 0x7f
 801406e:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8014070:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8014074:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8014078:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801407a:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801407e:	bf0c      	ite	eq
 8014080:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8014084:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8014086:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8014088:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 801408a:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 801408c:	462a      	mov	r2, r5
 801408e:	4619      	mov	r1, r3
}
 8014090:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8014092:	f7ff bf20 	b.w	8013ed6 <USBH_CtlReq>

08014096 <USBH_Get_DevDesc>:
{
 8014096:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
 8014098:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 801409c:	460d      	mov	r5, r1
 801409e:	9100      	str	r1, [sp, #0]
 80140a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80140a4:	2100      	movs	r1, #0
{
 80140a6:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
 80140a8:	f7ff ffd9 	bl	801405e <USBH_GetDescriptor>
 80140ac:	bbc8      	cbnz	r0, 8014122 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80140ae:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80140b2:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80140b6:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 80140ba:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 80140be:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 80140c2:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80140c6:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 80140ca:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80140ce:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 80140d2:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80140d6:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 80140da:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
  if (length > 8U)
 80140de:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80140e0:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 80140e4:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
  if (length > 8U)
 80140e8:	d91b      	bls.n	8014122 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
 80140ea:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 80140ee:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 80140f2:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 80140f6:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 80140fa:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 80140fe:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8014102:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8014106:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 801410a:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 801410e:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8014112:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8014116:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 801411a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801411e:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
}
 8014122:	b003      	add	sp, #12
 8014124:	bd30      	pop	{r4, r5, pc}

08014126 <USBH_Get_CfgDesc>:
{
 8014126:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 801412a:	f100 041c 	add.w	r4, r0, #28
{
 801412e:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8014130:	9100      	str	r1, [sp, #0]
 8014132:	4623      	mov	r3, r4
 8014134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014138:	2100      	movs	r1, #0
{
 801413a:	4605      	mov	r5, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801413c:	f7ff ff8f 	bl	801405e <USBH_GetDescriptor>
 8014140:	bb40      	cbnz	r0, 8014194 <USBH_Get_CfgDesc+0x6e>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8014142:	7f2b      	ldrb	r3, [r5, #28]
 8014144:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8014148:	7f6b      	ldrb	r3, [r5, #29]
 801414a:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 801414e:	f895 3020 	ldrb.w	r3, [r5, #32]
 8014152:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8014156:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 801415a:	f885 333d 	strb.w	r3, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 801415e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8014162:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8014166:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16(buf + 2);
 801416a:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 801416e:	f885 333f 	strb.w	r3, [r5, #831]	; 0x33f
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8014172:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8014174:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8014178:	f8a5 c33a 	strh.w	ip, [r5, #826]	; 0x33a
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 801417c:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8014180:	d908      	bls.n	8014194 <USBH_Get_CfgDesc+0x6e>
 8014182:	462b      	mov	r3, r5
 8014184:	4607      	mov	r7, r0
    ptr = USB_LEN_CFG_DESC;
 8014186:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8014188:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801418c:	2f02      	cmp	r7, #2
 801418e:	d001      	beq.n	8014194 <USBH_Get_CfgDesc+0x6e>
 8014190:	4594      	cmp	ip, r2
 8014192:	d802      	bhi.n	801419a <USBH_Get_CfgDesc+0x74>
}
 8014194:	b003      	add	sp, #12
 8014196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801419a:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801419c:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801419e:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80141a0:	7861      	ldrb	r1, [r4, #1]
 80141a2:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80141a4:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80141a6:	d1f1      	bne.n	801418c <USBH_Get_CfgDesc+0x66>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80141a8:	7821      	ldrb	r1, [r4, #0]
 80141aa:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80141ae:	7861      	ldrb	r1, [r4, #1]
 80141b0:	f883 1343 	strb.w	r1, [r3, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80141b4:	78a1      	ldrb	r1, [r4, #2]
 80141b6:	f883 1344 	strb.w	r1, [r3, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80141ba:	78e1      	ldrb	r1, [r4, #3]
 80141bc:	f883 1345 	strb.w	r1, [r3, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80141c0:	7921      	ldrb	r1, [r4, #4]
 80141c2:	f883 1346 	strb.w	r1, [r3, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80141c6:	7961      	ldrb	r1, [r4, #5]
 80141c8:	f883 1347 	strb.w	r1, [r3, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80141cc:	79a1      	ldrb	r1, [r4, #6]
 80141ce:	f883 1348 	strb.w	r1, [r3, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80141d2:	79e1      	ldrb	r1, [r4, #7]
 80141d4:	f883 1349 	strb.w	r1, [r3, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80141d8:	7a21      	ldrb	r1, [r4, #8]
 80141da:	f883 134a 	strb.w	r1, [r3, #842]	; 0x34a
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80141de:	fb0e f807 	mul.w	r8, lr, r7
        ep_ix = 0U;
 80141e2:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80141e4:	f893 6346 	ldrb.w	r6, [r3, #838]	; 0x346
 80141e8:	428e      	cmp	r6, r1
 80141ea:	d901      	bls.n	80141f0 <USBH_Get_CfgDesc+0xca>
 80141ec:	4594      	cmp	ip, r2
 80141ee:	d802      	bhi.n	80141f6 <USBH_Get_CfgDesc+0xd0>
 80141f0:	3701      	adds	r7, #1
 80141f2:	331a      	adds	r3, #26
 80141f4:	e7ca      	b.n	801418c <USBH_Get_CfgDesc+0x66>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80141f6:	7826      	ldrb	r6, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80141f8:	4434      	add	r4, r6
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80141fa:	4432      	add	r2, r6
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80141fc:	7866      	ldrb	r6, [r4, #1]
 80141fe:	2e05      	cmp	r6, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8014200:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8014202:	d1ef      	bne.n	80141e4 <USBH_Get_CfgDesc+0xbe>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8014204:	1c4e      	adds	r6, r1, #1
 8014206:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
 801420a:	4429      	add	r1, r5
 801420c:	f894 9000 	ldrb.w	r9, [r4]
 8014210:	f881 9344 	strb.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8014214:	f894 9001 	ldrb.w	r9, [r4, #1]
 8014218:	f881 9345 	strb.w	r9, [r1, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801421c:	f894 9002 	ldrb.w	r9, [r4, #2]
 8014220:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8014224:	f894 9003 	ldrb.w	r9, [r4, #3]
 8014228:	f881 9347 	strb.w	r9, [r1, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801422c:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8014230:	f8a1 9348 	strh.w	r9, [r1, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8014234:	f894 9006 	ldrb.w	r9, [r4, #6]
 8014238:	f881 934a 	strb.w	r9, [r1, #842]	; 0x34a
            ep_ix++;
 801423c:	b2f1      	uxtb	r1, r6
 801423e:	e7d1      	b.n	80141e4 <USBH_Get_CfgDesc+0xbe>

08014240 <USBH_Get_StringDesc>:
{
 8014240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
 8014242:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8014246:	4614      	mov	r4, r2
 8014248:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
 801424a:	9300      	str	r3, [sp, #0]
 801424c:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8014250:	462b      	mov	r3, r5
 8014252:	2100      	movs	r1, #0
{
 8014254:	4606      	mov	r6, r0
  if ((status = USBH_GetDescriptor(phost,
 8014256:	f7ff ff02 	bl	801405e <USBH_GetDescriptor>
 801425a:	b978      	cbnz	r0, 801427c <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 801425c:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8014260:	2b03      	cmp	r3, #3
 8014262:	d10b      	bne.n	801427c <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8014264:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8014268:	3b02      	subs	r3, #2
 801426a:	42bb      	cmp	r3, r7
 801426c:	bf28      	it	cs
 801426e:	463b      	movcs	r3, r7
 8014270:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8014272:	4602      	mov	r2, r0
 8014274:	4293      	cmp	r3, r2
 8014276:	d803      	bhi.n	8014280 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8014278:	2300      	movs	r3, #0
 801427a:	7023      	strb	r3, [r4, #0]
}
 801427c:	b003      	add	sp, #12
 801427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8014280:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8014282:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8014284:	7889      	ldrb	r1, [r1, #2]
 8014286:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 801428a:	b292      	uxth	r2, r2
 801428c:	e7f2      	b.n	8014274 <USBH_Get_StringDesc+0x34>

0801428e <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 801428e:	7883      	ldrb	r3, [r0, #2]
 8014290:	2b01      	cmp	r3, #1
 8014292:	d105      	bne.n	80142a0 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8014294:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8014298:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 801429a:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801429c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801429e:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 80142a0:	2200      	movs	r2, #0
 80142a2:	4611      	mov	r1, r2
 80142a4:	f7ff be17 	b.w	8013ed6 <USBH_CtlReq>

080142a8 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 80142a8:	7883      	ldrb	r3, [r0, #2]
 80142aa:	2b01      	cmp	r3, #1
 80142ac:	d105      	bne.n	80142ba <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80142ae:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80142b2:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80142b4:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 80142b6:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80142b8:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 80142ba:	2200      	movs	r2, #0
 80142bc:	4611      	mov	r1, r2
 80142be:	f7ff be0a 	b.w	8013ed6 <USBH_CtlReq>

080142c2 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 80142c2:	7883      	ldrb	r3, [r0, #2]
 80142c4:	2b01      	cmp	r3, #1
 80142c6:	d105      	bne.n	80142d4 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80142c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80142cc:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80142ce:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 80142d0:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80142d2:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 80142d4:	2200      	movs	r2, #0
 80142d6:	4611      	mov	r1, r2
 80142d8:	f7ff bdfd 	b.w	8013ed6 <USBH_CtlReq>

080142dc <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 80142dc:	7883      	ldrb	r3, [r0, #2]
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d105      	bne.n	80142ee <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80142e2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80142e6:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 80142e8:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 80142ea:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80142ec:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 80142ee:	2200      	movs	r2, #0
 80142f0:	4611      	mov	r1, r2
 80142f2:	f7ff bdf0 	b.w	8013ed6 <USBH_CtlReq>

080142f6 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80142f6:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80142f8:	2308      	movs	r3, #8
{
 80142fa:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80142fc:	2400      	movs	r4, #0
{
 80142fe:	4615      	mov	r5, r2
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014300:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014304:	e9cd 4100 	strd	r4, r1, [sp]
 8014308:	4623      	mov	r3, r4
 801430a:	4622      	mov	r2, r4
 801430c:	4629      	mov	r1, r5
 801430e:	f001 ff2b 	bl	8016168 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 8014312:	4620      	mov	r0, r4
 8014314:	b005      	add	sp, #20
 8014316:	bd30      	pop	{r4, r5, pc}

08014318 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8014318:	b530      	push	{r4, r5, lr}
 801431a:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 801431c:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014320:	9101      	str	r1, [sp, #4]
{
 8014322:	461c      	mov	r4, r3
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014324:	2d00      	cmp	r5, #0
{
 8014326:	f89d 3020 	ldrb.w	r3, [sp, #32]
    do_ping = 0U;
 801432a:	bf18      	it	ne
 801432c:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801432e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014332:	2301      	movs	r3, #1
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	2300      	movs	r3, #0
 8014338:	461a      	mov	r2, r3
 801433a:	4621      	mov	r1, r4
 801433c:	f001 ff14 	bl	8016168 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8014340:	2000      	movs	r0, #0
 8014342:	b005      	add	sp, #20
 8014344:	bd30      	pop	{r4, r5, pc}

08014346 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8014346:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014348:	2400      	movs	r4, #0
{
 801434a:	b085      	sub	sp, #20
 801434c:	461d      	mov	r5, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801434e:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8014352:	2201      	movs	r2, #1
 8014354:	9101      	str	r1, [sp, #4]
 8014356:	9200      	str	r2, [sp, #0]
 8014358:	4623      	mov	r3, r4
 801435a:	4629      	mov	r1, r5
 801435c:	f001 ff04 	bl	8016168 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 8014360:	4620      	mov	r0, r4
 8014362:	b005      	add	sp, #20
 8014364:	bd30      	pop	{r4, r5, pc}

08014366 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8014366:	b530      	push	{r4, r5, lr}
 8014368:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 801436a:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801436e:	9101      	str	r1, [sp, #4]
{
 8014370:	461c      	mov	r4, r3
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014372:	2d00      	cmp	r5, #0
{
 8014374:	f89d 3020 	ldrb.w	r3, [sp, #32]
    do_ping = 0U;
 8014378:	bf18      	it	ne
 801437a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801437c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014380:	2301      	movs	r3, #1
 8014382:	9300      	str	r3, [sp, #0]
 8014384:	2200      	movs	r2, #0
 8014386:	2302      	movs	r3, #2
 8014388:	4621      	mov	r1, r4
 801438a:	f001 feed 	bl	8016168 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 801438e:	2000      	movs	r0, #0
 8014390:	b005      	add	sp, #20
 8014392:	bd30      	pop	{r4, r5, pc}

08014394 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8014394:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014396:	2400      	movs	r4, #0
{
 8014398:	b085      	sub	sp, #20
 801439a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801439c:	e9cd 2402 	strd	r2, r4, [sp, #8]
 80143a0:	2201      	movs	r2, #1
 80143a2:	9101      	str	r1, [sp, #4]
 80143a4:	9200      	str	r2, [sp, #0]
 80143a6:	2302      	movs	r3, #2
 80143a8:	4629      	mov	r1, r5
 80143aa:	f001 fedd 	bl	8016168 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 80143ae:	4620      	mov	r0, r4
 80143b0:	b005      	add	sp, #20
 80143b2:	bd30      	pop	{r4, r5, pc}

080143b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80143b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80143b6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80143ba:	9402      	str	r4, [sp, #8]
 80143bc:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80143c0:	9401      	str	r4, [sp, #4]
 80143c2:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80143c6:	9400      	str	r4, [sp, #0]
 80143c8:	f001 fea8 	bl	801611c <USBH_LL_OpenPipe>

  return USBH_OK;
}
 80143cc:	2000      	movs	r0, #0
 80143ce:	b004      	add	sp, #16
 80143d0:	bd10      	pop	{r4, pc}

080143d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80143d2:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 80143d4:	f001 feba 	bl	801614c <USBH_LL_ClosePipe>

  return USBH_OK;
}
 80143d8:	2000      	movs	r0, #0
 80143da:	bd08      	pop	{r3, pc}

080143dc <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80143dc:	b530      	push	{r4, r5, lr}
 80143de:	2300      	movs	r3, #0
 80143e0:	f500 7461 	add.w	r4, r0, #900	; 0x384
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80143e4:	f854 5b04 	ldr.w	r5, [r4], #4
 80143e8:	042d      	lsls	r5, r5, #16
 80143ea:	b2da      	uxtb	r2, r3
 80143ec:	d408      	bmi.n	8014400 <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80143ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80143f2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 80143f6:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80143f8:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
}
 80143fc:	b2d0      	uxtb	r0, r2
 80143fe:	bd30      	pop	{r4, r5, pc}
 8014400:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8014402:	2b0b      	cmp	r3, #11
 8014404:	d1ee      	bne.n	80143e4 <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 8014406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801440a:	e7f7      	b.n	80143fc <USBH_AllocPipe+0x20>

0801440c <USBH_FreePipe>:
  if (idx < 11U)
 801440c:	290a      	cmp	r1, #10
 801440e:	bf9f      	itttt	ls
 8014410:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
    phost->Pipes[idx] &= 0x7FFFU;
 8014414:	f8d0 3384 	ldrls.w	r3, [r0, #900]	; 0x384
 8014418:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 801441c:	f8c0 3384 	strls.w	r3, [r0, #900]	; 0x384
}
 8014420:	2000      	movs	r0, #0
 8014422:	4770      	bx	lr

08014424 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014424:	4b03      	ldr	r3, [pc, #12]	; (8014434 <disk_status+0x10>)
 8014426:	181a      	adds	r2, r3, r0
 8014428:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801442c:	7b10      	ldrb	r0, [r2, #12]
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	685b      	ldr	r3, [r3, #4]
 8014432:	4718      	bx	r3
 8014434:	20001468 	.word	0x20001468

08014438 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8014438:	4b06      	ldr	r3, [pc, #24]	; (8014454 <disk_initialize+0x1c>)
 801443a:	5c1a      	ldrb	r2, [r3, r0]
 801443c:	b942      	cbnz	r2, 8014450 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 801443e:	2201      	movs	r2, #1
 8014440:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014442:	181a      	adds	r2, r3, r0
 8014444:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8014448:	7b10      	ldrb	r0, [r2, #12]
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	4718      	bx	r3
  }
  return stat;
}
 8014450:	2000      	movs	r0, #0
 8014452:	4770      	bx	lr
 8014454:	20001468 	.word	0x20001468

08014458 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014458:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801445a:	4c05      	ldr	r4, [pc, #20]	; (8014470 <disk_read+0x18>)
 801445c:	1825      	adds	r5, r4, r0
 801445e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8014462:	6860      	ldr	r0, [r4, #4]
 8014464:	6884      	ldr	r4, [r0, #8]
 8014466:	7b28      	ldrb	r0, [r5, #12]
 8014468:	46a4      	mov	ip, r4
  return res;
}
 801446a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801446c:	4760      	bx	ip
 801446e:	bf00      	nop
 8014470:	20001468 	.word	0x20001468

08014474 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014474:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014476:	4c05      	ldr	r4, [pc, #20]	; (801448c <disk_write+0x18>)
 8014478:	1825      	adds	r5, r4, r0
 801447a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 801447e:	6860      	ldr	r0, [r4, #4]
 8014480:	68c4      	ldr	r4, [r0, #12]
 8014482:	7b28      	ldrb	r0, [r5, #12]
 8014484:	46a4      	mov	ip, r4
  return res;
}
 8014486:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014488:	4760      	bx	ip
 801448a:	bf00      	nop
 801448c:	20001468 	.word	0x20001468

08014490 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014490:	4b05      	ldr	r3, [pc, #20]	; (80144a8 <disk_ioctl+0x18>)
{
 8014492:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014494:	181c      	adds	r4, r3, r0
 8014496:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801449a:	7b20      	ldrb	r0, [r4, #12]
 801449c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 801449e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80144a2:	691b      	ldr	r3, [r3, #16]
 80144a4:	4718      	bx	r3
 80144a6:	bf00      	nop
 80144a8:	20001468 	.word	0x20001468

080144ac <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80144ac:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80144ae:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80144b0:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80144b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80144b6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80144ba:	4770      	bx	lr

080144bc <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80144bc:	0a0b      	lsrs	r3, r1, #8
 80144be:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80144c0:	7043      	strb	r3, [r0, #1]
 80144c2:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80144c4:	0e09      	lsrs	r1, r1, #24
 80144c6:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80144c8:	70c1      	strb	r1, [r0, #3]
}
 80144ca:	4770      	bx	lr

080144cc <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80144cc:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80144ce:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80144d2:	4290      	cmp	r0, r2
 80144d4:	d1fb      	bne.n	80144ce <mem_set+0x2>
}
 80144d6:	4770      	bx	lr

080144d8 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 80144d8:	4a1b      	ldr	r2, [pc, #108]	; (8014548 <chk_lock+0x70>)
 80144da:	6813      	ldr	r3, [r2, #0]
{
 80144dc:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 80144de:	b163      	cbz	r3, 80144fa <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80144e0:	6804      	ldr	r4, [r0, #0]
 80144e2:	429c      	cmp	r4, r3
 80144e4:	d107      	bne.n	80144f6 <chk_lock+0x1e>
 80144e6:	6854      	ldr	r4, [r2, #4]
 80144e8:	6883      	ldr	r3, [r0, #8]
 80144ea:	429c      	cmp	r4, r3
 80144ec:	d103      	bne.n	80144f6 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 80144ee:	6894      	ldr	r4, [r2, #8]
 80144f0:	6943      	ldr	r3, [r0, #20]
 80144f2:	429c      	cmp	r4, r3
 80144f4:	d020      	beq.n	8014538 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80144f6:	2400      	movs	r4, #0
 80144f8:	e000      	b.n	80144fc <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 80144fa:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 80144fc:	6913      	ldr	r3, [r2, #16]
 80144fe:	b1cb      	cbz	r3, 8014534 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014500:	6805      	ldr	r5, [r0, #0]
 8014502:	42ab      	cmp	r3, r5
 8014504:	d107      	bne.n	8014516 <chk_lock+0x3e>
 8014506:	6955      	ldr	r5, [r2, #20]
 8014508:	6883      	ldr	r3, [r0, #8]
 801450a:	429d      	cmp	r5, r3
 801450c:	d103      	bne.n	8014516 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 801450e:	6995      	ldr	r5, [r2, #24]
 8014510:	6943      	ldr	r3, [r0, #20]
 8014512:	429d      	cmp	r5, r3
 8014514:	d015      	beq.n	8014542 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014516:	b96c      	cbnz	r4, 8014534 <chk_lock+0x5c>
 8014518:	2902      	cmp	r1, #2
 801451a:	bf0c      	ite	eq
 801451c:	2000      	moveq	r0, #0
 801451e:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8014520:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014522:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8014526:	8993      	ldrh	r3, [r2, #12]
 8014528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801452c:	bf14      	ite	ne
 801452e:	2000      	movne	r0, #0
 8014530:	2010      	moveq	r0, #16
 8014532:	e7f5      	b.n	8014520 <chk_lock+0x48>
 8014534:	2000      	movs	r0, #0
 8014536:	e7f3      	b.n	8014520 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014538:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801453a:	2900      	cmp	r1, #0
 801453c:	d0f1      	beq.n	8014522 <chk_lock+0x4a>
 801453e:	2010      	movs	r0, #16
 8014540:	e7ee      	b.n	8014520 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014542:	2301      	movs	r3, #1
 8014544:	e7f9      	b.n	801453a <chk_lock+0x62>
 8014546:	bf00      	nop
 8014548:	20001244 	.word	0x20001244

0801454c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 801454c:	4a1e      	ldr	r2, [pc, #120]	; (80145c8 <inc_lock+0x7c>)
{
 801454e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8014550:	6813      	ldr	r3, [r2, #0]
 8014552:	6805      	ldr	r5, [r0, #0]
 8014554:	429d      	cmp	r5, r3
 8014556:	d107      	bne.n	8014568 <inc_lock+0x1c>
 8014558:	6856      	ldr	r6, [r2, #4]
 801455a:	6884      	ldr	r4, [r0, #8]
 801455c:	42a6      	cmp	r6, r4
 801455e:	d103      	bne.n	8014568 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8014560:	6946      	ldr	r6, [r0, #20]
 8014562:	6894      	ldr	r4, [r2, #8]
 8014564:	42a6      	cmp	r6, r4
 8014566:	d021      	beq.n	80145ac <inc_lock+0x60>
		if (Files[i].fs == dp->obj.fs &&
 8014568:	6914      	ldr	r4, [r2, #16]
 801456a:	42ac      	cmp	r4, r5
 801456c:	d107      	bne.n	801457e <inc_lock+0x32>
 801456e:	6957      	ldr	r7, [r2, #20]
 8014570:	6886      	ldr	r6, [r0, #8]
 8014572:	42b7      	cmp	r7, r6
 8014574:	d103      	bne.n	801457e <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 8014576:	6997      	ldr	r7, [r2, #24]
 8014578:	6946      	ldr	r6, [r0, #20]
 801457a:	42b7      	cmp	r7, r6
 801457c:	d020      	beq.n	80145c0 <inc_lock+0x74>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801457e:	b10b      	cbz	r3, 8014584 <inc_lock+0x38>
 8014580:	bb04      	cbnz	r4, 80145c4 <inc_lock+0x78>
 8014582:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8014584:	011e      	lsls	r6, r3, #4
 8014586:	1994      	adds	r4, r2, r6
 8014588:	5195      	str	r5, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 801458a:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 801458c:	6940      	ldr	r0, [r0, #20]
 801458e:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8014590:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8014592:	6065      	str	r5, [r4, #4]
		Files[i].ctr = 0;
 8014594:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014596:	b981      	cbnz	r1, 80145ba <inc_lock+0x6e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014598:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 801459c:	8989      	ldrh	r1, [r1, #12]
 801459e:	3101      	adds	r1, #1
 80145a0:	b289      	uxth	r1, r1
 80145a2:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 80145a6:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80145a8:	8191      	strh	r1, [r2, #12]
}
 80145aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80145ac:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80145ae:	2900      	cmp	r1, #0
 80145b0:	d0f2      	beq.n	8014598 <inc_lock+0x4c>
 80145b2:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80145b6:	8989      	ldrh	r1, [r1, #12]
 80145b8:	b921      	cbnz	r1, 80145c4 <inc_lock+0x78>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80145ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80145be:	e7f0      	b.n	80145a2 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80145c0:	2301      	movs	r3, #1
 80145c2:	e7f4      	b.n	80145ae <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80145c4:	2000      	movs	r0, #0
 80145c6:	e7f0      	b.n	80145aa <inc_lock+0x5e>
 80145c8:	20001244 	.word	0x20001244

080145cc <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80145cc:	3801      	subs	r0, #1
 80145ce:	2801      	cmp	r0, #1
 80145d0:	d814      	bhi.n	80145fc <dec_lock+0x30>
		n = Files[i].ctr;
 80145d2:	490b      	ldr	r1, [pc, #44]	; (8014600 <dec_lock+0x34>)
 80145d4:	0102      	lsls	r2, r0, #4
 80145d6:	1888      	adds	r0, r1, r2
 80145d8:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80145da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145de:	d104      	bne.n	80145ea <dec_lock+0x1e>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 80145e0:	2300      	movs	r3, #0
 80145e2:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80145e4:	2000      	movs	r0, #0
 80145e6:	5088      	str	r0, [r1, r2]
 80145e8:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d0fa      	beq.n	80145e4 <dec_lock+0x18>
 80145ee:	3b01      	subs	r3, #1
 80145f0:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 80145f2:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d0f5      	beq.n	80145e4 <dec_lock+0x18>
		res = FR_OK;
 80145f8:	2000      	movs	r0, #0
 80145fa:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80145fc:	2002      	movs	r0, #2
	}
	return res;
}
 80145fe:	4770      	bx	lr
 8014600:	20001244 	.word	0x20001244

08014604 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014604:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;
 8014606:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014608:	3b02      	subs	r3, #2
 801460a:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 801460c:	bf83      	ittte	hi
 801460e:	8943      	ldrhhi	r3, [r0, #10]
 8014610:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
 8014612:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014616:	2000      	movls	r0, #0
}
 8014618:	4770      	bx	lr

0801461a <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801461a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 801461c:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 801461e:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014620:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014622:	89a3      	ldrh	r3, [r4, #12]
 8014624:	fbb1 f1f3 	udiv	r1, r1, r3
 8014628:	8963      	ldrh	r3, [r4, #10]
 801462a:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801462e:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014630:	b130      	cbz	r0, 8014640 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014632:	4281      	cmp	r1, r0
 8014634:	d302      	bcc.n	801463c <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8014636:	1a09      	subs	r1, r1, r0
 8014638:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801463a:	e7f8      	b.n	801462e <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 801463c:	6850      	ldr	r0, [r2, #4]
 801463e:	4408      	add	r0, r1
}
 8014640:	bd10      	pop	{r4, pc}

08014642 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014642:	4602      	mov	r2, r0
 8014644:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8014648:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801464a:	01c3      	lsls	r3, r0, #7
 801464c:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8014650:	f812 0b01 	ldrb.w	r0, [r2], #1
 8014654:	fa50 f383 	uxtab	r3, r0, r3
	} while (--n);
 8014658:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801465a:	b2d8      	uxtb	r0, r3
	} while (--n);
 801465c:	d1f5      	bne.n	801464a <sum_sfn+0x8>
	return sum;
}
 801465e:	4770      	bx	lr

08014660 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014660:	6803      	ldr	r3, [r0, #0]
{
 8014662:	b510      	push	{r4, lr}
 8014664:	4604      	mov	r4, r0
	if (*path) {	/* If the pointer is not a null */
 8014666:	b153      	cbz	r3, 801467e <get_ldnumber+0x1e>
 8014668:	4619      	mov	r1, r3
 801466a:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801466c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8014670:	281f      	cmp	r0, #31
 8014672:	d910      	bls.n	8014696 <get_ldnumber+0x36>
 8014674:	283a      	cmp	r0, #58	; 0x3a
 8014676:	d1f8      	bne.n	801466a <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8014678:	1c59      	adds	r1, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801467a:	428a      	cmp	r2, r1
 801467c:	d002      	beq.n	8014684 <get_ldnumber+0x24>
	int vol = -1;
 801467e:	f04f 30ff 	mov.w	r0, #4294967295
 8014682:	e007      	b.n	8014694 <get_ldnumber+0x34>
			i = *tp++ - '0';
 8014684:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014686:	3b30      	subs	r3, #48	; 0x30
 8014688:	b2d9      	uxtb	r1, r3
 801468a:	2901      	cmp	r1, #1
 801468c:	d8f7      	bhi.n	801467e <get_ldnumber+0x1e>
					vol = (int)i;
					*path = ++tt;
 801468e:	3201      	adds	r2, #1
			i = *tp++ - '0';
 8014690:	4618      	mov	r0, r3
					*path = ++tt;
 8014692:	6022      	str	r2, [r4, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8014694:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 8014696:	2000      	movs	r0, #0
 8014698:	e7fc      	b.n	8014694 <get_ldnumber+0x34>

0801469a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801469a:	b538      	push	{r3, r4, r5, lr}
 801469c:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801469e:	4604      	mov	r4, r0
 80146a0:	b918      	cbnz	r0, 80146aa <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80146a2:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80146a4:	2300      	movs	r3, #0
 80146a6:	602b      	str	r3, [r5, #0]
	return res;
}
 80146a8:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80146aa:	6803      	ldr	r3, [r0, #0]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d0f8      	beq.n	80146a2 <validate+0x8>
 80146b0:	781a      	ldrb	r2, [r3, #0]
 80146b2:	2a00      	cmp	r2, #0
 80146b4:	d0f5      	beq.n	80146a2 <validate+0x8>
 80146b6:	8881      	ldrh	r1, [r0, #4]
 80146b8:	88da      	ldrh	r2, [r3, #6]
 80146ba:	4291      	cmp	r1, r2
 80146bc:	d1f1      	bne.n	80146a2 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80146be:	7858      	ldrb	r0, [r3, #1]
 80146c0:	f7ff feb0 	bl	8014424 <disk_status>
 80146c4:	f010 0001 	ands.w	r0, r0, #1
 80146c8:	d1eb      	bne.n	80146a2 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80146ca:	6823      	ldr	r3, [r4, #0]
 80146cc:	e7eb      	b.n	80146a6 <validate+0xc>

080146ce <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80146ce:	3801      	subs	r0, #1
 80146d0:	440a      	add	r2, r1
			*d++ = *s++;
 80146d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146d6:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80146da:	4291      	cmp	r1, r2
 80146dc:	d1f9      	bne.n	80146d2 <mem_cpy.part.0+0x4>
}
 80146de:	4770      	bx	lr

080146e0 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 80146e0:	7eca      	ldrb	r2, [r1, #27]
 80146e2:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 80146e4:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80146e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80146ea:	bf01      	itttt	eq
 80146ec:	7d48      	ldrbeq	r0, [r1, #21]
 80146ee:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80146f0:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80146f4:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	4770      	bx	lr

080146fc <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 80146fc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014700:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8014702:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8014704:	7803      	ldrb	r3, [r0, #0]
 8014706:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014708:	bf01      	itttt	eq
 801470a:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801470c:	750a      	strbeq	r2, [r1, #20]
 801470e:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8014710:	754a      	strbeq	r2, [r1, #21]
}
 8014712:	4770      	bx	lr

08014714 <sync_window.part.3>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8014714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8014716:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014718:	f100 0738 	add.w	r7, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 801471c:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801471e:	2301      	movs	r3, #1
 8014720:	462a      	mov	r2, r5
 8014722:	4639      	mov	r1, r7
 8014724:	7840      	ldrb	r0, [r0, #1]
 8014726:	f7ff fea5 	bl	8014474 <disk_write>
 801472a:	b9a0      	cbnz	r0, 8014756 <sync_window.part.3+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801472c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801472e:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 8014730:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014732:	1aeb      	subs	r3, r5, r3
 8014734:	4293      	cmp	r3, r2
 8014736:	d301      	bcc.n	801473c <sync_window.part.3+0x28>
	FRESULT res = FR_OK;
 8014738:	2000      	movs	r0, #0
}
 801473a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801473c:	78a6      	ldrb	r6, [r4, #2]
 801473e:	2e01      	cmp	r6, #1
 8014740:	d9fa      	bls.n	8014738 <sync_window.part.3+0x24>
					wsect += fs->fsize;
 8014742:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014744:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8014746:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8014748:	462a      	mov	r2, r5
 801474a:	2301      	movs	r3, #1
 801474c:	4639      	mov	r1, r7
 801474e:	f7ff fe91 	bl	8014474 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014752:	3e01      	subs	r6, #1
 8014754:	e7f3      	b.n	801473e <sync_window.part.3+0x2a>
			res = FR_DISK_ERR;
 8014756:	2001      	movs	r0, #1
 8014758:	e7ef      	b.n	801473a <sync_window.part.3+0x26>

0801475a <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801475a:	78c3      	ldrb	r3, [r0, #3]
 801475c:	b10b      	cbz	r3, 8014762 <sync_window+0x8>
 801475e:	f7ff bfd9 	b.w	8014714 <sync_window.part.3>
}
 8014762:	4618      	mov	r0, r3
 8014764:	4770      	bx	lr

08014766 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014766:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014768:	428b      	cmp	r3, r1
{
 801476a:	b570      	push	{r4, r5, r6, lr}
 801476c:	4606      	mov	r6, r0
 801476e:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014770:	d012      	beq.n	8014798 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8014772:	f7ff fff2 	bl	801475a <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014776:	4604      	mov	r4, r0
 8014778:	b960      	cbnz	r0, 8014794 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801477a:	462a      	mov	r2, r5
 801477c:	2301      	movs	r3, #1
 801477e:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8014782:	7870      	ldrb	r0, [r6, #1]
 8014784:	f7ff fe68 	bl	8014458 <disk_read>
 8014788:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 801478a:	bf1c      	itt	ne
 801478c:	f04f 35ff 	movne.w	r5, #4294967295
 8014790:	2401      	movne	r4, #1
			fs->winsect = sector;
 8014792:	6375      	str	r5, [r6, #52]	; 0x34
}
 8014794:	4620      	mov	r0, r4
 8014796:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8014798:	2400      	movs	r4, #0
 801479a:	e7fb      	b.n	8014794 <move_window+0x2e>

0801479c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801479c:	2300      	movs	r3, #0
{
 801479e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80147a0:	70c3      	strb	r3, [r0, #3]
 80147a2:	f04f 33ff 	mov.w	r3, #4294967295
 80147a6:	6343      	str	r3, [r0, #52]	; 0x34
{
 80147a8:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80147aa:	f7ff ffdc 	bl	8014766 <move_window>
 80147ae:	bb30      	cbnz	r0, 80147fe <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 80147b0:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 80147b4:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 80147b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80147bc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80147c0:	4293      	cmp	r3, r2
 80147c2:	d11e      	bne.n	8014802 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80147c4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80147c8:	2be9      	cmp	r3, #233	; 0xe9
 80147ca:	d005      	beq.n	80147d8 <check_fs+0x3c>
 80147cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80147ce:	4a10      	ldr	r2, [pc, #64]	; (8014810 <check_fs+0x74>)
 80147d0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d116      	bne.n	8014806 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80147d8:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 80147dc:	f7ff fe66 	bl	80144ac <ld_dword>
 80147e0:	4b0c      	ldr	r3, [pc, #48]	; (8014814 <check_fs+0x78>)
 80147e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80147e6:	4298      	cmp	r0, r3
 80147e8:	d00f      	beq.n	801480a <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80147ea:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 80147ee:	f7ff fe5d 	bl	80144ac <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80147f2:	4b09      	ldr	r3, [pc, #36]	; (8014818 <check_fs+0x7c>)
 80147f4:	4298      	cmp	r0, r3
 80147f6:	bf14      	ite	ne
 80147f8:	2002      	movne	r0, #2
 80147fa:	2000      	moveq	r0, #0
}
 80147fc:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80147fe:	2004      	movs	r0, #4
 8014800:	e7fc      	b.n	80147fc <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014802:	2003      	movs	r0, #3
 8014804:	e7fa      	b.n	80147fc <check_fs+0x60>
	return 2;
 8014806:	2002      	movs	r0, #2
 8014808:	e7f8      	b.n	80147fc <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801480a:	2000      	movs	r0, #0
 801480c:	e7f6      	b.n	80147fc <check_fs+0x60>
 801480e:	bf00      	nop
 8014810:	009000eb 	.word	0x009000eb
 8014814:	00544146 	.word	0x00544146
 8014818:	33544146 	.word	0x33544146

0801481c <find_volume>:
{
 801481c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	*rfs = 0;
 8014820:	2300      	movs	r3, #0
 8014822:	600b      	str	r3, [r1, #0]
{
 8014824:	460f      	mov	r7, r1
 8014826:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8014828:	f7ff ff1a 	bl	8014660 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 801482c:	1e06      	subs	r6, r0, #0
 801482e:	f2c0 8157 	blt.w	8014ae0 <find_volume+0x2c4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014832:	4baf      	ldr	r3, [pc, #700]	; (8014af0 <find_volume+0x2d4>)
 8014834:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014838:	2c00      	cmp	r4, #0
 801483a:	f000 8153 	beq.w	8014ae4 <find_volume+0x2c8>
	*rfs = fs;							/* Return pointer to the file system object */
 801483e:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014840:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014842:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014846:	b173      	cbz	r3, 8014866 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8014848:	7860      	ldrb	r0, [r4, #1]
 801484a:	f7ff fdeb 	bl	8014424 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801484e:	07c1      	lsls	r1, r0, #31
 8014850:	d409      	bmi.n	8014866 <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014852:	2d00      	cmp	r5, #0
 8014854:	f000 8148 	beq.w	8014ae8 <find_volume+0x2cc>
 8014858:	f010 0004 	ands.w	r0, r0, #4
 801485c:	d000      	beq.n	8014860 <find_volume+0x44>
				return FR_WRITE_PROTECTED;
 801485e:	200a      	movs	r0, #10
}
 8014860:	b004      	add	sp, #16
 8014862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8014866:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014868:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 801486a:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801486c:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801486e:	f7ff fde3 	bl	8014438 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014872:	07c2      	lsls	r2, r0, #31
 8014874:	f100 813a 	bmi.w	8014aec <find_volume+0x2d0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014878:	b10d      	cbz	r5, 801487e <find_volume+0x62>
 801487a:	0743      	lsls	r3, r0, #29
 801487c:	d4ef      	bmi.n	801485e <find_volume+0x42>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801487e:	f104 020c 	add.w	r2, r4, #12
 8014882:	2102      	movs	r1, #2
 8014884:	7860      	ldrb	r0, [r4, #1]
 8014886:	f7ff fe03 	bl	8014490 <disk_ioctl>
 801488a:	b108      	cbz	r0, 8014890 <find_volume+0x74>
 801488c:	2001      	movs	r0, #1
 801488e:	e7e7      	b.n	8014860 <find_volume+0x44>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8014890:	89a5      	ldrh	r5, [r4, #12]
 8014892:	f5a5 7300 	sub.w	r3, r5, #512	; 0x200
 8014896:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 801489a:	d8f7      	bhi.n	801488c <find_volume+0x70>
 801489c:	1e69      	subs	r1, r5, #1
 801489e:	400d      	ands	r5, r1
 80148a0:	d1f4      	bne.n	801488c <find_volume+0x70>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80148a2:	4629      	mov	r1, r5
 80148a4:	4620      	mov	r0, r4
 80148a6:	f7ff ff79 	bl	801479c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80148aa:	2802      	cmp	r0, #2
 80148ac:	f040 80fd 	bne.w	8014aaa <find_volume+0x28e>
 80148b0:	f504 76ff 	add.w	r6, r4, #510	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80148b4:	f816 0c04 	ldrb.w	r0, [r6, #-4]
 80148b8:	b110      	cbz	r0, 80148c0 <find_volume+0xa4>
 80148ba:	4630      	mov	r0, r6
 80148bc:	f7ff fdf6 	bl	80144ac <ld_dword>
 80148c0:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80148c4:	3501      	adds	r5, #1
 80148c6:	2d04      	cmp	r5, #4
 80148c8:	f106 0610 	add.w	r6, r6, #16
 80148cc:	d1f2      	bne.n	80148b4 <find_volume+0x98>
 80148ce:	2500      	movs	r5, #0
			bsect = br[i];
 80148d0:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80148d4:	2e00      	cmp	r6, #0
 80148d6:	f000 80e0 	beq.w	8014a9a <find_volume+0x27e>
 80148da:	4631      	mov	r1, r6
 80148dc:	4620      	mov	r0, r4
 80148de:	f7ff ff5d 	bl	801479c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80148e2:	2801      	cmp	r0, #1
 80148e4:	f200 80da 	bhi.w	8014a9c <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 80148e8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80148ec:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80148f0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 80148f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80148f8:	4598      	cmp	r8, r3
 80148fa:	f040 80db 	bne.w	8014ab4 <find_volume+0x298>
	rv = rv << 8 | ptr[0];
 80148fe:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 8014902:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014906:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 801490a:	d104      	bne.n	8014916 <find_volume+0xfa>
 801490c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014910:	f7ff fdcc 	bl	80144ac <ld_dword>
 8014914:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014916:	f894 a048 	ldrb.w	sl, [r4, #72]	; 0x48
		fs->fsize = fasize;
 801491a:	6221      	str	r1, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801491c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014920:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014922:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014926:	f200 80c5 	bhi.w	8014ab4 <find_volume+0x298>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801492a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801492e:	b2ab      	uxth	r3, r5
 8014930:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014932:	2b00      	cmp	r3, #0
 8014934:	f000 80be 	beq.w	8014ab4 <find_volume+0x298>
 8014938:	1e6b      	subs	r3, r5, #1
 801493a:	422b      	tst	r3, r5
 801493c:	f040 80ba 	bne.w	8014ab4 <find_volume+0x298>
	rv = rv << 8 | ptr[0];
 8014940:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014944:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014948:	ea4f 1058 	mov.w	r0, r8, lsr #5
	rv = rv << 8 | ptr[0];
 801494c:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014950:	fbb9 f7f0 	udiv	r7, r9, r0
 8014954:	fb00 9017 	mls	r0, r0, r7, r9
 8014958:	b280      	uxth	r0, r0
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801495a:	f8a4 9008 	strh.w	r9, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801495e:	2800      	cmp	r0, #0
 8014960:	f040 80a8 	bne.w	8014ab4 <find_volume+0x298>
	rv = rv << 8 | ptr[0];
 8014964:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8014968:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801496c:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8014970:	d103      	bne.n	801497a <find_volume+0x15e>
 8014972:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014976:	f7ff fd99 	bl	80144ac <ld_dword>
	rv = rv << 8 | ptr[0];
 801497a:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 801497e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014982:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8014986:	f000 8095 	beq.w	8014ab4 <find_volume+0x298>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801498a:	fb01 fc0a 	mul.w	ip, r1, sl
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801498e:	18fa      	adds	r2, r7, r3
 8014990:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014992:	4290      	cmp	r0, r2
 8014994:	f0c0 808e 	bcc.w	8014ab4 <find_volume+0x298>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014998:	1a80      	subs	r0, r0, r2
 801499a:	fbb0 f0f5 	udiv	r0, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801499e:	2800      	cmp	r0, #0
 80149a0:	f000 8088 	beq.w	8014ab4 <find_volume+0x298>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80149a4:	f64f 77f5 	movw	r7, #65525	; 0xfff5
 80149a8:	42b8      	cmp	r0, r7
 80149aa:	bf8c      	ite	hi
 80149ac:	2703      	movhi	r7, #3
 80149ae:	2702      	movls	r7, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80149b0:	f640 75f5 	movw	r5, #4085	; 0xff5
 80149b4:	42a8      	cmp	r0, r5
 80149b6:	bf98      	it	ls
 80149b8:	2701      	movls	r7, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80149ba:	4433      	add	r3, r6
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80149bc:	1c85      	adds	r5, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 80149be:	4432      	add	r2, r6
		if (fmt == FS_FAT32) {
 80149c0:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80149c2:	61e5      	str	r5, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80149c4:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80149c6:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80149c8:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80149ca:	d177      	bne.n	8014abc <find_volume+0x2a0>
	rv = rv << 8 | ptr[0];
 80149cc:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 80149d0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80149d4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80149d8:	d16c      	bne.n	8014ab4 <find_volume+0x298>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80149da:	f1b9 0f00 	cmp.w	r9, #0
 80149de:	d169      	bne.n	8014ab4 <find_volume+0x298>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80149e0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80149e4:	f7ff fd62 	bl	80144ac <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80149e8:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80149ea:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80149ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80149f0:	441d      	add	r5, r3
 80149f2:	fbb5 f8f8 	udiv	r8, r5, r8
 80149f6:	4588      	cmp	r8, r1
 80149f8:	d85c      	bhi.n	8014ab4 <find_volume+0x298>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80149fa:	f04f 33ff 	mov.w	r3, #4294967295
 80149fe:	e9c4 3305 	strd	r3, r3, [r4, #20]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014a02:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8014a04:	f04f 0380 	mov.w	r3, #128	; 0x80
 8014a08:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014a0a:	d12f      	bne.n	8014a6c <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 8014a0c:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8014a10:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8014a14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014a18:	2b01      	cmp	r3, #1
 8014a1a:	d127      	bne.n	8014a6c <find_volume+0x250>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014a1c:	1c71      	adds	r1, r6, #1
 8014a1e:	4620      	mov	r0, r4
 8014a20:	f7ff fea1 	bl	8014766 <move_window>
 8014a24:	bb10      	cbnz	r0, 8014a6c <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 8014a26:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8014a2a:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 8014a2e:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8014a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014a34:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8014a38:	4293      	cmp	r3, r2
 8014a3a:	d117      	bne.n	8014a6c <find_volume+0x250>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014a3c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014a40:	f7ff fd34 	bl	80144ac <ld_dword>
 8014a44:	4b2b      	ldr	r3, [pc, #172]	; (8014af4 <find_volume+0x2d8>)
 8014a46:	4298      	cmp	r0, r3
 8014a48:	d110      	bne.n	8014a6c <find_volume+0x250>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014a4a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8014a4e:	f7ff fd2d 	bl	80144ac <ld_dword>
 8014a52:	4b29      	ldr	r3, [pc, #164]	; (8014af8 <find_volume+0x2dc>)
 8014a54:	4298      	cmp	r0, r3
 8014a56:	d109      	bne.n	8014a6c <find_volume+0x250>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014a58:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8014a5c:	f7ff fd26 	bl	80144ac <ld_dword>
 8014a60:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014a62:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8014a66:	f7ff fd21 	bl	80144ac <ld_dword>
 8014a6a:	6160      	str	r0, [r4, #20]
	fs->id = ++Fsid;		/* File system mount ID */
 8014a6c:	4a23      	ldr	r2, [pc, #140]	; (8014afc <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8014a6e:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014a70:	8813      	ldrh	r3, [r2, #0]
 8014a72:	3301      	adds	r3, #1
 8014a74:	b29b      	uxth	r3, r3
 8014a76:	8013      	strh	r3, [r2, #0]
 8014a78:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8014a7a:	4b21      	ldr	r3, [pc, #132]	; (8014b00 <find_volume+0x2e4>)
 8014a7c:	6123      	str	r3, [r4, #16]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8014a7e:	4b21      	ldr	r3, [pc, #132]	; (8014b04 <find_volume+0x2e8>)
 8014a80:	681a      	ldr	r2, [r3, #0]
 8014a82:	4294      	cmp	r4, r2
 8014a84:	bf04      	itt	eq
 8014a86:	2200      	moveq	r2, #0
 8014a88:	601a      	streq	r2, [r3, #0]
 8014a8a:	691a      	ldr	r2, [r3, #16]
 8014a8c:	4294      	cmp	r4, r2
 8014a8e:	f04f 0000 	mov.w	r0, #0
 8014a92:	f47f aee5 	bne.w	8014860 <find_volume+0x44>
 8014a96:	6118      	str	r0, [r3, #16]
 8014a98:	e6e2      	b.n	8014860 <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014a9a:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014a9c:	3501      	adds	r5, #1
 8014a9e:	2d04      	cmp	r5, #4
 8014aa0:	f47f af16 	bne.w	80148d0 <find_volume+0xb4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014aa4:	2804      	cmp	r0, #4
 8014aa6:	d105      	bne.n	8014ab4 <find_volume+0x298>
 8014aa8:	e6f0      	b.n	801488c <find_volume+0x70>
 8014aaa:	2804      	cmp	r0, #4
 8014aac:	f43f aeee 	beq.w	801488c <find_volume+0x70>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014ab0:	2801      	cmp	r0, #1
 8014ab2:	d901      	bls.n	8014ab8 <find_volume+0x29c>
 8014ab4:	200d      	movs	r0, #13
 8014ab6:	e6d3      	b.n	8014860 <find_volume+0x44>
	bsect = 0;
 8014ab8:	462e      	mov	r6, r5
 8014aba:	e715      	b.n	80148e8 <find_volume+0xcc>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014abc:	f1b9 0f00 	cmp.w	r9, #0
 8014ac0:	d0f8      	beq.n	8014ab4 <find_volume+0x298>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014ac2:	2f02      	cmp	r7, #2
 8014ac4:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8014ac8:	bf18      	it	ne
 8014aca:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014acc:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014ace:	bf18      	it	ne
 8014ad0:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014ad4:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014ad6:	bf0c      	ite	eq
 8014ad8:	4605      	moveq	r5, r0
 8014ada:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8014ade:	e785      	b.n	80149ec <find_volume+0x1d0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8014ae0:	200b      	movs	r0, #11
 8014ae2:	e6bd      	b.n	8014860 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014ae4:	200c      	movs	r0, #12
 8014ae6:	e6bb      	b.n	8014860 <find_volume+0x44>
			return FR_OK;				/* The file system object is valid */
 8014ae8:	4628      	mov	r0, r5
 8014aea:	e6b9      	b.n	8014860 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014aec:	2003      	movs	r0, #3
 8014aee:	e6b7      	b.n	8014860 <find_volume+0x44>
 8014af0:	2000123c 	.word	0x2000123c
 8014af4:	41615252 	.word	0x41615252
 8014af8:	61417272 	.word	0x61417272
 8014afc:	20001264 	.word	0x20001264
 8014b00:	20001266 	.word	0x20001266
 8014b04:	20001244 	.word	0x20001244

08014b08 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014b08:	2901      	cmp	r1, #1
{
 8014b0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b0e:	4604      	mov	r4, r0
 8014b10:	460d      	mov	r5, r1
 8014b12:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014b14:	f240 808a 	bls.w	8014c2c <put_fat+0x124>
 8014b18:	69c3      	ldr	r3, [r0, #28]
 8014b1a:	428b      	cmp	r3, r1
 8014b1c:	f240 8086 	bls.w	8014c2c <put_fat+0x124>
		switch (fs->fs_type) {
 8014b20:	7803      	ldrb	r3, [r0, #0]
 8014b22:	2b02      	cmp	r3, #2
 8014b24:	d049      	beq.n	8014bba <put_fat+0xb2>
 8014b26:	2b03      	cmp	r3, #3
 8014b28:	d060      	beq.n	8014bec <put_fat+0xe4>
 8014b2a:	2b01      	cmp	r3, #1
 8014b2c:	d17e      	bne.n	8014c2c <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 8014b2e:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014b32:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014b34:	8983      	ldrh	r3, [r0, #12]
 8014b36:	fbba f3f3 	udiv	r3, sl, r3
 8014b3a:	4419      	add	r1, r3
 8014b3c:	f7ff fe13 	bl	8014766 <move_window>
 8014b40:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8014b42:	bb78      	cbnz	r0, 8014ba4 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8014b44:	89a3      	ldrh	r3, [r4, #12]
 8014b46:	fbba f2f3 	udiv	r2, sl, r3
 8014b4a:	f104 0838 	add.w	r8, r4, #56	; 0x38
 8014b4e:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014b52:	f015 0501 	ands.w	r5, r5, #1
 8014b56:	bf1f      	itttt	ne
 8014b58:	f818 3002 	ldrbne.w	r3, [r8, r2]
 8014b5c:	f003 010f 	andne.w	r1, r3, #15
 8014b60:	013b      	lslne	r3, r7, #4
 8014b62:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8014b66:	bf14      	ite	ne
 8014b68:	430b      	orrne	r3, r1
 8014b6a:	b2fb      	uxtbeq	r3, r7
 8014b6c:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014b70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
			fs->wflag = 1;
 8014b72:	2301      	movs	r3, #1
 8014b74:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 8014b76:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014b7a:	89a3      	ldrh	r3, [r4, #12]
 8014b7c:	fbb9 f3f3 	udiv	r3, r9, r3
 8014b80:	4620      	mov	r0, r4
 8014b82:	4419      	add	r1, r3
 8014b84:	f7ff fdef 	bl	8014766 <move_window>
			if (res != FR_OK) break;
 8014b88:	4606      	mov	r6, r0
 8014b8a:	b958      	cbnz	r0, 8014ba4 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8014b8c:	89a3      	ldrh	r3, [r4, #12]
 8014b8e:	fbb9 f2f3 	udiv	r2, r9, r3
 8014b92:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014b96:	b145      	cbz	r5, 8014baa <put_fat+0xa2>
 8014b98:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8014b9c:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	70e3      	strb	r3, [r4, #3]
}
 8014ba4:	4630      	mov	r0, r6
 8014ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014baa:	f818 3002 	ldrb.w	r3, [r8, r2]
 8014bae:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8014bb2:	f023 030f 	bic.w	r3, r3, #15
 8014bb6:	431f      	orrs	r7, r3
 8014bb8:	e7f0      	b.n	8014b9c <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014bba:	8983      	ldrh	r3, [r0, #12]
 8014bbc:	085b      	lsrs	r3, r3, #1
 8014bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8014bc2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014bc4:	4419      	add	r1, r3
 8014bc6:	f7ff fdce 	bl	8014766 <move_window>
			if (res != FR_OK) break;
 8014bca:	4606      	mov	r6, r0
 8014bcc:	2800      	cmp	r0, #0
 8014bce:	d1e9      	bne.n	8014ba4 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014bd0:	89a1      	ldrh	r1, [r4, #12]
 8014bd2:	006d      	lsls	r5, r5, #1
 8014bd4:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8014bd8:	fbb5 f3f1 	udiv	r3, r5, r1
 8014bdc:	fb01 5513 	mls	r5, r1, r3, r5
 8014be0:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8014be2:	5557      	strb	r7, [r2, r5]
 8014be4:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8014be8:	705f      	strb	r7, [r3, #1]
 8014bea:	e7d9      	b.n	8014ba0 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014bec:	8983      	ldrh	r3, [r0, #12]
 8014bee:	089b      	lsrs	r3, r3, #2
 8014bf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8014bf4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014bf6:	4419      	add	r1, r3
 8014bf8:	f7ff fdb5 	bl	8014766 <move_window>
			if (res != FR_OK) break;
 8014bfc:	4606      	mov	r6, r0
 8014bfe:	2800      	cmp	r0, #0
 8014c00:	d1d0      	bne.n	8014ba4 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014c02:	89a1      	ldrh	r1, [r4, #12]
 8014c04:	00ad      	lsls	r5, r5, #2
 8014c06:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8014c0a:	fbb5 f2f1 	udiv	r2, r5, r1
 8014c0e:	fb01 5512 	mls	r5, r1, r2, r5
 8014c12:	441d      	add	r5, r3
 8014c14:	4628      	mov	r0, r5
 8014c16:	f7ff fc49 	bl	80144ac <ld_dword>
 8014c1a:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8014c1e:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014c22:	4339      	orrs	r1, r7
 8014c24:	4628      	mov	r0, r5
 8014c26:	f7ff fc49 	bl	80144bc <st_dword>
 8014c2a:	e7b9      	b.n	8014ba0 <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 8014c2c:	2602      	movs	r6, #2
 8014c2e:	e7b9      	b.n	8014ba4 <put_fat+0x9c>

08014c30 <get_fat.isra.7>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014c30:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8014c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c34:	4604      	mov	r4, r0
 8014c36:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014c38:	d968      	bls.n	8014d0c <get_fat.isra.7+0xdc>
 8014c3a:	69c3      	ldr	r3, [r0, #28]
 8014c3c:	4299      	cmp	r1, r3
 8014c3e:	d265      	bcs.n	8014d0c <get_fat.isra.7+0xdc>
		switch (fs->fs_type) {
 8014c40:	7803      	ldrb	r3, [r0, #0]
 8014c42:	2b02      	cmp	r3, #2
 8014c44:	d032      	beq.n	8014cac <get_fat.isra.7+0x7c>
 8014c46:	2b03      	cmp	r3, #3
 8014c48:	d048      	beq.n	8014cdc <get_fat.isra.7+0xac>
 8014c4a:	2b01      	cmp	r3, #1
 8014c4c:	d15e      	bne.n	8014d0c <get_fat.isra.7+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 8014c4e:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c52:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014c54:	8983      	ldrh	r3, [r0, #12]
 8014c56:	fbb5 f3f3 	udiv	r3, r5, r3
 8014c5a:	4419      	add	r1, r3
 8014c5c:	f7ff fd83 	bl	8014766 <move_window>
 8014c60:	b110      	cbz	r0, 8014c68 <get_fat.isra.7+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014c62:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8014c68:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];
 8014c6c:	fbb5 f2f1 	udiv	r2, r5, r1
 8014c70:	fb01 5212 	mls	r2, r1, r2, r5
 8014c74:	4422      	add	r2, r4
 8014c76:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c78:	4620      	mov	r0, r4
 8014c7a:	fbb7 f1f1 	udiv	r1, r7, r1
 8014c7e:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 8014c80:	f892 5038 	ldrb.w	r5, [r2, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c84:	f7ff fd6f 	bl	8014766 <move_window>
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	d1ea      	bne.n	8014c62 <get_fat.isra.7+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014c8c:	89a2      	ldrh	r2, [r4, #12]
 8014c8e:	fbb7 f3f2 	udiv	r3, r7, r2
 8014c92:	fb02 7313 	mls	r3, r2, r3, r7
 8014c96:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014c98:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8014c9a:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 8014c9e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014ca2:	bf4c      	ite	mi
 8014ca4:	0900      	lsrmi	r0, r0, #4
 8014ca6:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8014caa:	e7dc      	b.n	8014c66 <get_fat.isra.7+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014cac:	8983      	ldrh	r3, [r0, #12]
 8014cae:	085b      	lsrs	r3, r3, #1
 8014cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8014cb4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014cb6:	4419      	add	r1, r3
 8014cb8:	f7ff fd55 	bl	8014766 <move_window>
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	d1d0      	bne.n	8014c62 <get_fat.isra.7+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014cc0:	89a1      	ldrh	r1, [r4, #12]
 8014cc2:	0076      	lsls	r6, r6, #1
 8014cc4:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8014cc8:	fbb6 f3f1 	udiv	r3, r6, r1
 8014ccc:	fb01 6613 	mls	r6, r1, r3, r6
 8014cd0:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 8014cd2:	5d90      	ldrb	r0, [r2, r6]
 8014cd4:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014cd6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8014cda:	e7c4      	b.n	8014c66 <get_fat.isra.7+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014cdc:	8983      	ldrh	r3, [r0, #12]
 8014cde:	089b      	lsrs	r3, r3, #2
 8014ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8014ce4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014ce6:	4419      	add	r1, r3
 8014ce8:	f7ff fd3d 	bl	8014766 <move_window>
 8014cec:	2800      	cmp	r0, #0
 8014cee:	d1b8      	bne.n	8014c62 <get_fat.isra.7+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014cf0:	89a2      	ldrh	r2, [r4, #12]
 8014cf2:	00b6      	lsls	r6, r6, #2
 8014cf4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014cf8:	fbb6 f3f2 	udiv	r3, r6, r2
 8014cfc:	fb02 6613 	mls	r6, r2, r3, r6
 8014d00:	4430      	add	r0, r6
 8014d02:	f7ff fbd3 	bl	80144ac <ld_dword>
 8014d06:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8014d0a:	e7ac      	b.n	8014c66 <get_fat.isra.7+0x36>
			val = 1;	/* Internal error */
 8014d0c:	2001      	movs	r0, #1
 8014d0e:	e7aa      	b.n	8014c66 <get_fat.isra.7+0x36>

08014d10 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014d10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8014d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d16:	4605      	mov	r5, r0
 8014d18:	460e      	mov	r6, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014d1a:	d301      	bcc.n	8014d20 <dir_sdi+0x10>
		return FR_INT_ERR;
 8014d1c:	2002      	movs	r0, #2
}
 8014d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014d20:	06ca      	lsls	r2, r1, #27
 8014d22:	d1fb      	bne.n	8014d1c <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014d24:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8014d26:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8014d28:	6169      	str	r1, [r5, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014d2a:	b9d2      	cbnz	r2, 8014d62 <dir_sdi+0x52>
 8014d2c:	7823      	ldrb	r3, [r4, #0]
 8014d2e:	2b02      	cmp	r3, #2
 8014d30:	d901      	bls.n	8014d36 <dir_sdi+0x26>
		clst = fs->dirbase;
 8014d32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014d34:	b9b3      	cbnz	r3, 8014d64 <dir_sdi+0x54>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014d36:	8923      	ldrh	r3, [r4, #8]
 8014d38:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8014d3c:	d9ee      	bls.n	8014d1c <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 8014d3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014d40:	61eb      	str	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8014d42:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014d44:	69ea      	ldr	r2, [r5, #28]
 8014d46:	2a00      	cmp	r2, #0
 8014d48:	d0e8      	beq.n	8014d1c <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014d4a:	89a1      	ldrh	r1, [r4, #12]
 8014d4c:	fbb6 f3f1 	udiv	r3, r6, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014d50:	3438      	adds	r4, #56	; 0x38
 8014d52:	fb01 6613 	mls	r6, r1, r3, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014d56:	441a      	add	r2, r3
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014d58:	4434      	add	r4, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014d5a:	61ea      	str	r2, [r5, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014d5c:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8014d5e:	2000      	movs	r0, #0
 8014d60:	e7dd      	b.n	8014d1e <dir_sdi+0xe>
 8014d62:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014d64:	8962      	ldrh	r2, [r4, #10]
 8014d66:	89a7      	ldrh	r7, [r4, #12]
 8014d68:	4357      	muls	r7, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	42be      	cmp	r6, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014d6e:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8014d70:	d204      	bcs.n	8014d7c <dir_sdi+0x6c>
		dp->sect = clust2sect(fs, clst);
 8014d72:	4620      	mov	r0, r4
 8014d74:	f7ff fc46 	bl	8014604 <clust2sect>
 8014d78:	61e8      	str	r0, [r5, #28]
 8014d7a:	e7e2      	b.n	8014d42 <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014d7c:	6828      	ldr	r0, [r5, #0]
 8014d7e:	f7ff ff57 	bl	8014c30 <get_fat.isra.7>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014d82:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014d84:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014d86:	d006      	beq.n	8014d96 <dir_sdi+0x86>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014d88:	2801      	cmp	r0, #1
 8014d8a:	d9c7      	bls.n	8014d1c <dir_sdi+0xc>
 8014d8c:	69e3      	ldr	r3, [r4, #28]
 8014d8e:	4283      	cmp	r3, r0
 8014d90:	d9c4      	bls.n	8014d1c <dir_sdi+0xc>
			ofs -= csz;
 8014d92:	1bf6      	subs	r6, r6, r7
 8014d94:	e7ea      	b.n	8014d6c <dir_sdi+0x5c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014d96:	2001      	movs	r0, #1
 8014d98:	e7c1      	b.n	8014d1e <dir_sdi+0xe>

08014d9a <create_chain>:
{
 8014d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d9e:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8014da0:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8014da2:	460f      	mov	r7, r1
 8014da4:	b971      	cbnz	r1, 8014dc4 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014da6:	696e      	ldr	r6, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014da8:	b1f6      	cbz	r6, 8014de8 <create_chain+0x4e>
 8014daa:	69eb      	ldr	r3, [r5, #28]
 8014dac:	42b3      	cmp	r3, r6
 8014dae:	bf98      	it	ls
 8014db0:	2601      	movls	r6, #1
 8014db2:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014db4:	69eb      	ldr	r3, [r5, #28]
			ncl++;							/* Next cluster */
 8014db6:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014db8:	42a3      	cmp	r3, r4
 8014dba:	d818      	bhi.n	8014dee <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8014dbc:	2e01      	cmp	r6, #1
 8014dbe:	d815      	bhi.n	8014dec <create_chain+0x52>
 8014dc0:	2400      	movs	r4, #0
 8014dc2:	e009      	b.n	8014dd8 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014dc4:	4628      	mov	r0, r5
 8014dc6:	f7ff ff33 	bl	8014c30 <get_fat.isra.7>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014dca:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014dcc:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014dce:	d937      	bls.n	8014e40 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014dd0:	1c43      	adds	r3, r0, #1
 8014dd2:	d104      	bne.n	8014dde <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014dd4:	f04f 34ff 	mov.w	r4, #4294967295
}
 8014dd8:	4620      	mov	r0, r4
 8014dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014dde:	69eb      	ldr	r3, [r5, #28]
 8014de0:	4283      	cmp	r3, r0
 8014de2:	d8f9      	bhi.n	8014dd8 <create_chain+0x3e>
 8014de4:	463e      	mov	r6, r7
 8014de6:	e7e4      	b.n	8014db2 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014de8:	2601      	movs	r6, #1
 8014dea:	e7e2      	b.n	8014db2 <create_chain+0x18>
				ncl = 2;
 8014dec:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014dee:	4621      	mov	r1, r4
 8014df0:	f8d8 0000 	ldr.w	r0, [r8]
 8014df4:	f7ff ff1c 	bl	8014c30 <get_fat.isra.7>
			if (cs == 0) break;				/* Found a free cluster */
 8014df8:	b130      	cbz	r0, 8014e08 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014dfa:	2801      	cmp	r0, #1
 8014dfc:	d020      	beq.n	8014e40 <create_chain+0xa6>
 8014dfe:	3001      	adds	r0, #1
 8014e00:	d0e8      	beq.n	8014dd4 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8014e02:	42b4      	cmp	r4, r6
 8014e04:	d1d6      	bne.n	8014db4 <create_chain+0x1a>
 8014e06:	e7db      	b.n	8014dc0 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014e08:	f04f 32ff 	mov.w	r2, #4294967295
 8014e0c:	4621      	mov	r1, r4
 8014e0e:	4628      	mov	r0, r5
 8014e10:	f7ff fe7a 	bl	8014b08 <put_fat>
		if (res == FR_OK && clst != 0) {
 8014e14:	b990      	cbnz	r0, 8014e3c <create_chain+0xa2>
 8014e16:	b957      	cbnz	r7, 8014e2e <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014e18:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8014e1c:	3a02      	subs	r2, #2
 8014e1e:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 8014e20:	616c      	str	r4, [r5, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014e22:	d90f      	bls.n	8014e44 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8014e24:	792b      	ldrb	r3, [r5, #4]
 8014e26:	f043 0301 	orr.w	r3, r3, #1
 8014e2a:	712b      	strb	r3, [r5, #4]
 8014e2c:	e7d4      	b.n	8014dd8 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014e2e:	4622      	mov	r2, r4
 8014e30:	4639      	mov	r1, r7
 8014e32:	4628      	mov	r0, r5
 8014e34:	f7ff fe68 	bl	8014b08 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	d0ed      	beq.n	8014e18 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014e3c:	2801      	cmp	r0, #1
 8014e3e:	d0c9      	beq.n	8014dd4 <create_chain+0x3a>
 8014e40:	2401      	movs	r4, #1
 8014e42:	e7c9      	b.n	8014dd8 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014e44:	3b01      	subs	r3, #1
 8014e46:	61ab      	str	r3, [r5, #24]
 8014e48:	e7ec      	b.n	8014e24 <create_chain+0x8a>

08014e4a <remove_chain>:
{
 8014e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e4c:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014e4e:	2d01      	cmp	r5, #1
{
 8014e50:	4607      	mov	r7, r0
 8014e52:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014e54:	d92c      	bls.n	8014eb0 <remove_chain+0x66>
	FATFS *fs = obj->fs;
 8014e56:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014e58:	69e3      	ldr	r3, [r4, #28]
 8014e5a:	42ab      	cmp	r3, r5
 8014e5c:	d928      	bls.n	8014eb0 <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014e5e:	b12a      	cbz	r2, 8014e6c <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014e60:	f04f 32ff 	mov.w	r2, #4294967295
 8014e64:	4620      	mov	r0, r4
 8014e66:	f7ff fe4f 	bl	8014b08 <put_fat>
		if (res != FR_OK) return res;
 8014e6a:	b930      	cbnz	r0, 8014e7a <remove_chain+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014e6c:	4629      	mov	r1, r5
 8014e6e:	6838      	ldr	r0, [r7, #0]
 8014e70:	f7ff fede 	bl	8014c30 <get_fat.isra.7>
		if (nxt == 0) break;				/* Empty cluster? */
 8014e74:	4606      	mov	r6, r0
 8014e76:	b908      	cbnz	r0, 8014e7c <remove_chain+0x32>
	return FR_OK;
 8014e78:	2000      	movs	r0, #0
}
 8014e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014e7c:	2801      	cmp	r0, #1
 8014e7e:	d017      	beq.n	8014eb0 <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014e80:	1c43      	adds	r3, r0, #1
 8014e82:	d017      	beq.n	8014eb4 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014e84:	2200      	movs	r2, #0
 8014e86:	4629      	mov	r1, r5
 8014e88:	4620      	mov	r0, r4
 8014e8a:	f7ff fe3d 	bl	8014b08 <put_fat>
			if (res != FR_OK) return res;
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	d1f3      	bne.n	8014e7a <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014e92:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8014e96:	1e91      	subs	r1, r2, #2
 8014e98:	428b      	cmp	r3, r1
 8014e9a:	d205      	bcs.n	8014ea8 <remove_chain+0x5e>
			fs->free_clst++;
 8014e9c:	3301      	adds	r3, #1
 8014e9e:	61a3      	str	r3, [r4, #24]
			fs->fsi_flag |= 1;
 8014ea0:	7923      	ldrb	r3, [r4, #4]
 8014ea2:	f043 0301 	orr.w	r3, r3, #1
 8014ea6:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014ea8:	42b2      	cmp	r2, r6
 8014eaa:	4635      	mov	r5, r6
 8014eac:	d8de      	bhi.n	8014e6c <remove_chain+0x22>
 8014eae:	e7e3      	b.n	8014e78 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014eb0:	2002      	movs	r0, #2
 8014eb2:	e7e2      	b.n	8014e7a <remove_chain+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014eb4:	2001      	movs	r0, #1
 8014eb6:	e7e0      	b.n	8014e7a <remove_chain+0x30>

08014eb8 <sync_fs>:
{
 8014eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eba:	4604      	mov	r4, r0
	res = sync_window(fs);
 8014ebc:	f7ff fc4d 	bl	801475a <sync_window>
 8014ec0:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	d141      	bne.n	8014f4a <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014ec6:	7823      	ldrb	r3, [r4, #0]
 8014ec8:	2b03      	cmp	r3, #3
 8014eca:	d136      	bne.n	8014f3a <sync_fs+0x82>
 8014ecc:	7927      	ldrb	r7, [r4, #4]
 8014ece:	2f01      	cmp	r7, #1
 8014ed0:	d133      	bne.n	8014f3a <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8014ed2:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8014ed6:	4601      	mov	r1, r0
 8014ed8:	89a2      	ldrh	r2, [r4, #12]
 8014eda:	4630      	mov	r0, r6
 8014edc:	f7ff faf6 	bl	80144cc <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8014ee0:	2355      	movs	r3, #85	; 0x55
 8014ee2:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val;
 8014ee6:	23aa      	movs	r3, #170	; 0xaa
 8014ee8:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 8014eec:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8014eee:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8014ef0:	2172      	movs	r1, #114	; 0x72
 8014ef2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8014ef6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	*ptr++ = (BYTE)val; val >>= 8;
 8014efa:	2361      	movs	r3, #97	; 0x61
 8014efc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	*ptr++ = (BYTE)val;
 8014f00:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
 8014f04:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val;
 8014f08:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8014f0c:	f884 121c 	strb.w	r1, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 8014f10:	f884 121d 	strb.w	r1, [r4, #541]	; 0x21d
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014f14:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8014f18:	69a1      	ldr	r1, [r4, #24]
 8014f1a:	f7ff facf 	bl	80144bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014f1e:	6961      	ldr	r1, [r4, #20]
 8014f20:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8014f24:	f7ff faca 	bl	80144bc <st_dword>
			fs->winsect = fs->volbase + 1;
 8014f28:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014f2a:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8014f2c:	3201      	adds	r2, #1
 8014f2e:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014f30:	463b      	mov	r3, r7
 8014f32:	4631      	mov	r1, r6
 8014f34:	f7ff fa9e 	bl	8014474 <disk_write>
			fs->fsi_flag = 0;
 8014f38:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	4611      	mov	r1, r2
 8014f3e:	7860      	ldrb	r0, [r4, #1]
 8014f40:	f7ff faa6 	bl	8014490 <disk_ioctl>
 8014f44:	3000      	adds	r0, #0
 8014f46:	bf18      	it	ne
 8014f48:	2001      	movne	r0, #1
}
 8014f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014f4c <dir_next>:
{
 8014f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014f50:	69c3      	ldr	r3, [r0, #28]
{
 8014f52:	4605      	mov	r5, r0
 8014f54:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014f56:	b1b3      	cbz	r3, 8014f86 <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014f58:	6947      	ldr	r7, [r0, #20]
 8014f5a:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014f5c:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8014f60:	d211      	bcs.n	8014f86 <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 8014f62:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014f64:	89a2      	ldrh	r2, [r4, #12]
 8014f66:	fbb7 f0f2 	udiv	r0, r7, r2
 8014f6a:	fb02 7210 	mls	r2, r2, r0, r7
 8014f6e:	2a00      	cmp	r2, #0
 8014f70:	d14d      	bne.n	801500e <dir_next+0xc2>
		if (!dp->clust) {		/* Static table */
 8014f72:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 8014f74:	3301      	adds	r3, #1
 8014f76:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 8014f78:	b939      	cbnz	r1, 8014f8a <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014f7a:	8923      	ldrh	r3, [r4, #8]
 8014f7c:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8014f80:	d845      	bhi.n	801500e <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
 8014f82:	2300      	movs	r3, #0
 8014f84:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014f86:	2004      	movs	r0, #4
 8014f88:	e00a      	b.n	8014fa0 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014f8a:	8963      	ldrh	r3, [r4, #10]
 8014f8c:	3b01      	subs	r3, #1
 8014f8e:	4203      	tst	r3, r0
 8014f90:	d13d      	bne.n	801500e <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014f92:	4620      	mov	r0, r4
 8014f94:	f7ff fe4c 	bl	8014c30 <get_fat.isra.7>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014f98:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014f9a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014f9c:	d802      	bhi.n	8014fa4 <dir_next+0x58>
 8014f9e:	2002      	movs	r0, #2
}
 8014fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014fa4:	1c42      	adds	r2, r0, #1
 8014fa6:	d101      	bne.n	8014fac <dir_next+0x60>
 8014fa8:	2001      	movs	r0, #1
 8014faa:	e7f9      	b.n	8014fa0 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014fac:	69e3      	ldr	r3, [r4, #28]
 8014fae:	4283      	cmp	r3, r0
 8014fb0:	d827      	bhi.n	8015002 <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
 8014fb2:	f1b8 0f00 	cmp.w	r8, #0
 8014fb6:	d0e4      	beq.n	8014f82 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014fb8:	69a9      	ldr	r1, [r5, #24]
 8014fba:	4628      	mov	r0, r5
 8014fbc:	f7ff feed 	bl	8014d9a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014fc0:	4606      	mov	r6, r0
 8014fc2:	2800      	cmp	r0, #0
 8014fc4:	d03c      	beq.n	8015040 <dir_next+0xf4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014fc6:	2801      	cmp	r0, #1
 8014fc8:	d0e9      	beq.n	8014f9e <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014fca:	1c43      	adds	r3, r0, #1
 8014fcc:	d0ec      	beq.n	8014fa8 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014fce:	4620      	mov	r0, r4
 8014fd0:	f7ff fbc3 	bl	801475a <sync_window>
 8014fd4:	4680      	mov	r8, r0
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	d1e6      	bne.n	8014fa8 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014fda:	4601      	mov	r1, r0
 8014fdc:	89a2      	ldrh	r2, [r4, #12]
 8014fde:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014fe2:	f7ff fa73 	bl	80144cc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014fe6:	4631      	mov	r1, r6
 8014fe8:	4620      	mov	r0, r4
 8014fea:	f7ff fb0b 	bl	8014604 <clust2sect>
						fs->wflag = 1;
 8014fee:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014ff2:	6360      	str	r0, [r4, #52]	; 0x34
 8014ff4:	8963      	ldrh	r3, [r4, #10]
 8014ff6:	4598      	cmp	r8, r3
 8014ff8:	d315      	bcc.n	8015026 <dir_next+0xda>
					fs->winsect -= n;							/* Restore window offset */
 8014ffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ffc:	eba3 0308 	sub.w	r3, r3, r8
 8015000:	6363      	str	r3, [r4, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8015002:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8015004:	4631      	mov	r1, r6
 8015006:	4620      	mov	r0, r4
 8015008:	f7ff fafc 	bl	8014604 <clust2sect>
 801500c:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801500e:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 8015010:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015012:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8015016:	fbb7 f2f1 	udiv	r2, r7, r1
 801501a:	fb01 7712 	mls	r7, r1, r2, r7
 801501e:	441f      	add	r7, r3
 8015020:	622f      	str	r7, [r5, #32]
	return FR_OK;
 8015022:	2000      	movs	r0, #0
 8015024:	e7bc      	b.n	8014fa0 <dir_next+0x54>
						fs->wflag = 1;
 8015026:	f884 9003 	strb.w	r9, [r4, #3]
 801502a:	4620      	mov	r0, r4
 801502c:	f7ff fb72 	bl	8014714 <sync_window.part.3>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015030:	2800      	cmp	r0, #0
 8015032:	d1b9      	bne.n	8014fa8 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015036:	3301      	adds	r3, #1
 8015038:	f108 0801 	add.w	r8, r8, #1
 801503c:	6363      	str	r3, [r4, #52]	; 0x34
 801503e:	e7d9      	b.n	8014ff4 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015040:	2007      	movs	r0, #7
 8015042:	e7ad      	b.n	8014fa0 <dir_next+0x54>

08015044 <dir_find>:
{
 8015044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015048:	2100      	movs	r1, #0
{
 801504a:	b085      	sub	sp, #20
 801504c:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 801504e:	f8d0 a000 	ldr.w	sl, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015052:	f7ff fe5d 	bl	8014d10 <dir_sdi>
	if (res != FR_OK) return res;
 8015056:	4680      	mov	r8, r0
 8015058:	2800      	cmp	r0, #0
 801505a:	f040 809c 	bne.w	8015196 <dir_find+0x152>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801505e:	f04f 33ff 	mov.w	r3, #4294967295
 8015062:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8015066:	632b      	str	r3, [r5, #48]	; 0x30
 8015068:	464e      	mov	r6, r9
		res = move_window(fs, dp->sect);
 801506a:	69e9      	ldr	r1, [r5, #28]
 801506c:	4650      	mov	r0, sl
 801506e:	f7ff fb7a 	bl	8014766 <move_window>
		if (res != FR_OK) break;
 8015072:	4680      	mov	r8, r0
 8015074:	2800      	cmp	r0, #0
 8015076:	f040 808e 	bne.w	8015196 <dir_find+0x152>
		c = dp->dir[DIR_Name];
 801507a:	6a2c      	ldr	r4, [r5, #32]
 801507c:	7827      	ldrb	r7, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801507e:	2f00      	cmp	r7, #0
 8015080:	f000 808d 	beq.w	801519e <dir_find+0x15a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015084:	7ae2      	ldrb	r2, [r4, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015086:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015088:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 801508c:	71ab      	strb	r3, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801508e:	d003      	beq.n	8015098 <dir_find+0x54>
 8015090:	0712      	lsls	r2, r2, #28
 8015092:	d505      	bpl.n	80150a0 <dir_find+0x5c>
 8015094:	2b0f      	cmp	r3, #15
 8015096:	d005      	beq.n	80150a4 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015098:	f04f 33ff 	mov.w	r3, #4294967295
 801509c:	632b      	str	r3, [r5, #48]	; 0x30
 801509e:	e058      	b.n	8015152 <dir_find+0x10e>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80150a0:	2b0f      	cmp	r3, #15
 80150a2:	d15d      	bne.n	8015160 <dir_find+0x11c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80150a4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80150a8:	0658      	lsls	r0, r3, #25
 80150aa:	d448      	bmi.n	801513e <dir_find+0xfa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80150ac:	0679      	lsls	r1, r7, #25
 80150ae:	d54e      	bpl.n	801514e <dir_find+0x10a>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80150b0:	696b      	ldr	r3, [r5, #20]
						sum = dp->dir[LDIR_Chksum];
 80150b2:	f894 900d 	ldrb.w	r9, [r4, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80150b6:	632b      	str	r3, [r5, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80150b8:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80150bc:	7b63      	ldrb	r3, [r4, #13]
 80150be:	454b      	cmp	r3, r9
 80150c0:	d147      	bne.n	8015152 <dir_find+0x10e>
	rv = rv << 8 | ptr[0];
 80150c2:	7ee3      	ldrb	r3, [r4, #27]
 80150c4:	7ea6      	ldrb	r6, [r4, #26]
 80150c6:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80150ca:	b236      	sxth	r6, r6
 80150cc:	2e00      	cmp	r6, #0
 80150ce:	d140      	bne.n	8015152 <dir_find+0x10e>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80150d0:	f894 8000 	ldrb.w	r8, [r4]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80150d4:	f8da b010 	ldr.w	fp, [sl, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80150d8:	f008 083f 	and.w	r8, r8, #63	; 0x3f
 80150dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80150e0:	f04f 080d 	mov.w	r8, #13
 80150e4:	fb08 f803 	mul.w	r8, r8, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80150e8:	2101      	movs	r1, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80150ea:	4b2e      	ldr	r3, [pc, #184]	; (80151a4 <dir_find+0x160>)
 80150ec:	5cf2      	ldrb	r2, [r6, r3]
 80150ee:	18a3      	adds	r3, r4, r2
	rv = rv << 8 | ptr[0];
 80150f0:	7858      	ldrb	r0, [r3, #1]
 80150f2:	5ca3      	ldrb	r3, [r4, r2]
 80150f4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		if (wc) {
 80150f8:	b369      	cbz	r1, 8015156 <dir_find+0x112>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80150fa:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 80150fe:	d828      	bhi.n	8015152 <dir_find+0x10e>
 8015100:	4618      	mov	r0, r3
 8015102:	9303      	str	r3, [sp, #12]
 8015104:	f000 fec8 	bl	8015e98 <ff_wtoupper>
 8015108:	f108 0201 	add.w	r2, r8, #1
 801510c:	9002      	str	r0, [sp, #8]
 801510e:	f83b 0018 	ldrh.w	r0, [fp, r8, lsl #1]
 8015112:	9201      	str	r2, [sp, #4]
 8015114:	f000 fec0 	bl	8015e98 <ff_wtoupper>
 8015118:	9902      	ldr	r1, [sp, #8]
 801511a:	4281      	cmp	r1, r0
 801511c:	d119      	bne.n	8015152 <dir_find+0x10e>
	rv = rv << 8 | ptr[0];
 801511e:	9b03      	ldr	r3, [sp, #12]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015120:	9a01      	ldr	r2, [sp, #4]
	rv = rv << 8 | ptr[0];
 8015122:	4619      	mov	r1, r3
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015124:	4690      	mov	r8, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015126:	3601      	adds	r6, #1
 8015128:	2e0d      	cmp	r6, #13
 801512a:	d1de      	bne.n	80150ea <dir_find+0xa6>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801512c:	7823      	ldrb	r3, [r4, #0]
 801512e:	065a      	lsls	r2, r3, #25
 8015130:	d503      	bpl.n	801513a <dir_find+0xf6>
 8015132:	b111      	cbz	r1, 801513a <dir_find+0xf6>
 8015134:	f83b 3018 	ldrh.w	r3, [fp, r8, lsl #1]
 8015138:	b95b      	cbnz	r3, 8015152 <dir_find+0x10e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801513a:	3f01      	subs	r7, #1
 801513c:	b2fe      	uxtb	r6, r7
		res = dir_next(dp, 0);	/* Next entry */
 801513e:	2100      	movs	r1, #0
 8015140:	4628      	mov	r0, r5
 8015142:	f7ff ff03 	bl	8014f4c <dir_next>
	} while (res == FR_OK);
 8015146:	4680      	mov	r8, r0
 8015148:	2800      	cmp	r0, #0
 801514a:	d08e      	beq.n	801506a <dir_find+0x26>
 801514c:	e023      	b.n	8015196 <dir_find+0x152>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801514e:	42be      	cmp	r6, r7
 8015150:	d0b4      	beq.n	80150bc <dir_find+0x78>
 8015152:	26ff      	movs	r6, #255	; 0xff
 8015154:	e7f3      	b.n	801513e <dir_find+0xfa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801515a:	4293      	cmp	r3, r2
 801515c:	d0e3      	beq.n	8015126 <dir_find+0xe2>
 801515e:	e7f8      	b.n	8015152 <dir_find+0x10e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015160:	b926      	cbnz	r6, 801516c <dir_find+0x128>
 8015162:	4620      	mov	r0, r4
 8015164:	f7ff fa6d 	bl	8014642 <sum_sfn>
 8015168:	4548      	cmp	r0, r9
 801516a:	d014      	beq.n	8015196 <dir_find+0x152>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801516c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8015170:	07db      	lsls	r3, r3, #31
 8015172:	d491      	bmi.n	8015098 <dir_find+0x54>
 8015174:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8015178:	f104 010b 	add.w	r1, r4, #11
		r = *d++ - *s++;
 801517c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015180:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8015184:	428c      	cmp	r4, r1
		r = *d++ - *s++;
 8015186:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 801518a:	d002      	beq.n	8015192 <dir_find+0x14e>
 801518c:	2b00      	cmp	r3, #0
 801518e:	d0f5      	beq.n	801517c <dir_find+0x138>
 8015190:	e782      	b.n	8015098 <dir_find+0x54>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015192:	2b00      	cmp	r3, #0
 8015194:	d180      	bne.n	8015098 <dir_find+0x54>
}
 8015196:	4640      	mov	r0, r8
 8015198:	b005      	add	sp, #20
 801519a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801519e:	f04f 0804 	mov.w	r8, #4
 80151a2:	e7f8      	b.n	8015196 <dir_find+0x152>
 80151a4:	08018354 	.word	0x08018354

080151a8 <dir_register>:
{
 80151a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80151ac:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
 80151b0:	f014 04a0 	ands.w	r4, r4, #160	; 0xa0
{
 80151b4:	b089      	sub	sp, #36	; 0x24
 80151b6:	4605      	mov	r5, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80151b8:	f040 8084 	bne.w	80152c4 <dir_register+0x11c>
	FATFS *fs = dp->obj.fs;
 80151bc:	6807      	ldr	r7, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80151be:	693a      	ldr	r2, [r7, #16]
 80151c0:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d15d      	bne.n	8015284 <dir_register+0xdc>
	mem_cpy(sn, dp->fn, 12);
 80151c8:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80151cc:	220c      	movs	r2, #12
 80151ce:	4631      	mov	r1, r6
 80151d0:	a805      	add	r0, sp, #20
 80151d2:	f7ff fa7c 	bl	80146ce <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80151d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80151da:	07db      	lsls	r3, r3, #31
 80151dc:	d57b      	bpl.n	80152d6 <dir_register+0x12e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80151de:	2340      	movs	r3, #64	; 0x40
				if (sr & 0x10000) sr ^= 0x11021;
 80151e0:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8015410 <dir_register+0x268>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80151e4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80151e8:	f04f 0901 	mov.w	r9, #1
 80151ec:	220b      	movs	r2, #11
 80151ee:	a905      	add	r1, sp, #20
 80151f0:	4630      	mov	r0, r6
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80151f2:	f8d7 a010 	ldr.w	sl, [r7, #16]
 80151f6:	f7ff fa6a 	bl	80146ce <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80151fa:	f1b9 0f05 	cmp.w	r9, #5
 80151fe:	d952      	bls.n	80152a6 <dir_register+0xfe>
 8015200:	f1aa 0102 	sub.w	r1, sl, #2
 8015204:	464b      	mov	r3, r9
		while (*lfn) {	/* Create a CRC */
 8015206:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 801520a:	2a00      	cmp	r2, #0
 801520c:	d13c      	bne.n	8015288 <dir_register+0xe0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801520e:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 8015210:	f003 000f 	and.w	r0, r3, #15
 8015214:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8015218:	2939      	cmp	r1, #57	; 0x39
 801521a:	bf88      	it	hi
 801521c:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8015220:	3a01      	subs	r2, #1
 8015222:	a803      	add	r0, sp, #12
 8015224:	4410      	add	r0, r2
	} while (seq);
 8015226:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8015228:	7041      	strb	r1, [r0, #1]
	} while (seq);
 801522a:	d1f1      	bne.n	8015210 <dir_register+0x68>
	ns[i] = '~';
 801522c:	a908      	add	r1, sp, #32
 801522e:	4411      	add	r1, r2
 8015230:	207e      	movs	r0, #126	; 0x7e
 8015232:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015236:	429a      	cmp	r2, r3
 8015238:	d004      	beq.n	8015244 <dir_register+0x9c>
 801523a:	5cf1      	ldrb	r1, [r6, r3]
 801523c:	2920      	cmp	r1, #32
 801523e:	f103 0001 	add.w	r0, r3, #1
 8015242:	d132      	bne.n	80152aa <dir_register+0x102>
 8015244:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015246:	2a07      	cmp	r2, #7
 8015248:	bf9b      	ittet	ls
 801524a:	a908      	addls	r1, sp, #32
 801524c:	1889      	addls	r1, r1, r2
 801524e:	2120      	movhi	r1, #32
 8015250:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8015254:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8015258:	eba3 0106 	sub.w	r1, r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801525c:	bf98      	it	ls
 801525e:	3201      	addls	r2, #1
	} while (j < 8);
 8015260:	2907      	cmp	r1, #7
 8015262:	d9f0      	bls.n	8015246 <dir_register+0x9e>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015264:	4628      	mov	r0, r5
 8015266:	f7ff feed 	bl	8015044 <dir_find>
 801526a:	4682      	mov	sl, r0
			if (res != FR_OK) break;
 801526c:	bb68      	cbnz	r0, 80152ca <dir_register+0x122>
		for (n = 1; n < 100; n++) {
 801526e:	f109 0901 	add.w	r9, r9, #1
 8015272:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8015276:	d1b9      	bne.n	80151ec <dir_register+0x44>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015278:	f04f 0a07 	mov.w	sl, #7
}
 801527c:	4650      	mov	r0, sl
 801527e:	b009      	add	sp, #36	; 0x24
 8015280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015284:	3401      	adds	r4, #1
 8015286:	e79b      	b.n	80151c0 <dir_register+0x18>
		while (*lfn) {	/* Create a CRC */
 8015288:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 801528a:	f002 0c01 	and.w	ip, r2, #1
 801528e:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015292:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8015296:	bf18      	it	ne
 8015298:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 801529c:	3801      	subs	r0, #1
				wc >>= 1;
 801529e:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 80152a2:	d1f2      	bne.n	801528a <dir_register+0xe2>
 80152a4:	e7af      	b.n	8015206 <dir_register+0x5e>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80152a6:	464b      	mov	r3, r9
 80152a8:	e7b1      	b.n	801520e <dir_register+0x66>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80152aa:	4603      	mov	r3, r0
 80152ac:	e7c3      	b.n	8015236 <dir_register+0x8e>
				n = 0;					/* Not a blank entry. Restart to search */
 80152ae:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 80152b0:	2101      	movs	r1, #1
 80152b2:	4628      	mov	r0, r5
 80152b4:	f7ff fe4a 	bl	8014f4c <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80152b8:	4682      	mov	sl, r0
 80152ba:	b310      	cbz	r0, 8015302 <dir_register+0x15a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80152bc:	f1ba 0f04 	cmp.w	sl, #4
 80152c0:	d0da      	beq.n	8015278 <dir_register+0xd0>
 80152c2:	e7db      	b.n	801527c <dir_register+0xd4>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80152c4:	f04f 0a06 	mov.w	sl, #6
 80152c8:	e7d8      	b.n	801527c <dir_register+0xd4>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80152ca:	2804      	cmp	r0, #4
 80152cc:	d1d6      	bne.n	801527c <dir_register+0xd4>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80152ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80152d2:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80152d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
	FATFS *fs = dp->obj.fs;
 80152da:	f8d5 9000 	ldr.w	r9, [r5]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80152de:	079b      	lsls	r3, r3, #30
 80152e0:	bf48      	it	mi
 80152e2:	340c      	addmi	r4, #12
	res = dir_sdi(dp, 0);
 80152e4:	f04f 0100 	mov.w	r1, #0
 80152e8:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80152ea:	bf49      	itett	mi
 80152ec:	230d      	movmi	r3, #13
 80152ee:	2401      	movpl	r4, #1
 80152f0:	fbb4 f4f3 	udivmi	r4, r4, r3
 80152f4:	3401      	addmi	r4, #1
	res = dir_sdi(dp, 0);
 80152f6:	f7ff fd0b 	bl	8014d10 <dir_sdi>
	if (res == FR_OK) {
 80152fa:	4682      	mov	sl, r0
 80152fc:	2800      	cmp	r0, #0
 80152fe:	d1dd      	bne.n	80152bc <dir_register+0x114>
		n = 0;
 8015300:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 8015302:	69e9      	ldr	r1, [r5, #28]
 8015304:	4648      	mov	r0, r9
 8015306:	f7ff fa2e 	bl	8014766 <move_window>
			if (res != FR_OK) break;
 801530a:	4682      	mov	sl, r0
 801530c:	2800      	cmp	r0, #0
 801530e:	d1d5      	bne.n	80152bc <dir_register+0x114>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015310:	6a2b      	ldr	r3, [r5, #32]
 8015312:	781b      	ldrb	r3, [r3, #0]
 8015314:	2be5      	cmp	r3, #229	; 0xe5
 8015316:	d001      	beq.n	801531c <dir_register+0x174>
 8015318:	2b00      	cmp	r3, #0
 801531a:	d1c8      	bne.n	80152ae <dir_register+0x106>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801531c:	f108 0801 	add.w	r8, r8, #1
 8015320:	4544      	cmp	r4, r8
 8015322:	d1c5      	bne.n	80152b0 <dir_register+0x108>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015324:	3c01      	subs	r4, #1
 8015326:	d056      	beq.n	80153d6 <dir_register+0x22e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015328:	6969      	ldr	r1, [r5, #20]
 801532a:	4628      	mov	r0, r5
 801532c:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8015330:	f7ff fcee 	bl	8014d10 <dir_sdi>
		if (res == FR_OK) {
 8015334:	4682      	mov	sl, r0
 8015336:	2800      	cmp	r0, #0
 8015338:	d1a0      	bne.n	801527c <dir_register+0xd4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801533a:	4630      	mov	r0, r6
 801533c:	f7ff f981 	bl	8014642 <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015340:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015344:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8015346:	69e9      	ldr	r1, [r5, #28]
 8015348:	4638      	mov	r0, r7
 801534a:	f7ff fa0c 	bl	8014766 <move_window>
 801534e:	4682      	mov	sl, r0
				if (res != FR_OK) break;
 8015350:	2800      	cmp	r0, #0
 8015352:	d193      	bne.n	801527c <dir_register+0xd4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015354:	6a2b      	ldr	r3, [r5, #32]
 8015356:	f8d7 e010 	ldr.w	lr, [r7, #16]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801535a:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801535e:	220f      	movs	r2, #15
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015360:	b2e1      	uxtb	r1, r4
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015362:	f04f 0c0d 	mov.w	ip, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015366:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015368:	1e4a      	subs	r2, r1, #1
 801536a:	fb0c f202 	mul.w	r2, ip, r2
	dir[LDIR_Type] = 0;
 801536e:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8015370:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8015372:	76d8      	strb	r0, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015374:	9201      	str	r2, [sp, #4]
	s = wc = 0;
 8015376:	4684      	mov	ip, r0
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015378:	4548      	cmp	r0, r9
 801537a:	bf1f      	itttt	ne
 801537c:	9a01      	ldrne	r2, [sp, #4]
 801537e:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
 8015382:	3201      	addne	r2, #1
 8015384:	9201      	strne	r2, [sp, #4]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015386:	4a21      	ldr	r2, [pc, #132]	; (801540c <dir_register+0x264>)
 8015388:	f81c a002 	ldrb.w	sl, [ip, r2]
	} while (++s < 13);
 801538c:	f10c 0c01 	add.w	ip, ip, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015390:	eb03 0b0a 	add.w	fp, r3, sl
	*ptr++ = (BYTE)val; val >>= 8;
 8015394:	f803 000a 	strb.w	r0, [r3, sl]
 8015398:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801539c:	2800      	cmp	r0, #0
 801539e:	bf08      	it	eq
 80153a0:	4648      	moveq	r0, r9
	} while (++s < 13);
 80153a2:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 80153a6:	f88b a001 	strb.w	sl, [fp, #1]
	} while (++s < 13);
 80153aa:	d1e5      	bne.n	8015378 <dir_register+0x1d0>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80153ac:	4548      	cmp	r0, r9
 80153ae:	d003      	beq.n	80153b8 <dir_register+0x210>
 80153b0:	9a01      	ldr	r2, [sp, #4]
 80153b2:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 80153b6:	b90a      	cbnz	r2, 80153bc <dir_register+0x214>
 80153b8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80153bc:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 80153be:	2301      	movs	r3, #1
 80153c0:	70fb      	strb	r3, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80153c2:	2100      	movs	r1, #0
 80153c4:	4628      	mov	r0, r5
 80153c6:	f7ff fdc1 	bl	8014f4c <dir_next>
			} while (res == FR_OK && --nent);
 80153ca:	4682      	mov	sl, r0
 80153cc:	2800      	cmp	r0, #0
 80153ce:	f47f af55 	bne.w	801527c <dir_register+0xd4>
 80153d2:	3c01      	subs	r4, #1
 80153d4:	d1b7      	bne.n	8015346 <dir_register+0x19e>
		res = move_window(fs, dp->sect);
 80153d6:	69e9      	ldr	r1, [r5, #28]
 80153d8:	4638      	mov	r0, r7
 80153da:	f7ff f9c4 	bl	8014766 <move_window>
		if (res == FR_OK) {
 80153de:	4682      	mov	sl, r0
 80153e0:	2800      	cmp	r0, #0
 80153e2:	f47f af4b 	bne.w	801527c <dir_register+0xd4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80153e6:	4601      	mov	r1, r0
 80153e8:	2220      	movs	r2, #32
 80153ea:	6a28      	ldr	r0, [r5, #32]
 80153ec:	f7ff f86e 	bl	80144cc <mem_set>
 80153f0:	220b      	movs	r2, #11
 80153f2:	4631      	mov	r1, r6
 80153f4:	6a28      	ldr	r0, [r5, #32]
 80153f6:	f7ff f96a 	bl	80146ce <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80153fa:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80153fe:	6a2a      	ldr	r2, [r5, #32]
 8015400:	f003 0318 	and.w	r3, r3, #24
 8015404:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8015406:	2301      	movs	r3, #1
 8015408:	70fb      	strb	r3, [r7, #3]
 801540a:	e737      	b.n	801527c <dir_register+0xd4>
 801540c:	08018354 	.word	0x08018354
 8015410:	00011021 	.word	0x00011021

08015414 <follow_path>:
{
 8015414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8015418:	6803      	ldr	r3, [r0, #0]
 801541a:	9300      	str	r3, [sp, #0]
{
 801541c:	4607      	mov	r7, r0
 801541e:	468a      	mov	sl, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015424:	2b2f      	cmp	r3, #47	; 0x2f
 8015426:	d0fa      	beq.n	801541e <follow_path+0xa>
 8015428:	2b5c      	cmp	r3, #92	; 0x5c
 801542a:	d0f8      	beq.n	801541e <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 801542c:	2100      	movs	r1, #0
 801542e:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015430:	f89a 3000 	ldrb.w	r3, [sl]
 8015434:	2b1f      	cmp	r3, #31
 8015436:	f200 80b1 	bhi.w	801559c <follow_path+0x188>
		dp->fn[NSFLAG] = NS_NONAME;
 801543a:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 801543c:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 801543e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8015442:	b003      	add	sp, #12
 8015444:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8015448:	f7ff bc62 	b.w	8014d10 <dir_sdi>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801544c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8015450:	d00b      	beq.n	801546a <follow_path+0x56>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8015452:	2101      	movs	r1, #1
 8015454:	f000 fd02 	bl	8015e5c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015458:	b138      	cbz	r0, 801546a <follow_path+0x56>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801545a:	287f      	cmp	r0, #127	; 0x7f
 801545c:	d807      	bhi.n	801546e <follow_path+0x5a>
 801545e:	4986      	ldr	r1, [pc, #536]	; (8015678 <follow_path+0x264>)
	while (*str && *str != chr) str++;
 8015460:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015464:	b11a      	cbz	r2, 801546e <follow_path+0x5a>
 8015466:	4290      	cmp	r0, r2
 8015468:	d1fa      	bne.n	8015460 <follow_path+0x4c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801546a:	2006      	movs	r0, #6
 801546c:	e04e      	b.n	801550c <follow_path+0xf8>
		lfn[di++] = w;					/* Store the Unicode character */
 801546e:	f825 0f02 	strh.w	r0, [r5, #2]!
 8015472:	4626      	mov	r6, r4
 8015474:	e09a      	b.n	80155ac <follow_path+0x198>
		w = lfn[di - 1];
 8015476:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 801547a:	2920      	cmp	r1, #32
 801547c:	d002      	beq.n	8015484 <follow_path+0x70>
 801547e:	292e      	cmp	r1, #46	; 0x2e
 8015480:	f040 80b3 	bne.w	80155ea <follow_path+0x1d6>
		di--;
 8015484:	3e01      	subs	r6, #1
 8015486:	e0ad      	b.n	80155e4 <follow_path+0x1d0>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015488:	3101      	adds	r1, #1
 801548a:	e0be      	b.n	801560a <follow_path+0x1f6>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801548c:	45c1      	cmp	r9, r8
 801548e:	d205      	bcs.n	801549c <follow_path+0x88>
 8015490:	42b2      	cmp	r2, r6
 8015492:	d14b      	bne.n	801552c <follow_path+0x118>
			if (ni == 11) {				/* Long extension */
 8015494:	f1b8 0f0b 	cmp.w	r8, #11
 8015498:	d140      	bne.n	801551c <follow_path+0x108>
 801549a:	e002      	b.n	80154a2 <follow_path+0x8e>
 801549c:	f1b8 0f0b 	cmp.w	r8, #11
 80154a0:	d137      	bne.n	8015512 <follow_path+0xfe>
				cf |= NS_LOSS | NS_LFN; break;
 80154a2:	f044 0403 	orr.w	r4, r4, #3
 80154a6:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80154aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80154ae:	2be5      	cmp	r3, #229	; 0xe5
 80154b0:	bf04      	itt	eq
 80154b2:	2305      	moveq	r3, #5
 80154b4:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80154b8:	f1b8 0f08 	cmp.w	r8, #8
 80154bc:	bf04      	itt	eq
 80154be:	00ad      	lsleq	r5, r5, #2
 80154c0:	b2ed      	uxtbeq	r5, r5
 80154c2:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80154c6:	2b0c      	cmp	r3, #12
 80154c8:	d003      	beq.n	80154d2 <follow_path+0xbe>
 80154ca:	f005 0203 	and.w	r2, r5, #3
 80154ce:	2a03      	cmp	r2, #3
 80154d0:	d101      	bne.n	80154d6 <follow_path+0xc2>
 80154d2:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80154d6:	07a1      	lsls	r1, r4, #30
 80154d8:	d409      	bmi.n	80154ee <follow_path+0xda>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80154da:	f005 0503 	and.w	r5, r5, #3
 80154de:	2d01      	cmp	r5, #1
 80154e0:	bf08      	it	eq
 80154e2:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80154e6:	2b04      	cmp	r3, #4
 80154e8:	bf08      	it	eq
 80154ea:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80154ee:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80154f2:	4638      	mov	r0, r7
 80154f4:	f7ff fda6 	bl	8015044 <dir_find>
			ns = dp->fn[NSFLAG];
 80154f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80154fc:	2800      	cmp	r0, #0
 80154fe:	d039      	beq.n	8015574 <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015500:	2804      	cmp	r0, #4
 8015502:	d103      	bne.n	801550c <follow_path+0xf8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015504:	f013 0f04 	tst.w	r3, #4
 8015508:	bf08      	it	eq
 801550a:	2005      	moveq	r0, #5
}
 801550c:	b003      	add	sp, #12
 801550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8015512:	42b2      	cmp	r2, r6
 8015514:	d002      	beq.n	801551c <follow_path+0x108>
 8015516:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 801551a:	d8c6      	bhi.n	80154aa <follow_path+0x96>
			b <<= 2; continue;
 801551c:	00ad      	lsls	r5, r5, #2
 801551e:	b2ed      	uxtb	r5, r5
 8015520:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8015522:	f04f 080b 	mov.w	r8, #11
 8015526:	f04f 0908 	mov.w	r9, #8
 801552a:	e094      	b.n	8015656 <follow_path+0x242>
		if (w >= 0x80) {				/* Non ASCII character */
 801552c:	287f      	cmp	r0, #127	; 0x7f
 801552e:	d90c      	bls.n	801554a <follow_path+0x136>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8015530:	2100      	movs	r1, #0
 8015532:	9201      	str	r2, [sp, #4]
 8015534:	f000 fc92 	bl	8015e5c <ff_convert>
 8015538:	f044 0402 	orr.w	r4, r4, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801553c:	9a01      	ldr	r2, [sp, #4]
 801553e:	b160      	cbz	r0, 801555a <follow_path+0x146>
 8015540:	4b4e      	ldr	r3, [pc, #312]	; (801567c <follow_path+0x268>)
 8015542:	4418      	add	r0, r3
 8015544:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015548:	b138      	cbz	r0, 801555a <follow_path+0x146>
 801554a:	4b4d      	ldr	r3, [pc, #308]	; (8015680 <follow_path+0x26c>)
	while (*str && *str != chr) str++;
 801554c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015550:	2900      	cmp	r1, #0
 8015552:	f000 8084 	beq.w	801565e <follow_path+0x24a>
 8015556:	4281      	cmp	r1, r0
 8015558:	d1f8      	bne.n	801554c <follow_path+0x138>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801555a:	f044 0403 	orr.w	r4, r4, #3
 801555e:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8015560:	eb07 0109 	add.w	r1, r7, r9
 8015564:	f109 0901 	add.w	r9, r9, #1
 8015568:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 801556c:	e073      	b.n	8015656 <follow_path+0x242>
					b |= 2;
 801556e:	f045 0502 	orr.w	r5, r5, #2
 8015572:	e7f5      	b.n	8015560 <follow_path+0x14c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015574:	075a      	lsls	r2, r3, #29
 8015576:	d4c9      	bmi.n	801550c <follow_path+0xf8>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015578:	79bb      	ldrb	r3, [r7, #6]
 801557a:	06db      	lsls	r3, r3, #27
 801557c:	d56d      	bpl.n	801565a <follow_path+0x246>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801557e:	9b00      	ldr	r3, [sp, #0]
 8015580:	6978      	ldr	r0, [r7, #20]
 8015582:	899a      	ldrh	r2, [r3, #12]
 8015584:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015588:	fbb0 f3f2 	udiv	r3, r0, r2
 801558c:	fb02 0313 	mls	r3, r2, r3, r0
 8015590:	4419      	add	r1, r3
 8015592:	9b00      	ldr	r3, [sp, #0]
 8015594:	7818      	ldrb	r0, [r3, #0]
 8015596:	f7ff f8a3 	bl	80146e0 <ld_clust.isra.1>
 801559a:	60b8      	str	r0, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80155a2:	f10a 38ff 	add.w	r8, sl, #4294967295
 80155a6:	f1ab 0502 	sub.w	r5, fp, #2
 80155aa:	2600      	movs	r6, #0
		w = p[si++];					/* Get a character */
 80155ac:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 80155b0:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 80155b2:	f106 0401 	add.w	r4, r6, #1
		if (w < ' ') break;				/* Break if end of the path name */
 80155b6:	d90e      	bls.n	80155d6 <follow_path+0x1c2>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80155b8:	282f      	cmp	r0, #47	; 0x2f
 80155ba:	d002      	beq.n	80155c2 <follow_path+0x1ae>
 80155bc:	285c      	cmp	r0, #92	; 0x5c
 80155be:	f47f af45 	bne.w	801544c <follow_path+0x38>
 80155c2:	eb0a 0204 	add.w	r2, sl, r4
 80155c6:	eba2 040a 	sub.w	r4, r2, sl
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80155ca:	f812 1b01 	ldrb.w	r1, [r2], #1
 80155ce:	292f      	cmp	r1, #47	; 0x2f
 80155d0:	d0f9      	beq.n	80155c6 <follow_path+0x1b2>
 80155d2:	295c      	cmp	r1, #92	; 0x5c
 80155d4:	d0f7      	beq.n	80155c6 <follow_path+0x1b2>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80155d6:	281f      	cmp	r0, #31
	*path = &p[si];						/* Return pointer to the next segment */
 80155d8:	44a2      	add	sl, r4
 80155da:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80155de:	bf8c      	ite	hi
 80155e0:	2400      	movhi	r4, #0
 80155e2:	2404      	movls	r4, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80155e4:	2e00      	cmp	r6, #0
 80155e6:	f47f af46 	bne.w	8015476 <follow_path+0x62>
	lfn[di] = 0;						/* LFN is created */
 80155ea:	f04f 0800 	mov.w	r8, #0
 80155ee:	eb0b 0546 	add.w	r5, fp, r6, lsl #1
 80155f2:	f82b 8016 	strh.w	r8, [fp, r6, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80155f6:	2e00      	cmp	r6, #0
 80155f8:	f43f af37 	beq.w	801546a <follow_path+0x56>
	mem_set(dp->fn, ' ', 11);
 80155fc:	2120      	movs	r1, #32
 80155fe:	220b      	movs	r2, #11
 8015600:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015604:	f7fe ff62 	bl	80144cc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015608:	4641      	mov	r1, r8
 801560a:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 801560e:	2a20      	cmp	r2, #32
 8015610:	f43f af3a 	beq.w	8015488 <follow_path+0x74>
 8015614:	2a2e      	cmp	r2, #46	; 0x2e
 8015616:	f43f af37 	beq.w	8015488 <follow_path+0x74>
	if (si) cf |= NS_LOSS | NS_LFN;
 801561a:	b109      	cbz	r1, 8015620 <follow_path+0x20c>
 801561c:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015620:	f835 2d02 	ldrh.w	r2, [r5, #-2]!
 8015624:	2a2e      	cmp	r2, #46	; 0x2e
 8015626:	d001      	beq.n	801562c <follow_path+0x218>
 8015628:	3e01      	subs	r6, #1
 801562a:	d1f9      	bne.n	8015620 <follow_path+0x20c>
		dp->fn[i++] = (BYTE)w;
 801562c:	f04f 0900 	mov.w	r9, #0
 8015630:	f04f 0808 	mov.w	r8, #8
 8015634:	464d      	mov	r5, r9
		w = lfn[si++];					/* Get an LFN character */
 8015636:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 801563a:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 801563c:	2800      	cmp	r0, #0
 801563e:	f43f af34 	beq.w	80154aa <follow_path+0x96>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8015642:	2820      	cmp	r0, #32
 8015644:	d005      	beq.n	8015652 <follow_path+0x23e>
 8015646:	282e      	cmp	r0, #46	; 0x2e
 8015648:	f47f af20 	bne.w	801548c <follow_path+0x78>
 801564c:	42b2      	cmp	r2, r6
 801564e:	f43f af21 	beq.w	8015494 <follow_path+0x80>
			cf |= NS_LOSS | NS_LFN; continue;
 8015652:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8015656:	4611      	mov	r1, r2
 8015658:	e7ed      	b.n	8015636 <follow_path+0x222>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801565a:	2005      	movs	r0, #5
	return res;
 801565c:	e756      	b.n	801550c <follow_path+0xf8>
				if (IsUpper(w)) {		/* ASCII large capital */
 801565e:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8015662:	2919      	cmp	r1, #25
 8015664:	d983      	bls.n	801556e <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
 8015666:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 801566a:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 801566c:	bf9e      	ittt	ls
 801566e:	3820      	subls	r0, #32
 8015670:	f045 0501 	orrls.w	r5, r5, #1
 8015674:	b280      	uxthls	r0, r0
 8015676:	e773      	b.n	8015560 <follow_path+0x14c>
 8015678:	08018360 	.word	0x08018360
 801567c:	080182d4 	.word	0x080182d4
 8015680:	08018369 	.word	0x08018369

08015684 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015684:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015686:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801568a:	a804      	add	r0, sp, #16
{
 801568c:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 801568e:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015692:	f7fe ffe5 	bl	8014660 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8015696:	1e05      	subs	r5, r0, #0
 8015698:	db1f      	blt.n	80156da <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801569a:	4912      	ldr	r1, [pc, #72]	; (80156e4 <f_mount+0x60>)
 801569c:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 80156a0:	b15c      	cbz	r4, 80156ba <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80156a2:	4b11      	ldr	r3, [pc, #68]	; (80156e8 <f_mount+0x64>)
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	4294      	cmp	r4, r2
 80156a8:	bf04      	itt	eq
 80156aa:	2200      	moveq	r2, #0
 80156ac:	601a      	streq	r2, [r3, #0]
 80156ae:	691a      	ldr	r2, [r3, #16]
 80156b0:	2000      	movs	r0, #0
 80156b2:	4294      	cmp	r4, r2
 80156b4:	bf08      	it	eq
 80156b6:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80156b8:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 80156ba:	9801      	ldr	r0, [sp, #4]
 80156bc:	b108      	cbz	r0, 80156c2 <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 80156be:	2300      	movs	r3, #0
 80156c0:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80156c2:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80156c6:	b130      	cbz	r0, 80156d6 <f_mount+0x52>
 80156c8:	2e01      	cmp	r6, #1
 80156ca:	d108      	bne.n	80156de <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80156cc:	2200      	movs	r2, #0
 80156ce:	a901      	add	r1, sp, #4
 80156d0:	4668      	mov	r0, sp
 80156d2:	f7ff f8a3 	bl	801481c <find_volume>
	LEAVE_FF(fs, res);
}
 80156d6:	b004      	add	sp, #16
 80156d8:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80156da:	200b      	movs	r0, #11
 80156dc:	e7fb      	b.n	80156d6 <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80156de:	2000      	movs	r0, #0
 80156e0:	e7f9      	b.n	80156d6 <f_mount+0x52>
 80156e2:	bf00      	nop
 80156e4:	2000123c 	.word	0x2000123c
 80156e8:	20001244 	.word	0x20001244

080156ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80156ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156f0:	b090      	sub	sp, #64	; 0x40
 80156f2:	4690      	mov	r8, r2
 80156f4:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80156f6:	4604      	mov	r4, r0
 80156f8:	2800      	cmp	r0, #0
 80156fa:	f000 80b7 	beq.w	801586c <f_open+0x180>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80156fe:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8015702:	462a      	mov	r2, r5
 8015704:	a902      	add	r1, sp, #8
 8015706:	a801      	add	r0, sp, #4
 8015708:	f7ff f888 	bl	801481c <find_volume>
	if (res == FR_OK) {
 801570c:	4607      	mov	r7, r0
 801570e:	2800      	cmp	r0, #0
 8015710:	d165      	bne.n	80157de <f_open+0xf2>
		dj.obj.fs = fs;
 8015712:	ae10      	add	r6, sp, #64	; 0x40
 8015714:	9b02      	ldr	r3, [sp, #8]
 8015716:	f846 3d34 	str.w	r3, [r6, #-52]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801571a:	9901      	ldr	r1, [sp, #4]
 801571c:	4630      	mov	r0, r6
 801571e:	f7ff fe79 	bl	8015414 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015722:	b958      	cbnz	r0, 801573c <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015724:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8015728:	2b00      	cmp	r3, #0
 801572a:	db5f      	blt.n	80157ec <f_open+0x100>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801572c:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8015730:	bf14      	ite	ne
 8015732:	2101      	movne	r1, #1
 8015734:	2100      	moveq	r1, #0
 8015736:	4630      	mov	r0, r6
 8015738:	f7fe fece 	bl	80144d8 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801573c:	f018 0f1c 	tst.w	r8, #28
 8015740:	d060      	beq.n	8015804 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 8015742:	2800      	cmp	r0, #0
 8015744:	d054      	beq.n	80157f0 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015746:	2804      	cmp	r0, #4
 8015748:	d149      	bne.n	80157de <f_open+0xf2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801574a:	4b70      	ldr	r3, [pc, #448]	; (801590c <f_open+0x220>)
 801574c:	681a      	ldr	r2, [r3, #0]
 801574e:	b11a      	cbz	r2, 8015758 <f_open+0x6c>
 8015750:	691b      	ldr	r3, [r3, #16]
 8015752:	2b00      	cmp	r3, #0
 8015754:	f040 8084 	bne.w	8015860 <f_open+0x174>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015758:	4630      	mov	r0, r6
 801575a:	f7ff fd25 	bl	80151a8 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801575e:	2800      	cmp	r0, #0
 8015760:	d13d      	bne.n	80157de <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015762:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015766:	0728      	lsls	r0, r5, #28
 8015768:	d557      	bpl.n	801581a <f_open+0x12e>
				dw = GET_FATTIME();
 801576a:	f7fd f94d 	bl	8012a08 <get_fattime>
 801576e:	4602      	mov	r2, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8015770:	4601      	mov	r1, r0
 8015772:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015774:	300e      	adds	r0, #14
 8015776:	f7fe fea1 	bl	80144bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801577a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801577c:	4611      	mov	r1, r2
 801577e:	3016      	adds	r0, #22
 8015780:	f7fe fe9c 	bl	80144bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8015784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8015786:	f8dd 9008 	ldr.w	r9, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801578a:	2220      	movs	r2, #32
 801578c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801578e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8015792:	f899 0000 	ldrb.w	r0, [r9]
 8015796:	4651      	mov	r1, sl
 8015798:	f7fe ffa2 	bl	80146e0 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801579c:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801579e:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80157a0:	4648      	mov	r0, r9
 80157a2:	f7fe ffab 	bl	80146fc <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 80157a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 80157a8:	2200      	movs	r2, #0
 80157aa:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80157ac:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80157ae:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80157b0:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80157b2:	9b02      	ldr	r3, [sp, #8]
 80157b4:	2101      	movs	r1, #1
 80157b6:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80157b8:	f1b8 0f00 	cmp.w	r8, #0
 80157bc:	d02d      	beq.n	801581a <f_open+0x12e>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 80157be:	4641      	mov	r1, r8
 80157c0:	4630      	mov	r0, r6
						dw = fs->winsect;
 80157c2:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 80157c6:	f7ff fb40 	bl	8014e4a <remove_chain>
						if (res == FR_OK) {
 80157ca:	b940      	cbnz	r0, 80157de <f_open+0xf2>
							res = move_window(fs, dw);
 80157cc:	4649      	mov	r1, r9
 80157ce:	9802      	ldr	r0, [sp, #8]
 80157d0:	f7fe ffc9 	bl	8014766 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80157d4:	9a02      	ldr	r2, [sp, #8]
 80157d6:	f108 33ff 	add.w	r3, r8, #4294967295
 80157da:	6153      	str	r3, [r2, #20]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 80157dc:	b1e8      	cbz	r0, 801581a <f_open+0x12e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80157de:	2300      	movs	r3, #0
 80157e0:	6023      	str	r3, [r4, #0]
 80157e2:	4607      	mov	r7, r0

	LEAVE_FF(fs, res);
}
 80157e4:	4638      	mov	r0, r7
 80157e6:	b010      	add	sp, #64	; 0x40
 80157e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 80157ec:	2006      	movs	r0, #6
 80157ee:	e7a5      	b.n	801573c <f_open+0x50>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80157f0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80157f4:	f013 0f11 	tst.w	r3, #17
 80157f8:	d136      	bne.n	8015868 <f_open+0x17c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80157fa:	f018 0f04 	tst.w	r8, #4
 80157fe:	d0b2      	beq.n	8015766 <f_open+0x7a>
 8015800:	2008      	movs	r0, #8
 8015802:	e7ec      	b.n	80157de <f_open+0xf2>
			if (res == FR_OK) {					/* Following succeeded */
 8015804:	2800      	cmp	r0, #0
 8015806:	d1ea      	bne.n	80157de <f_open+0xf2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015808:	f89d 3012 	ldrb.w	r3, [sp, #18]
 801580c:	06da      	lsls	r2, r3, #27
 801580e:	d429      	bmi.n	8015864 <f_open+0x178>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8015810:	f018 0f02 	tst.w	r8, #2
 8015814:	d001      	beq.n	801581a <f_open+0x12e>
 8015816:	07db      	lsls	r3, r3, #31
 8015818:	d426      	bmi.n	8015868 <f_open+0x17c>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801581a:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801581c:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801581e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015820:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8015822:	bf48      	it	mi
 8015824:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015828:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 801582c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801582e:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015830:	bf14      	ite	ne
 8015832:	2101      	movne	r1, #1
 8015834:	2100      	moveq	r1, #0
 8015836:	4630      	mov	r0, r6
 8015838:	f7fe fe88 	bl	801454c <inc_lock>
 801583c:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801583e:	b9b8      	cbnz	r0, 8015870 <f_open+0x184>
 8015840:	2002      	movs	r0, #2
 8015842:	e7cc      	b.n	80157de <f_open+0xf2>
					clst = get_fat(&fp->obj, clst);
 8015844:	6820      	ldr	r0, [r4, #0]
 8015846:	f7ff f9f3 	bl	8014c30 <get_fat.isra.7>
					if (clst <= 1) res = FR_INT_ERR;
 801584a:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 801584c:	4601      	mov	r1, r0
 801584e:	eba5 0508 	sub.w	r5, r5, r8
					if (clst <= 1) res = FR_INT_ERR;
 8015852:	d903      	bls.n	801585c <f_open+0x170>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015854:	1c42      	adds	r2, r0, #1
 8015856:	d135      	bne.n	80158c4 <f_open+0x1d8>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015858:	2001      	movs	r0, #1
 801585a:	e036      	b.n	80158ca <f_open+0x1de>
					if (clst <= 1) res = FR_INT_ERR;
 801585c:	2002      	movs	r0, #2
 801585e:	e034      	b.n	80158ca <f_open+0x1de>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015860:	2012      	movs	r0, #18
 8015862:	e7bc      	b.n	80157de <f_open+0xf2>
					res = FR_NO_FILE;
 8015864:	2004      	movs	r0, #4
 8015866:	e7ba      	b.n	80157de <f_open+0xf2>
					res = FR_DENIED;
 8015868:	2007      	movs	r0, #7
 801586a:	e7b8      	b.n	80157de <f_open+0xf2>
	if (!fp) return FR_INVALID_OBJECT;
 801586c:	2709      	movs	r7, #9
 801586e:	e7b9      	b.n	80157e4 <f_open+0xf8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015870:	9e02      	ldr	r6, [sp, #8]
 8015872:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8015876:	7830      	ldrb	r0, [r6, #0]
 8015878:	4641      	mov	r1, r8
 801587a:	f7fe ff31 	bl	80146e0 <ld_clust.isra.1>
 801587e:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015880:	f108 001c 	add.w	r0, r8, #28
 8015884:	f7fe fe12 	bl	80144ac <ld_dword>
			fp->obj.id = fs->id;
 8015888:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 801588a:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 801588c:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801588e:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015892:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8015894:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8015896:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8015898:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 801589a:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801589c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801589e:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80158a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80158a4:	4630      	mov	r0, r6
 80158a6:	f7fe fe11 	bl	80144cc <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80158aa:	06ab      	lsls	r3, r5, #26
 80158ac:	d59a      	bpl.n	80157e4 <f_open+0xf8>
 80158ae:	68e5      	ldr	r5, [r4, #12]
 80158b0:	2d00      	cmp	r5, #0
 80158b2:	d097      	beq.n	80157e4 <f_open+0xf8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80158b4:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80158b6:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80158b8:	895a      	ldrh	r2, [r3, #10]
 80158ba:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80158be:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80158c0:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80158c4:	45a8      	cmp	r8, r5
 80158c6:	d3bd      	bcc.n	8015844 <f_open+0x158>
 80158c8:	2000      	movs	r0, #0
				fp->clust = clst;
 80158ca:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80158cc:	2800      	cmp	r0, #0
 80158ce:	d186      	bne.n	80157de <f_open+0xf2>
 80158d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80158d4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80158d8:	fbb5 f2f3 	udiv	r2, r5, r3
 80158dc:	fb03 5512 	mls	r5, r3, r2, r5
 80158e0:	2d00      	cmp	r5, #0
 80158e2:	f43f af7f 	beq.w	80157e4 <f_open+0xf8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80158e6:	4640      	mov	r0, r8
 80158e8:	f7fe fe8c 	bl	8014604 <clust2sect>
 80158ec:	2800      	cmp	r0, #0
 80158ee:	d0a7      	beq.n	8015840 <f_open+0x154>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80158f0:	4402      	add	r2, r0
 80158f2:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80158f4:	2301      	movs	r3, #1
 80158f6:	4631      	mov	r1, r6
 80158f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80158fc:	f7fe fdac 	bl	8014458 <disk_read>
 8015900:	2800      	cmp	r0, #0
 8015902:	f43f af6f 	beq.w	80157e4 <f_open+0xf8>
 8015906:	2001      	movs	r0, #1
 8015908:	e769      	b.n	80157de <f_open+0xf2>
 801590a:	bf00      	nop
 801590c:	20001244 	.word	0x20001244

08015910 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8015910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015914:	469b      	mov	fp, r3
 8015916:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8015918:	2300      	movs	r3, #0
{
 801591a:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 801591c:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8015920:	a903      	add	r1, sp, #12
{
 8015922:	4604      	mov	r4, r0
 8015924:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8015926:	f7fe feb8 	bl	801469a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801592a:	4605      	mov	r5, r0
 801592c:	bb18      	cbnz	r0, 8015976 <f_read+0x66>
 801592e:	7d65      	ldrb	r5, [r4, #21]
 8015930:	bb0d      	cbnz	r5, 8015976 <f_read+0x66>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8015932:	7d23      	ldrb	r3, [r4, #20]
 8015934:	07da      	lsls	r2, r3, #31
 8015936:	f140 80a8 	bpl.w	8015a8a <f_read+0x17a>
	remain = fp->obj.objsize - fp->fptr;
 801593a:	68e3      	ldr	r3, [r4, #12]
 801593c:	69a6      	ldr	r6, [r4, #24]
 801593e:	1b9e      	subs	r6, r3, r6
 8015940:	42be      	cmp	r6, r7
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8015942:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8015946:	bf28      	it	cs
 8015948:	463e      	movcs	r6, r7
 801594a:	9300      	str	r3, [sp, #0]
	for ( ;  btr;								/* Repeat until all data read */
 801594c:	b19e      	cbz	r6, 8015976 <f_read+0x66>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801594e:	9803      	ldr	r0, [sp, #12]
 8015950:	69a1      	ldr	r1, [r4, #24]
 8015952:	8983      	ldrh	r3, [r0, #12]
 8015954:	fbb1 f2f3 	udiv	r2, r1, r3
 8015958:	fb03 1312 	mls	r3, r3, r2, r1
 801595c:	2b00      	cmp	r3, #0
 801595e:	d17d      	bne.n	8015a5c <f_read+0x14c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8015960:	8943      	ldrh	r3, [r0, #10]
 8015962:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8015964:	4013      	ands	r3, r2
 8015966:	9301      	str	r3, [sp, #4]
 8015968:	d119      	bne.n	801599e <f_read+0x8e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801596a:	b941      	cbnz	r1, 801597e <f_read+0x6e>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801596c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801596e:	2801      	cmp	r0, #1
 8015970:	d810      	bhi.n	8015994 <f_read+0x84>
 8015972:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015974:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8015976:	4628      	mov	r0, r5
 8015978:	b005      	add	sp, #20
 801597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 801597e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015980:	b11b      	cbz	r3, 801598a <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015982:	4620      	mov	r0, r4
 8015984:	f7fe fe49 	bl	801461a <clmt_clust>
 8015988:	e7f1      	b.n	801596e <f_read+0x5e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801598a:	69e1      	ldr	r1, [r4, #28]
 801598c:	6820      	ldr	r0, [r4, #0]
 801598e:	f7ff f94f 	bl	8014c30 <get_fat.isra.7>
 8015992:	e7ec      	b.n	801596e <f_read+0x5e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015994:	1c43      	adds	r3, r0, #1
 8015996:	d101      	bne.n	801599c <f_read+0x8c>
 8015998:	2501      	movs	r5, #1
 801599a:	e7eb      	b.n	8015974 <f_read+0x64>
				fp->clust = clst;				/* Update current cluster */
 801599c:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801599e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80159a2:	69e1      	ldr	r1, [r4, #28]
 80159a4:	4650      	mov	r0, sl
 80159a6:	f7fe fe2d 	bl	8014604 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80159aa:	2800      	cmp	r0, #0
 80159ac:	d0e1      	beq.n	8015972 <f_read+0x62>
			sect += csect;
 80159ae:	9b01      	ldr	r3, [sp, #4]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80159b0:	f8ba 800c 	ldrh.w	r8, [sl, #12]
 80159b4:	fbb6 f8f8 	udiv	r8, r6, r8
			sect += csect;
 80159b8:	181f      	adds	r7, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 80159ba:	f1b8 0f00 	cmp.w	r8, #0
 80159be:	d030      	beq.n	8015a22 <f_read+0x112>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80159c0:	9a01      	ldr	r2, [sp, #4]
 80159c2:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80159c6:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80159ca:	4442      	add	r2, r8
 80159cc:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 80159ce:	bf84      	itt	hi
 80159d0:	9a01      	ldrhi	r2, [sp, #4]
 80159d2:	eba3 0802 	subhi.w	r8, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80159d6:	4643      	mov	r3, r8
 80159d8:	463a      	mov	r2, r7
 80159da:	4649      	mov	r1, r9
 80159dc:	f7fe fd3c 	bl	8014458 <disk_read>
 80159e0:	2800      	cmp	r0, #0
 80159e2:	d1d9      	bne.n	8015998 <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80159e4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	da0b      	bge.n	8015a04 <f_read+0xf4>
 80159ec:	6a20      	ldr	r0, [r4, #32]
 80159ee:	1bc0      	subs	r0, r0, r7
 80159f0:	4540      	cmp	r0, r8
 80159f2:	d207      	bcs.n	8015a04 <f_read+0xf4>
 80159f4:	9b03      	ldr	r3, [sp, #12]
 80159f6:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 80159f8:	b122      	cbz	r2, 8015a04 <f_read+0xf4>
 80159fa:	9900      	ldr	r1, [sp, #0]
 80159fc:	fb02 9000 	mla	r0, r2, r0, r9
 8015a00:	f7fe fe65 	bl	80146ce <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8015a04:	9b03      	ldr	r3, [sp, #12]
 8015a06:	899f      	ldrh	r7, [r3, #12]
 8015a08:	fb08 f707 	mul.w	r7, r8, r7
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8015a0c:	69a3      	ldr	r3, [r4, #24]
 8015a0e:	443b      	add	r3, r7
 8015a10:	61a3      	str	r3, [r4, #24]
 8015a12:	f8db 3000 	ldr.w	r3, [fp]
 8015a16:	443b      	add	r3, r7
 8015a18:	44b9      	add	r9, r7
 8015a1a:	f8cb 3000 	str.w	r3, [fp]
 8015a1e:	1bf6      	subs	r6, r6, r7
 8015a20:	e794      	b.n	801594c <f_read+0x3c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8015a22:	6a22      	ldr	r2, [r4, #32]
 8015a24:	42ba      	cmp	r2, r7
 8015a26:	d018      	beq.n	8015a5a <f_read+0x14a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015a28:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	da0b      	bge.n	8015a48 <f_read+0x138>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015a30:	2301      	movs	r3, #1
 8015a32:	9900      	ldr	r1, [sp, #0]
 8015a34:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8015a38:	f7fe fd1c 	bl	8014474 <disk_write>
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	d1ab      	bne.n	8015998 <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015a40:	7d23      	ldrb	r3, [r4, #20]
 8015a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a46:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015a48:	9803      	ldr	r0, [sp, #12]
 8015a4a:	9900      	ldr	r1, [sp, #0]
 8015a4c:	7840      	ldrb	r0, [r0, #1]
 8015a4e:	2301      	movs	r3, #1
 8015a50:	463a      	mov	r2, r7
 8015a52:	f7fe fd01 	bl	8014458 <disk_read>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	d19e      	bne.n	8015998 <f_read+0x88>
			fp->sect = sect;
 8015a5a:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015a5c:	9b03      	ldr	r3, [sp, #12]
 8015a5e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8015a62:	69a3      	ldr	r3, [r4, #24]
 8015a64:	fbb3 f1f8 	udiv	r1, r3, r8
 8015a68:	fb08 3111 	mls	r1, r8, r1, r3
 8015a6c:	eba8 0801 	sub.w	r8, r8, r1
 8015a70:	45b0      	cmp	r8, r6
 8015a72:	4647      	mov	r7, r8
 8015a74:	bf28      	it	cs
 8015a76:	4637      	movcs	r7, r6
	if (cnt) {
 8015a78:	2f00      	cmp	r7, #0
 8015a7a:	d0c7      	beq.n	8015a0c <f_read+0xfc>
 8015a7c:	9b00      	ldr	r3, [sp, #0]
 8015a7e:	463a      	mov	r2, r7
 8015a80:	4419      	add	r1, r3
 8015a82:	4648      	mov	r0, r9
 8015a84:	f7fe fe23 	bl	80146ce <mem_cpy.part.0>
 8015a88:	e7c0      	b.n	8015a0c <f_read+0xfc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8015a8a:	2507      	movs	r5, #7
 8015a8c:	e773      	b.n	8015976 <f_read+0x66>

08015a8e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015a90:	a901      	add	r1, sp, #4
{
 8015a92:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015a94:	f7fe fe01 	bl	801469a <validate>
	if (res == FR_OK) {
 8015a98:	4605      	mov	r5, r0
 8015a9a:	2800      	cmp	r0, #0
 8015a9c:	d13a      	bne.n	8015b14 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015a9e:	7d23      	ldrb	r3, [r4, #20]
 8015aa0:	065a      	lsls	r2, r3, #25
 8015aa2:	d537      	bpl.n	8015b14 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015aa4:	061b      	lsls	r3, r3, #24
 8015aa6:	d50c      	bpl.n	8015ac2 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015aa8:	9801      	ldr	r0, [sp, #4]
 8015aaa:	6a22      	ldr	r2, [r4, #32]
 8015aac:	7840      	ldrb	r0, [r0, #1]
 8015aae:	2301      	movs	r3, #1
 8015ab0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015ab4:	f7fe fcde 	bl	8014474 <disk_write>
 8015ab8:	bb78      	cbnz	r0, 8015b1a <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015aba:	7d23      	ldrb	r3, [r4, #20]
 8015abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ac0:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015ac2:	f7fc ffa1 	bl	8012a08 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015ac6:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8015ac8:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8015aca:	9801      	ldr	r0, [sp, #4]
 8015acc:	f7fe fe4b 	bl	8014766 <move_window>
				if (res == FR_OK) {
 8015ad0:	4605      	mov	r5, r0
 8015ad2:	b9f8      	cbnz	r0, 8015b14 <f_sync+0x86>
					dir = fp->dir_ptr;
 8015ad4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015ad6:	7af3      	ldrb	r3, [r6, #11]
 8015ad8:	f043 0320 	orr.w	r3, r3, #32
 8015adc:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015ade:	68a2      	ldr	r2, [r4, #8]
 8015ae0:	6820      	ldr	r0, [r4, #0]
 8015ae2:	4631      	mov	r1, r6
 8015ae4:	f7fe fe0a 	bl	80146fc <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015ae8:	68e1      	ldr	r1, [r4, #12]
 8015aea:	f106 001c 	add.w	r0, r6, #28
 8015aee:	f7fe fce5 	bl	80144bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015af2:	4639      	mov	r1, r7
 8015af4:	f106 0016 	add.w	r0, r6, #22
 8015af8:	f7fe fce0 	bl	80144bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8015afc:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8015afe:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8015b00:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8015b02:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8015b04:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015b06:	f7ff f9d7 	bl	8014eb8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015b0a:	7d23      	ldrb	r3, [r4, #20]
 8015b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8015b10:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015b12:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8015b14:	4628      	mov	r0, r5
 8015b16:	b003      	add	sp, #12
 8015b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015b1a:	2501      	movs	r5, #1
 8015b1c:	e7fa      	b.n	8015b14 <f_sync+0x86>

08015b1e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015b1e:	b513      	push	{r0, r1, r4, lr}
 8015b20:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015b22:	f7ff ffb4 	bl	8015a8e <f_sync>
	if (res == FR_OK)
 8015b26:	b948      	cbnz	r0, 8015b3c <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015b28:	a901      	add	r1, sp, #4
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	f7fe fdb5 	bl	801469a <validate>
		if (res == FR_OK) {
 8015b30:	b920      	cbnz	r0, 8015b3c <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015b32:	6920      	ldr	r0, [r4, #16]
 8015b34:	f7fe fd4a 	bl	80145cc <dec_lock>
			if (res == FR_OK)
 8015b38:	b900      	cbnz	r0, 8015b3c <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015b3a:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8015b3c:	b002      	add	sp, #8
 8015b3e:	bd10      	pop	{r4, pc}

08015b40 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8015b40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b44:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015b46:	a901      	add	r1, sp, #4
{
 8015b48:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015b4a:	f7fe fda6 	bl	801469a <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015b4e:	4606      	mov	r6, r0
 8015b50:	b9d0      	cbnz	r0, 8015b88 <f_lseek+0x48>
 8015b52:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015b54:	b9c6      	cbnz	r6, 8015b88 <f_lseek+0x48>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015b56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d07b      	beq.n	8015c54 <f_lseek+0x114>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015b5c:	1c6a      	adds	r2, r5, #1
 8015b5e:	d137      	bne.n	8015bd0 <f_lseek+0x90>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015b60:	68a7      	ldr	r7, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015b62:	f8d3 a000 	ldr.w	sl, [r3]
 8015b66:	f103 0904 	add.w	r9, r3, #4
 8015b6a:	2502      	movs	r5, #2
			if (cl) {
 8015b6c:	b33f      	cbz	r7, 8015bbe <f_lseek+0x7e>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015b6e:	f04f 0800 	mov.w	r8, #0
 8015b72:	eb07 0108 	add.w	r1, r7, r8
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 8015b76:	6820      	ldr	r0, [r4, #0]
 8015b78:	f7ff f85a 	bl	8014c30 <get_fat.isra.7>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015b7c:	2801      	cmp	r0, #1
						cl = get_fat(&fp->obj, cl);
 8015b7e:	f108 0801 	add.w	r8, r8, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015b82:	d807      	bhi.n	8015b94 <f_lseek+0x54>
 8015b84:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015b86:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8015b88:	4630      	mov	r0, r6
 8015b8a:	b002      	add	sp, #8
 8015b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b90:	4607      	mov	r7, r0
 8015b92:	e7ec      	b.n	8015b6e <f_lseek+0x2e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015b94:	1c43      	adds	r3, r0, #1
 8015b96:	d101      	bne.n	8015b9c <f_lseek+0x5c>
 8015b98:	2601      	movs	r6, #1
 8015b9a:	e7f4      	b.n	8015b86 <f_lseek+0x46>
					} while (cl == pcl + 1);
 8015b9c:	eb07 0308 	add.w	r3, r7, r8
 8015ba0:	4298      	cmp	r0, r3
 8015ba2:	d0e6      	beq.n	8015b72 <f_lseek+0x32>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015ba4:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8015ba6:	45aa      	cmp	sl, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8015ba8:	bf21      	itttt	cs
 8015baa:	464b      	movcs	r3, r9
 8015bac:	f843 8b08 	strcs.w	r8, [r3], #8
 8015bb0:	f8c9 7004 	strcs.w	r7, [r9, #4]
 8015bb4:	4699      	movcs	r9, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8015bb6:	9b01      	ldr	r3, [sp, #4]
 8015bb8:	69db      	ldr	r3, [r3, #28]
 8015bba:	4283      	cmp	r3, r0
 8015bbc:	d8e8      	bhi.n	8015b90 <f_lseek+0x50>
			*fp->cltbl = ulen;	/* Number of items used */
 8015bbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
 8015bc0:	4555      	cmp	r5, sl
			*fp->cltbl = ulen;	/* Number of items used */
 8015bc2:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen) {
 8015bc4:	f200 80e0 	bhi.w	8015d88 <f_lseek+0x248>
				*tbl = 0;		/* Terminate table */
 8015bc8:	2300      	movs	r3, #0
 8015bca:	f8c9 3000 	str.w	r3, [r9]
 8015bce:	e7db      	b.n	8015b88 <f_lseek+0x48>
 8015bd0:	68e3      	ldr	r3, [r4, #12]
 8015bd2:	429d      	cmp	r5, r3
 8015bd4:	bf28      	it	cs
 8015bd6:	461d      	movcs	r5, r3
			fp->fptr = ofs;				/* Set file pointer */
 8015bd8:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 8015bda:	2d00      	cmp	r5, #0
 8015bdc:	d0d4      	beq.n	8015b88 <f_lseek+0x48>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015bde:	f105 38ff 	add.w	r8, r5, #4294967295
 8015be2:	4641      	mov	r1, r8
 8015be4:	4620      	mov	r0, r4
 8015be6:	f7fe fd18 	bl	801461a <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 8015bea:	9f01      	ldr	r7, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 8015bec:	61e0      	str	r0, [r4, #28]
 8015bee:	4601      	mov	r1, r0
				dsc = clust2sect(fs, fp->clust);
 8015bf0:	4638      	mov	r0, r7
 8015bf2:	f7fe fd07 	bl	8014604 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015bf6:	2800      	cmp	r0, #0
 8015bf8:	d0c4      	beq.n	8015b84 <f_lseek+0x44>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015bfa:	89bb      	ldrh	r3, [r7, #12]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015bfc:	fbb5 f2f3 	udiv	r2, r5, r3
 8015c00:	fb03 5512 	mls	r5, r3, r2, r5
 8015c04:	2d00      	cmp	r5, #0
 8015c06:	d0bf      	beq.n	8015b88 <f_lseek+0x48>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015c08:	fbb8 f8f3 	udiv	r8, r8, r3
 8015c0c:	897d      	ldrh	r5, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015c0e:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015c10:	3d01      	subs	r5, #1
 8015c12:	ea05 0508 	and.w	r5, r5, r8
 8015c16:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015c18:	42aa      	cmp	r2, r5
 8015c1a:	d0b5      	beq.n	8015b88 <f_lseek+0x48>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015c1c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8015c26:	da0a      	bge.n	8015c3e <f_lseek+0xfe>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015c28:	2301      	movs	r3, #1
 8015c2a:	4641      	mov	r1, r8
 8015c2c:	7878      	ldrb	r0, [r7, #1]
 8015c2e:	f7fe fc21 	bl	8014474 <disk_write>
 8015c32:	2800      	cmp	r0, #0
 8015c34:	d1b0      	bne.n	8015b98 <f_lseek+0x58>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015c36:	7d23      	ldrb	r3, [r4, #20]
 8015c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015c3c:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8015c3e:	9801      	ldr	r0, [sp, #4]
 8015c40:	2301      	movs	r3, #1
 8015c42:	462a      	mov	r2, r5
 8015c44:	4641      	mov	r1, r8
 8015c46:	7840      	ldrb	r0, [r0, #1]
 8015c48:	f7fe fc06 	bl	8014458 <disk_read>
 8015c4c:	2800      	cmp	r0, #0
 8015c4e:	d1a3      	bne.n	8015b98 <f_lseek+0x58>
					fp->sect = dsc;
 8015c50:	6225      	str	r5, [r4, #32]
 8015c52:	e799      	b.n	8015b88 <f_lseek+0x48>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015c54:	68e3      	ldr	r3, [r4, #12]
 8015c56:	42ab      	cmp	r3, r5
 8015c58:	d204      	bcs.n	8015c64 <f_lseek+0x124>
 8015c5a:	7d22      	ldrb	r2, [r4, #20]
 8015c5c:	f012 0f02 	tst.w	r2, #2
 8015c60:	bf08      	it	eq
 8015c62:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8015c64:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8015c66:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 8015c68:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 8015c6a:	b90d      	cbnz	r5, 8015c70 <f_lseek+0x130>
		fp->fptr = nsect = 0;
 8015c6c:	462f      	mov	r7, r5
 8015c6e:	e01e      	b.n	8015cae <f_lseek+0x16e>
 8015c70:	9a01      	ldr	r2, [sp, #4]
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015c72:	8951      	ldrh	r1, [r2, #10]
 8015c74:	8997      	ldrh	r7, [r2, #12]
 8015c76:	434f      	muls	r7, r1
			if (ifptr > 0 &&
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d043      	beq.n	8015d04 <f_lseek+0x1c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015c7c:	3b01      	subs	r3, #1
 8015c7e:	1e6a      	subs	r2, r5, #1
 8015c80:	fbb3 f1f7 	udiv	r1, r3, r7
 8015c84:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8015c88:	428a      	cmp	r2, r1
 8015c8a:	d33b      	bcc.n	8015d04 <f_lseek+0x1c4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015c8c:	427a      	negs	r2, r7
 8015c8e:	4013      	ands	r3, r2
				clst = fp->clust;
 8015c90:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015c92:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 8015c94:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8015c96:	2900      	cmp	r1, #0
 8015c98:	d161      	bne.n	8015d5e <f_lseek+0x21e>
		fp->fptr = nsect = 0;
 8015c9a:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8015c9c:	68e3      	ldr	r3, [r4, #12]
 8015c9e:	69a5      	ldr	r5, [r4, #24]
 8015ca0:	429d      	cmp	r5, r3
			fp->flag |= FA_MODIFIED;
 8015ca2:	bf81      	itttt	hi
 8015ca4:	7d23      	ldrbhi	r3, [r4, #20]
			fp->obj.objsize = fp->fptr;
 8015ca6:	60e5      	strhi	r5, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8015ca8:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 8015cac:	7523      	strbhi	r3, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015cae:	9801      	ldr	r0, [sp, #4]
 8015cb0:	8982      	ldrh	r2, [r0, #12]
 8015cb2:	fbb5 f3f2 	udiv	r3, r5, r2
 8015cb6:	fb02 5513 	mls	r5, r2, r3, r5
 8015cba:	2d00      	cmp	r5, #0
 8015cbc:	f43f af64 	beq.w	8015b88 <f_lseek+0x48>
 8015cc0:	6a22      	ldr	r2, [r4, #32]
 8015cc2:	42ba      	cmp	r2, r7
 8015cc4:	f43f af60 	beq.w	8015b88 <f_lseek+0x48>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015cc8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8015cd2:	da0b      	bge.n	8015cec <f_lseek+0x1ac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	4629      	mov	r1, r5
 8015cd8:	7840      	ldrb	r0, [r0, #1]
 8015cda:	f7fe fbcb 	bl	8014474 <disk_write>
 8015cde:	2800      	cmp	r0, #0
 8015ce0:	f47f af5a 	bne.w	8015b98 <f_lseek+0x58>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015ce4:	7d23      	ldrb	r3, [r4, #20]
 8015ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015cea:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015cec:	9801      	ldr	r0, [sp, #4]
 8015cee:	2301      	movs	r3, #1
 8015cf0:	463a      	mov	r2, r7
 8015cf2:	4629      	mov	r1, r5
 8015cf4:	7840      	ldrb	r0, [r0, #1]
 8015cf6:	f7fe fbaf 	bl	8014458 <disk_read>
 8015cfa:	2800      	cmp	r0, #0
 8015cfc:	f47f af4c 	bne.w	8015b98 <f_lseek+0x58>
			fp->sect = nsect;
 8015d00:	6227      	str	r7, [r4, #32]
 8015d02:	e741      	b.n	8015b88 <f_lseek+0x48>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015d04:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015d06:	b951      	cbnz	r1, 8015d1e <f_lseek+0x1de>
					clst = create_chain(&fp->obj, 0);
 8015d08:	4620      	mov	r0, r4
 8015d0a:	f7ff f846 	bl	8014d9a <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015d0e:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 8015d10:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015d12:	f43f af37 	beq.w	8015b84 <f_lseek+0x44>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015d16:	3001      	adds	r0, #1
 8015d18:	f43f af3e 	beq.w	8015b98 <f_lseek+0x58>
					fp->obj.sclust = clst;
 8015d1c:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 8015d1e:	61e1      	str	r1, [r4, #28]
 8015d20:	e7b9      	b.n	8015c96 <f_lseek+0x156>
					ofs -= bcs; fp->fptr += bcs;
 8015d22:	443b      	add	r3, r7
 8015d24:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015d26:	7d23      	ldrb	r3, [r4, #20]
 8015d28:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 8015d2a:	eba5 0507 	sub.w	r5, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015d2e:	d506      	bpl.n	8015d3e <f_lseek+0x1fe>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015d30:	4620      	mov	r0, r4
 8015d32:	f7ff f832 	bl	8014d9a <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015d36:	4601      	mov	r1, r0
 8015d38:	b928      	cbnz	r0, 8015d46 <f_lseek+0x206>
							ofs = 0; break;
 8015d3a:	4605      	mov	r5, r0
 8015d3c:	e012      	b.n	8015d64 <f_lseek+0x224>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015d3e:	6820      	ldr	r0, [r4, #0]
 8015d40:	f7fe ff76 	bl	8014c30 <get_fat.isra.7>
 8015d44:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015d46:	1c4b      	adds	r3, r1, #1
 8015d48:	f43f af26 	beq.w	8015b98 <f_lseek+0x58>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015d4c:	2901      	cmp	r1, #1
 8015d4e:	f67f af19 	bls.w	8015b84 <f_lseek+0x44>
 8015d52:	9b01      	ldr	r3, [sp, #4]
 8015d54:	69db      	ldr	r3, [r3, #28]
 8015d56:	428b      	cmp	r3, r1
 8015d58:	f67f af14 	bls.w	8015b84 <f_lseek+0x44>
					fp->clust = clst;
 8015d5c:	61e1      	str	r1, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015d5e:	42bd      	cmp	r5, r7
 8015d60:	69a3      	ldr	r3, [r4, #24]
 8015d62:	d8de      	bhi.n	8015d22 <f_lseek+0x1e2>
				fp->fptr += ofs;
 8015d64:	69a3      	ldr	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8015d66:	9801      	ldr	r0, [sp, #4]
				fp->fptr += ofs;
 8015d68:	442b      	add	r3, r5
 8015d6a:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8015d6c:	8983      	ldrh	r3, [r0, #12]
 8015d6e:	fbb5 f7f3 	udiv	r7, r5, r3
 8015d72:	fb03 5517 	mls	r5, r3, r7, r5
 8015d76:	2d00      	cmp	r5, #0
 8015d78:	d08f      	beq.n	8015c9a <f_lseek+0x15a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015d7a:	f7fe fc43 	bl	8014604 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	f43f af00 	beq.w	8015b84 <f_lseek+0x44>
					nsect += (DWORD)(ofs / SS(fs));
 8015d84:	4407      	add	r7, r0
 8015d86:	e789      	b.n	8015c9c <f_lseek+0x15c>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015d88:	2611      	movs	r6, #17
 8015d8a:	e6fd      	b.n	8015b88 <f_lseek+0x48>

08015d8c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8015d8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015d90:	4606      	mov	r6, r0
 8015d92:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
 8015d94:	4605      	mov	r5, r0
	int n = 0;
 8015d96:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8015d98:	1e4f      	subs	r7, r1, #1
 8015d9a:	42bc      	cmp	r4, r7
 8015d9c:	da12      	bge.n	8015dc4 <f_gets+0x38>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8015d9e:	ab01      	add	r3, sp, #4
 8015da0:	2201      	movs	r2, #1
 8015da2:	4669      	mov	r1, sp
 8015da4:	4640      	mov	r0, r8
 8015da6:	f7ff fdb3 	bl	8015910 <f_read>
		if (rc != 1) break;
 8015daa:	9b01      	ldr	r3, [sp, #4]
 8015dac:	2b01      	cmp	r3, #1
 8015dae:	d109      	bne.n	8015dc4 <f_gets+0x38>
		c = s[0];
 8015db0:	f89d 3000 	ldrb.w	r3, [sp]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8015db4:	2b0d      	cmp	r3, #13
 8015db6:	d0f0      	beq.n	8015d9a <f_gets+0xe>
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
 8015db8:	2b0a      	cmp	r3, #10
		*p++ = c;
 8015dba:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 8015dbe:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 8015dc2:	d1ea      	bne.n	8015d9a <f_gets+0xe>
	}
	*p = 0;
 8015dc4:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8015dc6:	429c      	cmp	r4, r3
}
 8015dc8:	bf14      	ite	ne
 8015dca:	4630      	movne	r0, r6
 8015dcc:	4618      	moveq	r0, r3
	*p = 0;
 8015dce:	702b      	strb	r3, [r5, #0]
}
 8015dd0:	b002      	add	sp, #8
 8015dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08015dd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015dd8:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8015dda:	4b0f      	ldr	r3, [pc, #60]	; (8015e18 <FATFS_LinkDriverEx+0x40>)
 8015ddc:	7b9c      	ldrb	r4, [r3, #14]
 8015dde:	2c01      	cmp	r4, #1
 8015de0:	d818      	bhi.n	8015e14 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015de2:	7b9d      	ldrb	r5, [r3, #14]
 8015de4:	b2ed      	uxtb	r5, r5
 8015de6:	2400      	movs	r4, #0
 8015de8:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8015dea:	7b9d      	ldrb	r5, [r3, #14]
 8015dec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8015df0:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8015df2:	7b98      	ldrb	r0, [r3, #14]
 8015df4:	4418      	add	r0, r3
 8015df6:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 8015df8:	7b9a      	ldrb	r2, [r3, #14]
 8015dfa:	b2d2      	uxtb	r2, r2
 8015dfc:	1c50      	adds	r0, r2, #1
 8015dfe:	b2c0      	uxtb	r0, r0
 8015e00:	7398      	strb	r0, [r3, #14]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8015e02:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8015e04:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8015e06:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8015e08:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8015e0a:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8015e0c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8015e0e:	70cc      	strb	r4, [r1, #3]
 8015e10:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8015e12:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8015e14:	2001      	movs	r0, #1
 8015e16:	e7fc      	b.n	8015e12 <FATFS_LinkDriverEx+0x3a>
 8015e18:	20001468 	.word	0x20001468

08015e1c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8015e1c:	2200      	movs	r2, #0
 8015e1e:	f7ff bfdb 	b.w	8015dd8 <FATFS_LinkDriverEx>
	...

08015e24 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8015e24:	4a0a      	ldr	r2, [pc, #40]	; (8015e50 <FATFS_UnLinkDriverEx+0x2c>)
 8015e26:	7b93      	ldrb	r3, [r2, #14]
 8015e28:	b17b      	cbz	r3, 8015e4a <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8015e2a:	7803      	ldrb	r3, [r0, #0]
 8015e2c:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8015e34:	6848      	ldr	r0, [r1, #4]
 8015e36:	b140      	cbz	r0, 8015e4a <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8015e38:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8015e3a:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8015e3c:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
 8015e3e:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
 8015e40:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8015e42:	3b01      	subs	r3, #1
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	7393      	strb	r3, [r2, #14]
 8015e48:	4770      	bx	lr
  uint8_t ret = 1;
 8015e4a:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 8015e4c:	4770      	bx	lr
 8015e4e:	bf00      	nop
 8015e50:	20001468 	.word	0x20001468

08015e54 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8015e54:	2100      	movs	r1, #0
 8015e56:	f7ff bfe5 	b.w	8015e24 <FATFS_UnLinkDriverEx>
	...

08015e5c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015e5c:	287f      	cmp	r0, #127	; 0x7f
{
 8015e5e:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8015e60:	d906      	bls.n	8015e70 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015e62:	b131      	cbz	r1, 8015e72 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015e64:	28ff      	cmp	r0, #255	; 0xff
 8015e66:	d812      	bhi.n	8015e8e <ff_convert+0x32>
 8015e68:	3880      	subs	r0, #128	; 0x80
 8015e6a:	4b0a      	ldr	r3, [pc, #40]	; (8015e94 <ff_convert+0x38>)
 8015e6c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8015e70:	bd10      	pop	{r4, pc}
				if (chr == Tbl[c]) break;
 8015e72:	4a08      	ldr	r2, [pc, #32]	; (8015e94 <ff_convert+0x38>)
 8015e74:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 8015e78:	4284      	cmp	r4, r0
 8015e7a:	b28b      	uxth	r3, r1
 8015e7c:	d003      	beq.n	8015e86 <ff_convert+0x2a>
 8015e7e:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8015e80:	2980      	cmp	r1, #128	; 0x80
 8015e82:	d1f7      	bne.n	8015e74 <ff_convert+0x18>
 8015e84:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 8015e86:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8015e8a:	b2c0      	uxtb	r0, r0
 8015e8c:	e7f0      	b.n	8015e70 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015e8e:	2000      	movs	r0, #0
 8015e90:	e7ee      	b.n	8015e70 <ff_convert+0x14>
 8015e92:	bf00      	nop
 8015e94:	08018372 	.word	0x08018372

08015e98 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015e98:	b570      	push	{r4, r5, r6, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015e9a:	4b1e      	ldr	r3, [pc, #120]	; (8015f14 <ff_wtoupper+0x7c>)
 8015e9c:	4a1e      	ldr	r2, [pc, #120]	; (8015f18 <ff_wtoupper+0x80>)
 8015e9e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8015ea2:	bf28      	it	cs
 8015ea4:	4613      	movcs	r3, r2
 8015ea6:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 8015ea8:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 8015eac:	460a      	mov	r2, r1
		if (!bc || chr < bc) break;
 8015eae:	b1a3      	cbz	r3, 8015eda <ff_wtoupper+0x42>
 8015eb0:	4298      	cmp	r0, r3
 8015eb2:	d312      	bcc.n	8015eda <ff_wtoupper+0x42>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8015eb4:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 8015eb8:	0a25      	lsrs	r5, r4, #8
 8015eba:	b2e4      	uxtb	r4, r4
		if (chr < bc + nc) {	/* In the block? */
 8015ebc:	18e6      	adds	r6, r4, r3
 8015ebe:	42b0      	cmp	r0, r6
 8015ec0:	da21      	bge.n	8015f06 <ff_wtoupper+0x6e>
			switch (cmd) {
 8015ec2:	2d08      	cmp	r5, #8
 8015ec4:	d809      	bhi.n	8015eda <ff_wtoupper+0x42>
 8015ec6:	e8df f005 	tbb	[pc, r5]
 8015eca:	0905      	.short	0x0905
 8015ecc:	1513110f 	.word	0x1513110f
 8015ed0:	1917      	.short	0x1917
 8015ed2:	1b          	.byte	0x1b
 8015ed3:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015ed4:	1ac0      	subs	r0, r0, r3
 8015ed6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 8015eda:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015edc:	1ac3      	subs	r3, r0, r3
 8015ede:	f003 0301 	and.w	r3, r3, #1
 8015ee2:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015ee4:	b280      	uxth	r0, r0
 8015ee6:	e7f8      	b.n	8015eda <ff_wtoupper+0x42>
			case 2: chr -= 16; break;				/* Shift -16 */
 8015ee8:	3810      	subs	r0, #16
 8015eea:	e7fb      	b.n	8015ee4 <ff_wtoupper+0x4c>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015eec:	3820      	subs	r0, #32
 8015eee:	e7f9      	b.n	8015ee4 <ff_wtoupper+0x4c>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015ef0:	3830      	subs	r0, #48	; 0x30
 8015ef2:	e7f7      	b.n	8015ee4 <ff_wtoupper+0x4c>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015ef4:	381a      	subs	r0, #26
 8015ef6:	e7f5      	b.n	8015ee4 <ff_wtoupper+0x4c>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015ef8:	3008      	adds	r0, #8
 8015efa:	e7f3      	b.n	8015ee4 <ff_wtoupper+0x4c>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015efc:	3850      	subs	r0, #80	; 0x50
 8015efe:	e7f1      	b.n	8015ee4 <ff_wtoupper+0x4c>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015f00:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8015f04:	e7ee      	b.n	8015ee4 <ff_wtoupper+0x4c>
 8015f06:	3104      	adds	r1, #4
		if (!cmd) p += nc;
 8015f08:	2d00      	cmp	r5, #0
 8015f0a:	d1cd      	bne.n	8015ea8 <ff_wtoupper+0x10>
 8015f0c:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 8015f10:	e7c9      	b.n	8015ea6 <ff_wtoupper+0xe>
 8015f12:	bf00      	nop
 8015f14:	08018472 	.word	0x08018472
 8015f18:	08018664 	.word	0x08018664

08015f1c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015f1c:	2904      	cmp	r1, #4
 8015f1e:	d00a      	beq.n	8015f36 <USBH_UserProcess+0x1a>
 8015f20:	2905      	cmp	r1, #5
 8015f22:	d004      	beq.n	8015f2e <USBH_UserProcess+0x12>
 8015f24:	2902      	cmp	r1, #2
 8015f26:	d105      	bne.n	8015f34 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015f28:	4b04      	ldr	r3, [pc, #16]	; (8015f3c <USBH_UserProcess+0x20>)
 8015f2a:	7019      	strb	r1, [r3, #0]
  break;
 8015f2c:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8015f2e:	4b03      	ldr	r3, [pc, #12]	; (8015f3c <USBH_UserProcess+0x20>)
 8015f30:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015f32:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015f34:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8015f36:	4b01      	ldr	r3, [pc, #4]	; (8015f3c <USBH_UserProcess+0x20>)
 8015f38:	2201      	movs	r2, #1
 8015f3a:	e7fa      	b.n	8015f32 <USBH_UserProcess+0x16>
 8015f3c:	20001478 	.word	0x20001478

08015f40 <MX_USB_HOST_DeInit>:
{
 8015f40:	b510      	push	{r4, lr}
	USBH_Stop(&hUsbHostHS);
 8015f42:	4c04      	ldr	r4, [pc, #16]	; (8015f54 <MX_USB_HOST_DeInit+0x14>)
 8015f44:	4620      	mov	r0, r4
 8015f46:	f7fd fdad 	bl	8013aa4 <USBH_Stop>
	USBH_DeInit(&hUsbHostHS);
 8015f4a:	4620      	mov	r0, r4
}
 8015f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USBH_DeInit(&hUsbHostHS);
 8015f50:	f7fd bd55 	b.w	80139fe <USBH_DeInit>
 8015f54:	20005800 	.word	0x20005800

08015f58 <MX_USB_HOST_Init>:
{
 8015f58:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	490b      	ldr	r1, [pc, #44]	; (8015f8c <MX_USB_HOST_Init+0x34>)
 8015f5e:	480c      	ldr	r0, [pc, #48]	; (8015f90 <MX_USB_HOST_Init+0x38>)
 8015f60:	f7fd fd2e 	bl	80139c0 <USBH_Init>
 8015f64:	b108      	cbz	r0, 8015f6a <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8015f66:	f7f7 ff03 	bl	800dd70 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8015f6a:	490a      	ldr	r1, [pc, #40]	; (8015f94 <MX_USB_HOST_Init+0x3c>)
 8015f6c:	4808      	ldr	r0, [pc, #32]	; (8015f90 <MX_USB_HOST_Init+0x38>)
 8015f6e:	f7fd fd5d 	bl	8013a2c <USBH_RegisterClass>
 8015f72:	b108      	cbz	r0, 8015f78 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8015f74:	f7f7 fefc 	bl	800dd70 <Error_Handler>
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8015f78:	4805      	ldr	r0, [pc, #20]	; (8015f90 <MX_USB_HOST_Init+0x38>)
 8015f7a:	f7fd fd89 	bl	8013a90 <USBH_Start>
 8015f7e:	b118      	cbz	r0, 8015f88 <MX_USB_HOST_Init+0x30>
}
 8015f80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8015f84:	f7f7 bef4 	b.w	800dd70 <Error_Handler>
}
 8015f88:	bd08      	pop	{r3, pc}
 8015f8a:	bf00      	nop
 8015f8c:	08015f1d 	.word	0x08015f1d
 8015f90:	20005800 	.word	0x20005800
 8015f94:	2000001c 	.word	0x2000001c

08015f98 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostHS);
 8015f98:	4801      	ldr	r0, [pc, #4]	; (8015fa0 <MX_USB_HOST_Process+0x8>)
 8015f9a:	f7fd bd95 	b.w	8013ac8 <USBH_Process>
 8015f9e:	bf00      	nop
 8015fa0:	20005800 	.word	0x20005800

08015fa4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015fa4:	b530      	push	{r4, r5, lr}
 8015fa6:	4604      	mov	r4, r0
 8015fa8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015faa:	2214      	movs	r2, #20
 8015fac:	2100      	movs	r1, #0
 8015fae:	a803      	add	r0, sp, #12
 8015fb0:	f000 f977 	bl	80162a2 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 8015fb4:	6822      	ldr	r2, [r4, #0]
 8015fb6:	4b18      	ldr	r3, [pc, #96]	; (8016018 <HAL_HCD_MspInit+0x74>)
 8015fb8:	429a      	cmp	r2, r3
 8015fba:	d12b      	bne.n	8016014 <HAL_HCD_MspInit+0x70>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015fbc:	4c17      	ldr	r4, [pc, #92]	; (801601c <HAL_HCD_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015fbe:	4818      	ldr	r0, [pc, #96]	; (8016020 <HAL_HCD_MspInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015fc0:	2500      	movs	r5, #0
 8015fc2:	9501      	str	r5, [sp, #4]
 8015fc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fc6:	f043 0302 	orr.w	r3, r3, #2
 8015fca:	6323      	str	r3, [r4, #48]	; 0x30
 8015fcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fce:	f003 0302 	and.w	r3, r3, #2
 8015fd2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015fd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015fd8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015fda:	2302      	movs	r3, #2
 8015fdc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8015fe0:	2103      	movs	r1, #3
 8015fe2:	230c      	movs	r3, #12
 8015fe4:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015fe8:	eb0d 0103 	add.w	r1, sp, r3
 8015fec:	f7f9 f8c6 	bl	800f17c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8015ff0:	9502      	str	r5, [sp, #8]
 8015ff2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ff4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015ff8:	6323      	str	r3, [r4, #48]	; 0x30
 8015ffa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016000:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016002:	204d      	movs	r0, #77	; 0x4d
 8016004:	462a      	mov	r2, r5
 8016006:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016008:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801600a:	f7f8 fcd5 	bl	800e9b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801600e:	204d      	movs	r0, #77	; 0x4d
 8016010:	f7f8 fd06 	bl	800ea20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016014:	b009      	add	sp, #36	; 0x24
 8016016:	bd30      	pop	{r4, r5, pc}
 8016018:	40040000 	.word	0x40040000
 801601c:	40023800 	.word	0x40023800
 8016020:	40020400 	.word	0x40020400

08016024 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8016024:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8016028:	f7fd bf1f 	b.w	8013e6a <USBH_LL_IncTimer>

0801602c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 801602c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8016030:	f7fd bf31 	b.w	8013e96 <USBH_LL_Connect>

08016034 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8016034:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8016038:	f7fd bf37 	b.w	8013eaa <USBH_LL_Disconnect>

0801603c <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801603c:	4770      	bx	lr

0801603e <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 801603e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8016042:	f7fd bf20 	b.w	8013e86 <USBH_LL_PortEnabled>

08016046 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8016046:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801604a:	f7fd bf20 	b.w	8013e8e <USBH_LL_PortDisabled>
	...

08016050 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8016050:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8016052:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
{
 8016056:	4604      	mov	r4, r0
  if (phost->id == HOST_HS) {
 8016058:	b9f3      	cbnz	r3, 8016098 <USBH_LL_Init+0x48>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801605a:	4810      	ldr	r0, [pc, #64]	; (801609c <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_HS;

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801605c:	4a10      	ldr	r2, [pc, #64]	; (80160a0 <USBH_LL_Init+0x50>)
 801605e:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8016060:	f04f 0c0c 	mov.w	ip, #12
 8016064:	2201      	movs	r2, #1
 8016066:	e9c0 c202 	strd	ip, r2, [r0, #8]
  hhcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 801606a:	6102      	str	r2, [r0, #16]
  phost->pData = &hhcd_USB_OTG_HS;
 801606c:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016070:	2202      	movs	r2, #2
  hhcd_USB_OTG_HS.pData = phost;
 8016072:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016076:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801607a:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801607c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801607e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8016080:	f7f9 fa3e 	bl	800f500 <HAL_HCD_Init>
 8016084:	b108      	cbz	r0, 801608a <USBH_LL_Init+0x3a>
  {
    Error_Handler( );
 8016086:	f7f7 fe73 	bl	800dd70 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 801608a:	4804      	ldr	r0, [pc, #16]	; (801609c <USBH_LL_Init+0x4c>)
 801608c:	f7f9 fe22 	bl	800fcd4 <HAL_HCD_GetCurrentFrame>
 8016090:	4601      	mov	r1, r0
 8016092:	4620      	mov	r0, r4
 8016094:	f7fd fee6 	bl	8013e64 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8016098:	2000      	movs	r0, #0
 801609a:	bd10      	pop	{r4, pc}
 801609c:	20005bd8 	.word	0x20005bd8
 80160a0:	40040000 	.word	0x40040000

080160a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80160a4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 80160a6:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80160aa:	f7f9 fddd 	bl	800fc68 <HAL_HCD_Start>
 80160ae:	2803      	cmp	r0, #3
 80160b0:	bf96      	itet	ls
 80160b2:	4b02      	ldrls	r3, [pc, #8]	; (80160bc <USBH_LL_Start+0x18>)
 80160b4:	2002      	movhi	r0, #2
 80160b6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 80160b8:	bd08      	pop	{r3, pc}
 80160ba:	bf00      	nop
 80160bc:	08018723 	.word	0x08018723

080160c0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80160c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 80160c2:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80160c6:	f7f9 fde5 	bl	800fc94 <HAL_HCD_Stop>
 80160ca:	2803      	cmp	r0, #3
 80160cc:	bf96      	itet	ls
 80160ce:	4b02      	ldrls	r3, [pc, #8]	; (80160d8 <USBH_LL_Stop+0x18>)
 80160d0:	2002      	movhi	r0, #2
 80160d2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 80160d4:	bd08      	pop	{r3, pc}
 80160d6:	bf00      	nop
 80160d8:	08018723 	.word	0x08018723

080160dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80160dc:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80160de:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80160e2:	f7f9 fdfa 	bl	800fcda <HAL_HCD_GetCurrentSpeed>
 80160e6:	2802      	cmp	r0, #2
 80160e8:	bf96      	itet	ls
 80160ea:	4b02      	ldrls	r3, [pc, #8]	; (80160f4 <USBH_LL_GetSpeed+0x18>)
 80160ec:	2001      	movhi	r0, #1
 80160ee:	5c18      	ldrbls	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 80160f0:	bd08      	pop	{r3, pc}
 80160f2:	bf00      	nop
 80160f4:	08018720 	.word	0x08018720

080160f8 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80160f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80160fa:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80160fe:	f7f9 fddb 	bl	800fcb8 <HAL_HCD_ResetPort>
 8016102:	2803      	cmp	r0, #3
 8016104:	bf96      	itet	ls
 8016106:	4b02      	ldrls	r3, [pc, #8]	; (8016110 <USBH_LL_ResetPort+0x18>)
 8016108:	2002      	movhi	r0, #2
 801610a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 801610c:	bd08      	pop	{r3, pc}
 801610e:	bf00      	nop
 8016110:	08018723 	.word	0x08018723

08016114 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8016114:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8016118:	f7f9 bdd7 	b.w	800fcca <HAL_HCD_HC_GetXferCount>

0801611c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801611c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801611e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8016122:	9402      	str	r4, [sp, #8]
 8016124:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8016128:	9401      	str	r4, [sp, #4]
 801612a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801612e:	9400      	str	r4, [sp, #0]
 8016130:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8016134:	f7f9 f99b 	bl	800f46e <HAL_HCD_HC_Init>
 8016138:	2803      	cmp	r0, #3
 801613a:	bf9a      	itte	ls
 801613c:	4b02      	ldrls	r3, [pc, #8]	; (8016148 <USBH_LL_OpenPipe+0x2c>)
 801613e:	5c18      	ldrbls	r0, [r3, r0]
 8016140:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8016142:	b004      	add	sp, #16
 8016144:	bd10      	pop	{r4, pc}
 8016146:	bf00      	nop
 8016148:	08018723 	.word	0x08018723

0801614c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801614c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801614e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8016152:	f7f9 f9c3 	bl	800f4dc <HAL_HCD_HC_Halt>
 8016156:	2803      	cmp	r0, #3
 8016158:	bf96      	itet	ls
 801615a:	4b02      	ldrls	r3, [pc, #8]	; (8016164 <USBH_LL_ClosePipe+0x18>)
 801615c:	2002      	movhi	r0, #2
 801615e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8016160:	bd08      	pop	{r3, pc}
 8016162:	bf00      	nop
 8016164:	08018723 	.word	0x08018723

08016168 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8016168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801616a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 801616e:	9403      	str	r4, [sp, #12]
 8016170:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8016174:	9402      	str	r4, [sp, #8]
 8016176:	9c07      	ldr	r4, [sp, #28]
 8016178:	9401      	str	r4, [sp, #4]
 801617a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801617e:	9400      	str	r4, [sp, #0]
 8016180:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8016184:	f7f9 fa06 	bl	800f594 <HAL_HCD_HC_SubmitRequest>
 8016188:	2803      	cmp	r0, #3
 801618a:	bf9a      	itte	ls
 801618c:	4b02      	ldrls	r3, [pc, #8]	; (8016198 <USBH_LL_SubmitURB+0x30>)
 801618e:	5c18      	ldrbls	r0, [r3, r0]
 8016190:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8016192:	b004      	add	sp, #16
 8016194:	bd10      	pop	{r4, pc}
 8016196:	bf00      	nop
 8016198:	08018723 	.word	0x08018723

0801619c <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801619c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80161a0:	f7f9 bd8d 	b.w	800fcbe <HAL_HCD_HC_GetURBState>

080161a4 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80161a4:	b508      	push	{r3, lr}
  if (phost->id == HOST_HS) {
 80161a6:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 80161aa:	b913      	cbnz	r3, 80161b2 <USBH_LL_DriverVBUS+0xe>
    MX_DriverVbusHS(state);
 80161ac:	4608      	mov	r0, r1
 80161ae:	f000 f825 	bl	80161fc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80161b2:	20c8      	movs	r0, #200	; 0xc8
 80161b4:	f7f8 fbda 	bl	800e96c <HAL_Delay>
  return USBH_OK;
}
 80161b8:	2000      	movs	r0, #0
 80161ba:	bd08      	pop	{r3, pc}

080161bc <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80161bc:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 80161c0:	2328      	movs	r3, #40	; 0x28
 80161c2:	fb03 0101 	mla	r1, r3, r1, r0
 80161c6:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80161ca:	b11b      	cbz	r3, 80161d4 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80161cc:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80161d0:	2000      	movs	r0, #0
 80161d2:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80161d4:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 80161d8:	e7fa      	b.n	80161d0 <USBH_LL_SetToggle+0x14>

080161da <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80161da:	f8d0 23d0 	ldr.w	r2, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 80161de:	2328      	movs	r3, #40	; 0x28
 80161e0:	fb03 2101 	mla	r1, r3, r1, r2
 80161e4:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80161e8:	b113      	cbz	r3, 80161f0 <USBH_LL_GetToggle+0x16>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80161ea:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 80161ee:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80161f0:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 80161f4:	4770      	bx	lr

080161f6 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80161f6:	f7f8 bbb9 	b.w	800e96c <HAL_Delay>
	...

080161fc <MX_DriverVbusHS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,(GPIO_PinState)data);
 80161fc:	fab0 f280 	clz	r2, r0
 8016200:	0952      	lsrs	r2, r2, #5
 8016202:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016206:	4801      	ldr	r0, [pc, #4]	; (801620c <MX_DriverVbusHS+0x10>)
 8016208:	f7f9 b92c 	b.w	800f464 <HAL_GPIO_WritePin>
 801620c:	40021000 	.word	0x40021000

08016210 <atol>:
 8016210:	220a      	movs	r2, #10
 8016212:	2100      	movs	r1, #0
 8016214:	f000 ba70 	b.w	80166f8 <strtol>

08016218 <__errno>:
 8016218:	4b01      	ldr	r3, [pc, #4]	; (8016220 <__errno+0x8>)
 801621a:	6818      	ldr	r0, [r3, #0]
 801621c:	4770      	bx	lr
 801621e:	bf00      	nop
 8016220:	2000003c 	.word	0x2000003c

08016224 <__libc_init_array>:
 8016224:	b570      	push	{r4, r5, r6, lr}
 8016226:	4e0d      	ldr	r6, [pc, #52]	; (801625c <__libc_init_array+0x38>)
 8016228:	4c0d      	ldr	r4, [pc, #52]	; (8016260 <__libc_init_array+0x3c>)
 801622a:	1ba4      	subs	r4, r4, r6
 801622c:	10a4      	asrs	r4, r4, #2
 801622e:	2500      	movs	r5, #0
 8016230:	42a5      	cmp	r5, r4
 8016232:	d109      	bne.n	8016248 <__libc_init_array+0x24>
 8016234:	4e0b      	ldr	r6, [pc, #44]	; (8016264 <__libc_init_array+0x40>)
 8016236:	4c0c      	ldr	r4, [pc, #48]	; (8016268 <__libc_init_array+0x44>)
 8016238:	f001 fa46 	bl	80176c8 <_init>
 801623c:	1ba4      	subs	r4, r4, r6
 801623e:	10a4      	asrs	r4, r4, #2
 8016240:	2500      	movs	r5, #0
 8016242:	42a5      	cmp	r5, r4
 8016244:	d105      	bne.n	8016252 <__libc_init_array+0x2e>
 8016246:	bd70      	pop	{r4, r5, r6, pc}
 8016248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801624c:	4798      	blx	r3
 801624e:	3501      	adds	r5, #1
 8016250:	e7ee      	b.n	8016230 <__libc_init_array+0xc>
 8016252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016256:	4798      	blx	r3
 8016258:	3501      	adds	r5, #1
 801625a:	e7f2      	b.n	8016242 <__libc_init_array+0x1e>
 801625c:	080188d0 	.word	0x080188d0
 8016260:	080188d0 	.word	0x080188d0
 8016264:	080188d0 	.word	0x080188d0
 8016268:	080188d4 	.word	0x080188d4

0801626c <malloc>:
 801626c:	4b02      	ldr	r3, [pc, #8]	; (8016278 <malloc+0xc>)
 801626e:	4601      	mov	r1, r0
 8016270:	6818      	ldr	r0, [r3, #0]
 8016272:	f000 b86d 	b.w	8016350 <_malloc_r>
 8016276:	bf00      	nop
 8016278:	2000003c 	.word	0x2000003c

0801627c <free>:
 801627c:	4b02      	ldr	r3, [pc, #8]	; (8016288 <free+0xc>)
 801627e:	4601      	mov	r1, r0
 8016280:	6818      	ldr	r0, [r3, #0]
 8016282:	f000 b817 	b.w	80162b4 <_free_r>
 8016286:	bf00      	nop
 8016288:	2000003c 	.word	0x2000003c

0801628c <memcpy>:
 801628c:	b510      	push	{r4, lr}
 801628e:	1e43      	subs	r3, r0, #1
 8016290:	440a      	add	r2, r1
 8016292:	4291      	cmp	r1, r2
 8016294:	d100      	bne.n	8016298 <memcpy+0xc>
 8016296:	bd10      	pop	{r4, pc}
 8016298:	f811 4b01 	ldrb.w	r4, [r1], #1
 801629c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80162a0:	e7f7      	b.n	8016292 <memcpy+0x6>

080162a2 <memset>:
 80162a2:	4402      	add	r2, r0
 80162a4:	4603      	mov	r3, r0
 80162a6:	4293      	cmp	r3, r2
 80162a8:	d100      	bne.n	80162ac <memset+0xa>
 80162aa:	4770      	bx	lr
 80162ac:	f803 1b01 	strb.w	r1, [r3], #1
 80162b0:	e7f9      	b.n	80162a6 <memset+0x4>
	...

080162b4 <_free_r>:
 80162b4:	b538      	push	{r3, r4, r5, lr}
 80162b6:	4605      	mov	r5, r0
 80162b8:	2900      	cmp	r1, #0
 80162ba:	d045      	beq.n	8016348 <_free_r+0x94>
 80162bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162c0:	1f0c      	subs	r4, r1, #4
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	bfb8      	it	lt
 80162c6:	18e4      	addlt	r4, r4, r3
 80162c8:	f000 fc20 	bl	8016b0c <__malloc_lock>
 80162cc:	4a1f      	ldr	r2, [pc, #124]	; (801634c <_free_r+0x98>)
 80162ce:	6813      	ldr	r3, [r2, #0]
 80162d0:	4610      	mov	r0, r2
 80162d2:	b933      	cbnz	r3, 80162e2 <_free_r+0x2e>
 80162d4:	6063      	str	r3, [r4, #4]
 80162d6:	6014      	str	r4, [r2, #0]
 80162d8:	4628      	mov	r0, r5
 80162da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162de:	f000 bc16 	b.w	8016b0e <__malloc_unlock>
 80162e2:	42a3      	cmp	r3, r4
 80162e4:	d90c      	bls.n	8016300 <_free_r+0x4c>
 80162e6:	6821      	ldr	r1, [r4, #0]
 80162e8:	1862      	adds	r2, r4, r1
 80162ea:	4293      	cmp	r3, r2
 80162ec:	bf04      	itt	eq
 80162ee:	681a      	ldreq	r2, [r3, #0]
 80162f0:	685b      	ldreq	r3, [r3, #4]
 80162f2:	6063      	str	r3, [r4, #4]
 80162f4:	bf04      	itt	eq
 80162f6:	1852      	addeq	r2, r2, r1
 80162f8:	6022      	streq	r2, [r4, #0]
 80162fa:	6004      	str	r4, [r0, #0]
 80162fc:	e7ec      	b.n	80162d8 <_free_r+0x24>
 80162fe:	4613      	mov	r3, r2
 8016300:	685a      	ldr	r2, [r3, #4]
 8016302:	b10a      	cbz	r2, 8016308 <_free_r+0x54>
 8016304:	42a2      	cmp	r2, r4
 8016306:	d9fa      	bls.n	80162fe <_free_r+0x4a>
 8016308:	6819      	ldr	r1, [r3, #0]
 801630a:	1858      	adds	r0, r3, r1
 801630c:	42a0      	cmp	r0, r4
 801630e:	d10b      	bne.n	8016328 <_free_r+0x74>
 8016310:	6820      	ldr	r0, [r4, #0]
 8016312:	4401      	add	r1, r0
 8016314:	1858      	adds	r0, r3, r1
 8016316:	4282      	cmp	r2, r0
 8016318:	6019      	str	r1, [r3, #0]
 801631a:	d1dd      	bne.n	80162d8 <_free_r+0x24>
 801631c:	6810      	ldr	r0, [r2, #0]
 801631e:	6852      	ldr	r2, [r2, #4]
 8016320:	605a      	str	r2, [r3, #4]
 8016322:	4401      	add	r1, r0
 8016324:	6019      	str	r1, [r3, #0]
 8016326:	e7d7      	b.n	80162d8 <_free_r+0x24>
 8016328:	d902      	bls.n	8016330 <_free_r+0x7c>
 801632a:	230c      	movs	r3, #12
 801632c:	602b      	str	r3, [r5, #0]
 801632e:	e7d3      	b.n	80162d8 <_free_r+0x24>
 8016330:	6820      	ldr	r0, [r4, #0]
 8016332:	1821      	adds	r1, r4, r0
 8016334:	428a      	cmp	r2, r1
 8016336:	bf04      	itt	eq
 8016338:	6811      	ldreq	r1, [r2, #0]
 801633a:	6852      	ldreq	r2, [r2, #4]
 801633c:	6062      	str	r2, [r4, #4]
 801633e:	bf04      	itt	eq
 8016340:	1809      	addeq	r1, r1, r0
 8016342:	6021      	streq	r1, [r4, #0]
 8016344:	605c      	str	r4, [r3, #4]
 8016346:	e7c7      	b.n	80162d8 <_free_r+0x24>
 8016348:	bd38      	pop	{r3, r4, r5, pc}
 801634a:	bf00      	nop
 801634c:	2000147c 	.word	0x2000147c

08016350 <_malloc_r>:
 8016350:	b570      	push	{r4, r5, r6, lr}
 8016352:	1ccd      	adds	r5, r1, #3
 8016354:	f025 0503 	bic.w	r5, r5, #3
 8016358:	3508      	adds	r5, #8
 801635a:	2d0c      	cmp	r5, #12
 801635c:	bf38      	it	cc
 801635e:	250c      	movcc	r5, #12
 8016360:	2d00      	cmp	r5, #0
 8016362:	4606      	mov	r6, r0
 8016364:	db01      	blt.n	801636a <_malloc_r+0x1a>
 8016366:	42a9      	cmp	r1, r5
 8016368:	d903      	bls.n	8016372 <_malloc_r+0x22>
 801636a:	230c      	movs	r3, #12
 801636c:	6033      	str	r3, [r6, #0]
 801636e:	2000      	movs	r0, #0
 8016370:	bd70      	pop	{r4, r5, r6, pc}
 8016372:	f000 fbcb 	bl	8016b0c <__malloc_lock>
 8016376:	4a21      	ldr	r2, [pc, #132]	; (80163fc <_malloc_r+0xac>)
 8016378:	6814      	ldr	r4, [r2, #0]
 801637a:	4621      	mov	r1, r4
 801637c:	b991      	cbnz	r1, 80163a4 <_malloc_r+0x54>
 801637e:	4c20      	ldr	r4, [pc, #128]	; (8016400 <_malloc_r+0xb0>)
 8016380:	6823      	ldr	r3, [r4, #0]
 8016382:	b91b      	cbnz	r3, 801638c <_malloc_r+0x3c>
 8016384:	4630      	mov	r0, r6
 8016386:	f000 f855 	bl	8016434 <_sbrk_r>
 801638a:	6020      	str	r0, [r4, #0]
 801638c:	4629      	mov	r1, r5
 801638e:	4630      	mov	r0, r6
 8016390:	f000 f850 	bl	8016434 <_sbrk_r>
 8016394:	1c43      	adds	r3, r0, #1
 8016396:	d124      	bne.n	80163e2 <_malloc_r+0x92>
 8016398:	230c      	movs	r3, #12
 801639a:	6033      	str	r3, [r6, #0]
 801639c:	4630      	mov	r0, r6
 801639e:	f000 fbb6 	bl	8016b0e <__malloc_unlock>
 80163a2:	e7e4      	b.n	801636e <_malloc_r+0x1e>
 80163a4:	680b      	ldr	r3, [r1, #0]
 80163a6:	1b5b      	subs	r3, r3, r5
 80163a8:	d418      	bmi.n	80163dc <_malloc_r+0x8c>
 80163aa:	2b0b      	cmp	r3, #11
 80163ac:	d90f      	bls.n	80163ce <_malloc_r+0x7e>
 80163ae:	600b      	str	r3, [r1, #0]
 80163b0:	50cd      	str	r5, [r1, r3]
 80163b2:	18cc      	adds	r4, r1, r3
 80163b4:	4630      	mov	r0, r6
 80163b6:	f000 fbaa 	bl	8016b0e <__malloc_unlock>
 80163ba:	f104 000b 	add.w	r0, r4, #11
 80163be:	1d23      	adds	r3, r4, #4
 80163c0:	f020 0007 	bic.w	r0, r0, #7
 80163c4:	1ac3      	subs	r3, r0, r3
 80163c6:	d0d3      	beq.n	8016370 <_malloc_r+0x20>
 80163c8:	425a      	negs	r2, r3
 80163ca:	50e2      	str	r2, [r4, r3]
 80163cc:	e7d0      	b.n	8016370 <_malloc_r+0x20>
 80163ce:	428c      	cmp	r4, r1
 80163d0:	684b      	ldr	r3, [r1, #4]
 80163d2:	bf16      	itet	ne
 80163d4:	6063      	strne	r3, [r4, #4]
 80163d6:	6013      	streq	r3, [r2, #0]
 80163d8:	460c      	movne	r4, r1
 80163da:	e7eb      	b.n	80163b4 <_malloc_r+0x64>
 80163dc:	460c      	mov	r4, r1
 80163de:	6849      	ldr	r1, [r1, #4]
 80163e0:	e7cc      	b.n	801637c <_malloc_r+0x2c>
 80163e2:	1cc4      	adds	r4, r0, #3
 80163e4:	f024 0403 	bic.w	r4, r4, #3
 80163e8:	42a0      	cmp	r0, r4
 80163ea:	d005      	beq.n	80163f8 <_malloc_r+0xa8>
 80163ec:	1a21      	subs	r1, r4, r0
 80163ee:	4630      	mov	r0, r6
 80163f0:	f000 f820 	bl	8016434 <_sbrk_r>
 80163f4:	3001      	adds	r0, #1
 80163f6:	d0cf      	beq.n	8016398 <_malloc_r+0x48>
 80163f8:	6025      	str	r5, [r4, #0]
 80163fa:	e7db      	b.n	80163b4 <_malloc_r+0x64>
 80163fc:	2000147c 	.word	0x2000147c
 8016400:	20001480 	.word	0x20001480

08016404 <iprintf>:
 8016404:	b40f      	push	{r0, r1, r2, r3}
 8016406:	4b0a      	ldr	r3, [pc, #40]	; (8016430 <iprintf+0x2c>)
 8016408:	b513      	push	{r0, r1, r4, lr}
 801640a:	681c      	ldr	r4, [r3, #0]
 801640c:	b124      	cbz	r4, 8016418 <iprintf+0x14>
 801640e:	69a3      	ldr	r3, [r4, #24]
 8016410:	b913      	cbnz	r3, 8016418 <iprintf+0x14>
 8016412:	4620      	mov	r0, r4
 8016414:	f000 fa76 	bl	8016904 <__sinit>
 8016418:	ab05      	add	r3, sp, #20
 801641a:	9a04      	ldr	r2, [sp, #16]
 801641c:	68a1      	ldr	r1, [r4, #8]
 801641e:	9301      	str	r3, [sp, #4]
 8016420:	4620      	mov	r0, r4
 8016422:	f000 fcf1 	bl	8016e08 <_vfiprintf_r>
 8016426:	b002      	add	sp, #8
 8016428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801642c:	b004      	add	sp, #16
 801642e:	4770      	bx	lr
 8016430:	2000003c 	.word	0x2000003c

08016434 <_sbrk_r>:
 8016434:	b538      	push	{r3, r4, r5, lr}
 8016436:	4c06      	ldr	r4, [pc, #24]	; (8016450 <_sbrk_r+0x1c>)
 8016438:	2300      	movs	r3, #0
 801643a:	4605      	mov	r5, r0
 801643c:	4608      	mov	r0, r1
 801643e:	6023      	str	r3, [r4, #0]
 8016440:	f7f8 f88c 	bl	800e55c <_sbrk>
 8016444:	1c43      	adds	r3, r0, #1
 8016446:	d102      	bne.n	801644e <_sbrk_r+0x1a>
 8016448:	6823      	ldr	r3, [r4, #0]
 801644a:	b103      	cbz	r3, 801644e <_sbrk_r+0x1a>
 801644c:	602b      	str	r3, [r5, #0]
 801644e:	bd38      	pop	{r3, r4, r5, pc}
 8016450:	20005e9c 	.word	0x20005e9c

08016454 <setvbuf>:
 8016454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016458:	461d      	mov	r5, r3
 801645a:	4b51      	ldr	r3, [pc, #324]	; (80165a0 <setvbuf+0x14c>)
 801645c:	681e      	ldr	r6, [r3, #0]
 801645e:	4604      	mov	r4, r0
 8016460:	460f      	mov	r7, r1
 8016462:	4690      	mov	r8, r2
 8016464:	b126      	cbz	r6, 8016470 <setvbuf+0x1c>
 8016466:	69b3      	ldr	r3, [r6, #24]
 8016468:	b913      	cbnz	r3, 8016470 <setvbuf+0x1c>
 801646a:	4630      	mov	r0, r6
 801646c:	f000 fa4a 	bl	8016904 <__sinit>
 8016470:	4b4c      	ldr	r3, [pc, #304]	; (80165a4 <setvbuf+0x150>)
 8016472:	429c      	cmp	r4, r3
 8016474:	d152      	bne.n	801651c <setvbuf+0xc8>
 8016476:	6874      	ldr	r4, [r6, #4]
 8016478:	f1b8 0f02 	cmp.w	r8, #2
 801647c:	d006      	beq.n	801648c <setvbuf+0x38>
 801647e:	f1b8 0f01 	cmp.w	r8, #1
 8016482:	f200 8089 	bhi.w	8016598 <setvbuf+0x144>
 8016486:	2d00      	cmp	r5, #0
 8016488:	f2c0 8086 	blt.w	8016598 <setvbuf+0x144>
 801648c:	4621      	mov	r1, r4
 801648e:	4630      	mov	r0, r6
 8016490:	f000 f9ce 	bl	8016830 <_fflush_r>
 8016494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016496:	b141      	cbz	r1, 80164aa <setvbuf+0x56>
 8016498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801649c:	4299      	cmp	r1, r3
 801649e:	d002      	beq.n	80164a6 <setvbuf+0x52>
 80164a0:	4630      	mov	r0, r6
 80164a2:	f7ff ff07 	bl	80162b4 <_free_r>
 80164a6:	2300      	movs	r3, #0
 80164a8:	6363      	str	r3, [r4, #52]	; 0x34
 80164aa:	2300      	movs	r3, #0
 80164ac:	61a3      	str	r3, [r4, #24]
 80164ae:	6063      	str	r3, [r4, #4]
 80164b0:	89a3      	ldrh	r3, [r4, #12]
 80164b2:	061b      	lsls	r3, r3, #24
 80164b4:	d503      	bpl.n	80164be <setvbuf+0x6a>
 80164b6:	6921      	ldr	r1, [r4, #16]
 80164b8:	4630      	mov	r0, r6
 80164ba:	f7ff fefb 	bl	80162b4 <_free_r>
 80164be:	89a3      	ldrh	r3, [r4, #12]
 80164c0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80164c4:	f023 0303 	bic.w	r3, r3, #3
 80164c8:	f1b8 0f02 	cmp.w	r8, #2
 80164cc:	81a3      	strh	r3, [r4, #12]
 80164ce:	d05d      	beq.n	801658c <setvbuf+0x138>
 80164d0:	ab01      	add	r3, sp, #4
 80164d2:	466a      	mov	r2, sp
 80164d4:	4621      	mov	r1, r4
 80164d6:	4630      	mov	r0, r6
 80164d8:	f000 faa1 	bl	8016a1e <__swhatbuf_r>
 80164dc:	89a3      	ldrh	r3, [r4, #12]
 80164de:	4318      	orrs	r0, r3
 80164e0:	81a0      	strh	r0, [r4, #12]
 80164e2:	bb2d      	cbnz	r5, 8016530 <setvbuf+0xdc>
 80164e4:	9d00      	ldr	r5, [sp, #0]
 80164e6:	4628      	mov	r0, r5
 80164e8:	f7ff fec0 	bl	801626c <malloc>
 80164ec:	4607      	mov	r7, r0
 80164ee:	2800      	cmp	r0, #0
 80164f0:	d14e      	bne.n	8016590 <setvbuf+0x13c>
 80164f2:	f8dd 9000 	ldr.w	r9, [sp]
 80164f6:	45a9      	cmp	r9, r5
 80164f8:	d13c      	bne.n	8016574 <setvbuf+0x120>
 80164fa:	f04f 30ff 	mov.w	r0, #4294967295
 80164fe:	89a3      	ldrh	r3, [r4, #12]
 8016500:	f043 0302 	orr.w	r3, r3, #2
 8016504:	81a3      	strh	r3, [r4, #12]
 8016506:	2300      	movs	r3, #0
 8016508:	60a3      	str	r3, [r4, #8]
 801650a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801650e:	6023      	str	r3, [r4, #0]
 8016510:	6123      	str	r3, [r4, #16]
 8016512:	2301      	movs	r3, #1
 8016514:	6163      	str	r3, [r4, #20]
 8016516:	b003      	add	sp, #12
 8016518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801651c:	4b22      	ldr	r3, [pc, #136]	; (80165a8 <setvbuf+0x154>)
 801651e:	429c      	cmp	r4, r3
 8016520:	d101      	bne.n	8016526 <setvbuf+0xd2>
 8016522:	68b4      	ldr	r4, [r6, #8]
 8016524:	e7a8      	b.n	8016478 <setvbuf+0x24>
 8016526:	4b21      	ldr	r3, [pc, #132]	; (80165ac <setvbuf+0x158>)
 8016528:	429c      	cmp	r4, r3
 801652a:	bf08      	it	eq
 801652c:	68f4      	ldreq	r4, [r6, #12]
 801652e:	e7a3      	b.n	8016478 <setvbuf+0x24>
 8016530:	2f00      	cmp	r7, #0
 8016532:	d0d8      	beq.n	80164e6 <setvbuf+0x92>
 8016534:	69b3      	ldr	r3, [r6, #24]
 8016536:	b913      	cbnz	r3, 801653e <setvbuf+0xea>
 8016538:	4630      	mov	r0, r6
 801653a:	f000 f9e3 	bl	8016904 <__sinit>
 801653e:	f1b8 0f01 	cmp.w	r8, #1
 8016542:	bf08      	it	eq
 8016544:	89a3      	ldrheq	r3, [r4, #12]
 8016546:	6027      	str	r7, [r4, #0]
 8016548:	bf04      	itt	eq
 801654a:	f043 0301 	orreq.w	r3, r3, #1
 801654e:	81a3      	strheq	r3, [r4, #12]
 8016550:	89a3      	ldrh	r3, [r4, #12]
 8016552:	f013 0008 	ands.w	r0, r3, #8
 8016556:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801655a:	d01b      	beq.n	8016594 <setvbuf+0x140>
 801655c:	f013 0001 	ands.w	r0, r3, #1
 8016560:	bf18      	it	ne
 8016562:	426d      	negne	r5, r5
 8016564:	f04f 0300 	mov.w	r3, #0
 8016568:	bf1d      	ittte	ne
 801656a:	60a3      	strne	r3, [r4, #8]
 801656c:	61a5      	strne	r5, [r4, #24]
 801656e:	4618      	movne	r0, r3
 8016570:	60a5      	streq	r5, [r4, #8]
 8016572:	e7d0      	b.n	8016516 <setvbuf+0xc2>
 8016574:	4648      	mov	r0, r9
 8016576:	f7ff fe79 	bl	801626c <malloc>
 801657a:	4607      	mov	r7, r0
 801657c:	2800      	cmp	r0, #0
 801657e:	d0bc      	beq.n	80164fa <setvbuf+0xa6>
 8016580:	89a3      	ldrh	r3, [r4, #12]
 8016582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016586:	81a3      	strh	r3, [r4, #12]
 8016588:	464d      	mov	r5, r9
 801658a:	e7d3      	b.n	8016534 <setvbuf+0xe0>
 801658c:	2000      	movs	r0, #0
 801658e:	e7b6      	b.n	80164fe <setvbuf+0xaa>
 8016590:	46a9      	mov	r9, r5
 8016592:	e7f5      	b.n	8016580 <setvbuf+0x12c>
 8016594:	60a0      	str	r0, [r4, #8]
 8016596:	e7be      	b.n	8016516 <setvbuf+0xc2>
 8016598:	f04f 30ff 	mov.w	r0, #4294967295
 801659c:	e7bb      	b.n	8016516 <setvbuf+0xc2>
 801659e:	bf00      	nop
 80165a0:	2000003c 	.word	0x2000003c
 80165a4:	0801874c 	.word	0x0801874c
 80165a8:	0801876c 	.word	0x0801876c
 80165ac:	0801872c 	.word	0x0801872c

080165b0 <siprintf>:
 80165b0:	b40e      	push	{r1, r2, r3}
 80165b2:	b500      	push	{lr}
 80165b4:	b09c      	sub	sp, #112	; 0x70
 80165b6:	ab1d      	add	r3, sp, #116	; 0x74
 80165b8:	9002      	str	r0, [sp, #8]
 80165ba:	9006      	str	r0, [sp, #24]
 80165bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80165c0:	4809      	ldr	r0, [pc, #36]	; (80165e8 <siprintf+0x38>)
 80165c2:	9107      	str	r1, [sp, #28]
 80165c4:	9104      	str	r1, [sp, #16]
 80165c6:	4909      	ldr	r1, [pc, #36]	; (80165ec <siprintf+0x3c>)
 80165c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80165cc:	9105      	str	r1, [sp, #20]
 80165ce:	6800      	ldr	r0, [r0, #0]
 80165d0:	9301      	str	r3, [sp, #4]
 80165d2:	a902      	add	r1, sp, #8
 80165d4:	f000 faf6 	bl	8016bc4 <_svfiprintf_r>
 80165d8:	9b02      	ldr	r3, [sp, #8]
 80165da:	2200      	movs	r2, #0
 80165dc:	701a      	strb	r2, [r3, #0]
 80165de:	b01c      	add	sp, #112	; 0x70
 80165e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80165e4:	b003      	add	sp, #12
 80165e6:	4770      	bx	lr
 80165e8:	2000003c 	.word	0x2000003c
 80165ec:	ffff0208 	.word	0xffff0208

080165f0 <strcpy>:
 80165f0:	4603      	mov	r3, r0
 80165f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165f6:	f803 2b01 	strb.w	r2, [r3], #1
 80165fa:	2a00      	cmp	r2, #0
 80165fc:	d1f9      	bne.n	80165f2 <strcpy+0x2>
 80165fe:	4770      	bx	lr

08016600 <_strtol_l.isra.0>:
 8016600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016604:	4680      	mov	r8, r0
 8016606:	4689      	mov	r9, r1
 8016608:	4692      	mov	sl, r2
 801660a:	461e      	mov	r6, r3
 801660c:	460f      	mov	r7, r1
 801660e:	463d      	mov	r5, r7
 8016610:	9808      	ldr	r0, [sp, #32]
 8016612:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016616:	f000 f9ff 	bl	8016a18 <__locale_ctype_ptr_l>
 801661a:	4420      	add	r0, r4
 801661c:	7843      	ldrb	r3, [r0, #1]
 801661e:	f013 0308 	ands.w	r3, r3, #8
 8016622:	d132      	bne.n	801668a <_strtol_l.isra.0+0x8a>
 8016624:	2c2d      	cmp	r4, #45	; 0x2d
 8016626:	d132      	bne.n	801668e <_strtol_l.isra.0+0x8e>
 8016628:	787c      	ldrb	r4, [r7, #1]
 801662a:	1cbd      	adds	r5, r7, #2
 801662c:	2201      	movs	r2, #1
 801662e:	2e00      	cmp	r6, #0
 8016630:	d05d      	beq.n	80166ee <_strtol_l.isra.0+0xee>
 8016632:	2e10      	cmp	r6, #16
 8016634:	d109      	bne.n	801664a <_strtol_l.isra.0+0x4a>
 8016636:	2c30      	cmp	r4, #48	; 0x30
 8016638:	d107      	bne.n	801664a <_strtol_l.isra.0+0x4a>
 801663a:	782b      	ldrb	r3, [r5, #0]
 801663c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016640:	2b58      	cmp	r3, #88	; 0x58
 8016642:	d14f      	bne.n	80166e4 <_strtol_l.isra.0+0xe4>
 8016644:	786c      	ldrb	r4, [r5, #1]
 8016646:	2610      	movs	r6, #16
 8016648:	3502      	adds	r5, #2
 801664a:	2a00      	cmp	r2, #0
 801664c:	bf14      	ite	ne
 801664e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016652:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016656:	2700      	movs	r7, #0
 8016658:	fbb1 fcf6 	udiv	ip, r1, r6
 801665c:	4638      	mov	r0, r7
 801665e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016662:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016666:	2b09      	cmp	r3, #9
 8016668:	d817      	bhi.n	801669a <_strtol_l.isra.0+0x9a>
 801666a:	461c      	mov	r4, r3
 801666c:	42a6      	cmp	r6, r4
 801666e:	dd23      	ble.n	80166b8 <_strtol_l.isra.0+0xb8>
 8016670:	1c7b      	adds	r3, r7, #1
 8016672:	d007      	beq.n	8016684 <_strtol_l.isra.0+0x84>
 8016674:	4584      	cmp	ip, r0
 8016676:	d31c      	bcc.n	80166b2 <_strtol_l.isra.0+0xb2>
 8016678:	d101      	bne.n	801667e <_strtol_l.isra.0+0x7e>
 801667a:	45a6      	cmp	lr, r4
 801667c:	db19      	blt.n	80166b2 <_strtol_l.isra.0+0xb2>
 801667e:	fb00 4006 	mla	r0, r0, r6, r4
 8016682:	2701      	movs	r7, #1
 8016684:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016688:	e7eb      	b.n	8016662 <_strtol_l.isra.0+0x62>
 801668a:	462f      	mov	r7, r5
 801668c:	e7bf      	b.n	801660e <_strtol_l.isra.0+0xe>
 801668e:	2c2b      	cmp	r4, #43	; 0x2b
 8016690:	bf04      	itt	eq
 8016692:	1cbd      	addeq	r5, r7, #2
 8016694:	787c      	ldrbeq	r4, [r7, #1]
 8016696:	461a      	mov	r2, r3
 8016698:	e7c9      	b.n	801662e <_strtol_l.isra.0+0x2e>
 801669a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801669e:	2b19      	cmp	r3, #25
 80166a0:	d801      	bhi.n	80166a6 <_strtol_l.isra.0+0xa6>
 80166a2:	3c37      	subs	r4, #55	; 0x37
 80166a4:	e7e2      	b.n	801666c <_strtol_l.isra.0+0x6c>
 80166a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80166aa:	2b19      	cmp	r3, #25
 80166ac:	d804      	bhi.n	80166b8 <_strtol_l.isra.0+0xb8>
 80166ae:	3c57      	subs	r4, #87	; 0x57
 80166b0:	e7dc      	b.n	801666c <_strtol_l.isra.0+0x6c>
 80166b2:	f04f 37ff 	mov.w	r7, #4294967295
 80166b6:	e7e5      	b.n	8016684 <_strtol_l.isra.0+0x84>
 80166b8:	1c7b      	adds	r3, r7, #1
 80166ba:	d108      	bne.n	80166ce <_strtol_l.isra.0+0xce>
 80166bc:	2322      	movs	r3, #34	; 0x22
 80166be:	f8c8 3000 	str.w	r3, [r8]
 80166c2:	4608      	mov	r0, r1
 80166c4:	f1ba 0f00 	cmp.w	sl, #0
 80166c8:	d107      	bne.n	80166da <_strtol_l.isra.0+0xda>
 80166ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166ce:	b102      	cbz	r2, 80166d2 <_strtol_l.isra.0+0xd2>
 80166d0:	4240      	negs	r0, r0
 80166d2:	f1ba 0f00 	cmp.w	sl, #0
 80166d6:	d0f8      	beq.n	80166ca <_strtol_l.isra.0+0xca>
 80166d8:	b10f      	cbz	r7, 80166de <_strtol_l.isra.0+0xde>
 80166da:	f105 39ff 	add.w	r9, r5, #4294967295
 80166de:	f8ca 9000 	str.w	r9, [sl]
 80166e2:	e7f2      	b.n	80166ca <_strtol_l.isra.0+0xca>
 80166e4:	2430      	movs	r4, #48	; 0x30
 80166e6:	2e00      	cmp	r6, #0
 80166e8:	d1af      	bne.n	801664a <_strtol_l.isra.0+0x4a>
 80166ea:	2608      	movs	r6, #8
 80166ec:	e7ad      	b.n	801664a <_strtol_l.isra.0+0x4a>
 80166ee:	2c30      	cmp	r4, #48	; 0x30
 80166f0:	d0a3      	beq.n	801663a <_strtol_l.isra.0+0x3a>
 80166f2:	260a      	movs	r6, #10
 80166f4:	e7a9      	b.n	801664a <_strtol_l.isra.0+0x4a>
	...

080166f8 <strtol>:
 80166f8:	4b08      	ldr	r3, [pc, #32]	; (801671c <strtol+0x24>)
 80166fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166fc:	681c      	ldr	r4, [r3, #0]
 80166fe:	4d08      	ldr	r5, [pc, #32]	; (8016720 <strtol+0x28>)
 8016700:	6a23      	ldr	r3, [r4, #32]
 8016702:	2b00      	cmp	r3, #0
 8016704:	bf08      	it	eq
 8016706:	462b      	moveq	r3, r5
 8016708:	9300      	str	r3, [sp, #0]
 801670a:	4613      	mov	r3, r2
 801670c:	460a      	mov	r2, r1
 801670e:	4601      	mov	r1, r0
 8016710:	4620      	mov	r0, r4
 8016712:	f7ff ff75 	bl	8016600 <_strtol_l.isra.0>
 8016716:	b003      	add	sp, #12
 8016718:	bd30      	pop	{r4, r5, pc}
 801671a:	bf00      	nop
 801671c:	2000003c 	.word	0x2000003c
 8016720:	200000a0 	.word	0x200000a0

08016724 <__sflush_r>:
 8016724:	898a      	ldrh	r2, [r1, #12]
 8016726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801672a:	4605      	mov	r5, r0
 801672c:	0710      	lsls	r0, r2, #28
 801672e:	460c      	mov	r4, r1
 8016730:	d458      	bmi.n	80167e4 <__sflush_r+0xc0>
 8016732:	684b      	ldr	r3, [r1, #4]
 8016734:	2b00      	cmp	r3, #0
 8016736:	dc05      	bgt.n	8016744 <__sflush_r+0x20>
 8016738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801673a:	2b00      	cmp	r3, #0
 801673c:	dc02      	bgt.n	8016744 <__sflush_r+0x20>
 801673e:	2000      	movs	r0, #0
 8016740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016746:	2e00      	cmp	r6, #0
 8016748:	d0f9      	beq.n	801673e <__sflush_r+0x1a>
 801674a:	2300      	movs	r3, #0
 801674c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016750:	682f      	ldr	r7, [r5, #0]
 8016752:	6a21      	ldr	r1, [r4, #32]
 8016754:	602b      	str	r3, [r5, #0]
 8016756:	d032      	beq.n	80167be <__sflush_r+0x9a>
 8016758:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801675a:	89a3      	ldrh	r3, [r4, #12]
 801675c:	075a      	lsls	r2, r3, #29
 801675e:	d505      	bpl.n	801676c <__sflush_r+0x48>
 8016760:	6863      	ldr	r3, [r4, #4]
 8016762:	1ac0      	subs	r0, r0, r3
 8016764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016766:	b10b      	cbz	r3, 801676c <__sflush_r+0x48>
 8016768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801676a:	1ac0      	subs	r0, r0, r3
 801676c:	2300      	movs	r3, #0
 801676e:	4602      	mov	r2, r0
 8016770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016772:	6a21      	ldr	r1, [r4, #32]
 8016774:	4628      	mov	r0, r5
 8016776:	47b0      	blx	r6
 8016778:	1c43      	adds	r3, r0, #1
 801677a:	89a3      	ldrh	r3, [r4, #12]
 801677c:	d106      	bne.n	801678c <__sflush_r+0x68>
 801677e:	6829      	ldr	r1, [r5, #0]
 8016780:	291d      	cmp	r1, #29
 8016782:	d848      	bhi.n	8016816 <__sflush_r+0xf2>
 8016784:	4a29      	ldr	r2, [pc, #164]	; (801682c <__sflush_r+0x108>)
 8016786:	40ca      	lsrs	r2, r1
 8016788:	07d6      	lsls	r6, r2, #31
 801678a:	d544      	bpl.n	8016816 <__sflush_r+0xf2>
 801678c:	2200      	movs	r2, #0
 801678e:	6062      	str	r2, [r4, #4]
 8016790:	04d9      	lsls	r1, r3, #19
 8016792:	6922      	ldr	r2, [r4, #16]
 8016794:	6022      	str	r2, [r4, #0]
 8016796:	d504      	bpl.n	80167a2 <__sflush_r+0x7e>
 8016798:	1c42      	adds	r2, r0, #1
 801679a:	d101      	bne.n	80167a0 <__sflush_r+0x7c>
 801679c:	682b      	ldr	r3, [r5, #0]
 801679e:	b903      	cbnz	r3, 80167a2 <__sflush_r+0x7e>
 80167a0:	6560      	str	r0, [r4, #84]	; 0x54
 80167a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167a4:	602f      	str	r7, [r5, #0]
 80167a6:	2900      	cmp	r1, #0
 80167a8:	d0c9      	beq.n	801673e <__sflush_r+0x1a>
 80167aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167ae:	4299      	cmp	r1, r3
 80167b0:	d002      	beq.n	80167b8 <__sflush_r+0x94>
 80167b2:	4628      	mov	r0, r5
 80167b4:	f7ff fd7e 	bl	80162b4 <_free_r>
 80167b8:	2000      	movs	r0, #0
 80167ba:	6360      	str	r0, [r4, #52]	; 0x34
 80167bc:	e7c0      	b.n	8016740 <__sflush_r+0x1c>
 80167be:	2301      	movs	r3, #1
 80167c0:	4628      	mov	r0, r5
 80167c2:	47b0      	blx	r6
 80167c4:	1c41      	adds	r1, r0, #1
 80167c6:	d1c8      	bne.n	801675a <__sflush_r+0x36>
 80167c8:	682b      	ldr	r3, [r5, #0]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d0c5      	beq.n	801675a <__sflush_r+0x36>
 80167ce:	2b1d      	cmp	r3, #29
 80167d0:	d001      	beq.n	80167d6 <__sflush_r+0xb2>
 80167d2:	2b16      	cmp	r3, #22
 80167d4:	d101      	bne.n	80167da <__sflush_r+0xb6>
 80167d6:	602f      	str	r7, [r5, #0]
 80167d8:	e7b1      	b.n	801673e <__sflush_r+0x1a>
 80167da:	89a3      	ldrh	r3, [r4, #12]
 80167dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167e0:	81a3      	strh	r3, [r4, #12]
 80167e2:	e7ad      	b.n	8016740 <__sflush_r+0x1c>
 80167e4:	690f      	ldr	r7, [r1, #16]
 80167e6:	2f00      	cmp	r7, #0
 80167e8:	d0a9      	beq.n	801673e <__sflush_r+0x1a>
 80167ea:	0793      	lsls	r3, r2, #30
 80167ec:	680e      	ldr	r6, [r1, #0]
 80167ee:	bf08      	it	eq
 80167f0:	694b      	ldreq	r3, [r1, #20]
 80167f2:	600f      	str	r7, [r1, #0]
 80167f4:	bf18      	it	ne
 80167f6:	2300      	movne	r3, #0
 80167f8:	eba6 0807 	sub.w	r8, r6, r7
 80167fc:	608b      	str	r3, [r1, #8]
 80167fe:	f1b8 0f00 	cmp.w	r8, #0
 8016802:	dd9c      	ble.n	801673e <__sflush_r+0x1a>
 8016804:	4643      	mov	r3, r8
 8016806:	463a      	mov	r2, r7
 8016808:	6a21      	ldr	r1, [r4, #32]
 801680a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801680c:	4628      	mov	r0, r5
 801680e:	47b0      	blx	r6
 8016810:	2800      	cmp	r0, #0
 8016812:	dc06      	bgt.n	8016822 <__sflush_r+0xfe>
 8016814:	89a3      	ldrh	r3, [r4, #12]
 8016816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801681a:	81a3      	strh	r3, [r4, #12]
 801681c:	f04f 30ff 	mov.w	r0, #4294967295
 8016820:	e78e      	b.n	8016740 <__sflush_r+0x1c>
 8016822:	4407      	add	r7, r0
 8016824:	eba8 0800 	sub.w	r8, r8, r0
 8016828:	e7e9      	b.n	80167fe <__sflush_r+0xda>
 801682a:	bf00      	nop
 801682c:	20400001 	.word	0x20400001

08016830 <_fflush_r>:
 8016830:	b538      	push	{r3, r4, r5, lr}
 8016832:	690b      	ldr	r3, [r1, #16]
 8016834:	4605      	mov	r5, r0
 8016836:	460c      	mov	r4, r1
 8016838:	b1db      	cbz	r3, 8016872 <_fflush_r+0x42>
 801683a:	b118      	cbz	r0, 8016844 <_fflush_r+0x14>
 801683c:	6983      	ldr	r3, [r0, #24]
 801683e:	b90b      	cbnz	r3, 8016844 <_fflush_r+0x14>
 8016840:	f000 f860 	bl	8016904 <__sinit>
 8016844:	4b0c      	ldr	r3, [pc, #48]	; (8016878 <_fflush_r+0x48>)
 8016846:	429c      	cmp	r4, r3
 8016848:	d109      	bne.n	801685e <_fflush_r+0x2e>
 801684a:	686c      	ldr	r4, [r5, #4]
 801684c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016850:	b17b      	cbz	r3, 8016872 <_fflush_r+0x42>
 8016852:	4621      	mov	r1, r4
 8016854:	4628      	mov	r0, r5
 8016856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801685a:	f7ff bf63 	b.w	8016724 <__sflush_r>
 801685e:	4b07      	ldr	r3, [pc, #28]	; (801687c <_fflush_r+0x4c>)
 8016860:	429c      	cmp	r4, r3
 8016862:	d101      	bne.n	8016868 <_fflush_r+0x38>
 8016864:	68ac      	ldr	r4, [r5, #8]
 8016866:	e7f1      	b.n	801684c <_fflush_r+0x1c>
 8016868:	4b05      	ldr	r3, [pc, #20]	; (8016880 <_fflush_r+0x50>)
 801686a:	429c      	cmp	r4, r3
 801686c:	bf08      	it	eq
 801686e:	68ec      	ldreq	r4, [r5, #12]
 8016870:	e7ec      	b.n	801684c <_fflush_r+0x1c>
 8016872:	2000      	movs	r0, #0
 8016874:	bd38      	pop	{r3, r4, r5, pc}
 8016876:	bf00      	nop
 8016878:	0801874c 	.word	0x0801874c
 801687c:	0801876c 	.word	0x0801876c
 8016880:	0801872c 	.word	0x0801872c

08016884 <std>:
 8016884:	2300      	movs	r3, #0
 8016886:	b510      	push	{r4, lr}
 8016888:	4604      	mov	r4, r0
 801688a:	e9c0 3300 	strd	r3, r3, [r0]
 801688e:	6083      	str	r3, [r0, #8]
 8016890:	8181      	strh	r1, [r0, #12]
 8016892:	6643      	str	r3, [r0, #100]	; 0x64
 8016894:	81c2      	strh	r2, [r0, #14]
 8016896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801689a:	6183      	str	r3, [r0, #24]
 801689c:	4619      	mov	r1, r3
 801689e:	2208      	movs	r2, #8
 80168a0:	305c      	adds	r0, #92	; 0x5c
 80168a2:	f7ff fcfe 	bl	80162a2 <memset>
 80168a6:	4b05      	ldr	r3, [pc, #20]	; (80168bc <std+0x38>)
 80168a8:	6263      	str	r3, [r4, #36]	; 0x24
 80168aa:	4b05      	ldr	r3, [pc, #20]	; (80168c0 <std+0x3c>)
 80168ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80168ae:	4b05      	ldr	r3, [pc, #20]	; (80168c4 <std+0x40>)
 80168b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80168b2:	4b05      	ldr	r3, [pc, #20]	; (80168c8 <std+0x44>)
 80168b4:	6224      	str	r4, [r4, #32]
 80168b6:	6323      	str	r3, [r4, #48]	; 0x30
 80168b8:	bd10      	pop	{r4, pc}
 80168ba:	bf00      	nop
 80168bc:	08017345 	.word	0x08017345
 80168c0:	08017367 	.word	0x08017367
 80168c4:	0801739f 	.word	0x0801739f
 80168c8:	080173c3 	.word	0x080173c3

080168cc <_cleanup_r>:
 80168cc:	4901      	ldr	r1, [pc, #4]	; (80168d4 <_cleanup_r+0x8>)
 80168ce:	f000 b885 	b.w	80169dc <_fwalk_reent>
 80168d2:	bf00      	nop
 80168d4:	08016831 	.word	0x08016831

080168d8 <__sfmoreglue>:
 80168d8:	b570      	push	{r4, r5, r6, lr}
 80168da:	1e4a      	subs	r2, r1, #1
 80168dc:	2568      	movs	r5, #104	; 0x68
 80168de:	4355      	muls	r5, r2
 80168e0:	460e      	mov	r6, r1
 80168e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80168e6:	f7ff fd33 	bl	8016350 <_malloc_r>
 80168ea:	4604      	mov	r4, r0
 80168ec:	b140      	cbz	r0, 8016900 <__sfmoreglue+0x28>
 80168ee:	2100      	movs	r1, #0
 80168f0:	e9c0 1600 	strd	r1, r6, [r0]
 80168f4:	300c      	adds	r0, #12
 80168f6:	60a0      	str	r0, [r4, #8]
 80168f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80168fc:	f7ff fcd1 	bl	80162a2 <memset>
 8016900:	4620      	mov	r0, r4
 8016902:	bd70      	pop	{r4, r5, r6, pc}

08016904 <__sinit>:
 8016904:	6983      	ldr	r3, [r0, #24]
 8016906:	b510      	push	{r4, lr}
 8016908:	4604      	mov	r4, r0
 801690a:	bb33      	cbnz	r3, 801695a <__sinit+0x56>
 801690c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016910:	6503      	str	r3, [r0, #80]	; 0x50
 8016912:	4b12      	ldr	r3, [pc, #72]	; (801695c <__sinit+0x58>)
 8016914:	4a12      	ldr	r2, [pc, #72]	; (8016960 <__sinit+0x5c>)
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	6282      	str	r2, [r0, #40]	; 0x28
 801691a:	4298      	cmp	r0, r3
 801691c:	bf04      	itt	eq
 801691e:	2301      	moveq	r3, #1
 8016920:	6183      	streq	r3, [r0, #24]
 8016922:	f000 f81f 	bl	8016964 <__sfp>
 8016926:	6060      	str	r0, [r4, #4]
 8016928:	4620      	mov	r0, r4
 801692a:	f000 f81b 	bl	8016964 <__sfp>
 801692e:	60a0      	str	r0, [r4, #8]
 8016930:	4620      	mov	r0, r4
 8016932:	f000 f817 	bl	8016964 <__sfp>
 8016936:	2200      	movs	r2, #0
 8016938:	60e0      	str	r0, [r4, #12]
 801693a:	2104      	movs	r1, #4
 801693c:	6860      	ldr	r0, [r4, #4]
 801693e:	f7ff ffa1 	bl	8016884 <std>
 8016942:	2201      	movs	r2, #1
 8016944:	2109      	movs	r1, #9
 8016946:	68a0      	ldr	r0, [r4, #8]
 8016948:	f7ff ff9c 	bl	8016884 <std>
 801694c:	2202      	movs	r2, #2
 801694e:	2112      	movs	r1, #18
 8016950:	68e0      	ldr	r0, [r4, #12]
 8016952:	f7ff ff97 	bl	8016884 <std>
 8016956:	2301      	movs	r3, #1
 8016958:	61a3      	str	r3, [r4, #24]
 801695a:	bd10      	pop	{r4, pc}
 801695c:	08018728 	.word	0x08018728
 8016960:	080168cd 	.word	0x080168cd

08016964 <__sfp>:
 8016964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016966:	4b1b      	ldr	r3, [pc, #108]	; (80169d4 <__sfp+0x70>)
 8016968:	681e      	ldr	r6, [r3, #0]
 801696a:	69b3      	ldr	r3, [r6, #24]
 801696c:	4607      	mov	r7, r0
 801696e:	b913      	cbnz	r3, 8016976 <__sfp+0x12>
 8016970:	4630      	mov	r0, r6
 8016972:	f7ff ffc7 	bl	8016904 <__sinit>
 8016976:	3648      	adds	r6, #72	; 0x48
 8016978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801697c:	3b01      	subs	r3, #1
 801697e:	d503      	bpl.n	8016988 <__sfp+0x24>
 8016980:	6833      	ldr	r3, [r6, #0]
 8016982:	b133      	cbz	r3, 8016992 <__sfp+0x2e>
 8016984:	6836      	ldr	r6, [r6, #0]
 8016986:	e7f7      	b.n	8016978 <__sfp+0x14>
 8016988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801698c:	b16d      	cbz	r5, 80169aa <__sfp+0x46>
 801698e:	3468      	adds	r4, #104	; 0x68
 8016990:	e7f4      	b.n	801697c <__sfp+0x18>
 8016992:	2104      	movs	r1, #4
 8016994:	4638      	mov	r0, r7
 8016996:	f7ff ff9f 	bl	80168d8 <__sfmoreglue>
 801699a:	6030      	str	r0, [r6, #0]
 801699c:	2800      	cmp	r0, #0
 801699e:	d1f1      	bne.n	8016984 <__sfp+0x20>
 80169a0:	230c      	movs	r3, #12
 80169a2:	603b      	str	r3, [r7, #0]
 80169a4:	4604      	mov	r4, r0
 80169a6:	4620      	mov	r0, r4
 80169a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169aa:	4b0b      	ldr	r3, [pc, #44]	; (80169d8 <__sfp+0x74>)
 80169ac:	6665      	str	r5, [r4, #100]	; 0x64
 80169ae:	e9c4 5500 	strd	r5, r5, [r4]
 80169b2:	60a5      	str	r5, [r4, #8]
 80169b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80169b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80169bc:	2208      	movs	r2, #8
 80169be:	4629      	mov	r1, r5
 80169c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80169c4:	f7ff fc6d 	bl	80162a2 <memset>
 80169c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80169cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80169d0:	e7e9      	b.n	80169a6 <__sfp+0x42>
 80169d2:	bf00      	nop
 80169d4:	08018728 	.word	0x08018728
 80169d8:	ffff0001 	.word	0xffff0001

080169dc <_fwalk_reent>:
 80169dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169e0:	4680      	mov	r8, r0
 80169e2:	4689      	mov	r9, r1
 80169e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80169e8:	2600      	movs	r6, #0
 80169ea:	b914      	cbnz	r4, 80169f2 <_fwalk_reent+0x16>
 80169ec:	4630      	mov	r0, r6
 80169ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80169f6:	3f01      	subs	r7, #1
 80169f8:	d501      	bpl.n	80169fe <_fwalk_reent+0x22>
 80169fa:	6824      	ldr	r4, [r4, #0]
 80169fc:	e7f5      	b.n	80169ea <_fwalk_reent+0xe>
 80169fe:	89ab      	ldrh	r3, [r5, #12]
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	d907      	bls.n	8016a14 <_fwalk_reent+0x38>
 8016a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016a08:	3301      	adds	r3, #1
 8016a0a:	d003      	beq.n	8016a14 <_fwalk_reent+0x38>
 8016a0c:	4629      	mov	r1, r5
 8016a0e:	4640      	mov	r0, r8
 8016a10:	47c8      	blx	r9
 8016a12:	4306      	orrs	r6, r0
 8016a14:	3568      	adds	r5, #104	; 0x68
 8016a16:	e7ee      	b.n	80169f6 <_fwalk_reent+0x1a>

08016a18 <__locale_ctype_ptr_l>:
 8016a18:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016a1c:	4770      	bx	lr

08016a1e <__swhatbuf_r>:
 8016a1e:	b570      	push	{r4, r5, r6, lr}
 8016a20:	460e      	mov	r6, r1
 8016a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a26:	2900      	cmp	r1, #0
 8016a28:	b096      	sub	sp, #88	; 0x58
 8016a2a:	4614      	mov	r4, r2
 8016a2c:	461d      	mov	r5, r3
 8016a2e:	da07      	bge.n	8016a40 <__swhatbuf_r+0x22>
 8016a30:	2300      	movs	r3, #0
 8016a32:	602b      	str	r3, [r5, #0]
 8016a34:	89b3      	ldrh	r3, [r6, #12]
 8016a36:	061a      	lsls	r2, r3, #24
 8016a38:	d410      	bmi.n	8016a5c <__swhatbuf_r+0x3e>
 8016a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a3e:	e00e      	b.n	8016a5e <__swhatbuf_r+0x40>
 8016a40:	466a      	mov	r2, sp
 8016a42:	f000 fdb3 	bl	80175ac <_fstat_r>
 8016a46:	2800      	cmp	r0, #0
 8016a48:	dbf2      	blt.n	8016a30 <__swhatbuf_r+0x12>
 8016a4a:	9a01      	ldr	r2, [sp, #4]
 8016a4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a54:	425a      	negs	r2, r3
 8016a56:	415a      	adcs	r2, r3
 8016a58:	602a      	str	r2, [r5, #0]
 8016a5a:	e7ee      	b.n	8016a3a <__swhatbuf_r+0x1c>
 8016a5c:	2340      	movs	r3, #64	; 0x40
 8016a5e:	2000      	movs	r0, #0
 8016a60:	6023      	str	r3, [r4, #0]
 8016a62:	b016      	add	sp, #88	; 0x58
 8016a64:	bd70      	pop	{r4, r5, r6, pc}
	...

08016a68 <__smakebuf_r>:
 8016a68:	898b      	ldrh	r3, [r1, #12]
 8016a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a6c:	079d      	lsls	r5, r3, #30
 8016a6e:	4606      	mov	r6, r0
 8016a70:	460c      	mov	r4, r1
 8016a72:	d507      	bpl.n	8016a84 <__smakebuf_r+0x1c>
 8016a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016a78:	6023      	str	r3, [r4, #0]
 8016a7a:	6123      	str	r3, [r4, #16]
 8016a7c:	2301      	movs	r3, #1
 8016a7e:	6163      	str	r3, [r4, #20]
 8016a80:	b002      	add	sp, #8
 8016a82:	bd70      	pop	{r4, r5, r6, pc}
 8016a84:	ab01      	add	r3, sp, #4
 8016a86:	466a      	mov	r2, sp
 8016a88:	f7ff ffc9 	bl	8016a1e <__swhatbuf_r>
 8016a8c:	9900      	ldr	r1, [sp, #0]
 8016a8e:	4605      	mov	r5, r0
 8016a90:	4630      	mov	r0, r6
 8016a92:	f7ff fc5d 	bl	8016350 <_malloc_r>
 8016a96:	b948      	cbnz	r0, 8016aac <__smakebuf_r+0x44>
 8016a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a9c:	059a      	lsls	r2, r3, #22
 8016a9e:	d4ef      	bmi.n	8016a80 <__smakebuf_r+0x18>
 8016aa0:	f023 0303 	bic.w	r3, r3, #3
 8016aa4:	f043 0302 	orr.w	r3, r3, #2
 8016aa8:	81a3      	strh	r3, [r4, #12]
 8016aaa:	e7e3      	b.n	8016a74 <__smakebuf_r+0xc>
 8016aac:	4b0d      	ldr	r3, [pc, #52]	; (8016ae4 <__smakebuf_r+0x7c>)
 8016aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8016ab0:	89a3      	ldrh	r3, [r4, #12]
 8016ab2:	6020      	str	r0, [r4, #0]
 8016ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ab8:	81a3      	strh	r3, [r4, #12]
 8016aba:	9b00      	ldr	r3, [sp, #0]
 8016abc:	6163      	str	r3, [r4, #20]
 8016abe:	9b01      	ldr	r3, [sp, #4]
 8016ac0:	6120      	str	r0, [r4, #16]
 8016ac2:	b15b      	cbz	r3, 8016adc <__smakebuf_r+0x74>
 8016ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ac8:	4630      	mov	r0, r6
 8016aca:	f000 fd81 	bl	80175d0 <_isatty_r>
 8016ace:	b128      	cbz	r0, 8016adc <__smakebuf_r+0x74>
 8016ad0:	89a3      	ldrh	r3, [r4, #12]
 8016ad2:	f023 0303 	bic.w	r3, r3, #3
 8016ad6:	f043 0301 	orr.w	r3, r3, #1
 8016ada:	81a3      	strh	r3, [r4, #12]
 8016adc:	89a3      	ldrh	r3, [r4, #12]
 8016ade:	431d      	orrs	r5, r3
 8016ae0:	81a5      	strh	r5, [r4, #12]
 8016ae2:	e7cd      	b.n	8016a80 <__smakebuf_r+0x18>
 8016ae4:	080168cd 	.word	0x080168cd

08016ae8 <__ascii_mbtowc>:
 8016ae8:	b082      	sub	sp, #8
 8016aea:	b901      	cbnz	r1, 8016aee <__ascii_mbtowc+0x6>
 8016aec:	a901      	add	r1, sp, #4
 8016aee:	b142      	cbz	r2, 8016b02 <__ascii_mbtowc+0x1a>
 8016af0:	b14b      	cbz	r3, 8016b06 <__ascii_mbtowc+0x1e>
 8016af2:	7813      	ldrb	r3, [r2, #0]
 8016af4:	600b      	str	r3, [r1, #0]
 8016af6:	7812      	ldrb	r2, [r2, #0]
 8016af8:	1c10      	adds	r0, r2, #0
 8016afa:	bf18      	it	ne
 8016afc:	2001      	movne	r0, #1
 8016afe:	b002      	add	sp, #8
 8016b00:	4770      	bx	lr
 8016b02:	4610      	mov	r0, r2
 8016b04:	e7fb      	b.n	8016afe <__ascii_mbtowc+0x16>
 8016b06:	f06f 0001 	mvn.w	r0, #1
 8016b0a:	e7f8      	b.n	8016afe <__ascii_mbtowc+0x16>

08016b0c <__malloc_lock>:
 8016b0c:	4770      	bx	lr

08016b0e <__malloc_unlock>:
 8016b0e:	4770      	bx	lr

08016b10 <__ssputs_r>:
 8016b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b14:	688e      	ldr	r6, [r1, #8]
 8016b16:	429e      	cmp	r6, r3
 8016b18:	4682      	mov	sl, r0
 8016b1a:	460c      	mov	r4, r1
 8016b1c:	4690      	mov	r8, r2
 8016b1e:	4699      	mov	r9, r3
 8016b20:	d837      	bhi.n	8016b92 <__ssputs_r+0x82>
 8016b22:	898a      	ldrh	r2, [r1, #12]
 8016b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016b28:	d031      	beq.n	8016b8e <__ssputs_r+0x7e>
 8016b2a:	6825      	ldr	r5, [r4, #0]
 8016b2c:	6909      	ldr	r1, [r1, #16]
 8016b2e:	1a6f      	subs	r7, r5, r1
 8016b30:	6965      	ldr	r5, [r4, #20]
 8016b32:	2302      	movs	r3, #2
 8016b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b38:	fb95 f5f3 	sdiv	r5, r5, r3
 8016b3c:	f109 0301 	add.w	r3, r9, #1
 8016b40:	443b      	add	r3, r7
 8016b42:	429d      	cmp	r5, r3
 8016b44:	bf38      	it	cc
 8016b46:	461d      	movcc	r5, r3
 8016b48:	0553      	lsls	r3, r2, #21
 8016b4a:	d530      	bpl.n	8016bae <__ssputs_r+0x9e>
 8016b4c:	4629      	mov	r1, r5
 8016b4e:	f7ff fbff 	bl	8016350 <_malloc_r>
 8016b52:	4606      	mov	r6, r0
 8016b54:	b950      	cbnz	r0, 8016b6c <__ssputs_r+0x5c>
 8016b56:	230c      	movs	r3, #12
 8016b58:	f8ca 3000 	str.w	r3, [sl]
 8016b5c:	89a3      	ldrh	r3, [r4, #12]
 8016b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b62:	81a3      	strh	r3, [r4, #12]
 8016b64:	f04f 30ff 	mov.w	r0, #4294967295
 8016b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b6c:	463a      	mov	r2, r7
 8016b6e:	6921      	ldr	r1, [r4, #16]
 8016b70:	f7ff fb8c 	bl	801628c <memcpy>
 8016b74:	89a3      	ldrh	r3, [r4, #12]
 8016b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b7e:	81a3      	strh	r3, [r4, #12]
 8016b80:	6126      	str	r6, [r4, #16]
 8016b82:	6165      	str	r5, [r4, #20]
 8016b84:	443e      	add	r6, r7
 8016b86:	1bed      	subs	r5, r5, r7
 8016b88:	6026      	str	r6, [r4, #0]
 8016b8a:	60a5      	str	r5, [r4, #8]
 8016b8c:	464e      	mov	r6, r9
 8016b8e:	454e      	cmp	r6, r9
 8016b90:	d900      	bls.n	8016b94 <__ssputs_r+0x84>
 8016b92:	464e      	mov	r6, r9
 8016b94:	4632      	mov	r2, r6
 8016b96:	4641      	mov	r1, r8
 8016b98:	6820      	ldr	r0, [r4, #0]
 8016b9a:	f000 fd3b 	bl	8017614 <memmove>
 8016b9e:	68a3      	ldr	r3, [r4, #8]
 8016ba0:	1b9b      	subs	r3, r3, r6
 8016ba2:	60a3      	str	r3, [r4, #8]
 8016ba4:	6823      	ldr	r3, [r4, #0]
 8016ba6:	441e      	add	r6, r3
 8016ba8:	6026      	str	r6, [r4, #0]
 8016baa:	2000      	movs	r0, #0
 8016bac:	e7dc      	b.n	8016b68 <__ssputs_r+0x58>
 8016bae:	462a      	mov	r2, r5
 8016bb0:	f000 fd49 	bl	8017646 <_realloc_r>
 8016bb4:	4606      	mov	r6, r0
 8016bb6:	2800      	cmp	r0, #0
 8016bb8:	d1e2      	bne.n	8016b80 <__ssputs_r+0x70>
 8016bba:	6921      	ldr	r1, [r4, #16]
 8016bbc:	4650      	mov	r0, sl
 8016bbe:	f7ff fb79 	bl	80162b4 <_free_r>
 8016bc2:	e7c8      	b.n	8016b56 <__ssputs_r+0x46>

08016bc4 <_svfiprintf_r>:
 8016bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc8:	461d      	mov	r5, r3
 8016bca:	898b      	ldrh	r3, [r1, #12]
 8016bcc:	061f      	lsls	r7, r3, #24
 8016bce:	b09d      	sub	sp, #116	; 0x74
 8016bd0:	4680      	mov	r8, r0
 8016bd2:	460c      	mov	r4, r1
 8016bd4:	4616      	mov	r6, r2
 8016bd6:	d50f      	bpl.n	8016bf8 <_svfiprintf_r+0x34>
 8016bd8:	690b      	ldr	r3, [r1, #16]
 8016bda:	b96b      	cbnz	r3, 8016bf8 <_svfiprintf_r+0x34>
 8016bdc:	2140      	movs	r1, #64	; 0x40
 8016bde:	f7ff fbb7 	bl	8016350 <_malloc_r>
 8016be2:	6020      	str	r0, [r4, #0]
 8016be4:	6120      	str	r0, [r4, #16]
 8016be6:	b928      	cbnz	r0, 8016bf4 <_svfiprintf_r+0x30>
 8016be8:	230c      	movs	r3, #12
 8016bea:	f8c8 3000 	str.w	r3, [r8]
 8016bee:	f04f 30ff 	mov.w	r0, #4294967295
 8016bf2:	e0c8      	b.n	8016d86 <_svfiprintf_r+0x1c2>
 8016bf4:	2340      	movs	r3, #64	; 0x40
 8016bf6:	6163      	str	r3, [r4, #20]
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8016bfc:	2320      	movs	r3, #32
 8016bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c02:	2330      	movs	r3, #48	; 0x30
 8016c04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c08:	9503      	str	r5, [sp, #12]
 8016c0a:	f04f 0b01 	mov.w	fp, #1
 8016c0e:	4637      	mov	r7, r6
 8016c10:	463d      	mov	r5, r7
 8016c12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016c16:	b10b      	cbz	r3, 8016c1c <_svfiprintf_r+0x58>
 8016c18:	2b25      	cmp	r3, #37	; 0x25
 8016c1a:	d13e      	bne.n	8016c9a <_svfiprintf_r+0xd6>
 8016c1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8016c20:	d00b      	beq.n	8016c3a <_svfiprintf_r+0x76>
 8016c22:	4653      	mov	r3, sl
 8016c24:	4632      	mov	r2, r6
 8016c26:	4621      	mov	r1, r4
 8016c28:	4640      	mov	r0, r8
 8016c2a:	f7ff ff71 	bl	8016b10 <__ssputs_r>
 8016c2e:	3001      	adds	r0, #1
 8016c30:	f000 80a4 	beq.w	8016d7c <_svfiprintf_r+0x1b8>
 8016c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c36:	4453      	add	r3, sl
 8016c38:	9309      	str	r3, [sp, #36]	; 0x24
 8016c3a:	783b      	ldrb	r3, [r7, #0]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	f000 809d 	beq.w	8016d7c <_svfiprintf_r+0x1b8>
 8016c42:	2300      	movs	r3, #0
 8016c44:	f04f 32ff 	mov.w	r2, #4294967295
 8016c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c4c:	9304      	str	r3, [sp, #16]
 8016c4e:	9307      	str	r3, [sp, #28]
 8016c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c54:	931a      	str	r3, [sp, #104]	; 0x68
 8016c56:	462f      	mov	r7, r5
 8016c58:	2205      	movs	r2, #5
 8016c5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016c5e:	4850      	ldr	r0, [pc, #320]	; (8016da0 <_svfiprintf_r+0x1dc>)
 8016c60:	f7f5 f9f6 	bl	800c050 <memchr>
 8016c64:	9b04      	ldr	r3, [sp, #16]
 8016c66:	b9d0      	cbnz	r0, 8016c9e <_svfiprintf_r+0xda>
 8016c68:	06d9      	lsls	r1, r3, #27
 8016c6a:	bf44      	itt	mi
 8016c6c:	2220      	movmi	r2, #32
 8016c6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016c72:	071a      	lsls	r2, r3, #28
 8016c74:	bf44      	itt	mi
 8016c76:	222b      	movmi	r2, #43	; 0x2b
 8016c78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016c7c:	782a      	ldrb	r2, [r5, #0]
 8016c7e:	2a2a      	cmp	r2, #42	; 0x2a
 8016c80:	d015      	beq.n	8016cae <_svfiprintf_r+0xea>
 8016c82:	9a07      	ldr	r2, [sp, #28]
 8016c84:	462f      	mov	r7, r5
 8016c86:	2000      	movs	r0, #0
 8016c88:	250a      	movs	r5, #10
 8016c8a:	4639      	mov	r1, r7
 8016c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c90:	3b30      	subs	r3, #48	; 0x30
 8016c92:	2b09      	cmp	r3, #9
 8016c94:	d94d      	bls.n	8016d32 <_svfiprintf_r+0x16e>
 8016c96:	b1b8      	cbz	r0, 8016cc8 <_svfiprintf_r+0x104>
 8016c98:	e00f      	b.n	8016cba <_svfiprintf_r+0xf6>
 8016c9a:	462f      	mov	r7, r5
 8016c9c:	e7b8      	b.n	8016c10 <_svfiprintf_r+0x4c>
 8016c9e:	4a40      	ldr	r2, [pc, #256]	; (8016da0 <_svfiprintf_r+0x1dc>)
 8016ca0:	1a80      	subs	r0, r0, r2
 8016ca2:	fa0b f000 	lsl.w	r0, fp, r0
 8016ca6:	4318      	orrs	r0, r3
 8016ca8:	9004      	str	r0, [sp, #16]
 8016caa:	463d      	mov	r5, r7
 8016cac:	e7d3      	b.n	8016c56 <_svfiprintf_r+0x92>
 8016cae:	9a03      	ldr	r2, [sp, #12]
 8016cb0:	1d11      	adds	r1, r2, #4
 8016cb2:	6812      	ldr	r2, [r2, #0]
 8016cb4:	9103      	str	r1, [sp, #12]
 8016cb6:	2a00      	cmp	r2, #0
 8016cb8:	db01      	blt.n	8016cbe <_svfiprintf_r+0xfa>
 8016cba:	9207      	str	r2, [sp, #28]
 8016cbc:	e004      	b.n	8016cc8 <_svfiprintf_r+0x104>
 8016cbe:	4252      	negs	r2, r2
 8016cc0:	f043 0302 	orr.w	r3, r3, #2
 8016cc4:	9207      	str	r2, [sp, #28]
 8016cc6:	9304      	str	r3, [sp, #16]
 8016cc8:	783b      	ldrb	r3, [r7, #0]
 8016cca:	2b2e      	cmp	r3, #46	; 0x2e
 8016ccc:	d10c      	bne.n	8016ce8 <_svfiprintf_r+0x124>
 8016cce:	787b      	ldrb	r3, [r7, #1]
 8016cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8016cd2:	d133      	bne.n	8016d3c <_svfiprintf_r+0x178>
 8016cd4:	9b03      	ldr	r3, [sp, #12]
 8016cd6:	1d1a      	adds	r2, r3, #4
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	9203      	str	r2, [sp, #12]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	bfb8      	it	lt
 8016ce0:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ce4:	3702      	adds	r7, #2
 8016ce6:	9305      	str	r3, [sp, #20]
 8016ce8:	4d2e      	ldr	r5, [pc, #184]	; (8016da4 <_svfiprintf_r+0x1e0>)
 8016cea:	7839      	ldrb	r1, [r7, #0]
 8016cec:	2203      	movs	r2, #3
 8016cee:	4628      	mov	r0, r5
 8016cf0:	f7f5 f9ae 	bl	800c050 <memchr>
 8016cf4:	b138      	cbz	r0, 8016d06 <_svfiprintf_r+0x142>
 8016cf6:	2340      	movs	r3, #64	; 0x40
 8016cf8:	1b40      	subs	r0, r0, r5
 8016cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8016cfe:	9b04      	ldr	r3, [sp, #16]
 8016d00:	4303      	orrs	r3, r0
 8016d02:	3701      	adds	r7, #1
 8016d04:	9304      	str	r3, [sp, #16]
 8016d06:	7839      	ldrb	r1, [r7, #0]
 8016d08:	4827      	ldr	r0, [pc, #156]	; (8016da8 <_svfiprintf_r+0x1e4>)
 8016d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016d0e:	2206      	movs	r2, #6
 8016d10:	1c7e      	adds	r6, r7, #1
 8016d12:	f7f5 f99d 	bl	800c050 <memchr>
 8016d16:	2800      	cmp	r0, #0
 8016d18:	d038      	beq.n	8016d8c <_svfiprintf_r+0x1c8>
 8016d1a:	4b24      	ldr	r3, [pc, #144]	; (8016dac <_svfiprintf_r+0x1e8>)
 8016d1c:	bb13      	cbnz	r3, 8016d64 <_svfiprintf_r+0x1a0>
 8016d1e:	9b03      	ldr	r3, [sp, #12]
 8016d20:	3307      	adds	r3, #7
 8016d22:	f023 0307 	bic.w	r3, r3, #7
 8016d26:	3308      	adds	r3, #8
 8016d28:	9303      	str	r3, [sp, #12]
 8016d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d2c:	444b      	add	r3, r9
 8016d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8016d30:	e76d      	b.n	8016c0e <_svfiprintf_r+0x4a>
 8016d32:	fb05 3202 	mla	r2, r5, r2, r3
 8016d36:	2001      	movs	r0, #1
 8016d38:	460f      	mov	r7, r1
 8016d3a:	e7a6      	b.n	8016c8a <_svfiprintf_r+0xc6>
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	3701      	adds	r7, #1
 8016d40:	9305      	str	r3, [sp, #20]
 8016d42:	4619      	mov	r1, r3
 8016d44:	250a      	movs	r5, #10
 8016d46:	4638      	mov	r0, r7
 8016d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d4c:	3a30      	subs	r2, #48	; 0x30
 8016d4e:	2a09      	cmp	r2, #9
 8016d50:	d903      	bls.n	8016d5a <_svfiprintf_r+0x196>
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d0c8      	beq.n	8016ce8 <_svfiprintf_r+0x124>
 8016d56:	9105      	str	r1, [sp, #20]
 8016d58:	e7c6      	b.n	8016ce8 <_svfiprintf_r+0x124>
 8016d5a:	fb05 2101 	mla	r1, r5, r1, r2
 8016d5e:	2301      	movs	r3, #1
 8016d60:	4607      	mov	r7, r0
 8016d62:	e7f0      	b.n	8016d46 <_svfiprintf_r+0x182>
 8016d64:	ab03      	add	r3, sp, #12
 8016d66:	9300      	str	r3, [sp, #0]
 8016d68:	4622      	mov	r2, r4
 8016d6a:	4b11      	ldr	r3, [pc, #68]	; (8016db0 <_svfiprintf_r+0x1ec>)
 8016d6c:	a904      	add	r1, sp, #16
 8016d6e:	4640      	mov	r0, r8
 8016d70:	f3af 8000 	nop.w
 8016d74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016d78:	4681      	mov	r9, r0
 8016d7a:	d1d6      	bne.n	8016d2a <_svfiprintf_r+0x166>
 8016d7c:	89a3      	ldrh	r3, [r4, #12]
 8016d7e:	065b      	lsls	r3, r3, #25
 8016d80:	f53f af35 	bmi.w	8016bee <_svfiprintf_r+0x2a>
 8016d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d86:	b01d      	add	sp, #116	; 0x74
 8016d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d8c:	ab03      	add	r3, sp, #12
 8016d8e:	9300      	str	r3, [sp, #0]
 8016d90:	4622      	mov	r2, r4
 8016d92:	4b07      	ldr	r3, [pc, #28]	; (8016db0 <_svfiprintf_r+0x1ec>)
 8016d94:	a904      	add	r1, sp, #16
 8016d96:	4640      	mov	r0, r8
 8016d98:	f000 f9c2 	bl	8017120 <_printf_i>
 8016d9c:	e7ea      	b.n	8016d74 <_svfiprintf_r+0x1b0>
 8016d9e:	bf00      	nop
 8016da0:	08018792 	.word	0x08018792
 8016da4:	08018798 	.word	0x08018798
 8016da8:	0801879c 	.word	0x0801879c
 8016dac:	00000000 	.word	0x00000000
 8016db0:	08016b11 	.word	0x08016b11

08016db4 <__sfputc_r>:
 8016db4:	6893      	ldr	r3, [r2, #8]
 8016db6:	3b01      	subs	r3, #1
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	b410      	push	{r4}
 8016dbc:	6093      	str	r3, [r2, #8]
 8016dbe:	da08      	bge.n	8016dd2 <__sfputc_r+0x1e>
 8016dc0:	6994      	ldr	r4, [r2, #24]
 8016dc2:	42a3      	cmp	r3, r4
 8016dc4:	db01      	blt.n	8016dca <__sfputc_r+0x16>
 8016dc6:	290a      	cmp	r1, #10
 8016dc8:	d103      	bne.n	8016dd2 <__sfputc_r+0x1e>
 8016dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dce:	f000 bafd 	b.w	80173cc <__swbuf_r>
 8016dd2:	6813      	ldr	r3, [r2, #0]
 8016dd4:	1c58      	adds	r0, r3, #1
 8016dd6:	6010      	str	r0, [r2, #0]
 8016dd8:	7019      	strb	r1, [r3, #0]
 8016dda:	4608      	mov	r0, r1
 8016ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016de0:	4770      	bx	lr

08016de2 <__sfputs_r>:
 8016de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016de4:	4606      	mov	r6, r0
 8016de6:	460f      	mov	r7, r1
 8016de8:	4614      	mov	r4, r2
 8016dea:	18d5      	adds	r5, r2, r3
 8016dec:	42ac      	cmp	r4, r5
 8016dee:	d101      	bne.n	8016df4 <__sfputs_r+0x12>
 8016df0:	2000      	movs	r0, #0
 8016df2:	e007      	b.n	8016e04 <__sfputs_r+0x22>
 8016df4:	463a      	mov	r2, r7
 8016df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dfa:	4630      	mov	r0, r6
 8016dfc:	f7ff ffda 	bl	8016db4 <__sfputc_r>
 8016e00:	1c43      	adds	r3, r0, #1
 8016e02:	d1f3      	bne.n	8016dec <__sfputs_r+0xa>
 8016e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016e08 <_vfiprintf_r>:
 8016e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e0c:	460c      	mov	r4, r1
 8016e0e:	b09d      	sub	sp, #116	; 0x74
 8016e10:	4617      	mov	r7, r2
 8016e12:	461d      	mov	r5, r3
 8016e14:	4606      	mov	r6, r0
 8016e16:	b118      	cbz	r0, 8016e20 <_vfiprintf_r+0x18>
 8016e18:	6983      	ldr	r3, [r0, #24]
 8016e1a:	b90b      	cbnz	r3, 8016e20 <_vfiprintf_r+0x18>
 8016e1c:	f7ff fd72 	bl	8016904 <__sinit>
 8016e20:	4b7c      	ldr	r3, [pc, #496]	; (8017014 <_vfiprintf_r+0x20c>)
 8016e22:	429c      	cmp	r4, r3
 8016e24:	d158      	bne.n	8016ed8 <_vfiprintf_r+0xd0>
 8016e26:	6874      	ldr	r4, [r6, #4]
 8016e28:	89a3      	ldrh	r3, [r4, #12]
 8016e2a:	0718      	lsls	r0, r3, #28
 8016e2c:	d55e      	bpl.n	8016eec <_vfiprintf_r+0xe4>
 8016e2e:	6923      	ldr	r3, [r4, #16]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d05b      	beq.n	8016eec <_vfiprintf_r+0xe4>
 8016e34:	2300      	movs	r3, #0
 8016e36:	9309      	str	r3, [sp, #36]	; 0x24
 8016e38:	2320      	movs	r3, #32
 8016e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e3e:	2330      	movs	r3, #48	; 0x30
 8016e40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e44:	9503      	str	r5, [sp, #12]
 8016e46:	f04f 0b01 	mov.w	fp, #1
 8016e4a:	46b8      	mov	r8, r7
 8016e4c:	4645      	mov	r5, r8
 8016e4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016e52:	b10b      	cbz	r3, 8016e58 <_vfiprintf_r+0x50>
 8016e54:	2b25      	cmp	r3, #37	; 0x25
 8016e56:	d154      	bne.n	8016f02 <_vfiprintf_r+0xfa>
 8016e58:	ebb8 0a07 	subs.w	sl, r8, r7
 8016e5c:	d00b      	beq.n	8016e76 <_vfiprintf_r+0x6e>
 8016e5e:	4653      	mov	r3, sl
 8016e60:	463a      	mov	r2, r7
 8016e62:	4621      	mov	r1, r4
 8016e64:	4630      	mov	r0, r6
 8016e66:	f7ff ffbc 	bl	8016de2 <__sfputs_r>
 8016e6a:	3001      	adds	r0, #1
 8016e6c:	f000 80c2 	beq.w	8016ff4 <_vfiprintf_r+0x1ec>
 8016e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e72:	4453      	add	r3, sl
 8016e74:	9309      	str	r3, [sp, #36]	; 0x24
 8016e76:	f898 3000 	ldrb.w	r3, [r8]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	f000 80ba 	beq.w	8016ff4 <_vfiprintf_r+0x1ec>
 8016e80:	2300      	movs	r3, #0
 8016e82:	f04f 32ff 	mov.w	r2, #4294967295
 8016e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e8a:	9304      	str	r3, [sp, #16]
 8016e8c:	9307      	str	r3, [sp, #28]
 8016e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e92:	931a      	str	r3, [sp, #104]	; 0x68
 8016e94:	46a8      	mov	r8, r5
 8016e96:	2205      	movs	r2, #5
 8016e98:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016e9c:	485e      	ldr	r0, [pc, #376]	; (8017018 <_vfiprintf_r+0x210>)
 8016e9e:	f7f5 f8d7 	bl	800c050 <memchr>
 8016ea2:	9b04      	ldr	r3, [sp, #16]
 8016ea4:	bb78      	cbnz	r0, 8016f06 <_vfiprintf_r+0xfe>
 8016ea6:	06d9      	lsls	r1, r3, #27
 8016ea8:	bf44      	itt	mi
 8016eaa:	2220      	movmi	r2, #32
 8016eac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016eb0:	071a      	lsls	r2, r3, #28
 8016eb2:	bf44      	itt	mi
 8016eb4:	222b      	movmi	r2, #43	; 0x2b
 8016eb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016eba:	782a      	ldrb	r2, [r5, #0]
 8016ebc:	2a2a      	cmp	r2, #42	; 0x2a
 8016ebe:	d02a      	beq.n	8016f16 <_vfiprintf_r+0x10e>
 8016ec0:	9a07      	ldr	r2, [sp, #28]
 8016ec2:	46a8      	mov	r8, r5
 8016ec4:	2000      	movs	r0, #0
 8016ec6:	250a      	movs	r5, #10
 8016ec8:	4641      	mov	r1, r8
 8016eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ece:	3b30      	subs	r3, #48	; 0x30
 8016ed0:	2b09      	cmp	r3, #9
 8016ed2:	d969      	bls.n	8016fa8 <_vfiprintf_r+0x1a0>
 8016ed4:	b360      	cbz	r0, 8016f30 <_vfiprintf_r+0x128>
 8016ed6:	e024      	b.n	8016f22 <_vfiprintf_r+0x11a>
 8016ed8:	4b50      	ldr	r3, [pc, #320]	; (801701c <_vfiprintf_r+0x214>)
 8016eda:	429c      	cmp	r4, r3
 8016edc:	d101      	bne.n	8016ee2 <_vfiprintf_r+0xda>
 8016ede:	68b4      	ldr	r4, [r6, #8]
 8016ee0:	e7a2      	b.n	8016e28 <_vfiprintf_r+0x20>
 8016ee2:	4b4f      	ldr	r3, [pc, #316]	; (8017020 <_vfiprintf_r+0x218>)
 8016ee4:	429c      	cmp	r4, r3
 8016ee6:	bf08      	it	eq
 8016ee8:	68f4      	ldreq	r4, [r6, #12]
 8016eea:	e79d      	b.n	8016e28 <_vfiprintf_r+0x20>
 8016eec:	4621      	mov	r1, r4
 8016eee:	4630      	mov	r0, r6
 8016ef0:	f000 fade 	bl	80174b0 <__swsetup_r>
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	d09d      	beq.n	8016e34 <_vfiprintf_r+0x2c>
 8016ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8016efc:	b01d      	add	sp, #116	; 0x74
 8016efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f02:	46a8      	mov	r8, r5
 8016f04:	e7a2      	b.n	8016e4c <_vfiprintf_r+0x44>
 8016f06:	4a44      	ldr	r2, [pc, #272]	; (8017018 <_vfiprintf_r+0x210>)
 8016f08:	1a80      	subs	r0, r0, r2
 8016f0a:	fa0b f000 	lsl.w	r0, fp, r0
 8016f0e:	4318      	orrs	r0, r3
 8016f10:	9004      	str	r0, [sp, #16]
 8016f12:	4645      	mov	r5, r8
 8016f14:	e7be      	b.n	8016e94 <_vfiprintf_r+0x8c>
 8016f16:	9a03      	ldr	r2, [sp, #12]
 8016f18:	1d11      	adds	r1, r2, #4
 8016f1a:	6812      	ldr	r2, [r2, #0]
 8016f1c:	9103      	str	r1, [sp, #12]
 8016f1e:	2a00      	cmp	r2, #0
 8016f20:	db01      	blt.n	8016f26 <_vfiprintf_r+0x11e>
 8016f22:	9207      	str	r2, [sp, #28]
 8016f24:	e004      	b.n	8016f30 <_vfiprintf_r+0x128>
 8016f26:	4252      	negs	r2, r2
 8016f28:	f043 0302 	orr.w	r3, r3, #2
 8016f2c:	9207      	str	r2, [sp, #28]
 8016f2e:	9304      	str	r3, [sp, #16]
 8016f30:	f898 3000 	ldrb.w	r3, [r8]
 8016f34:	2b2e      	cmp	r3, #46	; 0x2e
 8016f36:	d10e      	bne.n	8016f56 <_vfiprintf_r+0x14e>
 8016f38:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8016f3e:	d138      	bne.n	8016fb2 <_vfiprintf_r+0x1aa>
 8016f40:	9b03      	ldr	r3, [sp, #12]
 8016f42:	1d1a      	adds	r2, r3, #4
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	9203      	str	r2, [sp, #12]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	bfb8      	it	lt
 8016f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f50:	f108 0802 	add.w	r8, r8, #2
 8016f54:	9305      	str	r3, [sp, #20]
 8016f56:	4d33      	ldr	r5, [pc, #204]	; (8017024 <_vfiprintf_r+0x21c>)
 8016f58:	f898 1000 	ldrb.w	r1, [r8]
 8016f5c:	2203      	movs	r2, #3
 8016f5e:	4628      	mov	r0, r5
 8016f60:	f7f5 f876 	bl	800c050 <memchr>
 8016f64:	b140      	cbz	r0, 8016f78 <_vfiprintf_r+0x170>
 8016f66:	2340      	movs	r3, #64	; 0x40
 8016f68:	1b40      	subs	r0, r0, r5
 8016f6a:	fa03 f000 	lsl.w	r0, r3, r0
 8016f6e:	9b04      	ldr	r3, [sp, #16]
 8016f70:	4303      	orrs	r3, r0
 8016f72:	f108 0801 	add.w	r8, r8, #1
 8016f76:	9304      	str	r3, [sp, #16]
 8016f78:	f898 1000 	ldrb.w	r1, [r8]
 8016f7c:	482a      	ldr	r0, [pc, #168]	; (8017028 <_vfiprintf_r+0x220>)
 8016f7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f82:	2206      	movs	r2, #6
 8016f84:	f108 0701 	add.w	r7, r8, #1
 8016f88:	f7f5 f862 	bl	800c050 <memchr>
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d037      	beq.n	8017000 <_vfiprintf_r+0x1f8>
 8016f90:	4b26      	ldr	r3, [pc, #152]	; (801702c <_vfiprintf_r+0x224>)
 8016f92:	bb1b      	cbnz	r3, 8016fdc <_vfiprintf_r+0x1d4>
 8016f94:	9b03      	ldr	r3, [sp, #12]
 8016f96:	3307      	adds	r3, #7
 8016f98:	f023 0307 	bic.w	r3, r3, #7
 8016f9c:	3308      	adds	r3, #8
 8016f9e:	9303      	str	r3, [sp, #12]
 8016fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fa2:	444b      	add	r3, r9
 8016fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8016fa6:	e750      	b.n	8016e4a <_vfiprintf_r+0x42>
 8016fa8:	fb05 3202 	mla	r2, r5, r2, r3
 8016fac:	2001      	movs	r0, #1
 8016fae:	4688      	mov	r8, r1
 8016fb0:	e78a      	b.n	8016ec8 <_vfiprintf_r+0xc0>
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	f108 0801 	add.w	r8, r8, #1
 8016fb8:	9305      	str	r3, [sp, #20]
 8016fba:	4619      	mov	r1, r3
 8016fbc:	250a      	movs	r5, #10
 8016fbe:	4640      	mov	r0, r8
 8016fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fc4:	3a30      	subs	r2, #48	; 0x30
 8016fc6:	2a09      	cmp	r2, #9
 8016fc8:	d903      	bls.n	8016fd2 <_vfiprintf_r+0x1ca>
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d0c3      	beq.n	8016f56 <_vfiprintf_r+0x14e>
 8016fce:	9105      	str	r1, [sp, #20]
 8016fd0:	e7c1      	b.n	8016f56 <_vfiprintf_r+0x14e>
 8016fd2:	fb05 2101 	mla	r1, r5, r1, r2
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	4680      	mov	r8, r0
 8016fda:	e7f0      	b.n	8016fbe <_vfiprintf_r+0x1b6>
 8016fdc:	ab03      	add	r3, sp, #12
 8016fde:	9300      	str	r3, [sp, #0]
 8016fe0:	4622      	mov	r2, r4
 8016fe2:	4b13      	ldr	r3, [pc, #76]	; (8017030 <_vfiprintf_r+0x228>)
 8016fe4:	a904      	add	r1, sp, #16
 8016fe6:	4630      	mov	r0, r6
 8016fe8:	f3af 8000 	nop.w
 8016fec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016ff0:	4681      	mov	r9, r0
 8016ff2:	d1d5      	bne.n	8016fa0 <_vfiprintf_r+0x198>
 8016ff4:	89a3      	ldrh	r3, [r4, #12]
 8016ff6:	065b      	lsls	r3, r3, #25
 8016ff8:	f53f af7e 	bmi.w	8016ef8 <_vfiprintf_r+0xf0>
 8016ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ffe:	e77d      	b.n	8016efc <_vfiprintf_r+0xf4>
 8017000:	ab03      	add	r3, sp, #12
 8017002:	9300      	str	r3, [sp, #0]
 8017004:	4622      	mov	r2, r4
 8017006:	4b0a      	ldr	r3, [pc, #40]	; (8017030 <_vfiprintf_r+0x228>)
 8017008:	a904      	add	r1, sp, #16
 801700a:	4630      	mov	r0, r6
 801700c:	f000 f888 	bl	8017120 <_printf_i>
 8017010:	e7ec      	b.n	8016fec <_vfiprintf_r+0x1e4>
 8017012:	bf00      	nop
 8017014:	0801874c 	.word	0x0801874c
 8017018:	08018792 	.word	0x08018792
 801701c:	0801876c 	.word	0x0801876c
 8017020:	0801872c 	.word	0x0801872c
 8017024:	08018798 	.word	0x08018798
 8017028:	0801879c 	.word	0x0801879c
 801702c:	00000000 	.word	0x00000000
 8017030:	08016de3 	.word	0x08016de3

08017034 <_printf_common>:
 8017034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017038:	4691      	mov	r9, r2
 801703a:	461f      	mov	r7, r3
 801703c:	688a      	ldr	r2, [r1, #8]
 801703e:	690b      	ldr	r3, [r1, #16]
 8017040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017044:	4293      	cmp	r3, r2
 8017046:	bfb8      	it	lt
 8017048:	4613      	movlt	r3, r2
 801704a:	f8c9 3000 	str.w	r3, [r9]
 801704e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017052:	4606      	mov	r6, r0
 8017054:	460c      	mov	r4, r1
 8017056:	b112      	cbz	r2, 801705e <_printf_common+0x2a>
 8017058:	3301      	adds	r3, #1
 801705a:	f8c9 3000 	str.w	r3, [r9]
 801705e:	6823      	ldr	r3, [r4, #0]
 8017060:	0699      	lsls	r1, r3, #26
 8017062:	bf42      	ittt	mi
 8017064:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017068:	3302      	addmi	r3, #2
 801706a:	f8c9 3000 	strmi.w	r3, [r9]
 801706e:	6825      	ldr	r5, [r4, #0]
 8017070:	f015 0506 	ands.w	r5, r5, #6
 8017074:	d107      	bne.n	8017086 <_printf_common+0x52>
 8017076:	f104 0a19 	add.w	sl, r4, #25
 801707a:	68e3      	ldr	r3, [r4, #12]
 801707c:	f8d9 2000 	ldr.w	r2, [r9]
 8017080:	1a9b      	subs	r3, r3, r2
 8017082:	42ab      	cmp	r3, r5
 8017084:	dc28      	bgt.n	80170d8 <_printf_common+0xa4>
 8017086:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801708a:	6822      	ldr	r2, [r4, #0]
 801708c:	3300      	adds	r3, #0
 801708e:	bf18      	it	ne
 8017090:	2301      	movne	r3, #1
 8017092:	0692      	lsls	r2, r2, #26
 8017094:	d42d      	bmi.n	80170f2 <_printf_common+0xbe>
 8017096:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801709a:	4639      	mov	r1, r7
 801709c:	4630      	mov	r0, r6
 801709e:	47c0      	blx	r8
 80170a0:	3001      	adds	r0, #1
 80170a2:	d020      	beq.n	80170e6 <_printf_common+0xb2>
 80170a4:	6823      	ldr	r3, [r4, #0]
 80170a6:	68e5      	ldr	r5, [r4, #12]
 80170a8:	f8d9 2000 	ldr.w	r2, [r9]
 80170ac:	f003 0306 	and.w	r3, r3, #6
 80170b0:	2b04      	cmp	r3, #4
 80170b2:	bf08      	it	eq
 80170b4:	1aad      	subeq	r5, r5, r2
 80170b6:	68a3      	ldr	r3, [r4, #8]
 80170b8:	6922      	ldr	r2, [r4, #16]
 80170ba:	bf0c      	ite	eq
 80170bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80170c0:	2500      	movne	r5, #0
 80170c2:	4293      	cmp	r3, r2
 80170c4:	bfc4      	itt	gt
 80170c6:	1a9b      	subgt	r3, r3, r2
 80170c8:	18ed      	addgt	r5, r5, r3
 80170ca:	f04f 0900 	mov.w	r9, #0
 80170ce:	341a      	adds	r4, #26
 80170d0:	454d      	cmp	r5, r9
 80170d2:	d11a      	bne.n	801710a <_printf_common+0xd6>
 80170d4:	2000      	movs	r0, #0
 80170d6:	e008      	b.n	80170ea <_printf_common+0xb6>
 80170d8:	2301      	movs	r3, #1
 80170da:	4652      	mov	r2, sl
 80170dc:	4639      	mov	r1, r7
 80170de:	4630      	mov	r0, r6
 80170e0:	47c0      	blx	r8
 80170e2:	3001      	adds	r0, #1
 80170e4:	d103      	bne.n	80170ee <_printf_common+0xba>
 80170e6:	f04f 30ff 	mov.w	r0, #4294967295
 80170ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170ee:	3501      	adds	r5, #1
 80170f0:	e7c3      	b.n	801707a <_printf_common+0x46>
 80170f2:	18e1      	adds	r1, r4, r3
 80170f4:	1c5a      	adds	r2, r3, #1
 80170f6:	2030      	movs	r0, #48	; 0x30
 80170f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80170fc:	4422      	add	r2, r4
 80170fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017102:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017106:	3302      	adds	r3, #2
 8017108:	e7c5      	b.n	8017096 <_printf_common+0x62>
 801710a:	2301      	movs	r3, #1
 801710c:	4622      	mov	r2, r4
 801710e:	4639      	mov	r1, r7
 8017110:	4630      	mov	r0, r6
 8017112:	47c0      	blx	r8
 8017114:	3001      	adds	r0, #1
 8017116:	d0e6      	beq.n	80170e6 <_printf_common+0xb2>
 8017118:	f109 0901 	add.w	r9, r9, #1
 801711c:	e7d8      	b.n	80170d0 <_printf_common+0x9c>
	...

08017120 <_printf_i>:
 8017120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017124:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017128:	460c      	mov	r4, r1
 801712a:	7e09      	ldrb	r1, [r1, #24]
 801712c:	b085      	sub	sp, #20
 801712e:	296e      	cmp	r1, #110	; 0x6e
 8017130:	4617      	mov	r7, r2
 8017132:	4606      	mov	r6, r0
 8017134:	4698      	mov	r8, r3
 8017136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017138:	f000 80b3 	beq.w	80172a2 <_printf_i+0x182>
 801713c:	d822      	bhi.n	8017184 <_printf_i+0x64>
 801713e:	2963      	cmp	r1, #99	; 0x63
 8017140:	d036      	beq.n	80171b0 <_printf_i+0x90>
 8017142:	d80a      	bhi.n	801715a <_printf_i+0x3a>
 8017144:	2900      	cmp	r1, #0
 8017146:	f000 80b9 	beq.w	80172bc <_printf_i+0x19c>
 801714a:	2958      	cmp	r1, #88	; 0x58
 801714c:	f000 8083 	beq.w	8017256 <_printf_i+0x136>
 8017150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017154:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017158:	e032      	b.n	80171c0 <_printf_i+0xa0>
 801715a:	2964      	cmp	r1, #100	; 0x64
 801715c:	d001      	beq.n	8017162 <_printf_i+0x42>
 801715e:	2969      	cmp	r1, #105	; 0x69
 8017160:	d1f6      	bne.n	8017150 <_printf_i+0x30>
 8017162:	6820      	ldr	r0, [r4, #0]
 8017164:	6813      	ldr	r3, [r2, #0]
 8017166:	0605      	lsls	r5, r0, #24
 8017168:	f103 0104 	add.w	r1, r3, #4
 801716c:	d52a      	bpl.n	80171c4 <_printf_i+0xa4>
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	6011      	str	r1, [r2, #0]
 8017172:	2b00      	cmp	r3, #0
 8017174:	da03      	bge.n	801717e <_printf_i+0x5e>
 8017176:	222d      	movs	r2, #45	; 0x2d
 8017178:	425b      	negs	r3, r3
 801717a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801717e:	486f      	ldr	r0, [pc, #444]	; (801733c <_printf_i+0x21c>)
 8017180:	220a      	movs	r2, #10
 8017182:	e039      	b.n	80171f8 <_printf_i+0xd8>
 8017184:	2973      	cmp	r1, #115	; 0x73
 8017186:	f000 809d 	beq.w	80172c4 <_printf_i+0x1a4>
 801718a:	d808      	bhi.n	801719e <_printf_i+0x7e>
 801718c:	296f      	cmp	r1, #111	; 0x6f
 801718e:	d020      	beq.n	80171d2 <_printf_i+0xb2>
 8017190:	2970      	cmp	r1, #112	; 0x70
 8017192:	d1dd      	bne.n	8017150 <_printf_i+0x30>
 8017194:	6823      	ldr	r3, [r4, #0]
 8017196:	f043 0320 	orr.w	r3, r3, #32
 801719a:	6023      	str	r3, [r4, #0]
 801719c:	e003      	b.n	80171a6 <_printf_i+0x86>
 801719e:	2975      	cmp	r1, #117	; 0x75
 80171a0:	d017      	beq.n	80171d2 <_printf_i+0xb2>
 80171a2:	2978      	cmp	r1, #120	; 0x78
 80171a4:	d1d4      	bne.n	8017150 <_printf_i+0x30>
 80171a6:	2378      	movs	r3, #120	; 0x78
 80171a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80171ac:	4864      	ldr	r0, [pc, #400]	; (8017340 <_printf_i+0x220>)
 80171ae:	e055      	b.n	801725c <_printf_i+0x13c>
 80171b0:	6813      	ldr	r3, [r2, #0]
 80171b2:	1d19      	adds	r1, r3, #4
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	6011      	str	r1, [r2, #0]
 80171b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80171bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80171c0:	2301      	movs	r3, #1
 80171c2:	e08c      	b.n	80172de <_printf_i+0x1be>
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	6011      	str	r1, [r2, #0]
 80171c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80171cc:	bf18      	it	ne
 80171ce:	b21b      	sxthne	r3, r3
 80171d0:	e7cf      	b.n	8017172 <_printf_i+0x52>
 80171d2:	6813      	ldr	r3, [r2, #0]
 80171d4:	6825      	ldr	r5, [r4, #0]
 80171d6:	1d18      	adds	r0, r3, #4
 80171d8:	6010      	str	r0, [r2, #0]
 80171da:	0628      	lsls	r0, r5, #24
 80171dc:	d501      	bpl.n	80171e2 <_printf_i+0xc2>
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	e002      	b.n	80171e8 <_printf_i+0xc8>
 80171e2:	0668      	lsls	r0, r5, #25
 80171e4:	d5fb      	bpl.n	80171de <_printf_i+0xbe>
 80171e6:	881b      	ldrh	r3, [r3, #0]
 80171e8:	4854      	ldr	r0, [pc, #336]	; (801733c <_printf_i+0x21c>)
 80171ea:	296f      	cmp	r1, #111	; 0x6f
 80171ec:	bf14      	ite	ne
 80171ee:	220a      	movne	r2, #10
 80171f0:	2208      	moveq	r2, #8
 80171f2:	2100      	movs	r1, #0
 80171f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80171f8:	6865      	ldr	r5, [r4, #4]
 80171fa:	60a5      	str	r5, [r4, #8]
 80171fc:	2d00      	cmp	r5, #0
 80171fe:	f2c0 8095 	blt.w	801732c <_printf_i+0x20c>
 8017202:	6821      	ldr	r1, [r4, #0]
 8017204:	f021 0104 	bic.w	r1, r1, #4
 8017208:	6021      	str	r1, [r4, #0]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d13d      	bne.n	801728a <_printf_i+0x16a>
 801720e:	2d00      	cmp	r5, #0
 8017210:	f040 808e 	bne.w	8017330 <_printf_i+0x210>
 8017214:	4665      	mov	r5, ip
 8017216:	2a08      	cmp	r2, #8
 8017218:	d10b      	bne.n	8017232 <_printf_i+0x112>
 801721a:	6823      	ldr	r3, [r4, #0]
 801721c:	07db      	lsls	r3, r3, #31
 801721e:	d508      	bpl.n	8017232 <_printf_i+0x112>
 8017220:	6923      	ldr	r3, [r4, #16]
 8017222:	6862      	ldr	r2, [r4, #4]
 8017224:	429a      	cmp	r2, r3
 8017226:	bfde      	ittt	le
 8017228:	2330      	movle	r3, #48	; 0x30
 801722a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801722e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017232:	ebac 0305 	sub.w	r3, ip, r5
 8017236:	6123      	str	r3, [r4, #16]
 8017238:	f8cd 8000 	str.w	r8, [sp]
 801723c:	463b      	mov	r3, r7
 801723e:	aa03      	add	r2, sp, #12
 8017240:	4621      	mov	r1, r4
 8017242:	4630      	mov	r0, r6
 8017244:	f7ff fef6 	bl	8017034 <_printf_common>
 8017248:	3001      	adds	r0, #1
 801724a:	d14d      	bne.n	80172e8 <_printf_i+0x1c8>
 801724c:	f04f 30ff 	mov.w	r0, #4294967295
 8017250:	b005      	add	sp, #20
 8017252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017256:	4839      	ldr	r0, [pc, #228]	; (801733c <_printf_i+0x21c>)
 8017258:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801725c:	6813      	ldr	r3, [r2, #0]
 801725e:	6821      	ldr	r1, [r4, #0]
 8017260:	1d1d      	adds	r5, r3, #4
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	6015      	str	r5, [r2, #0]
 8017266:	060a      	lsls	r2, r1, #24
 8017268:	d50b      	bpl.n	8017282 <_printf_i+0x162>
 801726a:	07ca      	lsls	r2, r1, #31
 801726c:	bf44      	itt	mi
 801726e:	f041 0120 	orrmi.w	r1, r1, #32
 8017272:	6021      	strmi	r1, [r4, #0]
 8017274:	b91b      	cbnz	r3, 801727e <_printf_i+0x15e>
 8017276:	6822      	ldr	r2, [r4, #0]
 8017278:	f022 0220 	bic.w	r2, r2, #32
 801727c:	6022      	str	r2, [r4, #0]
 801727e:	2210      	movs	r2, #16
 8017280:	e7b7      	b.n	80171f2 <_printf_i+0xd2>
 8017282:	064d      	lsls	r5, r1, #25
 8017284:	bf48      	it	mi
 8017286:	b29b      	uxthmi	r3, r3
 8017288:	e7ef      	b.n	801726a <_printf_i+0x14a>
 801728a:	4665      	mov	r5, ip
 801728c:	fbb3 f1f2 	udiv	r1, r3, r2
 8017290:	fb02 3311 	mls	r3, r2, r1, r3
 8017294:	5cc3      	ldrb	r3, [r0, r3]
 8017296:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801729a:	460b      	mov	r3, r1
 801729c:	2900      	cmp	r1, #0
 801729e:	d1f5      	bne.n	801728c <_printf_i+0x16c>
 80172a0:	e7b9      	b.n	8017216 <_printf_i+0xf6>
 80172a2:	6813      	ldr	r3, [r2, #0]
 80172a4:	6825      	ldr	r5, [r4, #0]
 80172a6:	6961      	ldr	r1, [r4, #20]
 80172a8:	1d18      	adds	r0, r3, #4
 80172aa:	6010      	str	r0, [r2, #0]
 80172ac:	0628      	lsls	r0, r5, #24
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	d501      	bpl.n	80172b6 <_printf_i+0x196>
 80172b2:	6019      	str	r1, [r3, #0]
 80172b4:	e002      	b.n	80172bc <_printf_i+0x19c>
 80172b6:	066a      	lsls	r2, r5, #25
 80172b8:	d5fb      	bpl.n	80172b2 <_printf_i+0x192>
 80172ba:	8019      	strh	r1, [r3, #0]
 80172bc:	2300      	movs	r3, #0
 80172be:	6123      	str	r3, [r4, #16]
 80172c0:	4665      	mov	r5, ip
 80172c2:	e7b9      	b.n	8017238 <_printf_i+0x118>
 80172c4:	6813      	ldr	r3, [r2, #0]
 80172c6:	1d19      	adds	r1, r3, #4
 80172c8:	6011      	str	r1, [r2, #0]
 80172ca:	681d      	ldr	r5, [r3, #0]
 80172cc:	6862      	ldr	r2, [r4, #4]
 80172ce:	2100      	movs	r1, #0
 80172d0:	4628      	mov	r0, r5
 80172d2:	f7f4 febd 	bl	800c050 <memchr>
 80172d6:	b108      	cbz	r0, 80172dc <_printf_i+0x1bc>
 80172d8:	1b40      	subs	r0, r0, r5
 80172da:	6060      	str	r0, [r4, #4]
 80172dc:	6863      	ldr	r3, [r4, #4]
 80172de:	6123      	str	r3, [r4, #16]
 80172e0:	2300      	movs	r3, #0
 80172e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172e6:	e7a7      	b.n	8017238 <_printf_i+0x118>
 80172e8:	6923      	ldr	r3, [r4, #16]
 80172ea:	462a      	mov	r2, r5
 80172ec:	4639      	mov	r1, r7
 80172ee:	4630      	mov	r0, r6
 80172f0:	47c0      	blx	r8
 80172f2:	3001      	adds	r0, #1
 80172f4:	d0aa      	beq.n	801724c <_printf_i+0x12c>
 80172f6:	6823      	ldr	r3, [r4, #0]
 80172f8:	079b      	lsls	r3, r3, #30
 80172fa:	d413      	bmi.n	8017324 <_printf_i+0x204>
 80172fc:	68e0      	ldr	r0, [r4, #12]
 80172fe:	9b03      	ldr	r3, [sp, #12]
 8017300:	4298      	cmp	r0, r3
 8017302:	bfb8      	it	lt
 8017304:	4618      	movlt	r0, r3
 8017306:	e7a3      	b.n	8017250 <_printf_i+0x130>
 8017308:	2301      	movs	r3, #1
 801730a:	464a      	mov	r2, r9
 801730c:	4639      	mov	r1, r7
 801730e:	4630      	mov	r0, r6
 8017310:	47c0      	blx	r8
 8017312:	3001      	adds	r0, #1
 8017314:	d09a      	beq.n	801724c <_printf_i+0x12c>
 8017316:	3501      	adds	r5, #1
 8017318:	68e3      	ldr	r3, [r4, #12]
 801731a:	9a03      	ldr	r2, [sp, #12]
 801731c:	1a9b      	subs	r3, r3, r2
 801731e:	42ab      	cmp	r3, r5
 8017320:	dcf2      	bgt.n	8017308 <_printf_i+0x1e8>
 8017322:	e7eb      	b.n	80172fc <_printf_i+0x1dc>
 8017324:	2500      	movs	r5, #0
 8017326:	f104 0919 	add.w	r9, r4, #25
 801732a:	e7f5      	b.n	8017318 <_printf_i+0x1f8>
 801732c:	2b00      	cmp	r3, #0
 801732e:	d1ac      	bne.n	801728a <_printf_i+0x16a>
 8017330:	7803      	ldrb	r3, [r0, #0]
 8017332:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017336:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801733a:	e76c      	b.n	8017216 <_printf_i+0xf6>
 801733c:	080187a3 	.word	0x080187a3
 8017340:	080187b4 	.word	0x080187b4

08017344 <__sread>:
 8017344:	b510      	push	{r4, lr}
 8017346:	460c      	mov	r4, r1
 8017348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801734c:	f000 f9a2 	bl	8017694 <_read_r>
 8017350:	2800      	cmp	r0, #0
 8017352:	bfab      	itete	ge
 8017354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017356:	89a3      	ldrhlt	r3, [r4, #12]
 8017358:	181b      	addge	r3, r3, r0
 801735a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801735e:	bfac      	ite	ge
 8017360:	6563      	strge	r3, [r4, #84]	; 0x54
 8017362:	81a3      	strhlt	r3, [r4, #12]
 8017364:	bd10      	pop	{r4, pc}

08017366 <__swrite>:
 8017366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801736a:	461f      	mov	r7, r3
 801736c:	898b      	ldrh	r3, [r1, #12]
 801736e:	05db      	lsls	r3, r3, #23
 8017370:	4605      	mov	r5, r0
 8017372:	460c      	mov	r4, r1
 8017374:	4616      	mov	r6, r2
 8017376:	d505      	bpl.n	8017384 <__swrite+0x1e>
 8017378:	2302      	movs	r3, #2
 801737a:	2200      	movs	r2, #0
 801737c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017380:	f000 f936 	bl	80175f0 <_lseek_r>
 8017384:	89a3      	ldrh	r3, [r4, #12]
 8017386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801738a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801738e:	81a3      	strh	r3, [r4, #12]
 8017390:	4632      	mov	r2, r6
 8017392:	463b      	mov	r3, r7
 8017394:	4628      	mov	r0, r5
 8017396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801739a:	f000 b877 	b.w	801748c <_write_r>

0801739e <__sseek>:
 801739e:	b510      	push	{r4, lr}
 80173a0:	460c      	mov	r4, r1
 80173a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173a6:	f000 f923 	bl	80175f0 <_lseek_r>
 80173aa:	1c43      	adds	r3, r0, #1
 80173ac:	89a3      	ldrh	r3, [r4, #12]
 80173ae:	bf15      	itete	ne
 80173b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80173b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80173b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80173ba:	81a3      	strheq	r3, [r4, #12]
 80173bc:	bf18      	it	ne
 80173be:	81a3      	strhne	r3, [r4, #12]
 80173c0:	bd10      	pop	{r4, pc}

080173c2 <__sclose>:
 80173c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173c6:	f000 b8e1 	b.w	801758c <_close_r>
	...

080173cc <__swbuf_r>:
 80173cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173ce:	460e      	mov	r6, r1
 80173d0:	4614      	mov	r4, r2
 80173d2:	4605      	mov	r5, r0
 80173d4:	b118      	cbz	r0, 80173de <__swbuf_r+0x12>
 80173d6:	6983      	ldr	r3, [r0, #24]
 80173d8:	b90b      	cbnz	r3, 80173de <__swbuf_r+0x12>
 80173da:	f7ff fa93 	bl	8016904 <__sinit>
 80173de:	4b21      	ldr	r3, [pc, #132]	; (8017464 <__swbuf_r+0x98>)
 80173e0:	429c      	cmp	r4, r3
 80173e2:	d12a      	bne.n	801743a <__swbuf_r+0x6e>
 80173e4:	686c      	ldr	r4, [r5, #4]
 80173e6:	69a3      	ldr	r3, [r4, #24]
 80173e8:	60a3      	str	r3, [r4, #8]
 80173ea:	89a3      	ldrh	r3, [r4, #12]
 80173ec:	071a      	lsls	r2, r3, #28
 80173ee:	d52e      	bpl.n	801744e <__swbuf_r+0x82>
 80173f0:	6923      	ldr	r3, [r4, #16]
 80173f2:	b363      	cbz	r3, 801744e <__swbuf_r+0x82>
 80173f4:	6923      	ldr	r3, [r4, #16]
 80173f6:	6820      	ldr	r0, [r4, #0]
 80173f8:	1ac0      	subs	r0, r0, r3
 80173fa:	6963      	ldr	r3, [r4, #20]
 80173fc:	b2f6      	uxtb	r6, r6
 80173fe:	4283      	cmp	r3, r0
 8017400:	4637      	mov	r7, r6
 8017402:	dc04      	bgt.n	801740e <__swbuf_r+0x42>
 8017404:	4621      	mov	r1, r4
 8017406:	4628      	mov	r0, r5
 8017408:	f7ff fa12 	bl	8016830 <_fflush_r>
 801740c:	bb28      	cbnz	r0, 801745a <__swbuf_r+0x8e>
 801740e:	68a3      	ldr	r3, [r4, #8]
 8017410:	3b01      	subs	r3, #1
 8017412:	60a3      	str	r3, [r4, #8]
 8017414:	6823      	ldr	r3, [r4, #0]
 8017416:	1c5a      	adds	r2, r3, #1
 8017418:	6022      	str	r2, [r4, #0]
 801741a:	701e      	strb	r6, [r3, #0]
 801741c:	6963      	ldr	r3, [r4, #20]
 801741e:	3001      	adds	r0, #1
 8017420:	4283      	cmp	r3, r0
 8017422:	d004      	beq.n	801742e <__swbuf_r+0x62>
 8017424:	89a3      	ldrh	r3, [r4, #12]
 8017426:	07db      	lsls	r3, r3, #31
 8017428:	d519      	bpl.n	801745e <__swbuf_r+0x92>
 801742a:	2e0a      	cmp	r6, #10
 801742c:	d117      	bne.n	801745e <__swbuf_r+0x92>
 801742e:	4621      	mov	r1, r4
 8017430:	4628      	mov	r0, r5
 8017432:	f7ff f9fd 	bl	8016830 <_fflush_r>
 8017436:	b190      	cbz	r0, 801745e <__swbuf_r+0x92>
 8017438:	e00f      	b.n	801745a <__swbuf_r+0x8e>
 801743a:	4b0b      	ldr	r3, [pc, #44]	; (8017468 <__swbuf_r+0x9c>)
 801743c:	429c      	cmp	r4, r3
 801743e:	d101      	bne.n	8017444 <__swbuf_r+0x78>
 8017440:	68ac      	ldr	r4, [r5, #8]
 8017442:	e7d0      	b.n	80173e6 <__swbuf_r+0x1a>
 8017444:	4b09      	ldr	r3, [pc, #36]	; (801746c <__swbuf_r+0xa0>)
 8017446:	429c      	cmp	r4, r3
 8017448:	bf08      	it	eq
 801744a:	68ec      	ldreq	r4, [r5, #12]
 801744c:	e7cb      	b.n	80173e6 <__swbuf_r+0x1a>
 801744e:	4621      	mov	r1, r4
 8017450:	4628      	mov	r0, r5
 8017452:	f000 f82d 	bl	80174b0 <__swsetup_r>
 8017456:	2800      	cmp	r0, #0
 8017458:	d0cc      	beq.n	80173f4 <__swbuf_r+0x28>
 801745a:	f04f 37ff 	mov.w	r7, #4294967295
 801745e:	4638      	mov	r0, r7
 8017460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017462:	bf00      	nop
 8017464:	0801874c 	.word	0x0801874c
 8017468:	0801876c 	.word	0x0801876c
 801746c:	0801872c 	.word	0x0801872c

08017470 <__ascii_wctomb>:
 8017470:	b149      	cbz	r1, 8017486 <__ascii_wctomb+0x16>
 8017472:	2aff      	cmp	r2, #255	; 0xff
 8017474:	bf85      	ittet	hi
 8017476:	238a      	movhi	r3, #138	; 0x8a
 8017478:	6003      	strhi	r3, [r0, #0]
 801747a:	700a      	strbls	r2, [r1, #0]
 801747c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017480:	bf98      	it	ls
 8017482:	2001      	movls	r0, #1
 8017484:	4770      	bx	lr
 8017486:	4608      	mov	r0, r1
 8017488:	4770      	bx	lr
	...

0801748c <_write_r>:
 801748c:	b538      	push	{r3, r4, r5, lr}
 801748e:	4c07      	ldr	r4, [pc, #28]	; (80174ac <_write_r+0x20>)
 8017490:	4605      	mov	r5, r0
 8017492:	4608      	mov	r0, r1
 8017494:	4611      	mov	r1, r2
 8017496:	2200      	movs	r2, #0
 8017498:	6022      	str	r2, [r4, #0]
 801749a:	461a      	mov	r2, r3
 801749c:	f7f6 fc84 	bl	800dda8 <_write>
 80174a0:	1c43      	adds	r3, r0, #1
 80174a2:	d102      	bne.n	80174aa <_write_r+0x1e>
 80174a4:	6823      	ldr	r3, [r4, #0]
 80174a6:	b103      	cbz	r3, 80174aa <_write_r+0x1e>
 80174a8:	602b      	str	r3, [r5, #0]
 80174aa:	bd38      	pop	{r3, r4, r5, pc}
 80174ac:	20005e9c 	.word	0x20005e9c

080174b0 <__swsetup_r>:
 80174b0:	4b32      	ldr	r3, [pc, #200]	; (801757c <__swsetup_r+0xcc>)
 80174b2:	b570      	push	{r4, r5, r6, lr}
 80174b4:	681d      	ldr	r5, [r3, #0]
 80174b6:	4606      	mov	r6, r0
 80174b8:	460c      	mov	r4, r1
 80174ba:	b125      	cbz	r5, 80174c6 <__swsetup_r+0x16>
 80174bc:	69ab      	ldr	r3, [r5, #24]
 80174be:	b913      	cbnz	r3, 80174c6 <__swsetup_r+0x16>
 80174c0:	4628      	mov	r0, r5
 80174c2:	f7ff fa1f 	bl	8016904 <__sinit>
 80174c6:	4b2e      	ldr	r3, [pc, #184]	; (8017580 <__swsetup_r+0xd0>)
 80174c8:	429c      	cmp	r4, r3
 80174ca:	d10f      	bne.n	80174ec <__swsetup_r+0x3c>
 80174cc:	686c      	ldr	r4, [r5, #4]
 80174ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174d2:	b29a      	uxth	r2, r3
 80174d4:	0715      	lsls	r5, r2, #28
 80174d6:	d42c      	bmi.n	8017532 <__swsetup_r+0x82>
 80174d8:	06d0      	lsls	r0, r2, #27
 80174da:	d411      	bmi.n	8017500 <__swsetup_r+0x50>
 80174dc:	2209      	movs	r2, #9
 80174de:	6032      	str	r2, [r6, #0]
 80174e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174e4:	81a3      	strh	r3, [r4, #12]
 80174e6:	f04f 30ff 	mov.w	r0, #4294967295
 80174ea:	e03e      	b.n	801756a <__swsetup_r+0xba>
 80174ec:	4b25      	ldr	r3, [pc, #148]	; (8017584 <__swsetup_r+0xd4>)
 80174ee:	429c      	cmp	r4, r3
 80174f0:	d101      	bne.n	80174f6 <__swsetup_r+0x46>
 80174f2:	68ac      	ldr	r4, [r5, #8]
 80174f4:	e7eb      	b.n	80174ce <__swsetup_r+0x1e>
 80174f6:	4b24      	ldr	r3, [pc, #144]	; (8017588 <__swsetup_r+0xd8>)
 80174f8:	429c      	cmp	r4, r3
 80174fa:	bf08      	it	eq
 80174fc:	68ec      	ldreq	r4, [r5, #12]
 80174fe:	e7e6      	b.n	80174ce <__swsetup_r+0x1e>
 8017500:	0751      	lsls	r1, r2, #29
 8017502:	d512      	bpl.n	801752a <__swsetup_r+0x7a>
 8017504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017506:	b141      	cbz	r1, 801751a <__swsetup_r+0x6a>
 8017508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801750c:	4299      	cmp	r1, r3
 801750e:	d002      	beq.n	8017516 <__swsetup_r+0x66>
 8017510:	4630      	mov	r0, r6
 8017512:	f7fe fecf 	bl	80162b4 <_free_r>
 8017516:	2300      	movs	r3, #0
 8017518:	6363      	str	r3, [r4, #52]	; 0x34
 801751a:	89a3      	ldrh	r3, [r4, #12]
 801751c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017520:	81a3      	strh	r3, [r4, #12]
 8017522:	2300      	movs	r3, #0
 8017524:	6063      	str	r3, [r4, #4]
 8017526:	6923      	ldr	r3, [r4, #16]
 8017528:	6023      	str	r3, [r4, #0]
 801752a:	89a3      	ldrh	r3, [r4, #12]
 801752c:	f043 0308 	orr.w	r3, r3, #8
 8017530:	81a3      	strh	r3, [r4, #12]
 8017532:	6923      	ldr	r3, [r4, #16]
 8017534:	b94b      	cbnz	r3, 801754a <__swsetup_r+0x9a>
 8017536:	89a3      	ldrh	r3, [r4, #12]
 8017538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801753c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017540:	d003      	beq.n	801754a <__swsetup_r+0x9a>
 8017542:	4621      	mov	r1, r4
 8017544:	4630      	mov	r0, r6
 8017546:	f7ff fa8f 	bl	8016a68 <__smakebuf_r>
 801754a:	89a2      	ldrh	r2, [r4, #12]
 801754c:	f012 0301 	ands.w	r3, r2, #1
 8017550:	d00c      	beq.n	801756c <__swsetup_r+0xbc>
 8017552:	2300      	movs	r3, #0
 8017554:	60a3      	str	r3, [r4, #8]
 8017556:	6963      	ldr	r3, [r4, #20]
 8017558:	425b      	negs	r3, r3
 801755a:	61a3      	str	r3, [r4, #24]
 801755c:	6923      	ldr	r3, [r4, #16]
 801755e:	b953      	cbnz	r3, 8017576 <__swsetup_r+0xc6>
 8017560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017564:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017568:	d1ba      	bne.n	80174e0 <__swsetup_r+0x30>
 801756a:	bd70      	pop	{r4, r5, r6, pc}
 801756c:	0792      	lsls	r2, r2, #30
 801756e:	bf58      	it	pl
 8017570:	6963      	ldrpl	r3, [r4, #20]
 8017572:	60a3      	str	r3, [r4, #8]
 8017574:	e7f2      	b.n	801755c <__swsetup_r+0xac>
 8017576:	2000      	movs	r0, #0
 8017578:	e7f7      	b.n	801756a <__swsetup_r+0xba>
 801757a:	bf00      	nop
 801757c:	2000003c 	.word	0x2000003c
 8017580:	0801874c 	.word	0x0801874c
 8017584:	0801876c 	.word	0x0801876c
 8017588:	0801872c 	.word	0x0801872c

0801758c <_close_r>:
 801758c:	b538      	push	{r3, r4, r5, lr}
 801758e:	4c06      	ldr	r4, [pc, #24]	; (80175a8 <_close_r+0x1c>)
 8017590:	2300      	movs	r3, #0
 8017592:	4605      	mov	r5, r0
 8017594:	4608      	mov	r0, r1
 8017596:	6023      	str	r3, [r4, #0]
 8017598:	f7f6 fc20 	bl	800dddc <_close>
 801759c:	1c43      	adds	r3, r0, #1
 801759e:	d102      	bne.n	80175a6 <_close_r+0x1a>
 80175a0:	6823      	ldr	r3, [r4, #0]
 80175a2:	b103      	cbz	r3, 80175a6 <_close_r+0x1a>
 80175a4:	602b      	str	r3, [r5, #0]
 80175a6:	bd38      	pop	{r3, r4, r5, pc}
 80175a8:	20005e9c 	.word	0x20005e9c

080175ac <_fstat_r>:
 80175ac:	b538      	push	{r3, r4, r5, lr}
 80175ae:	4c07      	ldr	r4, [pc, #28]	; (80175cc <_fstat_r+0x20>)
 80175b0:	2300      	movs	r3, #0
 80175b2:	4605      	mov	r5, r0
 80175b4:	4608      	mov	r0, r1
 80175b6:	4611      	mov	r1, r2
 80175b8:	6023      	str	r3, [r4, #0]
 80175ba:	f7f6 fc3b 	bl	800de34 <_fstat>
 80175be:	1c43      	adds	r3, r0, #1
 80175c0:	d102      	bne.n	80175c8 <_fstat_r+0x1c>
 80175c2:	6823      	ldr	r3, [r4, #0]
 80175c4:	b103      	cbz	r3, 80175c8 <_fstat_r+0x1c>
 80175c6:	602b      	str	r3, [r5, #0]
 80175c8:	bd38      	pop	{r3, r4, r5, pc}
 80175ca:	bf00      	nop
 80175cc:	20005e9c 	.word	0x20005e9c

080175d0 <_isatty_r>:
 80175d0:	b538      	push	{r3, r4, r5, lr}
 80175d2:	4c06      	ldr	r4, [pc, #24]	; (80175ec <_isatty_r+0x1c>)
 80175d4:	2300      	movs	r3, #0
 80175d6:	4605      	mov	r5, r0
 80175d8:	4608      	mov	r0, r1
 80175da:	6023      	str	r3, [r4, #0]
 80175dc:	f7f6 fbd8 	bl	800dd90 <_isatty>
 80175e0:	1c43      	adds	r3, r0, #1
 80175e2:	d102      	bne.n	80175ea <_isatty_r+0x1a>
 80175e4:	6823      	ldr	r3, [r4, #0]
 80175e6:	b103      	cbz	r3, 80175ea <_isatty_r+0x1a>
 80175e8:	602b      	str	r3, [r5, #0]
 80175ea:	bd38      	pop	{r3, r4, r5, pc}
 80175ec:	20005e9c 	.word	0x20005e9c

080175f0 <_lseek_r>:
 80175f0:	b538      	push	{r3, r4, r5, lr}
 80175f2:	4c07      	ldr	r4, [pc, #28]	; (8017610 <_lseek_r+0x20>)
 80175f4:	4605      	mov	r5, r0
 80175f6:	4608      	mov	r0, r1
 80175f8:	4611      	mov	r1, r2
 80175fa:	2200      	movs	r2, #0
 80175fc:	6022      	str	r2, [r4, #0]
 80175fe:	461a      	mov	r2, r3
 8017600:	f7f6 fbf8 	bl	800ddf4 <_lseek>
 8017604:	1c43      	adds	r3, r0, #1
 8017606:	d102      	bne.n	801760e <_lseek_r+0x1e>
 8017608:	6823      	ldr	r3, [r4, #0]
 801760a:	b103      	cbz	r3, 801760e <_lseek_r+0x1e>
 801760c:	602b      	str	r3, [r5, #0]
 801760e:	bd38      	pop	{r3, r4, r5, pc}
 8017610:	20005e9c 	.word	0x20005e9c

08017614 <memmove>:
 8017614:	4288      	cmp	r0, r1
 8017616:	b510      	push	{r4, lr}
 8017618:	eb01 0302 	add.w	r3, r1, r2
 801761c:	d807      	bhi.n	801762e <memmove+0x1a>
 801761e:	1e42      	subs	r2, r0, #1
 8017620:	4299      	cmp	r1, r3
 8017622:	d00a      	beq.n	801763a <memmove+0x26>
 8017624:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017628:	f802 4f01 	strb.w	r4, [r2, #1]!
 801762c:	e7f8      	b.n	8017620 <memmove+0xc>
 801762e:	4283      	cmp	r3, r0
 8017630:	d9f5      	bls.n	801761e <memmove+0xa>
 8017632:	1881      	adds	r1, r0, r2
 8017634:	1ad2      	subs	r2, r2, r3
 8017636:	42d3      	cmn	r3, r2
 8017638:	d100      	bne.n	801763c <memmove+0x28>
 801763a:	bd10      	pop	{r4, pc}
 801763c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017640:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017644:	e7f7      	b.n	8017636 <memmove+0x22>

08017646 <_realloc_r>:
 8017646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017648:	4607      	mov	r7, r0
 801764a:	4614      	mov	r4, r2
 801764c:	460e      	mov	r6, r1
 801764e:	b921      	cbnz	r1, 801765a <_realloc_r+0x14>
 8017650:	4611      	mov	r1, r2
 8017652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017656:	f7fe be7b 	b.w	8016350 <_malloc_r>
 801765a:	b922      	cbnz	r2, 8017666 <_realloc_r+0x20>
 801765c:	f7fe fe2a 	bl	80162b4 <_free_r>
 8017660:	4625      	mov	r5, r4
 8017662:	4628      	mov	r0, r5
 8017664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017666:	f000 f827 	bl	80176b8 <_malloc_usable_size_r>
 801766a:	42a0      	cmp	r0, r4
 801766c:	d20f      	bcs.n	801768e <_realloc_r+0x48>
 801766e:	4621      	mov	r1, r4
 8017670:	4638      	mov	r0, r7
 8017672:	f7fe fe6d 	bl	8016350 <_malloc_r>
 8017676:	4605      	mov	r5, r0
 8017678:	2800      	cmp	r0, #0
 801767a:	d0f2      	beq.n	8017662 <_realloc_r+0x1c>
 801767c:	4631      	mov	r1, r6
 801767e:	4622      	mov	r2, r4
 8017680:	f7fe fe04 	bl	801628c <memcpy>
 8017684:	4631      	mov	r1, r6
 8017686:	4638      	mov	r0, r7
 8017688:	f7fe fe14 	bl	80162b4 <_free_r>
 801768c:	e7e9      	b.n	8017662 <_realloc_r+0x1c>
 801768e:	4635      	mov	r5, r6
 8017690:	e7e7      	b.n	8017662 <_realloc_r+0x1c>
	...

08017694 <_read_r>:
 8017694:	b538      	push	{r3, r4, r5, lr}
 8017696:	4c07      	ldr	r4, [pc, #28]	; (80176b4 <_read_r+0x20>)
 8017698:	4605      	mov	r5, r0
 801769a:	4608      	mov	r0, r1
 801769c:	4611      	mov	r1, r2
 801769e:	2200      	movs	r2, #0
 80176a0:	6022      	str	r2, [r4, #0]
 80176a2:	461a      	mov	r2, r3
 80176a4:	f7f6 fbae 	bl	800de04 <_read>
 80176a8:	1c43      	adds	r3, r0, #1
 80176aa:	d102      	bne.n	80176b2 <_read_r+0x1e>
 80176ac:	6823      	ldr	r3, [r4, #0]
 80176ae:	b103      	cbz	r3, 80176b2 <_read_r+0x1e>
 80176b0:	602b      	str	r3, [r5, #0]
 80176b2:	bd38      	pop	{r3, r4, r5, pc}
 80176b4:	20005e9c 	.word	0x20005e9c

080176b8 <_malloc_usable_size_r>:
 80176b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80176bc:	1f18      	subs	r0, r3, #4
 80176be:	2b00      	cmp	r3, #0
 80176c0:	bfbc      	itt	lt
 80176c2:	580b      	ldrlt	r3, [r1, r0]
 80176c4:	18c0      	addlt	r0, r0, r3
 80176c6:	4770      	bx	lr

080176c8 <_init>:
 80176c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ca:	bf00      	nop
 80176cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176ce:	bc08      	pop	{r3}
 80176d0:	469e      	mov	lr, r3
 80176d2:	4770      	bx	lr

080176d4 <_fini>:
 80176d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176d6:	bf00      	nop
 80176d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176da:	bc08      	pop	{r3}
 80176dc:	469e      	mov	lr, r3
 80176de:	4770      	bx	lr
