
acm_bootloader01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b264  0800c000  0800c000  0001c000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017264  08017264  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08017264  08017264  00027264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801726c  0801726c  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801726c  0801726c  0002726c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017270  08017270  00027270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08017274  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ca0  20000258  080174cc  00030258  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20005ef8  080174cc  00035ef8  2**0
                  ALLOC
 11 .newsection   00000004  10000000  10000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 13 .debug_info   00046220  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00009593  00000000  00000000  000764a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019deb  00000000  00000000  0007fa3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001cc0  00000000  00000000  00099828  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002680  00000000  00000000  0009b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002dbb7  00000000  00000000  0009db68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00027022  00000000  00000000  000cb71f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000e1267  00000000  00000000  000f2741  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001d39a8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c28  00000000  00000000  001d3a24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000258 	.word	0x20000258
 800c01c:	00000000 	.word	0x00000000
 800c020:	0801724c 	.word	0x0801724c

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	2000025c 	.word	0x2000025c
 800c03c:	0801724c 	.word	0x0801724c

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <memchr>:
 800c050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c054:	2a10      	cmp	r2, #16
 800c056:	db2b      	blt.n	800c0b0 <memchr+0x60>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	d008      	beq.n	800c070 <memchr+0x20>
 800c05e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c062:	3a01      	subs	r2, #1
 800c064:	428b      	cmp	r3, r1
 800c066:	d02d      	beq.n	800c0c4 <memchr+0x74>
 800c068:	f010 0f07 	tst.w	r0, #7
 800c06c:	b342      	cbz	r2, 800c0c0 <memchr+0x70>
 800c06e:	d1f6      	bne.n	800c05e <memchr+0xe>
 800c070:	b4f0      	push	{r4, r5, r6, r7}
 800c072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c07a:	f022 0407 	bic.w	r4, r2, #7
 800c07e:	f07f 0700 	mvns.w	r7, #0
 800c082:	2300      	movs	r3, #0
 800c084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c088:	3c08      	subs	r4, #8
 800c08a:	ea85 0501 	eor.w	r5, r5, r1
 800c08e:	ea86 0601 	eor.w	r6, r6, r1
 800c092:	fa85 f547 	uadd8	r5, r5, r7
 800c096:	faa3 f587 	sel	r5, r3, r7
 800c09a:	fa86 f647 	uadd8	r6, r6, r7
 800c09e:	faa5 f687 	sel	r6, r5, r7
 800c0a2:	b98e      	cbnz	r6, 800c0c8 <memchr+0x78>
 800c0a4:	d1ee      	bne.n	800c084 <memchr+0x34>
 800c0a6:	bcf0      	pop	{r4, r5, r6, r7}
 800c0a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c0ac:	f002 0207 	and.w	r2, r2, #7
 800c0b0:	b132      	cbz	r2, 800c0c0 <memchr+0x70>
 800c0b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	ea83 0301 	eor.w	r3, r3, r1
 800c0bc:	b113      	cbz	r3, 800c0c4 <memchr+0x74>
 800c0be:	d1f8      	bne.n	800c0b2 <memchr+0x62>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4770      	bx	lr
 800c0c4:	3801      	subs	r0, #1
 800c0c6:	4770      	bx	lr
 800c0c8:	2d00      	cmp	r5, #0
 800c0ca:	bf06      	itte	eq
 800c0cc:	4635      	moveq	r5, r6
 800c0ce:	3803      	subeq	r0, #3
 800c0d0:	3807      	subne	r0, #7
 800c0d2:	f015 0f01 	tst.w	r5, #1
 800c0d6:	d107      	bne.n	800c0e8 <memchr+0x98>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f415 7f80 	tst.w	r5, #256	; 0x100
 800c0de:	bf02      	ittt	eq
 800c0e0:	3001      	addeq	r0, #1
 800c0e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800c0e6:	3001      	addeq	r0, #1
 800c0e8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0ea:	3801      	subs	r0, #1
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <__aeabi_uldivmod>:
 800c0f0:	b953      	cbnz	r3, 800c108 <__aeabi_uldivmod+0x18>
 800c0f2:	b94a      	cbnz	r2, 800c108 <__aeabi_uldivmod+0x18>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	bf08      	it	eq
 800c0f8:	2800      	cmpeq	r0, #0
 800c0fa:	bf1c      	itt	ne
 800c0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800c100:	f04f 30ff 	movne.w	r0, #4294967295
 800c104:	f000 b972 	b.w	800c3ec <__aeabi_idiv0>
 800c108:	f1ad 0c08 	sub.w	ip, sp, #8
 800c10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c110:	f000 f806 	bl	800c120 <__udivmoddi4>
 800c114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr

0800c120 <__udivmoddi4>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	9e08      	ldr	r6, [sp, #32]
 800c126:	4604      	mov	r4, r0
 800c128:	4688      	mov	r8, r1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d14b      	bne.n	800c1c6 <__udivmoddi4+0xa6>
 800c12e:	428a      	cmp	r2, r1
 800c130:	4615      	mov	r5, r2
 800c132:	d967      	bls.n	800c204 <__udivmoddi4+0xe4>
 800c134:	fab2 f282 	clz	r2, r2
 800c138:	b14a      	cbz	r2, 800c14e <__udivmoddi4+0x2e>
 800c13a:	f1c2 0720 	rsb	r7, r2, #32
 800c13e:	fa01 f302 	lsl.w	r3, r1, r2
 800c142:	fa20 f707 	lsr.w	r7, r0, r7
 800c146:	4095      	lsls	r5, r2
 800c148:	ea47 0803 	orr.w	r8, r7, r3
 800c14c:	4094      	lsls	r4, r2
 800c14e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c152:	0c23      	lsrs	r3, r4, #16
 800c154:	fbb8 f7fe 	udiv	r7, r8, lr
 800c158:	fa1f fc85 	uxth.w	ip, r5
 800c15c:	fb0e 8817 	mls	r8, lr, r7, r8
 800c160:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800c164:	fb07 f10c 	mul.w	r1, r7, ip
 800c168:	4299      	cmp	r1, r3
 800c16a:	d909      	bls.n	800c180 <__udivmoddi4+0x60>
 800c16c:	18eb      	adds	r3, r5, r3
 800c16e:	f107 30ff 	add.w	r0, r7, #4294967295
 800c172:	f080 811b 	bcs.w	800c3ac <__udivmoddi4+0x28c>
 800c176:	4299      	cmp	r1, r3
 800c178:	f240 8118 	bls.w	800c3ac <__udivmoddi4+0x28c>
 800c17c:	3f02      	subs	r7, #2
 800c17e:	442b      	add	r3, r5
 800c180:	1a5b      	subs	r3, r3, r1
 800c182:	b2a4      	uxth	r4, r4
 800c184:	fbb3 f0fe 	udiv	r0, r3, lr
 800c188:	fb0e 3310 	mls	r3, lr, r0, r3
 800c18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c190:	fb00 fc0c 	mul.w	ip, r0, ip
 800c194:	45a4      	cmp	ip, r4
 800c196:	d909      	bls.n	800c1ac <__udivmoddi4+0x8c>
 800c198:	192c      	adds	r4, r5, r4
 800c19a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c19e:	f080 8107 	bcs.w	800c3b0 <__udivmoddi4+0x290>
 800c1a2:	45a4      	cmp	ip, r4
 800c1a4:	f240 8104 	bls.w	800c3b0 <__udivmoddi4+0x290>
 800c1a8:	3802      	subs	r0, #2
 800c1aa:	442c      	add	r4, r5
 800c1ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800c1b0:	eba4 040c 	sub.w	r4, r4, ip
 800c1b4:	2700      	movs	r7, #0
 800c1b6:	b11e      	cbz	r6, 800c1c0 <__udivmoddi4+0xa0>
 800c1b8:	40d4      	lsrs	r4, r2
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e9c6 4300 	strd	r4, r3, [r6]
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	428b      	cmp	r3, r1
 800c1c8:	d909      	bls.n	800c1de <__udivmoddi4+0xbe>
 800c1ca:	2e00      	cmp	r6, #0
 800c1cc:	f000 80eb 	beq.w	800c3a6 <__udivmoddi4+0x286>
 800c1d0:	2700      	movs	r7, #0
 800c1d2:	e9c6 0100 	strd	r0, r1, [r6]
 800c1d6:	4638      	mov	r0, r7
 800c1d8:	4639      	mov	r1, r7
 800c1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1de:	fab3 f783 	clz	r7, r3
 800c1e2:	2f00      	cmp	r7, #0
 800c1e4:	d147      	bne.n	800c276 <__udivmoddi4+0x156>
 800c1e6:	428b      	cmp	r3, r1
 800c1e8:	d302      	bcc.n	800c1f0 <__udivmoddi4+0xd0>
 800c1ea:	4282      	cmp	r2, r0
 800c1ec:	f200 80fa 	bhi.w	800c3e4 <__udivmoddi4+0x2c4>
 800c1f0:	1a84      	subs	r4, r0, r2
 800c1f2:	eb61 0303 	sbc.w	r3, r1, r3
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	4698      	mov	r8, r3
 800c1fa:	2e00      	cmp	r6, #0
 800c1fc:	d0e0      	beq.n	800c1c0 <__udivmoddi4+0xa0>
 800c1fe:	e9c6 4800 	strd	r4, r8, [r6]
 800c202:	e7dd      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c204:	b902      	cbnz	r2, 800c208 <__udivmoddi4+0xe8>
 800c206:	deff      	udf	#255	; 0xff
 800c208:	fab2 f282 	clz	r2, r2
 800c20c:	2a00      	cmp	r2, #0
 800c20e:	f040 808f 	bne.w	800c330 <__udivmoddi4+0x210>
 800c212:	1b49      	subs	r1, r1, r5
 800c214:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c218:	fa1f f885 	uxth.w	r8, r5
 800c21c:	2701      	movs	r7, #1
 800c21e:	fbb1 fcfe 	udiv	ip, r1, lr
 800c222:	0c23      	lsrs	r3, r4, #16
 800c224:	fb0e 111c 	mls	r1, lr, ip, r1
 800c228:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c22c:	fb08 f10c 	mul.w	r1, r8, ip
 800c230:	4299      	cmp	r1, r3
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x124>
 800c234:	18eb      	adds	r3, r5, r3
 800c236:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c23a:	d202      	bcs.n	800c242 <__udivmoddi4+0x122>
 800c23c:	4299      	cmp	r1, r3
 800c23e:	f200 80cd 	bhi.w	800c3dc <__udivmoddi4+0x2bc>
 800c242:	4684      	mov	ip, r0
 800c244:	1a59      	subs	r1, r3, r1
 800c246:	b2a3      	uxth	r3, r4
 800c248:	fbb1 f0fe 	udiv	r0, r1, lr
 800c24c:	fb0e 1410 	mls	r4, lr, r0, r1
 800c250:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c254:	fb08 f800 	mul.w	r8, r8, r0
 800c258:	45a0      	cmp	r8, r4
 800c25a:	d907      	bls.n	800c26c <__udivmoddi4+0x14c>
 800c25c:	192c      	adds	r4, r5, r4
 800c25e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c262:	d202      	bcs.n	800c26a <__udivmoddi4+0x14a>
 800c264:	45a0      	cmp	r8, r4
 800c266:	f200 80b6 	bhi.w	800c3d6 <__udivmoddi4+0x2b6>
 800c26a:	4618      	mov	r0, r3
 800c26c:	eba4 0408 	sub.w	r4, r4, r8
 800c270:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c274:	e79f      	b.n	800c1b6 <__udivmoddi4+0x96>
 800c276:	f1c7 0c20 	rsb	ip, r7, #32
 800c27a:	40bb      	lsls	r3, r7
 800c27c:	fa22 fe0c 	lsr.w	lr, r2, ip
 800c280:	ea4e 0e03 	orr.w	lr, lr, r3
 800c284:	fa01 f407 	lsl.w	r4, r1, r7
 800c288:	fa20 f50c 	lsr.w	r5, r0, ip
 800c28c:	fa21 f30c 	lsr.w	r3, r1, ip
 800c290:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800c294:	4325      	orrs	r5, r4
 800c296:	fbb3 f9f8 	udiv	r9, r3, r8
 800c29a:	0c2c      	lsrs	r4, r5, #16
 800c29c:	fb08 3319 	mls	r3, r8, r9, r3
 800c2a0:	fa1f fa8e 	uxth.w	sl, lr
 800c2a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800c2a8:	fb09 f40a 	mul.w	r4, r9, sl
 800c2ac:	429c      	cmp	r4, r3
 800c2ae:	fa02 f207 	lsl.w	r2, r2, r7
 800c2b2:	fa00 f107 	lsl.w	r1, r0, r7
 800c2b6:	d90b      	bls.n	800c2d0 <__udivmoddi4+0x1b0>
 800c2b8:	eb1e 0303 	adds.w	r3, lr, r3
 800c2bc:	f109 30ff 	add.w	r0, r9, #4294967295
 800c2c0:	f080 8087 	bcs.w	800c3d2 <__udivmoddi4+0x2b2>
 800c2c4:	429c      	cmp	r4, r3
 800c2c6:	f240 8084 	bls.w	800c3d2 <__udivmoddi4+0x2b2>
 800c2ca:	f1a9 0902 	sub.w	r9, r9, #2
 800c2ce:	4473      	add	r3, lr
 800c2d0:	1b1b      	subs	r3, r3, r4
 800c2d2:	b2ad      	uxth	r5, r5
 800c2d4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c2d8:	fb08 3310 	mls	r3, r8, r0, r3
 800c2dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800c2e0:	fb00 fa0a 	mul.w	sl, r0, sl
 800c2e4:	45a2      	cmp	sl, r4
 800c2e6:	d908      	bls.n	800c2fa <__udivmoddi4+0x1da>
 800c2e8:	eb1e 0404 	adds.w	r4, lr, r4
 800c2ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2f0:	d26b      	bcs.n	800c3ca <__udivmoddi4+0x2aa>
 800c2f2:	45a2      	cmp	sl, r4
 800c2f4:	d969      	bls.n	800c3ca <__udivmoddi4+0x2aa>
 800c2f6:	3802      	subs	r0, #2
 800c2f8:	4474      	add	r4, lr
 800c2fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2fe:	fba0 8902 	umull	r8, r9, r0, r2
 800c302:	eba4 040a 	sub.w	r4, r4, sl
 800c306:	454c      	cmp	r4, r9
 800c308:	46c2      	mov	sl, r8
 800c30a:	464b      	mov	r3, r9
 800c30c:	d354      	bcc.n	800c3b8 <__udivmoddi4+0x298>
 800c30e:	d051      	beq.n	800c3b4 <__udivmoddi4+0x294>
 800c310:	2e00      	cmp	r6, #0
 800c312:	d069      	beq.n	800c3e8 <__udivmoddi4+0x2c8>
 800c314:	ebb1 050a 	subs.w	r5, r1, sl
 800c318:	eb64 0403 	sbc.w	r4, r4, r3
 800c31c:	fa04 fc0c 	lsl.w	ip, r4, ip
 800c320:	40fd      	lsrs	r5, r7
 800c322:	40fc      	lsrs	r4, r7
 800c324:	ea4c 0505 	orr.w	r5, ip, r5
 800c328:	e9c6 5400 	strd	r5, r4, [r6]
 800c32c:	2700      	movs	r7, #0
 800c32e:	e747      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c330:	f1c2 0320 	rsb	r3, r2, #32
 800c334:	fa20 f703 	lsr.w	r7, r0, r3
 800c338:	4095      	lsls	r5, r2
 800c33a:	fa01 f002 	lsl.w	r0, r1, r2
 800c33e:	fa21 f303 	lsr.w	r3, r1, r3
 800c342:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c346:	4338      	orrs	r0, r7
 800c348:	0c01      	lsrs	r1, r0, #16
 800c34a:	fbb3 f7fe 	udiv	r7, r3, lr
 800c34e:	fa1f f885 	uxth.w	r8, r5
 800c352:	fb0e 3317 	mls	r3, lr, r7, r3
 800c356:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c35a:	fb07 f308 	mul.w	r3, r7, r8
 800c35e:	428b      	cmp	r3, r1
 800c360:	fa04 f402 	lsl.w	r4, r4, r2
 800c364:	d907      	bls.n	800c376 <__udivmoddi4+0x256>
 800c366:	1869      	adds	r1, r5, r1
 800c368:	f107 3cff 	add.w	ip, r7, #4294967295
 800c36c:	d22f      	bcs.n	800c3ce <__udivmoddi4+0x2ae>
 800c36e:	428b      	cmp	r3, r1
 800c370:	d92d      	bls.n	800c3ce <__udivmoddi4+0x2ae>
 800c372:	3f02      	subs	r7, #2
 800c374:	4429      	add	r1, r5
 800c376:	1acb      	subs	r3, r1, r3
 800c378:	b281      	uxth	r1, r0
 800c37a:	fbb3 f0fe 	udiv	r0, r3, lr
 800c37e:	fb0e 3310 	mls	r3, lr, r0, r3
 800c382:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c386:	fb00 f308 	mul.w	r3, r0, r8
 800c38a:	428b      	cmp	r3, r1
 800c38c:	d907      	bls.n	800c39e <__udivmoddi4+0x27e>
 800c38e:	1869      	adds	r1, r5, r1
 800c390:	f100 3cff 	add.w	ip, r0, #4294967295
 800c394:	d217      	bcs.n	800c3c6 <__udivmoddi4+0x2a6>
 800c396:	428b      	cmp	r3, r1
 800c398:	d915      	bls.n	800c3c6 <__udivmoddi4+0x2a6>
 800c39a:	3802      	subs	r0, #2
 800c39c:	4429      	add	r1, r5
 800c39e:	1ac9      	subs	r1, r1, r3
 800c3a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800c3a4:	e73b      	b.n	800c21e <__udivmoddi4+0xfe>
 800c3a6:	4637      	mov	r7, r6
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	e709      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	e6e7      	b.n	800c180 <__udivmoddi4+0x60>
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	e6fb      	b.n	800c1ac <__udivmoddi4+0x8c>
 800c3b4:	4541      	cmp	r1, r8
 800c3b6:	d2ab      	bcs.n	800c310 <__udivmoddi4+0x1f0>
 800c3b8:	ebb8 0a02 	subs.w	sl, r8, r2
 800c3bc:	eb69 020e 	sbc.w	r2, r9, lr
 800c3c0:	3801      	subs	r0, #1
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	e7a4      	b.n	800c310 <__udivmoddi4+0x1f0>
 800c3c6:	4660      	mov	r0, ip
 800c3c8:	e7e9      	b.n	800c39e <__udivmoddi4+0x27e>
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	e795      	b.n	800c2fa <__udivmoddi4+0x1da>
 800c3ce:	4667      	mov	r7, ip
 800c3d0:	e7d1      	b.n	800c376 <__udivmoddi4+0x256>
 800c3d2:	4681      	mov	r9, r0
 800c3d4:	e77c      	b.n	800c2d0 <__udivmoddi4+0x1b0>
 800c3d6:	3802      	subs	r0, #2
 800c3d8:	442c      	add	r4, r5
 800c3da:	e747      	b.n	800c26c <__udivmoddi4+0x14c>
 800c3dc:	f1ac 0c02 	sub.w	ip, ip, #2
 800c3e0:	442b      	add	r3, r5
 800c3e2:	e72f      	b.n	800c244 <__udivmoddi4+0x124>
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	e708      	b.n	800c1fa <__udivmoddi4+0xda>
 800c3e8:	4637      	mov	r7, r6
 800c3ea:	e6e9      	b.n	800c1c0 <__udivmoddi4+0xa0>

0800c3ec <__aeabi_idiv0>:
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop

0800c3f0 <Bootloader_Init>:
 800c3f0:	b513      	push	{r0, r1, r4, lr}
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <Bootloader_Init+0x30>)
 800c3f4:	2400      	movs	r4, #0
 800c3f6:	9401      	str	r4, [sp, #4]
 800c3f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3fe:	645a      	str	r2, [r3, #68]	; 0x44
 800c400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c406:	9301      	str	r3, [sp, #4]
 800c408:	9b01      	ldr	r3, [sp, #4]
 800c40a:	f002 fcf7 	bl	800edfc <HAL_FLASH_Unlock>
 800c40e:	4b05      	ldr	r3, [pc, #20]	; (800c424 <Bootloader_Init+0x34>)
 800c410:	4a05      	ldr	r2, [pc, #20]	; (800c428 <Bootloader_Init+0x38>)
 800c412:	60da      	str	r2, [r3, #12]
 800c414:	f002 fd04 	bl	800ee20 <HAL_FLASH_Lock>
 800c418:	4620      	mov	r0, r4
 800c41a:	b002      	add	sp, #8
 800c41c:	bd10      	pop	{r4, pc}
 800c41e:	bf00      	nop
 800c420:	40023800 	.word	0x40023800
 800c424:	40023c00 	.word	0x40023c00
 800c428:	000100f3 	.word	0x000100f3

0800c42c <Bootloader_Erase>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	2400      	movs	r4, #0
 800c432:	9400      	str	r4, [sp, #0]
 800c434:	f002 fce2 	bl	800edfc <HAL_FLASH_Unlock>
 800c438:	2201      	movs	r2, #1
 800c43a:	2305      	movs	r3, #5
 800c43c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c440:	2107      	movs	r1, #7
 800c442:	2302      	movs	r3, #2
 800c444:	e9cd 1304 	strd	r1, r3, [sp, #16]
 800c448:	a801      	add	r0, sp, #4
 800c44a:	4669      	mov	r1, sp
 800c44c:	9401      	str	r4, [sp, #4]
 800c44e:	f002 fdc5 	bl	800efdc <HAL_FLASHEx_Erase>
 800c452:	4604      	mov	r4, r0
 800c454:	f002 fce4 	bl	800ee20 <HAL_FLASH_Lock>
 800c458:	2c00      	cmp	r4, #0
 800c45a:	bf14      	ite	ne
 800c45c:	2004      	movne	r0, #4
 800c45e:	2000      	moveq	r0, #0
 800c460:	b006      	add	sp, #24
 800c462:	bd10      	pop	{r4, pc}

0800c464 <Bootloader_FlashBegin>:
 800c464:	b508      	push	{r3, lr}
 800c466:	4b03      	ldr	r3, [pc, #12]	; (800c474 <Bootloader_FlashBegin+0x10>)
 800c468:	4a03      	ldr	r2, [pc, #12]	; (800c478 <Bootloader_FlashBegin+0x14>)
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	f002 fcc6 	bl	800edfc <HAL_FLASH_Unlock>
 800c470:	2000      	movs	r0, #0
 800c472:	bd08      	pop	{r3, pc}
 800c474:	20000000 	.word	0x20000000
 800c478:	08020000 	.word	0x08020000

0800c47c <Bootloader_FlashNext>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	4c0e      	ldr	r4, [pc, #56]	; (800c4b8 <Bootloader_FlashNext+0x3c>)
 800c480:	4a0e      	ldr	r2, [pc, #56]	; (800c4bc <Bootloader_FlashNext+0x40>)
 800c482:	6821      	ldr	r1, [r4, #0]
 800c484:	f101 4377 	add.w	r3, r1, #4143972352	; 0xf7000000
 800c488:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800c48c:	4293      	cmp	r3, r2
 800c48e:	4605      	mov	r5, r0
 800c490:	d903      	bls.n	800c49a <Bootloader_FlashNext+0x1e>
 800c492:	f002 fcc5 	bl	800ee20 <HAL_FLASH_Lock>
 800c496:	2005      	movs	r0, #5
 800c498:	bd38      	pop	{r3, r4, r5, pc}
 800c49a:	4602      	mov	r2, r0
 800c49c:	2300      	movs	r3, #0
 800c49e:	2002      	movs	r0, #2
 800c4a0:	f002 fcf2 	bl	800ee88 <HAL_FLASH_Program>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d1f4      	bne.n	800c492 <Bootloader_FlashNext+0x16>
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	42aa      	cmp	r2, r5
 800c4ae:	d1f0      	bne.n	800c492 <Bootloader_FlashNext+0x16>
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	6023      	str	r3, [r4, #0]
 800c4b4:	e7f0      	b.n	800c498 <Bootloader_FlashNext+0x1c>
 800c4b6:	bf00      	nop
 800c4b8:	20000000 	.word	0x20000000
 800c4bc:	000dfffc 	.word	0x000dfffc

0800c4c0 <Bootloader_FlashEnd>:
 800c4c0:	b508      	push	{r3, lr}
 800c4c2:	f002 fcad 	bl	800ee20 <HAL_FLASH_Lock>
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	bd08      	pop	{r3, pc}

0800c4ca <Bootloader_CheckSize>:
 800c4ca:	f5b0 2f60 	cmp.w	r0, #917504	; 0xe0000
 800c4ce:	bf8c      	ite	hi
 800c4d0:	2002      	movhi	r0, #2
 800c4d2:	2000      	movls	r0, #0
 800c4d4:	4770      	bx	lr
	...

0800c4d8 <Bootloader_CheckForApplication>:
 800c4d8:	4b04      	ldr	r3, [pc, #16]	; (800c4ec <Bootloader_CheckForApplication+0x14>)
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800c4e0:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 800c4e4:	bf94      	ite	ls
 800c4e6:	2000      	movls	r0, #0
 800c4e8:	2001      	movhi	r0, #1
 800c4ea:	4770      	bx	lr
 800c4ec:	08020000 	.word	0x08020000

0800c4f0 <Bootloader_JumpToApplication>:
 800c4f0:	4b09      	ldr	r3, [pc, #36]	; (800c518 <Bootloader_JumpToApplication+0x28>)
 800c4f2:	b510      	push	{r4, lr}
 800c4f4:	681c      	ldr	r4, [r3, #0]
 800c4f6:	f003 feb5 	bl	8010264 <HAL_RCC_DeInit>
 800c4fa:	f002 f973 	bl	800e7e4 <HAL_DeInit>
 800c4fe:	4b07      	ldr	r3, [pc, #28]	; (800c51c <Bootloader_JumpToApplication+0x2c>)
 800c500:	2200      	movs	r2, #0
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	605a      	str	r2, [r3, #4]
 800c506:	609a      	str	r2, [r3, #8]
 800c508:	4a05      	ldr	r2, [pc, #20]	; (800c520 <Bootloader_JumpToApplication+0x30>)
 800c50a:	4b06      	ldr	r3, [pc, #24]	; (800c524 <Bootloader_JumpToApplication+0x34>)
 800c50c:	6093      	str	r3, [r2, #8]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f383 8808 	msr	MSP, r3
 800c514:	47a0      	blx	r4
 800c516:	e7fe      	b.n	800c516 <Bootloader_JumpToApplication+0x26>
 800c518:	08020004 	.word	0x08020004
 800c51c:	e000e010 	.word	0xe000e010
 800c520:	e000ed00 	.word	0xe000ed00
 800c524:	08020000 	.word	0x08020000

0800c528 <Peripherials_DeInit>:
#include "rtc.h"
#include "sdio.h"
extern uint32_t __attribute__((section(".newsection"))) sharedmem;
extern USBH_HandleTypeDef hUsbHostHS;
/**************************************************************/
void Peripherials_DeInit(void) {
 800c528:	b510      	push	{r4, lr}
//	BSP_SD_DeInit();
//	MX_USB_HOST_DeInit();
//	MX_GPIO_DeInit();
	MX_FATFS_DeInit();

	HAL_UART_DeInit(&huart2);
 800c52a:	4c18      	ldr	r4, [pc, #96]	; (800c58c <Peripherials_DeInit+0x64>)
	MX_FATFS_DeInit();
 800c52c:	f006 f9f6 	bl	801291c <MX_FATFS_DeInit>
	HAL_UART_DeInit(&huart2);
 800c530:	4620      	mov	r0, r4
 800c532:	f005 f99d 	bl	8011870 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 800c536:	4620      	mov	r0, r4

	HAL_UART_DeInit(&huart3);
 800c538:	4c15      	ldr	r4, [pc, #84]	; (800c590 <Peripherials_DeInit+0x68>)
	HAL_UART_MspDeInit(&huart2);
 800c53a:	f002 f8fb 	bl	800e734 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart3);
 800c53e:	4620      	mov	r0, r4
 800c540:	f005 f996 	bl	8011870 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart3);
 800c544:	4620      	mov	r0, r4

//	HAL_RTC_DeInit(&hrtc);
//	HAL_RTC_MspDeInit(&hrtc);

	HAL_SD_DeInit(&hsd);
 800c546:	4c13      	ldr	r4, [pc, #76]	; (800c594 <Peripherials_DeInit+0x6c>)
	HAL_UART_MspDeInit(&huart3);
 800c548:	f002 f8f4 	bl	800e734 <HAL_UART_MspDeInit>
	HAL_SD_DeInit(&hsd);
 800c54c:	4620      	mov	r0, r4
 800c54e:	f004 f883 	bl	8010658 <HAL_SD_DeInit>
	HAL_SD_MspDeInit(&hsd);
 800c552:	4620      	mov	r0, r4
 800c554:	f001 fcf2 	bl	800df3c <HAL_SD_MspDeInit>

	f_mount(NULL, "0:", 1);
 800c558:	2201      	movs	r2, #1
 800c55a:	490f      	ldr	r1, [pc, #60]	; (800c598 <Peripherials_DeInit+0x70>)
 800c55c:	2000      	movs	r0, #0
 800c55e:	f009 f827 	bl	80155b0 <f_mount>
	f_mount(NULL, "1:", 1);
 800c562:	2201      	movs	r2, #1
 800c564:	490d      	ldr	r1, [pc, #52]	; (800c59c <Peripherials_DeInit+0x74>)
 800c566:	2000      	movs	r0, #0
 800c568:	f009 f822 	bl	80155b0 <f_mount>


	MX_USB_HOST_DeInit();
 800c56c:	f009 fb58 	bl	8015c20 <MX_USB_HOST_DeInit>

	 __HAL_RCC_DMA2_CLK_DISABLE();
 800c570:	4a0b      	ldr	r2, [pc, #44]	; (800c5a0 <Peripherials_DeInit+0x78>)
 800c572:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c574:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800c578:	6313      	str	r3, [r2, #48]	; 0x30

	 MX_GPIO_DeInit();
 800c57a:	f000 fe6b 	bl	800d254 <MX_GPIO_DeInit>

	 __HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 800c57e:	4b09      	ldr	r3, [pc, #36]	; (800c5a4 <Peripherials_DeInit+0x7c>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c586:	601a      	str	r2, [r3, #0]

}
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	bf00      	nop
 800c58c:	20001714 	.word	0x20001714
 800c590:	200016d4 	.word	0x200016d4
 800c594:	200015c8 	.word	0x200015c8
 800c598:	08000281 	.word	0x08000281
 800c59c:	08000284 	.word	0x08000284
 800c5a0:	40023800 	.word	0x40023800
 800c5a4:	200014d8 	.word	0x200014d8

0800c5a8 <Check_SDCard>:
/*** Bootloader ***************************************************************/
/*** SD Card ******************************************************************/
uint8_t Check_SDCard(char *firmware_path, uint16_t *firmware_version,
		uint32_t *firmware_checksum) {
 800c5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ac:	b09a      	sub	sp, #104	; 0x68
 800c5ae:	4607      	mov	r7, r0
 800c5b0:	4688      	mov	r8, r1
 800c5b2:	4616      	mov	r6, r2
	FRESULT fr;
	char readline[100];
	if (BSP_SD_IsDetected() == SD_NOT_PRESENT) {
 800c5b4:	f006 f9fb 	bl	80129ae <BSP_SD_IsDetected>
 800c5b8:	b930      	cbnz	r0, 800c5c8 <Check_SDCard+0x20>
		printf("SD card is not present.\n\r");
 800c5ba:	4838      	ldr	r0, [pc, #224]	; (800c69c <Check_SDCard+0xf4>)
 800c5bc:	f009 fd92 	bl	80160e4 <iprintf>
		return MEM_NOT_PRESENT;
 800c5c0:	2001      	movs	r0, #1
//		return FILE_READ_FAIL;
//	}
	f_close(&SDFile);
	f_mount(NULL, (TCHAR const*) SDPath, 0);
	return MEM_CHECK_OK;
}
 800c5c2:	b01a      	add	sp, #104	; 0x68
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("SD card is present\n\r");
 800c5c8:	4835      	ldr	r0, [pc, #212]	; (800c6a0 <Check_SDCard+0xf8>)
 800c5ca:	f009 fd8b 	bl	80160e4 <iprintf>
	fr = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	4934      	ldr	r1, [pc, #208]	; (800c6a4 <Check_SDCard+0xfc>)
 800c5d2:	4835      	ldr	r0, [pc, #212]	; (800c6a8 <Check_SDCard+0x100>)
 800c5d4:	f008 ffec 	bl	80155b0 <f_mount>
	if (fr != FR_OK) {
 800c5d8:	4605      	mov	r5, r0
 800c5da:	b140      	cbz	r0, 800c5ee <Check_SDCard+0x46>
		printf("SD card cannot be mounted.\n\r");
 800c5dc:	4833      	ldr	r0, [pc, #204]	; (800c6ac <Check_SDCard+0x104>)
 800c5de:	f009 fd81 	bl	80160e4 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	4832      	ldr	r0, [pc, #200]	; (800c6b0 <Check_SDCard+0x108>)
 800c5e6:	f009 fd7d 	bl	80160e4 <iprintf>
		return MEM_MOUNT_FAIL;
 800c5ea:	2002      	movs	r0, #2
 800c5ec:	e7e9      	b.n	800c5c2 <Check_SDCard+0x1a>
	printf("SD card mountes\n\r");
 800c5ee:	4831      	ldr	r0, [pc, #196]	; (800c6b4 <Check_SDCard+0x10c>)
 800c5f0:	f009 fd78 	bl	80160e4 <iprintf>
	fr = f_open(&SDFile, "0:/boot.ini", FA_READ);
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	4930      	ldr	r1, [pc, #192]	; (800c6b8 <Check_SDCard+0x110>)
 800c5f8:	4830      	ldr	r0, [pc, #192]	; (800c6bc <Check_SDCard+0x114>)
 800c5fa:	f009 f80d 	bl	8015618 <f_open>
	if (fr != FR_OK) {
 800c5fe:	4604      	mov	r4, r0
 800c600:	b168      	cbz	r0, 800c61e <Check_SDCard+0x76>
		printf("File cannot be opened.\n\r");
 800c602:	482f      	ldr	r0, [pc, #188]	; (800c6c0 <Check_SDCard+0x118>)
 800c604:	f009 fd6e 	bl	80160e4 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c608:	4621      	mov	r1, r4
 800c60a:	4829      	ldr	r0, [pc, #164]	; (800c6b0 <Check_SDCard+0x108>)
 800c60c:	f009 fd6a 	bl	80160e4 <iprintf>
		f_mount(NULL, (TCHAR const*) SDPath, 0);
 800c610:	462a      	mov	r2, r5
 800c612:	4924      	ldr	r1, [pc, #144]	; (800c6a4 <Check_SDCard+0xfc>)
 800c614:	4628      	mov	r0, r5
 800c616:	f008 ffcb 	bl	80155b0 <f_mount>
		return FILE_OPEN_FAIL;
 800c61a:	2003      	movs	r0, #3
 800c61c:	e7d1      	b.n	800c5c2 <Check_SDCard+0x1a>
	f_gets(readline, 100, &SDFile);
 800c61e:	4a27      	ldr	r2, [pc, #156]	; (800c6bc <Check_SDCard+0x114>)
 800c620:	2164      	movs	r1, #100	; 0x64
 800c622:	a801      	add	r0, sp, #4
 800c624:	f009 fa22 	bl	8015a6c <f_gets>
	readline[strlen(readline) - 1] = 0;
 800c628:	a801      	add	r0, sp, #4
 800c62a:	f7ff fd09 	bl	800c040 <strlen>
 800c62e:	ab1a      	add	r3, sp, #104	; 0x68
 800c630:	4418      	add	r0, r3
 800c632:	f800 4c65 	strb.w	r4, [r0, #-101]
	*firmware_version = atol(readline);
 800c636:	a801      	add	r0, sp, #4
 800c638:	f009 fc5a 	bl	8015ef0 <atol>
	f_gets(readline, 100, &SDFile);
 800c63c:	4a1f      	ldr	r2, [pc, #124]	; (800c6bc <Check_SDCard+0x114>)
	*firmware_version = atol(readline);
 800c63e:	f8a8 0000 	strh.w	r0, [r8]
	f_gets(readline, 100, &SDFile);
 800c642:	2164      	movs	r1, #100	; 0x64
 800c644:	a801      	add	r0, sp, #4
 800c646:	f009 fa11 	bl	8015a6c <f_gets>
	readline[strlen(readline) - 1] = 0;
 800c64a:	a801      	add	r0, sp, #4
 800c64c:	f7ff fcf8 	bl	800c040 <strlen>
 800c650:	ab1a      	add	r3, sp, #104	; 0x68
 800c652:	4418      	add	r0, r3
	sprintf(firmware_path, "%s", readline);
 800c654:	a901      	add	r1, sp, #4
	readline[strlen(readline) - 1] = 0;
 800c656:	f800 4c65 	strb.w	r4, [r0, #-101]
	sprintf(firmware_path, "%s", readline);
 800c65a:	4638      	mov	r0, r7
 800c65c:	f009 fd8a 	bl	8016174 <strcpy>
	f_gets(readline, 100, &SDFile);
 800c660:	4a16      	ldr	r2, [pc, #88]	; (800c6bc <Check_SDCard+0x114>)
 800c662:	2164      	movs	r1, #100	; 0x64
 800c664:	a801      	add	r0, sp, #4
 800c666:	f009 fa01 	bl	8015a6c <f_gets>
	readline[strlen(readline) - 1] = 0;
 800c66a:	a801      	add	r0, sp, #4
 800c66c:	f7ff fce8 	bl	800c040 <strlen>
 800c670:	ab1a      	add	r3, sp, #104	; 0x68
 800c672:	4418      	add	r0, r3
 800c674:	f800 4c65 	strb.w	r4, [r0, #-101]
	*firmware_checksum = atol(readline);
 800c678:	a801      	add	r0, sp, #4
 800c67a:	f009 fc39 	bl	8015ef0 <atol>
 800c67e:	6030      	str	r0, [r6, #0]
	HAL_Delay(50);
 800c680:	2032      	movs	r0, #50	; 0x32
 800c682:	f002 f8f1 	bl	800e868 <HAL_Delay>
	f_close(&SDFile);
 800c686:	480d      	ldr	r0, [pc, #52]	; (800c6bc <Check_SDCard+0x114>)
 800c688:	f009 f9df 	bl	8015a4a <f_close>
	f_mount(NULL, (TCHAR const*) SDPath, 0);
 800c68c:	4622      	mov	r2, r4
 800c68e:	4905      	ldr	r1, [pc, #20]	; (800c6a4 <Check_SDCard+0xfc>)
 800c690:	4620      	mov	r0, r4
 800c692:	f008 ff8d 	bl	80155b0 <f_mount>
	return MEM_CHECK_OK;
 800c696:	4620      	mov	r0, r4
 800c698:	e793      	b.n	800c5c2 <Check_SDCard+0x1a>
 800c69a:	bf00      	nop
 800c69c:	08000188 	.word	0x08000188
 800c6a0:	080001a2 	.word	0x080001a2
 800c6a4:	2000177d 	.word	0x2000177d
 800c6a8:	2000481c 	.word	0x2000481c
 800c6ac:	080001b7 	.word	0x080001b7
 800c6b0:	080001d4 	.word	0x080001d4
 800c6b4:	080001eb 	.word	0x080001eb
 800c6b8:	080001fd 	.word	0x080001fd
 800c6bc:	200027b4 	.word	0x200027b4
 800c6c0:	08000209 	.word	0x08000209

0800c6c4 <Check_USBMEM>:
/*** USB Memory ******************************************************************/
uint8_t Check_USBMEM(char *firmware_path, uint16_t *firmware_version,
		uint32_t *firmware_checksum) {
 800c6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c8:	4607      	mov	r7, r0
 800c6ca:	b0b2      	sub	sp, #200	; 0xc8
	FIL fp;
	FRESULT fr;
	char readline[200];
	uint16_t usb_counter = 0;
	USBH_ReEnumerate(&hUsbHostHS);
 800c6cc:	4847      	ldr	r0, [pc, #284]	; (800c7ec <Check_USBMEM+0x128>)
		HAL_IWDG_Refresh(&hiwdg);
		#endif
		MX_USB_HOST_Process();
		HAL_Delay(20);
		usb_counter++;
	} while ((usb_counter < 1000) && (!USBH_MSC_IsReady(&hUsbHostHS)));
 800c6ce:	4d47      	ldr	r5, [pc, #284]	; (800c7ec <Check_USBMEM+0x128>)
		uint32_t *firmware_checksum) {
 800c6d0:	4688      	mov	r8, r1
 800c6d2:	4616      	mov	r6, r2
	USBH_ReEnumerate(&hUsbHostHS);
 800c6d4:	f007 f980 	bl	80139d8 <USBH_ReEnumerate>
	HAL_Delay(2000);
 800c6d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c6dc:	f002 f8c4 	bl	800e868 <HAL_Delay>
 800c6e0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800c6e4:	3c01      	subs	r4, #1
		MX_USB_HOST_Process();
 800c6e6:	f009 fac7 	bl	8015c78 <MX_USB_HOST_Process>
 800c6ea:	b2a4      	uxth	r4, r4
		HAL_Delay(20);
 800c6ec:	2014      	movs	r0, #20
 800c6ee:	f002 f8bb 	bl	800e868 <HAL_Delay>
	} while ((usb_counter < 1000) && (!USBH_MSC_IsReady(&hUsbHostHS)));
 800c6f2:	b124      	cbz	r4, 800c6fe <Check_USBMEM+0x3a>
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	f006 fd63 	bl	80131c0 <USBH_MSC_IsReady>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d0f2      	beq.n	800c6e4 <Check_USBMEM+0x20>
	if (!USBH_MSC_IsReady(&hUsbHostHS)) {
 800c6fe:	483b      	ldr	r0, [pc, #236]	; (800c7ec <Check_USBMEM+0x128>)
 800c700:	f006 fd5e 	bl	80131c0 <USBH_MSC_IsReady>
 800c704:	b930      	cbnz	r0, 800c714 <Check_USBMEM+0x50>
		printf("USB is not present.\n\r");
 800c706:	483a      	ldr	r0, [pc, #232]	; (800c7f0 <Check_USBMEM+0x12c>)
 800c708:	f009 fcec 	bl	80160e4 <iprintf>
		return MEM_NOT_PRESENT;
 800c70c:	2001      	movs	r0, #1
//	}

	f_close(&USBHFile);
	f_mount(NULL, (TCHAR const*) USBHPath, 0);
	return MEM_CHECK_OK;
}
 800c70e:	b032      	add	sp, #200	; 0xc8
 800c710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("USB is present\n\r");
 800c714:	4837      	ldr	r0, [pc, #220]	; (800c7f4 <Check_USBMEM+0x130>)
 800c716:	f009 fce5 	bl	80160e4 <iprintf>
	fr = f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 1);
 800c71a:	2201      	movs	r2, #1
 800c71c:	4936      	ldr	r1, [pc, #216]	; (800c7f8 <Check_USBMEM+0x134>)
 800c71e:	4837      	ldr	r0, [pc, #220]	; (800c7fc <Check_USBMEM+0x138>)
 800c720:	f008 ff46 	bl	80155b0 <f_mount>
	if (fr != FR_OK) {
 800c724:	4605      	mov	r5, r0
 800c726:	b140      	cbz	r0, 800c73a <Check_USBMEM+0x76>
		printf("USB cannot be mounted.\n\r");
 800c728:	4835      	ldr	r0, [pc, #212]	; (800c800 <Check_USBMEM+0x13c>)
 800c72a:	f009 fcdb 	bl	80160e4 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c72e:	4629      	mov	r1, r5
 800c730:	4834      	ldr	r0, [pc, #208]	; (800c804 <Check_USBMEM+0x140>)
 800c732:	f009 fcd7 	bl	80160e4 <iprintf>
		return MEM_MOUNT_FAIL;
 800c736:	2002      	movs	r0, #2
 800c738:	e7e9      	b.n	800c70e <Check_USBMEM+0x4a>
	printf("USB was mounted.\n\r");
 800c73a:	4833      	ldr	r0, [pc, #204]	; (800c808 <Check_USBMEM+0x144>)
 800c73c:	f009 fcd2 	bl	80160e4 <iprintf>
	HAL_Delay(100);
 800c740:	2064      	movs	r0, #100	; 0x64
 800c742:	f002 f891 	bl	800e868 <HAL_Delay>
	fr = f_open(&USBHFile, "1:/boot.ini", FA_READ);
 800c746:	2201      	movs	r2, #1
 800c748:	4930      	ldr	r1, [pc, #192]	; (800c80c <Check_USBMEM+0x148>)
 800c74a:	4831      	ldr	r0, [pc, #196]	; (800c810 <Check_USBMEM+0x14c>)
 800c74c:	f008 ff64 	bl	8015618 <f_open>
	if (fr != FR_OK) {
 800c750:	4604      	mov	r4, r0
 800c752:	b168      	cbz	r0, 800c770 <Check_USBMEM+0xac>
		printf("File cannot be opened.\n\r");
 800c754:	482f      	ldr	r0, [pc, #188]	; (800c814 <Check_USBMEM+0x150>)
 800c756:	f009 fcc5 	bl	80160e4 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c75a:	4621      	mov	r1, r4
 800c75c:	4829      	ldr	r0, [pc, #164]	; (800c804 <Check_USBMEM+0x140>)
 800c75e:	f009 fcc1 	bl	80160e4 <iprintf>
		f_mount(NULL, (TCHAR const*) USBHPath, 0);
 800c762:	462a      	mov	r2, r5
 800c764:	4924      	ldr	r1, [pc, #144]	; (800c7f8 <Check_USBMEM+0x134>)
 800c766:	4628      	mov	r0, r5
 800c768:	f008 ff22 	bl	80155b0 <f_mount>
		return FILE_OPEN_FAIL;
 800c76c:	2003      	movs	r0, #3
 800c76e:	e7ce      	b.n	800c70e <Check_USBMEM+0x4a>
	f_gets(readline, 100, &USBHFile);
 800c770:	4a27      	ldr	r2, [pc, #156]	; (800c810 <Check_USBMEM+0x14c>)
 800c772:	2164      	movs	r1, #100	; 0x64
 800c774:	4668      	mov	r0, sp
 800c776:	f009 f979 	bl	8015a6c <f_gets>
	readline[strlen(readline) - 1] = 0;
 800c77a:	4668      	mov	r0, sp
 800c77c:	f7ff fc60 	bl	800c040 <strlen>
 800c780:	ab32      	add	r3, sp, #200	; 0xc8
 800c782:	4418      	add	r0, r3
 800c784:	f800 4cc9 	strb.w	r4, [r0, #-201]
	*firmware_version = atol(readline);
 800c788:	4668      	mov	r0, sp
 800c78a:	f009 fbb1 	bl	8015ef0 <atol>
	f_gets(readline, 100, &USBHFile);
 800c78e:	4a20      	ldr	r2, [pc, #128]	; (800c810 <Check_USBMEM+0x14c>)
	*firmware_version = atol(readline);
 800c790:	f8a8 0000 	strh.w	r0, [r8]
	f_gets(readline, 100, &USBHFile);
 800c794:	2164      	movs	r1, #100	; 0x64
 800c796:	4668      	mov	r0, sp
 800c798:	f009 f968 	bl	8015a6c <f_gets>
	readline[strlen(readline) - 1] = 0;
 800c79c:	4668      	mov	r0, sp
 800c79e:	f7ff fc4f 	bl	800c040 <strlen>
 800c7a2:	ab32      	add	r3, sp, #200	; 0xc8
 800c7a4:	4418      	add	r0, r3
	sprintf(firmware_path, "%s", readline);
 800c7a6:	4669      	mov	r1, sp
	readline[strlen(readline) - 1] = 0;
 800c7a8:	f800 4cc9 	strb.w	r4, [r0, #-201]
	sprintf(firmware_path, "%s", readline);
 800c7ac:	4638      	mov	r0, r7
 800c7ae:	f009 fce1 	bl	8016174 <strcpy>
	f_gets(readline, 100, &USBHFile);
 800c7b2:	4a17      	ldr	r2, [pc, #92]	; (800c810 <Check_USBMEM+0x14c>)
 800c7b4:	2164      	movs	r1, #100	; 0x64
 800c7b6:	4668      	mov	r0, sp
 800c7b8:	f009 f958 	bl	8015a6c <f_gets>
	readline[strlen(readline) - 1] = 0;
 800c7bc:	4668      	mov	r0, sp
 800c7be:	f7ff fc3f 	bl	800c040 <strlen>
 800c7c2:	ab32      	add	r3, sp, #200	; 0xc8
 800c7c4:	4418      	add	r0, r3
 800c7c6:	f800 4cc9 	strb.w	r4, [r0, #-201]
	*firmware_checksum = atol(readline);
 800c7ca:	4668      	mov	r0, sp
 800c7cc:	f009 fb90 	bl	8015ef0 <atol>
 800c7d0:	6030      	str	r0, [r6, #0]
	HAL_Delay(50);
 800c7d2:	2032      	movs	r0, #50	; 0x32
 800c7d4:	f002 f848 	bl	800e868 <HAL_Delay>
	f_close(&USBHFile);
 800c7d8:	480d      	ldr	r0, [pc, #52]	; (800c810 <Check_USBMEM+0x14c>)
 800c7da:	f009 f936 	bl	8015a4a <f_close>
	f_mount(NULL, (TCHAR const*) USBHPath, 0);
 800c7de:	4622      	mov	r2, r4
 800c7e0:	4905      	ldr	r1, [pc, #20]	; (800c7f8 <Check_USBMEM+0x134>)
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f008 fee4 	bl	80155b0 <f_mount>
	return MEM_CHECK_OK;
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	e790      	b.n	800c70e <Check_USBMEM+0x4a>
 800c7ec:	20005858 	.word	0x20005858
 800c7f0:	08000222 	.word	0x08000222
 800c7f4:	08000238 	.word	0x08000238
 800c7f8:	20001779 	.word	0x20001779
 800c7fc:	200037e4 	.word	0x200037e4
 800c800:	08000249 	.word	0x08000249
 800c804:	080001d4 	.word	0x080001d4
 800c808:	08000262 	.word	0x08000262
 800c80c:	08000275 	.word	0x08000275
 800c810:	20001784 	.word	0x20001784
 800c814:	08000209 	.word	0x08000209

0800c818 <goto_application>:
/*** Go application******************************************************************/
uint8_t goto_application(void) {
 800c818:	b508      	push	{r3, lr}
	if (Bootloader_CheckForApplication() == BL_OK) {
 800c81a:	f7ff fe5d 	bl	800c4d8 <Bootloader_CheckForApplication>
 800c81e:	b940      	cbnz	r0, 800c832 <goto_application+0x1a>
		printf("Launching Application.\n\r");
 800c820:	4805      	ldr	r0, [pc, #20]	; (800c838 <goto_application+0x20>)
 800c822:	f009 fc5f 	bl	80160e4 <iprintf>
//		draw_text("Launching Application", 0, 50, Tahoma8, 1, 0);
//		glcd_refresh();
//		HAL_Delay(1000);
		/* De-initialize bootloader hardware & peripherals */
		Peripherials_DeInit();
 800c826:	f7ff fe7f 	bl	800c528 <Peripherials_DeInit>
		/* Launch application */
		Bootloader_JumpToApplication();
 800c82a:	f7ff fe61 	bl	800c4f0 <Bootloader_JumpToApplication>
		return 1;
 800c82e:	2001      	movs	r0, #1
	}
	return 0;
}
 800c830:	bd08      	pop	{r3, pc}
	return 0;
 800c832:	2000      	movs	r0, #0
 800c834:	e7fc      	b.n	800c830 <goto_application+0x18>
 800c836:	bf00      	nop
 800c838:	080005cf 	.word	0x080005cf

0800c83c <Write_Flash>:
/*
 * Write program to flash memory & verify
 */
extern uint16_t VirtAddVarTab[NB_OF_VAR];
uint8_t Write_Flash(uint8_t ID_mem, char *name, uint16_t version,
		uint32_t checksum) {
 800c83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c840:	b0a9      	sub	sp, #164	; 0xa4
	uint32_t cntr;
	uint32_t addr;
	FSIZE_t filesize;
	char filename[100];
	char tmp_str[30];
	if (ID_mem == SD_ID)
 800c842:	280a      	cmp	r0, #10
		uint32_t checksum) {
 800c844:	9202      	str	r2, [sp, #8]
 800c846:	4605      	mov	r5, r0
		sprintf(filename, "0:/%s", name);
 800c848:	460a      	mov	r2, r1
	else
		sprintf(filename, "1:/%s", name);
 800c84a:	a80f      	add	r0, sp, #60	; 0x3c
		sprintf(filename, "0:/%s", name);
 800c84c:	bf0c      	ite	eq
 800c84e:	4948      	ldreq	r1, [pc, #288]	; (800c970 <Write_Flash+0x134>)
		sprintf(filename, "1:/%s", name);
 800c850:	4948      	ldrne	r1, [pc, #288]	; (800c974 <Write_Flash+0x138>)
	printf("name of file %s\n\r", filename);
	///////////////////////get version//////////////////////////////////
	HAL_FLASH_Unlock();
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800c852:	4c49      	ldr	r4, [pc, #292]	; (800c978 <Write_Flash+0x13c>)
		sprintf(filename, "1:/%s", name);
 800c854:	f009 fc6e 	bl	8016134 <siprintf>
	printf("name of file %s\n\r", filename);
 800c858:	a90f      	add	r1, sp, #60	; 0x3c
 800c85a:	4848      	ldr	r0, [pc, #288]	; (800c97c <Write_Flash+0x140>)
 800c85c:	f009 fc42 	bl	80160e4 <iprintf>
	HAL_FLASH_Unlock();
 800c860:	f002 facc 	bl	800edfc <HAL_FLASH_Unlock>
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800c864:	2064      	movs	r0, #100	; 0x64
	EE_ReadVariable(VirtAddVarTab[0], &current_version);
 800c866:	a904      	add	r1, sp, #16
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800c868:	8020      	strh	r0, [r4, #0]
	EE_ReadVariable(VirtAddVarTab[0], &current_version);
 800c86a:	f000 fabf 	bl	800cdec <EE_ReadVariable>
	HAL_FLASH_Lock();
 800c86e:	f002 fad7 	bl	800ee20 <HAL_FLASH_Lock>
	//////////////////////check downgrade?////////////////////////////////////////////
	if (version == current_version) {
 800c872:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800c876:	9a02      	ldr	r2, [sp, #8]
 800c878:	9403      	str	r4, [sp, #12]
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d115      	bne.n	800c8aa <Write_Flash+0x6e>
		printf(
 800c87e:	4840      	ldr	r0, [pc, #256]	; (800c980 <Write_Flash+0x144>)
			printf("Downgrade firmware is not possible.\n\r");
			return FLASH_CHECKVERSION_FAIL;
		}
		printf("Downgrade firmware.\n\r");
	} else {
		printf("Upgrade firmware.\n\r");
 800c880:	f009 fc30 	bl	80160e4 <iprintf>
	}
	////////////////////////////////////////////////////////////////
	/* Mount MEM */
	if (ID_mem == SD_ID)
 800c884:	2d0a      	cmp	r5, #10
		fr = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 800c886:	f04f 0201 	mov.w	r2, #1
	if (ID_mem == SD_ID)
 800c88a:	d11f      	bne.n	800c8cc <Write_Flash+0x90>
		fr = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 800c88c:	493d      	ldr	r1, [pc, #244]	; (800c984 <Write_Flash+0x148>)
 800c88e:	483e      	ldr	r0, [pc, #248]	; (800c988 <Write_Flash+0x14c>)
 800c890:	f008 fe8e 	bl	80155b0 <f_mount>
	else
		fr = f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 1);
	if (fr != FR_OK) {
 800c894:	4604      	mov	r4, r0
 800c896:	b360      	cbz	r0, 800c8f2 <Write_Flash+0xb6>
		/* f_mount failed */
		printf("Mem cannot be mounted.\n\r");
 800c898:	483c      	ldr	r0, [pc, #240]	; (800c98c <Write_Flash+0x150>)
 800c89a:	f009 fc23 	bl	80160e4 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c89e:	4621      	mov	r1, r4
 800c8a0:	483b      	ldr	r0, [pc, #236]	; (800c990 <Write_Flash+0x154>)
 800c8a2:	f009 fc1f 	bl	80160e4 <iprintf>
		return MEM_MOUNT_FAIL;
 800c8a6:	2002      	movs	r0, #2
 800c8a8:	e009      	b.n	800c8be <Write_Flash+0x82>
	} else if (version < current_version) {
 800c8aa:	d90d      	bls.n	800c8c8 <Write_Flash+0x8c>
		if (sharedmem == WRITE_FROM_SD || sharedmem == WRITE_FROM_USB) {
 800c8ac:	4b39      	ldr	r3, [pc, #228]	; (800c994 <Write_Flash+0x158>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d806      	bhi.n	800c8c4 <Write_Flash+0x88>
			printf("Downgrade firmware is not possible.\n\r");
 800c8b6:	4838      	ldr	r0, [pc, #224]	; (800c998 <Write_Flash+0x15c>)
 800c8b8:	f009 fc14 	bl	80160e4 <iprintf>
			return FLASH_CHECKVERSION_FAIL;
 800c8bc:	2007      	movs	r0, #7
	}
	printf("Version Write in Flash %d\n\r", Data);
	HAL_Delay(500);
	HAL_FLASH_Lock();
	return FLASH_WRITE_OK;
}
 800c8be:	b029      	add	sp, #164	; 0xa4
 800c8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Downgrade firmware.\n\r");
 800c8c4:	4835      	ldr	r0, [pc, #212]	; (800c99c <Write_Flash+0x160>)
 800c8c6:	e7db      	b.n	800c880 <Write_Flash+0x44>
		printf("Upgrade firmware.\n\r");
 800c8c8:	4835      	ldr	r0, [pc, #212]	; (800c9a0 <Write_Flash+0x164>)
 800c8ca:	e7d9      	b.n	800c880 <Write_Flash+0x44>
		fr = f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 1);
 800c8cc:	4935      	ldr	r1, [pc, #212]	; (800c9a4 <Write_Flash+0x168>)
 800c8ce:	4836      	ldr	r0, [pc, #216]	; (800c9a8 <Write_Flash+0x16c>)
 800c8d0:	f008 fe6e 	bl	80155b0 <f_mount>
	if (fr != FR_OK) {
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	d1de      	bne.n	800c898 <Write_Flash+0x5c>
		fr = f_open(&USBHFile, filename, FA_READ);
 800c8da:	4e34      	ldr	r6, [pc, #208]	; (800c9ac <Write_Flash+0x170>)
 800c8dc:	2201      	movs	r2, #1
 800c8de:	a90f      	add	r1, sp, #60	; 0x3c
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	f008 fe99 	bl	8015618 <f_open>
	if (fr != FR_OK) {
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	b958      	cbnz	r0, 800c902 <Write_Flash+0xc6>
		filesize = f_size(&USBHFile);
 800c8ea:	68f7      	ldr	r7, [r6, #12]
		printf("Software found on USBH(%lu byte).\n\r", filesize);
 800c8ec:	4830      	ldr	r0, [pc, #192]	; (800c9b0 <Write_Flash+0x174>)
 800c8ee:	4639      	mov	r1, r7
 800c8f0:	e013      	b.n	800c91a <Write_Flash+0xde>
		fr = f_open(&SDFile, filename, FA_READ);
 800c8f2:	4e30      	ldr	r6, [pc, #192]	; (800c9b4 <Write_Flash+0x178>)
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	a90f      	add	r1, sp, #60	; 0x3c
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	f008 fe8d 	bl	8015618 <f_open>
	if (fr != FR_OK) {
 800c8fe:	4604      	mov	r4, r0
 800c900:	b140      	cbz	r0, 800c914 <Write_Flash+0xd8>
		printf("File cannot be opened.\n\r");
 800c902:	482d      	ldr	r0, [pc, #180]	; (800c9b8 <Write_Flash+0x17c>)
 800c904:	f009 fbee 	bl	80160e4 <iprintf>
		printf("FatFs error code: %u\n\r", fr);
 800c908:	4621      	mov	r1, r4
 800c90a:	4821      	ldr	r0, [pc, #132]	; (800c990 <Write_Flash+0x154>)
 800c90c:	f009 fbea 	bl	80160e4 <iprintf>
		return FILE_OPEN_FAIL;
 800c910:	2003      	movs	r0, #3
 800c912:	e7d4      	b.n	800c8be <Write_Flash+0x82>
		filesize = f_size(&SDFile);
 800c914:	68f7      	ldr	r7, [r6, #12]
		printf("Software found on SD(%lu byte).\n\r", filesize);
 800c916:	4829      	ldr	r0, [pc, #164]	; (800c9bc <Write_Flash+0x180>)
 800c918:	4639      	mov	r1, r7
		printf("Software found on USBH(%lu byte).\n\r", filesize);
 800c91a:	f009 fbe3 	bl	80160e4 <iprintf>
	if (Bootloader_CheckSize((uint32_t) filesize) != BL_OK) {
 800c91e:	4638      	mov	r0, r7
 800c920:	f7ff fdd3 	bl	800c4ca <Bootloader_CheckSize>
 800c924:	4604      	mov	r4, r0
 800c926:	b150      	cbz	r0, 800c93e <Write_Flash+0x102>
		printf("Error: app on SD card is too large.\n\r");
 800c928:	4825      	ldr	r0, [pc, #148]	; (800c9c0 <Write_Flash+0x184>)
 800c92a:	f009 fbdb 	bl	80160e4 <iprintf>
		if (ID_mem == SD_ID)
 800c92e:	2d0a      	cmp	r5, #10
			f_close(&SDFile);
 800c930:	bf0c      	ite	eq
 800c932:	4820      	ldreq	r0, [pc, #128]	; (800c9b4 <Write_Flash+0x178>)
			f_close(&USBHFile);
 800c934:	481d      	ldrne	r0, [pc, #116]	; (800c9ac <Write_Flash+0x170>)
 800c936:	f009 f888 	bl	8015a4a <f_close>
		return FLASH_CHECKSIZE_FAIL;
 800c93a:	2008      	movs	r0, #8
 800c93c:	e7bf      	b.n	800c8be <Write_Flash+0x82>
	Bootloader_Init();
 800c93e:	f7ff fd57 	bl	800c3f0 <Bootloader_Init>
	printf("Erasing flash...\n\r");
 800c942:	4820      	ldr	r0, [pc, #128]	; (800c9c4 <Write_Flash+0x188>)
 800c944:	f009 fbce 	bl	80160e4 <iprintf>
	draw_text("Erase Flash...", 0, 10, Tahoma8, 1, 0);
 800c948:	2301      	movs	r3, #1
 800c94a:	4621      	mov	r1, r4
 800c94c:	220a      	movs	r2, #10
 800c94e:	9401      	str	r4, [sp, #4]
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	481d      	ldr	r0, [pc, #116]	; (800c9c8 <Write_Flash+0x18c>)
 800c954:	4b1d      	ldr	r3, [pc, #116]	; (800c9cc <Write_Flash+0x190>)
 800c956:	f000 fe36 	bl	800d5c6 <draw_text>
	glcd_refresh();
 800c95a:	f001 fbe5 	bl	800e128 <glcd_refresh>
	if (Bootloader_Erase() != BL_OK) {
 800c95e:	f7ff fd65 	bl	800c42c <Bootloader_Erase>
 800c962:	4604      	mov	r4, r0
 800c964:	b3b0      	cbz	r0, 800c9d4 <Write_Flash+0x198>
		printf("Flashe erase error.\n\r");
 800c966:	481a      	ldr	r0, [pc, #104]	; (800c9d0 <Write_Flash+0x194>)
 800c968:	f009 fbbc 	bl	80160e4 <iprintf>
		return FLASH_ERASE_FAIL;
 800c96c:	2005      	movs	r0, #5
 800c96e:	e7a6      	b.n	800c8be <Write_Flash+0x82>
 800c970:	08000287 	.word	0x08000287
 800c974:	0800028d 	.word	0x0800028d
 800c978:	20000004 	.word	0x20000004
 800c97c:	08000293 	.word	0x08000293
 800c980:	080002a5 	.word	0x080002a5
 800c984:	2000177d 	.word	0x2000177d
 800c988:	2000481c 	.word	0x2000481c
 800c98c:	0800033b 	.word	0x0800033b
 800c990:	080001d4 	.word	0x080001d4
 800c994:	10000000 	.word	0x10000000
 800c998:	080002eb 	.word	0x080002eb
 800c99c:	08000311 	.word	0x08000311
 800c9a0:	08000327 	.word	0x08000327
 800c9a4:	20001779 	.word	0x20001779
 800c9a8:	200037e4 	.word	0x200037e4
 800c9ac:	20001784 	.word	0x20001784
 800c9b0:	08000376 	.word	0x08000376
 800c9b4:	200027b4 	.word	0x200027b4
 800c9b8:	08000209 	.word	0x08000209
 800c9bc:	08000354 	.word	0x08000354
 800c9c0:	0800039a 	.word	0x0800039a
 800c9c4:	080003c0 	.word	0x080003c0
 800c9c8:	080003d3 	.word	0x080003d3
 800c9cc:	0800098c 	.word	0x0800098c
 800c9d0:	080003e2 	.word	0x080003e2
	printf("Flash erase finished.\n\r");
 800c9d4:	488a      	ldr	r0, [pc, #552]	; (800cc00 <Write_Flash+0x3c4>)
			fr = f_read(&SDFile, &data, 4, &num);
 800c9d6:	f8df a23c 	ldr.w	sl, [pc, #572]	; 800cc14 <Write_Flash+0x3d8>
			printf("%d %% was flahsed(%lu/%lu)\n\r",
 800c9da:	f8df b274 	ldr.w	fp, [pc, #628]	; 800cc50 <Write_Flash+0x414>
	printf("Flash erase finished.\n\r");
 800c9de:	f009 fb81 	bl	80160e4 <iprintf>
	HAL_Delay(1000);
 800c9e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c9e6:	f001 ff3f 	bl	800e868 <HAL_Delay>
	printf("Starting programming...\n\r");
 800c9ea:	4886      	ldr	r0, [pc, #536]	; (800cc04 <Write_Flash+0x3c8>)
 800c9ec:	f009 fb7a 	bl	80160e4 <iprintf>
	Bootloader_FlashBegin(); //unlock flash
 800c9f0:	f7ff fd38 	bl	800c464 <Bootloader_FlashBegin>
		if (ID_mem == SD_ID)
 800c9f4:	2d0a      	cmp	r5, #10
		data = 0xFFFFFFFF; // flash write is in 32bit mode write
 800c9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9fa:	9306      	str	r3, [sp, #24]
			fr = f_read(&SDFile, &data, 4, &num);
 800c9fc:	f04f 0204 	mov.w	r2, #4
 800ca00:	ab05      	add	r3, sp, #20
 800ca02:	a906      	add	r1, sp, #24
 800ca04:	bf0c      	ite	eq
 800ca06:	4650      	moveq	r0, sl
			fr = f_read(&USBHFile, &data, 4, &num);
 800ca08:	487f      	ldrne	r0, [pc, #508]	; (800cc08 <Write_Flash+0x3cc>)
 800ca0a:	f008 ff17 	bl	801583c <f_read>
		if (num) {
 800ca0e:	9b05      	ldr	r3, [sp, #20]
			fr = f_read(&USBHFile, &data, 4, &num);
 800ca10:	4680      	mov	r8, r0
		if (num) {
 800ca12:	b133      	cbz	r3, 800ca22 <Write_Flash+0x1e6>
			status = Bootloader_FlashNext(data);
 800ca14:	9806      	ldr	r0, [sp, #24]
 800ca16:	f7ff fd31 	bl	800c47c <Bootloader_FlashNext>
			if (status == BL_OK) {
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	f040 80c9 	bne.w	800cbb2 <Write_Flash+0x376>
				cntr++;
 800ca20:	3401      	adds	r4, #1
		if (cntr % 256 == 0) {
 800ca22:	f014 09ff 	ands.w	r9, r4, #255	; 0xff
 800ca26:	d11d      	bne.n	800ca64 <Write_Flash+0x228>
					(uint8_t) ((uint32_t) (cntr * 4) * 100 / (uint32_t) filesize)+1,
 800ca28:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800ca2c:	4366      	muls	r6, r4
 800ca2e:	fbb6 f6f7 	udiv	r6, r6, r7
 800ca32:	b2f6      	uxtb	r6, r6
			printf("%d %% was flahsed(%lu/%lu)\n\r",
 800ca34:	3601      	adds	r6, #1
 800ca36:	463b      	mov	r3, r7
 800ca38:	00a2      	lsls	r2, r4, #2
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4658      	mov	r0, fp
 800ca3e:	f009 fb51 	bl	80160e4 <iprintf>
			sprintf(tmp_str,"%03d%%_flashed",(uint8_t) ((uint32_t) (cntr * 4) * 100 / (uint32_t) filesize)+1);
 800ca42:	4632      	mov	r2, r6
 800ca44:	4971      	ldr	r1, [pc, #452]	; (800cc0c <Write_Flash+0x3d0>)
 800ca46:	a807      	add	r0, sp, #28
 800ca48:	f009 fb74 	bl	8016134 <siprintf>
			draw_text(tmp_str, 0, 20, Tahoma8, 1, 0);
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	2214      	movs	r2, #20
 800ca52:	4b6f      	ldr	r3, [pc, #444]	; (800cc10 <Write_Flash+0x3d4>)
 800ca54:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca58:	4649      	mov	r1, r9
 800ca5a:	a807      	add	r0, sp, #28
 800ca5c:	f000 fdb3 	bl	800d5c6 <draw_text>
			glcd_refresh();
 800ca60:	f001 fb62 	bl	800e128 <glcd_refresh>
	} while ((fr == FR_OK) && (num > 0));
 800ca64:	f1b8 0f00 	cmp.w	r8, #0
 800ca68:	d102      	bne.n	800ca70 <Write_Flash+0x234>
 800ca6a:	9b05      	ldr	r3, [sp, #20]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1c1      	bne.n	800c9f4 <Write_Flash+0x1b8>
	Bootloader_FlashEnd();
 800ca70:	f7ff fd26 	bl	800c4c0 <Bootloader_FlashEnd>
	if (ID_mem == SD_ID)
 800ca74:	2d0a      	cmp	r5, #10
		f_close(&SDFile);
 800ca76:	bf0c      	ite	eq
 800ca78:	4866      	ldreq	r0, [pc, #408]	; (800cc14 <Write_Flash+0x3d8>)
		f_close(&USBHFile);
 800ca7a:	4863      	ldrne	r0, [pc, #396]	; (800cc08 <Write_Flash+0x3cc>)
 800ca7c:	f008 ffe5 	bl	8015a4a <f_close>
	if(fr==FR_OK)
 800ca80:	f1b8 0f00 	cmp.w	r8, #0
 800ca84:	f040 80a1 	bne.w	800cbca <Write_Flash+0x38e>
		printf("Programming finished.\n\r");
 800ca88:	4863      	ldr	r0, [pc, #396]	; (800cc18 <Write_Flash+0x3dc>)
 800ca8a:	f009 fb2b 	bl	80160e4 <iprintf>
	printf("Flashed: %lu bytes.\n\r", (cntr * 4));
 800ca8e:	00a1      	lsls	r1, r4, #2
 800ca90:	4862      	ldr	r0, [pc, #392]	; (800cc1c <Write_Flash+0x3e0>)
 800ca92:	f009 fb27 	bl	80160e4 <iprintf>
	if (ID_mem == SD_ID)
 800ca96:	2d0a      	cmp	r5, #10
		fr = f_open(&SDFile, filename, FA_READ);
 800ca98:	f04f 0201 	mov.w	r2, #1
 800ca9c:	a90f      	add	r1, sp, #60	; 0x3c
	if (ID_mem == SD_ID)
 800ca9e:	f040 8099 	bne.w	800cbd4 <Write_Flash+0x398>
		fr = f_open(&SDFile, filename, FA_READ);
 800caa2:	485c      	ldr	r0, [pc, #368]	; (800cc14 <Write_Flash+0x3d8>)
 800caa4:	f008 fdb8 	bl	8015618 <f_open>
	if (fr != FR_OK) {
 800caa8:	4604      	mov	r4, r0
 800caaa:	2800      	cmp	r0, #0
 800caac:	f47f af29 	bne.w	800c902 <Write_Flash+0xc6>
		printf("Software found on SD.\n\r");
 800cab0:	485b      	ldr	r0, [pc, #364]	; (800cc20 <Write_Flash+0x3e4>)
	cntr = 0;
 800cab2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cc54 <Write_Flash+0x418>
			printf("%d %% was verified(%lu/%lu)\n\r",
 800cab6:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 800cc58 <Write_Flash+0x41c>
		printf("Software found on USBH.\n\r");
 800caba:	f009 fb13 	bl	80160e4 <iprintf>
	cntr = 0;
 800cabe:	2600      	movs	r6, #0
		data = 0xFFFFFFFF;
 800cac0:	a928      	add	r1, sp, #160	; 0xa0
		if (ID_mem == SD_ID)
 800cac2:	2d0a      	cmp	r5, #10
		data = 0xFFFFFFFF;
 800cac4:	f04f 33ff 	mov.w	r3, #4294967295
 800cac8:	f841 3d88 	str.w	r3, [r1, #-136]!
			fr = f_read(&SDFile, &data, 4, &num);
 800cacc:	f04f 0204 	mov.w	r2, #4
 800cad0:	ab05      	add	r3, sp, #20
 800cad2:	bf0c      	ite	eq
 800cad4:	484f      	ldreq	r0, [pc, #316]	; (800cc14 <Write_Flash+0x3d8>)
			fr = f_read(&USBHFile, &data, 4, &num);
 800cad6:	484c      	ldrne	r0, [pc, #304]	; (800cc08 <Write_Flash+0x3cc>)
 800cad8:	f008 feb0 	bl	801583c <f_read>
		if (num) {
 800cadc:	9b05      	ldr	r3, [sp, #20]
			fr = f_read(&USBHFile, &data, 4, &num);
 800cade:	4681      	mov	r9, r0
		if (num) {
 800cae0:	b13b      	cbz	r3, 800caf2 <Write_Flash+0x2b6>
			if (*(uint32_t*) addr == (uint32_t) data) {
 800cae2:	f8d8 2000 	ldr.w	r2, [r8]
 800cae6:	9b06      	ldr	r3, [sp, #24]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d17c      	bne.n	800cbe6 <Write_Flash+0x3aa>
				addr += 4;
 800caec:	f108 0804 	add.w	r8, r8, #4
				cntr++;
 800caf0:	3601      	adds	r6, #1
		if (cntr % 256 == 0) {
 800caf2:	f016 0aff 	ands.w	sl, r6, #255	; 0xff
 800caf6:	d11d      	bne.n	800cb34 <Write_Flash+0x2f8>
					(uint8_t) ((uint32_t) (cntr * 4) * 100 / (uint32_t) filesize)+1,
 800caf8:	f44f 74c8 	mov.w	r4, #400	; 0x190
 800cafc:	4374      	muls	r4, r6
 800cafe:	fbb4 f4f7 	udiv	r4, r4, r7
 800cb02:	b2e4      	uxtb	r4, r4
			printf("%d %% was verified(%lu/%lu)\n\r",
 800cb04:	3401      	adds	r4, #1
 800cb06:	463b      	mov	r3, r7
 800cb08:	00b2      	lsls	r2, r6, #2
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	4658      	mov	r0, fp
 800cb0e:	f009 fae9 	bl	80160e4 <iprintf>
			sprintf(tmp_str,"%03d%% verified",(uint8_t) ((uint32_t) (cntr * 4) * 100 / (uint32_t) filesize)+1);
 800cb12:	4622      	mov	r2, r4
 800cb14:	4943      	ldr	r1, [pc, #268]	; (800cc24 <Write_Flash+0x3e8>)
 800cb16:	a807      	add	r0, sp, #28
 800cb18:	f009 fb0c 	bl	8016134 <siprintf>
			draw_text(tmp_str, 0, 30, Tahoma8, 1, 0);
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	221e      	movs	r2, #30
 800cb22:	4b3b      	ldr	r3, [pc, #236]	; (800cc10 <Write_Flash+0x3d4>)
 800cb24:	f8cd a004 	str.w	sl, [sp, #4]
 800cb28:	4651      	mov	r1, sl
 800cb2a:	a807      	add	r0, sp, #28
 800cb2c:	f000 fd4b 	bl	800d5c6 <draw_text>
			glcd_refresh();
 800cb30:	f001 fafa 	bl	800e128 <glcd_refresh>
	} while ((fr == FR_OK) && (num > 0));
 800cb34:	f1b9 0f00 	cmp.w	r9, #0
 800cb38:	d102      	bne.n	800cb40 <Write_Flash+0x304>
 800cb3a:	9b05      	ldr	r3, [sp, #20]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1bf      	bne.n	800cac0 <Write_Flash+0x284>
	printf("Verification passed.\n\r");
 800cb40:	4839      	ldr	r0, [pc, #228]	; (800cc28 <Write_Flash+0x3ec>)
 800cb42:	f009 facf 	bl	80160e4 <iprintf>
	if (ID_mem == SD_ID)
 800cb46:	2d0a      	cmp	r5, #10
		f_close(&SDFile);
 800cb48:	bf0c      	ite	eq
 800cb4a:	4832      	ldreq	r0, [pc, #200]	; (800cc14 <Write_Flash+0x3d8>)
		f_close(&USBHFile);
 800cb4c:	482e      	ldrne	r0, [pc, #184]	; (800cc08 <Write_Flash+0x3cc>)
 800cb4e:	f008 ff7c 	bl	8015a4a <f_close>
	printf("flashed programmed & verified\n\r");
 800cb52:	4836      	ldr	r0, [pc, #216]	; (800cc2c <Write_Flash+0x3f0>)
 800cb54:	f009 fac6 	bl	80160e4 <iprintf>
	if(HAL_FLASH_Unlock()!=HAL_OK)
 800cb58:	f002 f950 	bl	800edfc <HAL_FLASH_Unlock>
 800cb5c:	b110      	cbz	r0, 800cb64 <Write_Flash+0x328>
		printf("flash unlock error\n\r");
 800cb5e:	4834      	ldr	r0, [pc, #208]	; (800cc30 <Write_Flash+0x3f4>)
 800cb60:	f009 fac0 	bl	80160e4 <iprintf>
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800cb64:	9b03      	ldr	r3, [sp, #12]
	if ((r = EE_WriteVariable(VirtAddVarTab[0], (uint16_t) version))
 800cb66:	9902      	ldr	r1, [sp, #8]
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800cb68:	2064      	movs	r0, #100	; 0x64
 800cb6a:	8018      	strh	r0, [r3, #0]
	if ((r = EE_WriteVariable(VirtAddVarTab[0], (uint16_t) version))
 800cb6c:	f000 fa32 	bl	800cfd4 <EE_WriteVariable>
 800cb70:	4601      	mov	r1, r0
 800cb72:	b110      	cbz	r0, 800cb7a <Write_Flash+0x33e>
		printf("EE Write Error %d\n\r", r);
 800cb74:	482f      	ldr	r0, [pc, #188]	; (800cc34 <Write_Flash+0x3f8>)
 800cb76:	f009 fab5 	bl	80160e4 <iprintf>
	HAL_Delay(500);
 800cb7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cb7e:	f001 fe73 	bl	800e868 <HAL_Delay>
	if((r=EE_ReadVariable(VirtAddVarTab[0], &Data))!=HAL_OK){
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	f10d 0112 	add.w	r1, sp, #18
 800cb88:	8818      	ldrh	r0, [r3, #0]
 800cb8a:	f000 f92f 	bl	800cdec <EE_ReadVariable>
 800cb8e:	4601      	mov	r1, r0
 800cb90:	b110      	cbz	r0, 800cb98 <Write_Flash+0x35c>
		printf("EE Read Error %d\n\r", r);;
 800cb92:	4829      	ldr	r0, [pc, #164]	; (800cc38 <Write_Flash+0x3fc>)
 800cb94:	f009 faa6 	bl	80160e4 <iprintf>
	printf("Version Write in Flash %d\n\r", Data);
 800cb98:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800cb9c:	4827      	ldr	r0, [pc, #156]	; (800cc3c <Write_Flash+0x400>)
 800cb9e:	f009 faa1 	bl	80160e4 <iprintf>
	HAL_Delay(500);
 800cba2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cba6:	f001 fe5f 	bl	800e868 <HAL_Delay>
	HAL_FLASH_Lock();
 800cbaa:	f002 f939 	bl	800ee20 <HAL_FLASH_Lock>
	return FLASH_WRITE_OK;
 800cbae:	200b      	movs	r0, #11
 800cbb0:	e685      	b.n	800c8be <Write_Flash+0x82>
				printf("Programming error at: %lu byte\n\r", (cntr * 4));
 800cbb2:	00a1      	lsls	r1, r4, #2
 800cbb4:	4822      	ldr	r0, [pc, #136]	; (800cc40 <Write_Flash+0x404>)
 800cbb6:	f009 fa95 	bl	80160e4 <iprintf>
				if (ID_mem == SD_ID)
 800cbba:	2d0a      	cmp	r5, #10
					f_close(&SDFile);
 800cbbc:	bf0c      	ite	eq
 800cbbe:	4815      	ldreq	r0, [pc, #84]	; (800cc14 <Write_Flash+0x3d8>)
					f_close(&USBHFile);
 800cbc0:	4811      	ldrne	r0, [pc, #68]	; (800cc08 <Write_Flash+0x3cc>)
 800cbc2:	f008 ff42 	bl	8015a4a <f_close>
				return FLASH_WRITE_FAIL;
 800cbc6:	2006      	movs	r0, #6
 800cbc8:	e679      	b.n	800c8be <Write_Flash+0x82>
		printf("Programming error(%d)\n\r",fr);
 800cbca:	4641      	mov	r1, r8
 800cbcc:	481d      	ldr	r0, [pc, #116]	; (800cc44 <Write_Flash+0x408>)
 800cbce:	f009 fa89 	bl	80160e4 <iprintf>
 800cbd2:	e75c      	b.n	800ca8e <Write_Flash+0x252>
		fr = f_open(&USBHFile, filename, FA_READ);
 800cbd4:	480c      	ldr	r0, [pc, #48]	; (800cc08 <Write_Flash+0x3cc>)
 800cbd6:	f008 fd1f 	bl	8015618 <f_open>
	if (fr != FR_OK) {
 800cbda:	4604      	mov	r4, r0
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	f47f ae90 	bne.w	800c902 <Write_Flash+0xc6>
		printf("Software found on USBH.\n\r");
 800cbe2:	4819      	ldr	r0, [pc, #100]	; (800cc48 <Write_Flash+0x40c>)
 800cbe4:	e765      	b.n	800cab2 <Write_Flash+0x276>
				printf("Verification error at: %lu byte.\n\r", (cntr * 4));
 800cbe6:	00b1      	lsls	r1, r6, #2
 800cbe8:	4818      	ldr	r0, [pc, #96]	; (800cc4c <Write_Flash+0x410>)
 800cbea:	f009 fa7b 	bl	80160e4 <iprintf>
				if (ID_mem == SD_ID)
 800cbee:	2d0a      	cmp	r5, #10
					f_close(&SDFile);
 800cbf0:	bf0c      	ite	eq
 800cbf2:	4808      	ldreq	r0, [pc, #32]	; (800cc14 <Write_Flash+0x3d8>)
					f_close(&USBHFile);
 800cbf4:	4804      	ldrne	r0, [pc, #16]	; (800cc08 <Write_Flash+0x3cc>)
 800cbf6:	f008 ff28 	bl	8015a4a <f_close>
				return FLASH_VERIFY_FAIL;
 800cbfa:	2009      	movs	r0, #9
 800cbfc:	e65f      	b.n	800c8be <Write_Flash+0x82>
 800cbfe:	bf00      	nop
 800cc00:	080003f8 	.word	0x080003f8
 800cc04:	08000410 	.word	0x08000410
 800cc08:	20001784 	.word	0x20001784
 800cc0c:	08000468 	.word	0x08000468
 800cc10:	0800098c 	.word	0x0800098c
 800cc14:	200027b4 	.word	0x200027b4
 800cc18:	08000477 	.word	0x08000477
 800cc1c:	080004a7 	.word	0x080004a7
 800cc20:	080004bd 	.word	0x080004bd
 800cc24:	08000530 	.word	0x08000530
 800cc28:	08000540 	.word	0x08000540
 800cc2c:	08000557 	.word	0x08000557
 800cc30:	08000577 	.word	0x08000577
 800cc34:	0800058c 	.word	0x0800058c
 800cc38:	080005a0 	.word	0x080005a0
 800cc3c:	080005b3 	.word	0x080005b3
 800cc40:	0800042a 	.word	0x0800042a
 800cc44:	0800048f 	.word	0x0800048f
 800cc48:	080004d5 	.word	0x080004d5
 800cc4c:	080004ef 	.word	0x080004ef
 800cc50:	0800044b 	.word	0x0800044b
 800cc54:	08020000 	.word	0x08020000
 800cc58:	08000512 	.word	0x08000512

0800cc5c <MX_CRC_Init>:

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 800cc5c:	4805      	ldr	r0, [pc, #20]	; (800cc74 <MX_CRC_Init+0x18>)
{
 800cc5e:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800cc60:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <MX_CRC_Init+0x1c>)
 800cc62:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800cc64:	f001 fe7c 	bl	800e960 <HAL_CRC_Init>
 800cc68:	b118      	cbz	r0, 800cc72 <MX_CRC_Init+0x16>
  {
    Error_Handler();
  }

}
 800cc6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800cc6e:	f000 bff3 	b.w	800dc58 <Error_Handler>
}
 800cc72:	bd08      	pop	{r3, pc}
 800cc74:	200014d0 	.word	0x200014d0
 800cc78:	40023000 	.word	0x40023000

0800cc7c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800cc7c:	6802      	ldr	r2, [r0, #0]
 800cc7e:	4b09      	ldr	r3, [pc, #36]	; (800cca4 <HAL_CRC_MspInit+0x28>)
 800cc80:	429a      	cmp	r2, r3
{
 800cc82:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 800cc84:	d10b      	bne.n	800cc9e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800cc86:	2300      	movs	r3, #0
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	4b07      	ldr	r3, [pc, #28]	; (800cca8 <HAL_CRC_MspInit+0x2c>)
 800cc8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cc92:	631a      	str	r2, [r3, #48]	; 0x30
 800cc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc9a:	9301      	str	r3, [sp, #4]
 800cc9c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800cc9e:	b002      	add	sp, #8
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	40023000 	.word	0x40023000
 800cca8:	40023800 	.word	0x40023800

0800ccac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800ccac:	b513      	push	{r0, r1, r4, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ccae:	4b0f      	ldr	r3, [pc, #60]	; (800ccec <MX_DMA_Init+0x40>)
 800ccb0:	2400      	movs	r4, #0
 800ccb2:	9401      	str	r4, [sp, #4]
 800ccb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccb6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ccba:	631a      	str	r2, [r3, #48]	; 0x30
 800ccbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800ccc2:	4622      	mov	r2, r4
 800ccc4:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ccc6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800ccc8:	203b      	movs	r0, #59	; 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ccca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800cccc:	f001 fdf2 	bl	800e8b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800ccd0:	203b      	movs	r0, #59	; 0x3b
 800ccd2:	f001 fe23 	bl	800e91c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800ccd6:	4622      	mov	r2, r4
 800ccd8:	4621      	mov	r1, r4
 800ccda:	2045      	movs	r0, #69	; 0x45
 800ccdc:	f001 fdea 	bl	800e8b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800cce0:	2045      	movs	r0, #69	; 0x45

}
 800cce2:	b002      	add	sp, #8
 800cce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800cce8:	f001 be18 	b.w	800e91c <HAL_NVIC_EnableIRQ>
 800ccec:	40023800 	.word	0x40023800

0800ccf0 <EE_VerifyPageFullyErased>:
 800ccf0:	4b06      	ldr	r3, [pc, #24]	; (800cd0c <EE_VerifyPageFullyErased+0x1c>)
 800ccf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccf6:	4298      	cmp	r0, r3
 800ccf8:	d901      	bls.n	800ccfe <EE_VerifyPageFullyErased+0xe>
 800ccfa:	2001      	movs	r0, #1
 800ccfc:	4770      	bx	lr
 800ccfe:	8801      	ldrh	r1, [r0, #0]
 800cd00:	428a      	cmp	r2, r1
 800cd02:	d101      	bne.n	800cd08 <EE_VerifyPageFullyErased+0x18>
 800cd04:	3004      	adds	r0, #4
 800cd06:	e7f6      	b.n	800ccf6 <EE_VerifyPageFullyErased+0x6>
 800cd08:	2000      	movs	r0, #0
 800cd0a:	4770      	bx	lr
 800cd0c:	08007fff 	.word	0x08007fff

0800cd10 <EE_VerifyPageFullWriteVariable>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	4b1b      	ldr	r3, [pc, #108]	; (800cd80 <EE_VerifyPageFullWriteVariable+0x70>)
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	4605      	mov	r5, r0
 800cd18:	b298      	uxth	r0, r3
 800cd1a:	4b1a      	ldr	r3, [pc, #104]	; (800cd84 <EE_VerifyPageFullWriteVariable+0x74>)
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	b983      	cbnz	r3, 800cd44 <EE_VerifyPageFullWriteVariable+0x34>
 800cd22:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 800cd26:	1ac3      	subs	r3, r0, r3
 800cd28:	bf18      	it	ne
 800cd2a:	2301      	movne	r3, #1
 800cd2c:	f503 5400 	add.w	r4, r3, #8192	; 0x2000
 800cd30:	4815      	ldr	r0, [pc, #84]	; (800cd88 <EE_VerifyPageFullWriteVariable+0x78>)
 800cd32:	3401      	adds	r4, #1
 800cd34:	3301      	adds	r3, #1
 800cd36:	03a4      	lsls	r4, r4, #14
 800cd38:	eb00 3383 	add.w	r3, r0, r3, lsl #14
 800cd3c:	429c      	cmp	r4, r3
 800cd3e:	d308      	bcc.n	800cd52 <EE_VerifyPageFullWriteVariable+0x42>
 800cd40:	2080      	movs	r0, #128	; 0x80
 800cd42:	e011      	b.n	800cd68 <EE_VerifyPageFullWriteVariable+0x58>
 800cd44:	b9d0      	cbnz	r0, 800cd7c <EE_VerifyPageFullWriteVariable+0x6c>
 800cd46:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800cd4a:	1a9a      	subs	r2, r3, r2
 800cd4c:	4253      	negs	r3, r2
 800cd4e:	4153      	adcs	r3, r2
 800cd50:	e7ec      	b.n	800cd2c <EE_VerifyPageFullWriteVariable+0x1c>
 800cd52:	6822      	ldr	r2, [r4, #0]
 800cd54:	3201      	adds	r2, #1
 800cd56:	d10f      	bne.n	800cd78 <EE_VerifyPageFullWriteVariable+0x68>
 800cd58:	460a      	mov	r2, r1
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	4621      	mov	r1, r4
 800cd5e:	2001      	movs	r0, #1
 800cd60:	f002 f892 	bl	800ee88 <HAL_FLASH_Program>
 800cd64:	b108      	cbz	r0, 800cd6a <EE_VerifyPageFullWriteVariable+0x5a>
 800cd66:	b280      	uxth	r0, r0
 800cd68:	bd38      	pop	{r3, r4, r5, pc}
 800cd6a:	462a      	mov	r2, r5
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	1ca1      	adds	r1, r4, #2
 800cd70:	2001      	movs	r0, #1
 800cd72:	f002 f889 	bl	800ee88 <HAL_FLASH_Program>
 800cd76:	e7f6      	b.n	800cd66 <EE_VerifyPageFullWriteVariable+0x56>
 800cd78:	3404      	adds	r4, #4
 800cd7a:	e7df      	b.n	800cd3c <EE_VerifyPageFullWriteVariable+0x2c>
 800cd7c:	20ab      	movs	r0, #171	; 0xab
 800cd7e:	e7f3      	b.n	800cd68 <EE_VerifyPageFullWriteVariable+0x58>
 800cd80:	08004000 	.word	0x08004000
 800cd84:	08008000 	.word	0x08008000
 800cd88:	08003fff 	.word	0x08003fff

0800cd8c <EE_Format>:
 800cd8c:	b510      	push	{r4, lr}
 800cd8e:	2300      	movs	r3, #0
 800cd90:	b086      	sub	sp, #24
 800cd92:	e9cd 3300 	strd	r3, r3, [sp]
 800cd96:	2301      	movs	r3, #1
 800cd98:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800cd9c:	4811      	ldr	r0, [pc, #68]	; (800cde4 <EE_Format+0x58>)
 800cd9e:	2302      	movs	r3, #2
 800cda0:	9305      	str	r3, [sp, #20]
 800cda2:	f7ff ffa5 	bl	800ccf0 <EE_VerifyPageFullyErased>
 800cda6:	b198      	cbz	r0, 800cdd0 <EE_Format+0x44>
 800cda8:	2200      	movs	r2, #0
 800cdaa:	2300      	movs	r3, #0
 800cdac:	490d      	ldr	r1, [pc, #52]	; (800cde4 <EE_Format+0x58>)
 800cdae:	2001      	movs	r0, #1
 800cdb0:	f002 f86a 	bl	800ee88 <HAL_FLASH_Program>
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	b990      	cbnz	r0, 800cdde <EE_Format+0x52>
 800cdb8:	2302      	movs	r3, #2
 800cdba:	480b      	ldr	r0, [pc, #44]	; (800cde8 <EE_Format+0x5c>)
 800cdbc:	9303      	str	r3, [sp, #12]
 800cdbe:	f7ff ff97 	bl	800ccf0 <EE_VerifyPageFullyErased>
 800cdc2:	b960      	cbnz	r0, 800cdde <EE_Format+0x52>
 800cdc4:	4669      	mov	r1, sp
 800cdc6:	a801      	add	r0, sp, #4
 800cdc8:	f002 f908 	bl	800efdc <HAL_FLASHEx_Erase>
 800cdcc:	4604      	mov	r4, r0
 800cdce:	e006      	b.n	800cdde <EE_Format+0x52>
 800cdd0:	4669      	mov	r1, sp
 800cdd2:	a801      	add	r0, sp, #4
 800cdd4:	f002 f902 	bl	800efdc <HAL_FLASHEx_Erase>
 800cdd8:	4604      	mov	r4, r0
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d0e4      	beq.n	800cda8 <EE_Format+0x1c>
 800cdde:	4620      	mov	r0, r4
 800cde0:	b006      	add	sp, #24
 800cde2:	bd10      	pop	{r4, pc}
 800cde4:	08004000 	.word	0x08004000
 800cde8:	08008000 	.word	0x08008000

0800cdec <EE_ReadVariable>:
 800cdec:	4b0f      	ldr	r3, [pc, #60]	; (800ce2c <EE_ReadVariable+0x40>)
 800cdee:	4a10      	ldr	r2, [pc, #64]	; (800ce30 <EE_ReadVariable+0x44>)
 800cdf0:	881b      	ldrh	r3, [r3, #0]
 800cdf2:	8812      	ldrh	r2, [r2, #0]
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	b510      	push	{r4, lr}
 800cdf8:	b292      	uxth	r2, r2
 800cdfa:	b10b      	cbz	r3, 800ce00 <EE_ReadVariable+0x14>
 800cdfc:	b99a      	cbnz	r2, 800ce26 <EE_ReadVariable+0x3a>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	039c      	lsls	r4, r3, #14
 800ce02:	4a0c      	ldr	r2, [pc, #48]	; (800ce34 <EE_ReadVariable+0x48>)
 800ce04:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <EE_ReadVariable+0x4c>)
 800ce06:	4422      	add	r2, r4
 800ce08:	4423      	add	r3, r4
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d301      	bcc.n	800ce12 <EE_ReadVariable+0x26>
 800ce0e:	2001      	movs	r0, #1
 800ce10:	e006      	b.n	800ce20 <EE_ReadVariable+0x34>
 800ce12:	8814      	ldrh	r4, [r2, #0]
 800ce14:	42a0      	cmp	r0, r4
 800ce16:	d104      	bne.n	800ce22 <EE_ReadVariable+0x36>
 800ce18:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800ce1c:	800b      	strh	r3, [r1, #0]
 800ce1e:	2000      	movs	r0, #0
 800ce20:	bd10      	pop	{r4, pc}
 800ce22:	3a04      	subs	r2, #4
 800ce24:	e7f1      	b.n	800ce0a <EE_ReadVariable+0x1e>
 800ce26:	20ab      	movs	r0, #171	; 0xab
 800ce28:	e7fa      	b.n	800ce20 <EE_ReadVariable+0x34>
 800ce2a:	bf00      	nop
 800ce2c:	08004000 	.word	0x08004000
 800ce30:	08008000 	.word	0x08008000
 800ce34:	08007ffe 	.word	0x08007ffe
 800ce38:	08004002 	.word	0x08004002

0800ce3c <EE_Init>:
 800ce3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce40:	485e      	ldr	r0, [pc, #376]	; (800cfbc <EE_Init+0x180>)
 800ce42:	4a5f      	ldr	r2, [pc, #380]	; (800cfc0 <EE_Init+0x184>)
 800ce44:	8804      	ldrh	r4, [r0, #0]
 800ce46:	b086      	sub	sp, #24
 800ce48:	2100      	movs	r1, #0
 800ce4a:	b2a3      	uxth	r3, r4
 800ce4c:	9100      	str	r1, [sp, #0]
 800ce4e:	8814      	ldrh	r4, [r2, #0]
 800ce50:	9101      	str	r1, [sp, #4]
 800ce52:	f64e 66ee 	movw	r6, #61166	; 0xeeee
 800ce56:	2101      	movs	r1, #1
 800ce58:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800ce5c:	42b3      	cmp	r3, r6
 800ce5e:	f04f 0102 	mov.w	r1, #2
 800ce62:	b2a4      	uxth	r4, r4
 800ce64:	9105      	str	r1, [sp, #20]
 800ce66:	d028      	beq.n	800ceba <EE_Init+0x7e>
 800ce68:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800ce6c:	42ab      	cmp	r3, r5
 800ce6e:	d005      	beq.n	800ce7c <EE_Init+0x40>
 800ce70:	b90b      	cbnz	r3, 800ce76 <EE_Init+0x3a>
 800ce72:	2c00      	cmp	r4, #0
 800ce74:	d166      	bne.n	800cf44 <EE_Init+0x108>
 800ce76:	f7ff ff89 	bl	800cd8c <EE_Format>
 800ce7a:	e01b      	b.n	800ceb4 <EE_Init+0x78>
 800ce7c:	b944      	cbnz	r4, 800ce90 <EE_Init+0x54>
 800ce7e:	f7ff ff37 	bl	800ccf0 <EE_VerifyPageFullyErased>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	f000 8094 	beq.w	800cfb0 <EE_Init+0x174>
 800ce88:	2000      	movs	r0, #0
 800ce8a:	b006      	add	sp, #24
 800ce8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce90:	42b4      	cmp	r4, r6
 800ce92:	d1f0      	bne.n	800ce76 <EE_Init+0x3a>
 800ce94:	f7ff ff2c 	bl	800ccf0 <EE_VerifyPageFullyErased>
 800ce98:	b930      	cbnz	r0, 800cea8 <EE_Init+0x6c>
 800ce9a:	4669      	mov	r1, sp
 800ce9c:	a801      	add	r0, sp, #4
 800ce9e:	f002 f89d 	bl	800efdc <HAL_FLASHEx_Erase>
 800cea2:	b108      	cbz	r0, 800cea8 <EE_Init+0x6c>
 800cea4:	b280      	uxth	r0, r0
 800cea6:	e7f0      	b.n	800ce8a <EE_Init+0x4e>
 800cea8:	4945      	ldr	r1, [pc, #276]	; (800cfc0 <EE_Init+0x184>)
 800ceaa:	2200      	movs	r2, #0
 800ceac:	2300      	movs	r3, #0
 800ceae:	2001      	movs	r0, #1
 800ceb0:	f001 ffea 	bl	800ee88 <HAL_FLASH_Program>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d1f5      	bne.n	800cea4 <EE_Init+0x68>
 800ceb8:	e7e6      	b.n	800ce88 <EE_Init+0x4c>
 800ceba:	bb84      	cbnz	r4, 800cf1e <EE_Init+0xe2>
 800cebc:	4f41      	ldr	r7, [pc, #260]	; (800cfc4 <EE_Init+0x188>)
 800cebe:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800cfcc <EE_Init+0x190>
 800cec2:	f04f 36ff 	mov.w	r6, #4294967295
 800cec6:	46b8      	mov	r8, r7
 800cec8:	f8b9 3000 	ldrh.w	r3, [r9]
 800cecc:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800ced0:	4298      	cmp	r0, r3
 800ced2:	bf08      	it	eq
 800ced4:	b226      	sxtheq	r6, r4
 800ced6:	42b4      	cmp	r4, r6
 800ced8:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800cedc:	d111      	bne.n	800cf02 <EE_Init+0xc6>
 800cede:	3401      	adds	r4, #1
 800cee0:	2c29      	cmp	r4, #41	; 0x29
 800cee2:	d1f1      	bne.n	800cec8 <EE_Init+0x8c>
 800cee4:	2200      	movs	r2, #0
 800cee6:	2300      	movs	r3, #0
 800cee8:	4934      	ldr	r1, [pc, #208]	; (800cfbc <EE_Init+0x180>)
 800ceea:	2001      	movs	r0, #1
 800ceec:	f001 ffcc 	bl	800ee88 <HAL_FLASH_Program>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d1d7      	bne.n	800cea4 <EE_Init+0x68>
 800cef4:	2302      	movs	r3, #2
 800cef6:	2201      	movs	r2, #1
 800cef8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cefc:	9305      	str	r3, [sp, #20]
 800cefe:	4830      	ldr	r0, [pc, #192]	; (800cfc0 <EE_Init+0x184>)
 800cf00:	e7bd      	b.n	800ce7e <EE_Init+0x42>
 800cf02:	4d31      	ldr	r5, [pc, #196]	; (800cfc8 <EE_Init+0x18c>)
 800cf04:	4629      	mov	r1, r5
 800cf06:	f7ff ff71 	bl	800cdec <EE_ReadVariable>
 800cf0a:	2801      	cmp	r0, #1
 800cf0c:	d0e7      	beq.n	800cede <EE_Init+0xa2>
 800cf0e:	8829      	ldrh	r1, [r5, #0]
 800cf10:	f838 000a 	ldrh.w	r0, [r8, sl]
 800cf14:	f7ff fefc 	bl	800cd10 <EE_VerifyPageFullWriteVariable>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d0e0      	beq.n	800cede <EE_Init+0xa2>
 800cf1c:	e7b5      	b.n	800ce8a <EE_Init+0x4e>
 800cf1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf22:	429c      	cmp	r4, r3
 800cf24:	d1a7      	bne.n	800ce76 <EE_Init+0x3a>
 800cf26:	4610      	mov	r0, r2
 800cf28:	9103      	str	r1, [sp, #12]
 800cf2a:	f7ff fee1 	bl	800ccf0 <EE_VerifyPageFullyErased>
 800cf2e:	b928      	cbnz	r0, 800cf3c <EE_Init+0x100>
 800cf30:	4669      	mov	r1, sp
 800cf32:	a801      	add	r0, sp, #4
 800cf34:	f002 f852 	bl	800efdc <HAL_FLASHEx_Erase>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d1b3      	bne.n	800cea4 <EE_Init+0x68>
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	2300      	movs	r3, #0
 800cf40:	491e      	ldr	r1, [pc, #120]	; (800cfbc <EE_Init+0x180>)
 800cf42:	e7b4      	b.n	800ceae <EE_Init+0x72>
 800cf44:	42ac      	cmp	r4, r5
 800cf46:	d101      	bne.n	800cf4c <EE_Init+0x110>
 800cf48:	9103      	str	r1, [sp, #12]
 800cf4a:	e7d8      	b.n	800cefe <EE_Init+0xc2>
 800cf4c:	4f1d      	ldr	r7, [pc, #116]	; (800cfc4 <EE_Init+0x188>)
 800cf4e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800cfd0 <EE_Init+0x194>
 800cf52:	461c      	mov	r4, r3
 800cf54:	f04f 36ff 	mov.w	r6, #4294967295
 800cf58:	46b8      	mov	r8, r7
 800cf5a:	f8b9 3000 	ldrh.w	r3, [r9]
 800cf5e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800cf62:	4298      	cmp	r0, r3
 800cf64:	bf08      	it	eq
 800cf66:	b226      	sxtheq	r6, r4
 800cf68:	42b4      	cmp	r4, r6
 800cf6a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800cf6e:	d111      	bne.n	800cf94 <EE_Init+0x158>
 800cf70:	3401      	adds	r4, #1
 800cf72:	2c29      	cmp	r4, #41	; 0x29
 800cf74:	d1f1      	bne.n	800cf5a <EE_Init+0x11e>
 800cf76:	2200      	movs	r2, #0
 800cf78:	2300      	movs	r3, #0
 800cf7a:	4911      	ldr	r1, [pc, #68]	; (800cfc0 <EE_Init+0x184>)
 800cf7c:	2001      	movs	r0, #1
 800cf7e:	f001 ff83 	bl	800ee88 <HAL_FLASH_Program>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d18e      	bne.n	800cea4 <EE_Init+0x68>
 800cf86:	2301      	movs	r3, #1
 800cf88:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	9305      	str	r3, [sp, #20]
 800cf90:	480a      	ldr	r0, [pc, #40]	; (800cfbc <EE_Init+0x180>)
 800cf92:	e774      	b.n	800ce7e <EE_Init+0x42>
 800cf94:	4d0c      	ldr	r5, [pc, #48]	; (800cfc8 <EE_Init+0x18c>)
 800cf96:	4629      	mov	r1, r5
 800cf98:	f7ff ff28 	bl	800cdec <EE_ReadVariable>
 800cf9c:	2801      	cmp	r0, #1
 800cf9e:	d0e7      	beq.n	800cf70 <EE_Init+0x134>
 800cfa0:	8829      	ldrh	r1, [r5, #0]
 800cfa2:	f838 000a 	ldrh.w	r0, [r8, sl]
 800cfa6:	f7ff feb3 	bl	800cd10 <EE_VerifyPageFullWriteVariable>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d0e0      	beq.n	800cf70 <EE_Init+0x134>
 800cfae:	e76c      	b.n	800ce8a <EE_Init+0x4e>
 800cfb0:	4669      	mov	r1, sp
 800cfb2:	a801      	add	r0, sp, #4
 800cfb4:	f002 f812 	bl	800efdc <HAL_FLASHEx_Erase>
 800cfb8:	e77c      	b.n	800ceb4 <EE_Init+0x78>
 800cfba:	bf00      	nop
 800cfbc:	08004000 	.word	0x08004000
 800cfc0:	08008000 	.word	0x08008000
 800cfc4:	20000004 	.word	0x20000004
 800cfc8:	20000274 	.word	0x20000274
 800cfcc:	08004006 	.word	0x08004006
 800cfd0:	08008006 	.word	0x08008006

0800cfd4 <EE_WriteVariable>:
 800cfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd8:	b087      	sub	sp, #28
 800cfda:	4607      	mov	r7, r0
 800cfdc:	460e      	mov	r6, r1
 800cfde:	f7ff fe97 	bl	800cd10 <EE_VerifyPageFullWriteVariable>
 800cfe2:	2880      	cmp	r0, #128	; 0x80
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	d144      	bne.n	800d072 <EE_WriteVariable+0x9e>
 800cfe8:	492c      	ldr	r1, [pc, #176]	; (800d09c <EE_WriteVariable+0xc8>)
 800cfea:	4d2d      	ldr	r5, [pc, #180]	; (800d0a0 <EE_WriteVariable+0xcc>)
 800cfec:	880a      	ldrh	r2, [r1, #0]
 800cfee:	2300      	movs	r3, #0
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	882b      	ldrh	r3, [r5, #0]
 800cff4:	b292      	uxth	r2, r2
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	b172      	cbz	r2, 800d018 <EE_WriteVariable+0x44>
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d14c      	bne.n	800d098 <EE_WriteVariable+0xc4>
 800cffe:	f04f 0802 	mov.w	r8, #2
 800d002:	460d      	mov	r5, r1
 800d004:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800d008:	2300      	movs	r3, #0
 800d00a:	4629      	mov	r1, r5
 800d00c:	2001      	movs	r0, #1
 800d00e:	f001 ff3b 	bl	800ee88 <HAL_FLASH_Program>
 800d012:	b120      	cbz	r0, 800d01e <EE_WriteVariable+0x4a>
 800d014:	b284      	uxth	r4, r0
 800d016:	e02c      	b.n	800d072 <EE_WriteVariable+0x9e>
 800d018:	f04f 0801 	mov.w	r8, #1
 800d01c:	e7f2      	b.n	800d004 <EE_WriteVariable+0x30>
 800d01e:	4631      	mov	r1, r6
 800d020:	4638      	mov	r0, r7
 800d022:	f7ff fe75 	bl	800cd10 <EE_VerifyPageFullWriteVariable>
 800d026:	4604      	mov	r4, r0
 800d028:	bb18      	cbnz	r0, 800d072 <EE_WriteVariable+0x9e>
 800d02a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800d0a8 <EE_WriteVariable+0xd4>
 800d02e:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d0a4 <EE_WriteVariable+0xd0>
 800d032:	4606      	mov	r6, r0
 800d034:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 800d038:	4287      	cmp	r7, r0
 800d03a:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 800d03e:	d11c      	bne.n	800d07a <EE_WriteVariable+0xa6>
 800d040:	3601      	adds	r6, #1
 800d042:	2e29      	cmp	r6, #41	; 0x29
 800d044:	d1f6      	bne.n	800d034 <EE_WriteVariable+0x60>
 800d046:	2300      	movs	r3, #0
 800d048:	9301      	str	r3, [sp, #4]
 800d04a:	2601      	movs	r6, #1
 800d04c:	2302      	movs	r3, #2
 800d04e:	4669      	mov	r1, sp
 800d050:	a801      	add	r0, sp, #4
 800d052:	f8cd 800c 	str.w	r8, [sp, #12]
 800d056:	e9cd 6304 	strd	r6, r3, [sp, #16]
 800d05a:	f001 ffbf 	bl	800efdc <HAL_FLASHEx_Erase>
 800d05e:	2800      	cmp	r0, #0
 800d060:	d1d8      	bne.n	800d014 <EE_WriteVariable+0x40>
 800d062:	2200      	movs	r2, #0
 800d064:	2300      	movs	r3, #0
 800d066:	4629      	mov	r1, r5
 800d068:	4630      	mov	r0, r6
 800d06a:	f001 ff0d 	bl	800ee88 <HAL_FLASH_Program>
 800d06e:	2800      	cmp	r0, #0
 800d070:	d1d0      	bne.n	800d014 <EE_WriteVariable+0x40>
 800d072:	4620      	mov	r0, r4
 800d074:	b007      	add	sp, #28
 800d076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d07a:	490a      	ldr	r1, [pc, #40]	; (800d0a4 <EE_WriteVariable+0xd0>)
 800d07c:	f7ff feb6 	bl	800cdec <EE_ReadVariable>
 800d080:	2801      	cmp	r0, #1
 800d082:	d0dd      	beq.n	800d040 <EE_WriteVariable+0x6c>
 800d084:	f8ba 1000 	ldrh.w	r1, [sl]
 800d088:	f839 000b 	ldrh.w	r0, [r9, fp]
 800d08c:	f7ff fe40 	bl	800cd10 <EE_VerifyPageFullWriteVariable>
 800d090:	2800      	cmp	r0, #0
 800d092:	d0d5      	beq.n	800d040 <EE_WriteVariable+0x6c>
 800d094:	4604      	mov	r4, r0
 800d096:	e7ec      	b.n	800d072 <EE_WriteVariable+0x9e>
 800d098:	24ab      	movs	r4, #171	; 0xab
 800d09a:	e7ea      	b.n	800d072 <EE_WriteVariable+0x9e>
 800d09c:	08004000 	.word	0x08004000
 800d0a0:	08008000 	.word	0x08008000
 800d0a4:	20000274 	.word	0x20000274
 800d0a8:	20000004 	.word	0x20000004

0800d0ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800d0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0b2:	2214      	movs	r2, #20
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	a809      	add	r0, sp, #36	; 0x24
 800d0b8:	f008 ff63 	bl	8015f82 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d0bc:	2400      	movs	r4, #0
 800d0be:	4b5e      	ldr	r3, [pc, #376]	; (800d238 <MX_GPIO_Init+0x18c>)
 800d0c0:	9401      	str	r4, [sp, #4]
 800d0c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DISP_CMD_Pin|DISP_RST_Pin|USB_PWR_EN_Pin|RESET_MB_Pin, GPIO_PIN_RESET);
 800d0c4:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800d24c <MX_GPIO_Init+0x1a0>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_SID_Pin|DISP_SCK_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 800d0c8:	4f5c      	ldr	r7, [pc, #368]	; (800d23c <MX_GPIO_Init+0x190>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800d0ca:	4e5d      	ldr	r6, [pc, #372]	; (800d240 <MX_GPIO_Init+0x194>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TEC_ONOFF_Pin|TEC_CURDIR_Pin, GPIO_PIN_RESET);
 800d0cc:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800d250 <MX_GPIO_Init+0x1a4>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d0d0:	f042 0210 	orr.w	r2, r2, #16
 800d0d4:	631a      	str	r2, [r3, #48]	; 0x30
 800d0d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0d8:	f002 0210 	and.w	r2, r2, #16
 800d0dc:	9201      	str	r2, [sp, #4]
 800d0de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d0e0:	9402      	str	r4, [sp, #8]
 800d0e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0e4:	f042 0202 	orr.w	r2, r2, #2
 800d0e8:	631a      	str	r2, [r3, #48]	; 0x30
 800d0ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0ec:	f002 0202 	and.w	r2, r2, #2
 800d0f0:	9202      	str	r2, [sp, #8]
 800d0f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d0f4:	9403      	str	r4, [sp, #12]
 800d0f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0f8:	f042 0204 	orr.w	r2, r2, #4
 800d0fc:	631a      	str	r2, [r3, #48]	; 0x30
 800d0fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d100:	f002 0204 	and.w	r2, r2, #4
 800d104:	9203      	str	r2, [sp, #12]
 800d106:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d108:	9404      	str	r4, [sp, #16]
 800d10a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d10c:	f042 0201 	orr.w	r2, r2, #1
 800d110:	631a      	str	r2, [r3, #48]	; 0x30
 800d112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d114:	f002 0201 	and.w	r2, r2, #1
 800d118:	9204      	str	r2, [sp, #16]
 800d11a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d11c:	9405      	str	r4, [sp, #20]
 800d11e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d124:	631a      	str	r2, [r3, #48]	; 0x30
 800d126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d128:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800d12c:	9205      	str	r2, [sp, #20]
 800d12e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d130:	9406      	str	r4, [sp, #24]
 800d132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d134:	f042 0208 	orr.w	r2, r2, #8
 800d138:	631a      	str	r2, [r3, #48]	; 0x30
 800d13a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d13c:	f002 0208 	and.w	r2, r2, #8
 800d140:	9206      	str	r2, [sp, #24]
 800d142:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d144:	9407      	str	r4, [sp, #28]
 800d146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d148:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d14c:	631a      	str	r2, [r3, #48]	; 0x30
 800d14e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d150:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d154:	9207      	str	r2, [sp, #28]
 800d156:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d158:	9408      	str	r4, [sp, #32]
 800d15a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d15c:	f042 0220 	orr.w	r2, r2, #32
 800d160:	631a      	str	r2, [r3, #48]	; 0x30
 800d162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d164:	f003 0320 	and.w	r3, r3, #32
 800d168:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, DISP_CMD_Pin|DISP_RST_Pin|USB_PWR_EN_Pin|RESET_MB_Pin, GPIO_PIN_RESET);
 800d16a:	4622      	mov	r2, r4
 800d16c:	4640      	mov	r0, r8
 800d16e:	f648 0103 	movw	r1, #34819	; 0x8803
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d172:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, DISP_CMD_Pin|DISP_RST_Pin|USB_PWR_EN_Pin|RESET_MB_Pin, GPIO_PIN_RESET);
 800d174:	f002 f8f4 	bl	800f360 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DISP_SID_Pin|DISP_SCK_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 800d178:	4622      	mov	r2, r4
 800d17a:	4638      	mov	r0, r7
 800d17c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800d180:	f002 f8ee 	bl	800f360 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800d184:	4622      	mov	r2, r4
 800d186:	4630      	mov	r0, r6
 800d188:	2110      	movs	r1, #16
 800d18a:	f002 f8e9 	bl	800f360 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, TEC_ONOFF_Pin|TEC_CURDIR_Pin, GPIO_PIN_RESET);
 800d18e:	4622      	mov	r2, r4
 800d190:	4648      	mov	r0, r9
 800d192:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800d196:	f002 f8e3 	bl	800f360 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = ALERT2_TMP275_Pin|ALERT1_TMP275_Pin|ALERT3_TMP275_Pin|ALERT0_TMP275_Pin
                          |ALERT4_TMP275_Pin|INT_VCNL4200_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d19a:	4b2a      	ldr	r3, [pc, #168]	; (800d244 <MX_GPIO_Init+0x198>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d19c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d19e:	f244 027c 	movw	r2, #16508	; 0x407c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d1a2:	a909      	add	r1, sp, #36	; 0x24
 800d1a4:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d1a6:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DISP_CMD_Pin|DISP_RST_Pin|USB_PWR_EN_Pin|RESET_MB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1aa:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d1ac:	f001 ff64 	bl	800f078 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1b0:	f648 0303 	movw	r3, #34819	; 0x8803
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d1b4:	a909      	add	r1, sp, #36	; 0x24
 800d1b6:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1b8:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1bc:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d1c0:	f001 ff5a 	bl	800f078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DISP_SID_Pin|DISP_SCK_Pin|DISP_CS_Pin;
 800d1c4:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d1c8:	a909      	add	r1, sp, #36	; 0x24
 800d1ca:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1cc:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1d0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d1d4:	f001 ff50 	bl	800f078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin|BTN5_Pin;
 800d1d8:	2358      	movs	r3, #88	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d1da:	a909      	add	r1, sp, #36	; 0x24
 800d1dc:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d1de:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1e2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d1e4:	f001 ff48 	bl	800f078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 800d1e8:	f44f 4310 	mov.w	r3, #36864	; 0x9000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d1ec:	a909      	add	r1, sp, #36	; 0x24
 800d1ee:	4816      	ldr	r0, [pc, #88]	; (800d248 <MX_GPIO_Init+0x19c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1f0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d1f2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d1f6:	f001 ff3f 	bl	800f078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800d1fa:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800d1fc:	a909      	add	r1, sp, #36	; 0x24
 800d1fe:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d200:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d204:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800d206:	f001 ff37 	bl	800f078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin;
 800d20a:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 800d20c:	a909      	add	r1, sp, #36	; 0x24
 800d20e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d210:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d214:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 800d218:	f001 ff2e 	bl	800f078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TEC_ONOFF_Pin|TEC_CURDIR_Pin;
 800d21c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d220:	a909      	add	r1, sp, #36	; 0x24
 800d222:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d224:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d228:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d22c:	f001 ff24 	bl	800f078 <HAL_GPIO_Init>

}
 800d230:	b00f      	add	sp, #60	; 0x3c
 800d232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d236:	bf00      	nop
 800d238:	40023800 	.word	0x40023800
 800d23c:	40020400 	.word	0x40020400
 800d240:	40020c00 	.word	0x40020c00
 800d244:	10110000 	.word	0x10110000
 800d248:	40021800 	.word	0x40021800
 800d24c:	40021000 	.word	0x40021000
 800d250:	40021400 	.word	0x40021400

0800d254 <MX_GPIO_DeInit>:

/* USER CODE BEGIN 2 */
void MX_GPIO_DeInit(void) {
 800d254:	b500      	push	{lr}
	HAL_GPIO_DeInit(GPIOB,
 800d256:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
void MX_GPIO_DeInit(void) {
 800d25a:	b089      	sub	sp, #36	; 0x24
	HAL_GPIO_DeInit(GPIOB,
 800d25c:	4837      	ldr	r0, [pc, #220]	; (800d33c <MX_GPIO_DeInit+0xe8>)
 800d25e:	f001 ffeb 	bl	800f238 <HAL_GPIO_DeInit>
			DISP_SID_Pin | DISP_SCK_Pin | DISP_CS_Pin | BTN2_Pin | BTN1_Pin
					| BTN5_Pin);
	HAL_GPIO_DeInit(GPIOD, uSD_Detect_Pin | ESP32_EN_Pin);
 800d262:	2112      	movs	r1, #18
 800d264:	4836      	ldr	r0, [pc, #216]	; (800d340 <MX_GPIO_DeInit+0xec>)
 800d266:	f001 ffe7 	bl	800f238 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOE,
 800d26a:	f64c 017f 	movw	r1, #51327	; 0xc87f
 800d26e:	4835      	ldr	r0, [pc, #212]	; (800d344 <MX_GPIO_DeInit+0xf0>)
 800d270:	f001 ffe2 	bl	800f238 <HAL_GPIO_DeInit>
			ALERT2_TMP275_Pin | ALERT1_TMP275_Pin | ALERT3_TMP275_Pin
					| ALERT0_TMP275_Pin | ALERT4_TMP275_Pin | INT_VCNL4200_Pin
					| DISP_CMD_Pin | DISP_RST_Pin | USB_PWR_EN_Pin
					| RESET_MB_Pin);
	HAL_GPIO_DeInit(GPIOF, TEC_ONOFF_Pin | TEC_CURDIR_Pin);
 800d274:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800d278:	4833      	ldr	r0, [pc, #204]	; (800d348 <MX_GPIO_DeInit+0xf4>)
 800d27a:	f001 ffdd 	bl	800f238 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOG, BTN4_Pin | BTN3_Pin);
 800d27e:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800d282:	4832      	ldr	r0, [pc, #200]	; (800d34c <MX_GPIO_DeInit+0xf8>)
 800d284:	f001 ffd8 	bl	800f238 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8 | GPIO_PIN_7);
 800d288:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800d28c:	4830      	ldr	r0, [pc, #192]	; (800d350 <MX_GPIO_DeInit+0xfc>)
 800d28e:	f001 ffd3 	bl	800f238 <HAL_GPIO_DeInit>
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800d292:	4b30      	ldr	r3, [pc, #192]	; (800d354 <MX_GPIO_DeInit+0x100>)
 800d294:	2200      	movs	r2, #0
 800d296:	9200      	str	r2, [sp, #0]
 800d298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d29a:	f041 0110 	orr.w	r1, r1, #16
 800d29e:	6319      	str	r1, [r3, #48]	; 0x30
 800d2a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d2a2:	f001 0110 	and.w	r1, r1, #16
 800d2a6:	9100      	str	r1, [sp, #0]
 800d2a8:	9900      	ldr	r1, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d2aa:	9201      	str	r2, [sp, #4]
 800d2ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d2ae:	f041 0102 	orr.w	r1, r1, #2
 800d2b2:	6319      	str	r1, [r3, #48]	; 0x30
 800d2b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d2b6:	f001 0102 	and.w	r1, r1, #2
 800d2ba:	9101      	str	r1, [sp, #4]
 800d2bc:	9901      	ldr	r1, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800d2be:	9202      	str	r2, [sp, #8]
 800d2c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d2c2:	f041 0104 	orr.w	r1, r1, #4
 800d2c6:	6319      	str	r1, [r3, #48]	; 0x30
 800d2c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d2ca:	f001 0104 	and.w	r1, r1, #4
 800d2ce:	9102      	str	r1, [sp, #8]
 800d2d0:	9902      	ldr	r1, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800d2d2:	9203      	str	r2, [sp, #12]
 800d2d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d2d6:	f041 0101 	orr.w	r1, r1, #1
 800d2da:	6319      	str	r1, [r3, #48]	; 0x30
 800d2dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d2de:	f001 0101 	and.w	r1, r1, #1
 800d2e2:	9103      	str	r1, [sp, #12]
 800d2e4:	9903      	ldr	r1, [sp, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800d2e6:	9204      	str	r2, [sp, #16]
 800d2e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d2ea:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800d2ee:	6319      	str	r1, [r3, #48]	; 0x30
 800d2f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d2f2:	f001 0140 	and.w	r1, r1, #64	; 0x40
 800d2f6:	9104      	str	r1, [sp, #16]
 800d2f8:	9904      	ldr	r1, [sp, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800d2fa:	9205      	str	r2, [sp, #20]
 800d2fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d2fe:	f041 0108 	orr.w	r1, r1, #8
 800d302:	6319      	str	r1, [r3, #48]	; 0x30
 800d304:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d306:	f001 0108 	and.w	r1, r1, #8
 800d30a:	9105      	str	r1, [sp, #20]
 800d30c:	9905      	ldr	r1, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800d30e:	9206      	str	r2, [sp, #24]
 800d310:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d312:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800d316:	6319      	str	r1, [r3, #48]	; 0x30
 800d318:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d31a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800d31e:	9106      	str	r1, [sp, #24]
 800d320:	9906      	ldr	r1, [sp, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800d322:	9207      	str	r2, [sp, #28]
 800d324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d326:	f042 0220 	orr.w	r2, r2, #32
 800d32a:	631a      	str	r2, [r3, #48]	; 0x30
 800d32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d32e:	f003 0320 	and.w	r3, r3, #32
 800d332:	9307      	str	r3, [sp, #28]
 800d334:	9b07      	ldr	r3, [sp, #28]

}
 800d336:	b009      	add	sp, #36	; 0x24
 800d338:	f85d fb04 	ldr.w	pc, [sp], #4
 800d33c:	40020400 	.word	0x40020400
 800d340:	40020c00 	.word	0x40020c00
 800d344:	40021000 	.word	0x40021000
 800d348:	40021400 	.word	0x40021400
 800d34c:	40021800 	.word	0x40021800
 800d350:	40021c00 	.word	0x40021c00
 800d354:	40023800 	.word	0x40023800

0800d358 <draw_char>:
	return ret;
}
/*
 *
 */
bounding_box_t draw_char(unsigned char c, unsigned char x, unsigned char y, unsigned char *font,unsigned char inv) {
 800d358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35c:	461c      	mov	r4, r3
	ret.y1 = y;
	ret.x2 = x;
	ret.y2 = y;

	// Read first byte, should be 0x01 for proportional
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return ret;
 800d35e:	781b      	ldrb	r3, [r3, #0]
bounding_box_t draw_char(unsigned char c, unsigned char x, unsigned char y, unsigned char *font,unsigned char inv) {
 800d360:	b085      	sub	sp, #20
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return ret;
 800d362:	2b01      	cmp	r3, #1
bounding_box_t draw_char(unsigned char c, unsigned char x, unsigned char y, unsigned char *font,unsigned char inv) {
 800d364:	460d      	mov	r5, r1
 800d366:	4616      	mov	r6, r2
 800d368:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return ret;
 800d36c:	d01b      	beq.n	800d3a6 <draw_char+0x4e>
 800d36e:	f88d 500c 	strb.w	r5, [sp, #12]
 800d372:	f88d 600d 	strb.w	r6, [sp, #13]
 800d376:	f88d 500e 	strb.w	r5, [sp, #14]
 800d37a:	f88d 600f 	strb.w	r6, [sp, #15]
 800d37e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d382:	2000      	movs	r0, #0
 800d384:	f363 0007 	bfi	r0, r3, #0, #8
 800d388:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d38c:	f363 200f 	bfi	r0, r3, #8, #8
 800d390:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d394:	f363 4017 	bfi	r0, r3, #16, #8
 800d398:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d39c:	f363 601f 	bfi	r0, r3, #24, #8
	//		 font.
	//ret.y2 = ret.y1 + height;
	ret.y2 = ret.y1 + font[FONT_HEADER_HEIGHT];

	return ret;
}
 800d3a0:	b005      	add	sp, #20
 800d3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (font[FONT_HEADER_ORIENTATION] != FONT_ORIENTATION_VERTICAL_CEILING) return ret;
 800d3a6:	7863      	ldrb	r3, [r4, #1]
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d1e0      	bne.n	800d36e <draw_char+0x16>
	if (!(c >= font[FONT_HEADER_START] && c <= font[FONT_HEADER_START] + font[FONT_HEADER_LETTERS])) return ret;
 800d3ac:	78a2      	ldrb	r2, [r4, #2]
 800d3ae:	4290      	cmp	r0, r2
 800d3b0:	d34e      	bcc.n	800d450 <draw_char+0xf8>
 800d3b2:	78e1      	ldrb	r1, [r4, #3]
 800d3b4:	4411      	add	r1, r2
 800d3b6:	4288      	cmp	r0, r1
 800d3b8:	dc4a      	bgt.n	800d450 <draw_char+0xf8>
	c -= font[FONT_HEADER_START];
 800d3ba:	1a80      	subs	r0, r0, r2
 800d3bc:	b2c0      	uxtb	r0, r0
	pos = font[c * FONT_HEADER_START + 5];
 800d3be:	fb03 4200 	mla	r2, r3, r0, r4
	pos |= font[c * FONT_HEADER_START + 6];
 800d3c2:	fb03 4000 	mla	r0, r3, r0, r4
	pos = font[c * FONT_HEADER_START + 5];
 800d3c6:	7952      	ldrb	r2, [r2, #5]
	pos |= font[c * FONT_HEADER_START + 6];
 800d3c8:	f890 9006 	ldrb.w	r9, [r0, #6]
 800d3cc:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
	width = font[pos];
 800d3d0:	46aa      	mov	sl, r5
 800d3d2:	f814 8009 	ldrb.w	r8, [r4, r9]
 800d3d6:	eb05 0b08 	add.w	fp, r5, r8
 800d3da:	fa5f f38b 	uxtb.w	r3, fp
 800d3de:	9301      	str	r3, [sp, #4]
	for (i = 0; i < width; i++) {
 800d3e0:	9b01      	ldr	r3, [sp, #4]
 800d3e2:	4553      	cmp	r3, sl
 800d3e4:	d131      	bne.n	800d44a <draw_char+0xf2>
	ret.x2 = ret.x1 + width - 1;
 800d3e6:	1e6b      	subs	r3, r5, #1
 800d3e8:	4498      	add	r8, r3
	ret.y2 = ret.y1 + font[FONT_HEADER_HEIGHT];
 800d3ea:	7923      	ldrb	r3, [r4, #4]
 800d3ec:	4433      	add	r3, r6
	ret.x2 = ret.x1 + width - 1;
 800d3ee:	fa5f f888 	uxtb.w	r8, r8
	ret.y2 = ret.y1 + font[FONT_HEADER_HEIGHT];
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f88d 500c 	strb.w	r5, [sp, #12]
 800d3f8:	f88d 600d 	strb.w	r6, [sp, #13]
 800d3fc:	f88d 800e 	strb.w	r8, [sp, #14]
 800d400:	f88d 300f 	strb.w	r3, [sp, #15]
 800d404:	e7bb      	b.n	800d37e <draw_char+0x26>
			if (j % 8 == 0) pos++;
 800d406:	f011 0007 	ands.w	r0, r1, #7
 800d40a:	bf04      	itt	eq
 800d40c:	f109 0901 	addeq.w	r9, r9, #1
 800d410:	fa1f f989 	uxtheq.w	r9, r9
 800d414:	4431      	add	r1, r6
			if (font[pos] & 1 << (j % 8)) {
 800d416:	f814 2009 	ldrb.w	r2, [r4, r9]
 800d41a:	4102      	asrs	r2, r0
 800d41c:	07d3      	lsls	r3, r2, #31
				glcd_pixel(x + i, y + j, !inv);
 800d41e:	bf48      	it	mi
 800d420:	fab7 f287 	clzmi	r2, r7
 800d424:	b2c9      	uxtb	r1, r1
 800d426:	bf4c      	ite	mi
 800d428:	0952      	lsrmi	r2, r2, #5
				glcd_pixel(x + i, y + j, inv);
 800d42a:	463a      	movpl	r2, r7
 800d42c:	4650      	mov	r0, sl
 800d42e:	f000 fe25 	bl	800e07c <glcd_pixel>
 800d432:	f10b 0b01 	add.w	fp, fp, #1
		for (unsigned char j = 0; j < font[FONT_HEADER_HEIGHT]; j++) {
 800d436:	7922      	ldrb	r2, [r4, #4]
 800d438:	fa5f f18b 	uxtb.w	r1, fp
 800d43c:	428a      	cmp	r2, r1
 800d43e:	d8e2      	bhi.n	800d406 <draw_char+0xae>
 800d440:	f10a 0a01 	add.w	sl, sl, #1
 800d444:	fa5f fa8a 	uxtb.w	sl, sl
 800d448:	e7ca      	b.n	800d3e0 <draw_char+0x88>
	for (i = 0; i < width; i++) {
 800d44a:	f04f 0b00 	mov.w	fp, #0
 800d44e:	e7f2      	b.n	800d436 <draw_char+0xde>
	if (!(c >= font[FONT_HEADER_START] && c <= font[FONT_HEADER_START] + font[FONT_HEADER_LETTERS])) return ret;
 800d450:	4633      	mov	r3, r6
 800d452:	46a8      	mov	r8, r5
 800d454:	e7ce      	b.n	800d3f4 <draw_char+0x9c>

0800d456 <text_width>:
	unsigned char c;

	// TODO: Implement for fixed width fonts

	// Check font type, should be 0x01 for proportional
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return 0;
 800d456:	780b      	ldrb	r3, [r1, #0]
 800d458:	2b01      	cmp	r3, #1
unsigned char text_width(unsigned char *string, unsigned char *font, unsigned char spacing) {
 800d45a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return 0;
 800d45c:	d124      	bne.n	800d4a8 <text_width+0x52>
 800d45e:	1e45      	subs	r5, r0, #1
	unsigned char width = 0;
 800d460:	2400      	movs	r4, #0

		// Adjust for start position of font vs. the char passed
		c -= font[FONT_HEADER_START];

		// Work out where in the array the character is
		pos = font[c * FONT_HEADER_START + 5];
 800d462:	2002      	movs	r0, #2
 800d464:	2605      	movs	r6, #5
		pos <<= 8;
		pos |= font[c * FONT_HEADER_START + 6];
 800d466:	2706      	movs	r7, #6
	while (*string != 0) {
 800d468:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800d46c:	b913      	cbnz	r3, 800d474 <text_width+0x1e>
		// Allow for space between letters
		width += spacing;
	}

	// The last letter wont have a space after it
	return width - spacing;
 800d46e:	1aa0      	subs	r0, r4, r2
 800d470:	b2c0      	uxtb	r0, r0
}
 800d472:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!(c >= font[FONT_HEADER_START] && c <= font[FONT_HEADER_START] + font[FONT_HEADER_LETTERS])) return 0;
 800d474:	f891 c002 	ldrb.w	ip, [r1, #2]
 800d478:	459c      	cmp	ip, r3
 800d47a:	d815      	bhi.n	800d4a8 <text_width+0x52>
 800d47c:	f891 e003 	ldrb.w	lr, [r1, #3]
 800d480:	44e6      	add	lr, ip
 800d482:	4573      	cmp	r3, lr
 800d484:	dc10      	bgt.n	800d4a8 <text_width+0x52>
		c -= font[FONT_HEADER_START];
 800d486:	eba3 030c 	sub.w	r3, r3, ip
 800d48a:	b2db      	uxtb	r3, r3
		pos = font[c * FONT_HEADER_START + 5];
 800d48c:	fb10 6c03 	smlabb	ip, r0, r3, r6
		pos |= font[c * FONT_HEADER_START + 6];
 800d490:	fb10 7303 	smlabb	r3, r0, r3, r7
		pos = font[c * FONT_HEADER_START + 5];
 800d494:	f811 c00c 	ldrb.w	ip, [r1, ip]
		pos |= font[c * FONT_HEADER_START + 6];
 800d498:	5ccb      	ldrb	r3, [r1, r3]
		width += font[pos];
 800d49a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
		width += spacing;
 800d49e:	5ccb      	ldrb	r3, [r1, r3]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	441c      	add	r4, r3
 800d4a4:	b2e4      	uxtb	r4, r4
 800d4a6:	e7df      	b.n	800d468 <text_width+0x12>
	if (font[FONT_HEADER_TYPE] != FONT_TYPE_PROPORTIONAL) return 0;
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	e7e2      	b.n	800d472 <text_width+0x1c>

0800d4ac <draw_line>:
// Implementation of Bresenham's line algorithm
//
// This code credit Tom Ootjers, originally obtained from:
// http://tinyurl.com/czok7vx
void draw_line(int x1, int y1, int x2, int y2, char colour)
{
 800d4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b0:	460d      	mov	r5, r1
	int xinc1, yinc1, den, num, numadd, numpixels, curpixel, xinc2, yinc2;

	int deltax = abs(x2 - x1);    	// The difference between the x's
 800d4b2:	1a14      	subs	r4, r2, r0
	int deltay = abs(y2 - y1);    	// The difference between the y's
 800d4b4:	eba3 0905 	sub.w	r9, r3, r5
	int deltax = abs(x2 - x1);    	// The difference between the x's
 800d4b8:	2c00      	cmp	r4, #0
{
 800d4ba:	b085      	sub	sp, #20
	int deltax = abs(x2 - x1);    	// The difference between the x's
 800d4bc:	bfb8      	it	lt
 800d4be:	4264      	neglt	r4, r4
	int deltay = abs(y2 - y1);    	// The difference between the y's
 800d4c0:	f1b9 0f00 	cmp.w	r9, #0
 800d4c4:	bfb8      	it	lt
 800d4c6:	f1c9 0900 	rsblt	r9, r9, #0
{
 800d4ca:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d4ce:	9102      	str	r1, [sp, #8]
	if (x2 >= x1) {             	// The x-values are increasing
	  xinc1 = 1;
	  xinc2 = 1;

    } else {          	         	// The x-values are decreasing
	  xinc1 = -1;
 800d4d0:	4282      	cmp	r2, r0
 800d4d2:	bfac      	ite	ge
 800d4d4:	2701      	movge	r7, #1
 800d4d6:	f04f 37ff 	movlt.w	r7, #4294967295
	  yinc1 = 1;
	  yinc2 = 1;
	}
	else                    	  	// The y-values are decreasing
	{
	  yinc1 = -1;
 800d4da:	42ab      	cmp	r3, r5
 800d4dc:	bfac      	ite	ge
 800d4de:	f04f 0801 	movge.w	r8, #1
 800d4e2:	f04f 38ff 	movlt.w	r8, #4294967295
	  yinc2 = -1;
	}

	if (deltax >= deltay)     		// There is at least one x-value for every y-value
 800d4e6:	454c      	cmp	r4, r9
{
 800d4e8:	4606      	mov	r6, r0
	if (deltax >= deltay)     		// There is at least one x-value for every y-value
 800d4ea:	db1e      	blt.n	800d52a <draw_line+0x7e>
 800d4ec:	463b      	mov	r3, r7
	{
	  xinc1 = 0;              		// Don't change the x when numerator >= denominator
	  yinc2 = 0;              		// Don't change the y for every iteration
 800d4ee:	2700      	movs	r7, #0
	  den = deltax;
	  num = deltax / 2;
 800d4f0:	ea4f 0a64 	mov.w	sl, r4, asr #1
	  xinc1 = 0;              		// Don't change the x when numerator >= denominator
 800d4f4:	9701      	str	r7, [sp, #4]
	  num = deltay / 2;
	  numadd = deltax;
	  numpixels = deltay;     		// There are more y-values than x-values
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800d4f6:	f04f 0b00 	mov.w	fp, #0
	{
	  glcd_pixel(x, y, colour);    	// Draw the current pixel
 800d4fa:	b2e9      	uxtb	r1, r5
 800d4fc:	b2f0      	uxtb	r0, r6
 800d4fe:	9a02      	ldr	r2, [sp, #8]
 800d500:	9303      	str	r3, [sp, #12]
	  num += numadd;          		// Increase the numerator by the top of the fraction
 800d502:	44ca      	add	sl, r9
	  glcd_pixel(x, y, colour);    	// Draw the current pixel
 800d504:	f000 fdba 	bl	800e07c <glcd_pixel>
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800d508:	f10b 0b01 	add.w	fp, fp, #1
	  if (num >= den)         		// Check if numerator >= denominator
 800d50c:	4554      	cmp	r4, sl
 800d50e:	9b03      	ldr	r3, [sp, #12]
		num -= den;           		// Calculate the new numerator value
		x += xinc1;           		// Change the x as appropriate
		y += yinc1;           		// Change the y as appropriate
	  }
	  x += xinc2;             		// Change the x as appropriate
	  y += yinc2;             		// Change the y as appropriate
 800d510:	9a01      	ldr	r2, [sp, #4]
		x += xinc1;           		// Change the x as appropriate
 800d512:	bfde      	ittt	le
 800d514:	19f6      	addle	r6, r6, r7
		y += yinc1;           		// Change the y as appropriate
 800d516:	4445      	addle	r5, r8
		num -= den;           		// Calculate the new numerator value
 800d518:	ebaa 0a04 	suble.w	sl, sl, r4
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800d51c:	455c      	cmp	r4, fp
	  x += xinc2;             		// Change the x as appropriate
 800d51e:	441e      	add	r6, r3
	  y += yinc2;             		// Change the y as appropriate
 800d520:	4415      	add	r5, r2
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800d522:	daea      	bge.n	800d4fa <draw_line+0x4e>
	}
}
 800d524:	b005      	add	sp, #20
 800d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  num = deltay / 2;
 800d52a:	4623      	mov	r3, r4
 800d52c:	f8cd 8004 	str.w	r8, [sp, #4]
	  xinc2 = 0;              		// Don't change the x for every iteration
 800d530:	f04f 0800 	mov.w	r8, #0
	  num = deltay / 2;
 800d534:	ea4f 0a69 	mov.w	sl, r9, asr #1
 800d538:	464c      	mov	r4, r9
 800d53a:	4699      	mov	r9, r3
	  yinc1 = 0;              		// Don't change the y when numerator >= denominator
 800d53c:	4643      	mov	r3, r8
 800d53e:	e7da      	b.n	800d4f6 <draw_line+0x4a>

0800d540 <draw_box>:
{
 800d540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d544:	4699      	mov	r9, r3
 800d546:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	draw_line(x1 + 1, y1, x2 - 1, y1, colour);
 800d54a:	9500      	str	r5, [sp, #0]
{
 800d54c:	460c      	mov	r4, r1
	draw_line(x1 + 1, y1, x2 - 1, y1, colour);
 800d54e:	1c47      	adds	r7, r0, #1
 800d550:	f102 38ff 	add.w	r8, r2, #4294967295
{
 800d554:	4682      	mov	sl, r0
 800d556:	4616      	mov	r6, r2
	draw_line(x1 + 1, y1, x2 - 1, y1, colour);
 800d558:	460b      	mov	r3, r1
 800d55a:	4642      	mov	r2, r8
 800d55c:	4638      	mov	r0, r7
	draw_line(x1, y1 + 1, x1, y2 - 1, colour);
 800d55e:	3401      	adds	r4, #1
 800d560:	f109 3bff 	add.w	fp, r9, #4294967295
	draw_line(x1 + 1, y1, x2 - 1, y1, colour);
 800d564:	f7ff ffa2 	bl	800d4ac <draw_line>
	draw_line(x1, y1 + 1, x1, y2 - 1, colour);
 800d568:	465b      	mov	r3, fp
 800d56a:	4652      	mov	r2, sl
 800d56c:	4621      	mov	r1, r4
 800d56e:	4650      	mov	r0, sl
 800d570:	9500      	str	r5, [sp, #0]
 800d572:	f7ff ff9b 	bl	800d4ac <draw_line>
	draw_line(x1 + 1, y2, x2 - 1, y2, colour);
 800d576:	464b      	mov	r3, r9
 800d578:	4642      	mov	r2, r8
 800d57a:	4649      	mov	r1, r9
 800d57c:	4638      	mov	r0, r7
 800d57e:	9500      	str	r5, [sp, #0]
 800d580:	f7ff ff94 	bl	800d4ac <draw_line>
	draw_line(x2, y1 + 1, x2, y2 - 1, colour);
 800d584:	465b      	mov	r3, fp
 800d586:	4632      	mov	r2, r6
 800d588:	4621      	mov	r1, r4
 800d58a:	4630      	mov	r0, r6
 800d58c:	950c      	str	r5, [sp, #48]	; 0x30
}
 800d58e:	b003      	add	sp, #12
 800d590:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	draw_line(x2, y1 + 1, x2, y2 - 1, colour);
 800d594:	f7ff bf8a 	b.w	800d4ac <draw_line>

0800d598 <draw_fill>:
{
 800d598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d59c:	f89d 8020 	ldrb.w	r8, [sp, #32]
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	4617      	mov	r7, r2
 800d5a6:	461d      	mov	r5, r3
	for(int i=y1;i<=y2;i++)
 800d5a8:	42ac      	cmp	r4, r5
 800d5aa:	dd02      	ble.n	800d5b2 <draw_fill+0x1a>
}
 800d5ac:	b002      	add	sp, #8
 800d5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		draw_line(x1, i, x2,i, colour);
 800d5b2:	4623      	mov	r3, r4
 800d5b4:	4621      	mov	r1, r4
 800d5b6:	f8cd 8000 	str.w	r8, [sp]
 800d5ba:	463a      	mov	r2, r7
 800d5bc:	4630      	mov	r0, r6
 800d5be:	f7ff ff75 	bl	800d4ac <draw_line>
	for(int i=y1;i<=y2;i++)
 800d5c2:	3401      	adds	r4, #1
 800d5c4:	e7f0      	b.n	800d5a8 <draw_fill+0x10>

0800d5c6 <draw_text>:
bounding_box_t draw_text(char *string, unsigned char x, unsigned char y, unsigned char *font, unsigned char spacing,unsigned char inv) {
 800d5c6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ca:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 800d5ce:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 800d5d2:	4699      	mov	r9, r3
 800d5d4:	460f      	mov	r7, r1
 800d5d6:	4616      	mov	r6, r2
		draw_fill(x-1, y, x+text_width(string, font, spacing), y+text_height(string, font)-1, inv);
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4622      	mov	r2, r4
bounding_box_t draw_text(char *string, unsigned char x, unsigned char y, unsigned char *font, unsigned char spacing,unsigned char inv) {
 800d5dc:	4680      	mov	r8, r0
		draw_fill(x-1, y, x+text_width(string, font, spacing), y+text_height(string, font)-1, inv);
 800d5de:	f7ff ff3a 	bl	800d456 <text_width>
 800d5e2:	f899 3004 	ldrb.w	r3, [r9, #4]
 800d5e6:	f8cd a000 	str.w	sl, [sp]
 800d5ea:	4433      	add	r3, r6
 800d5ec:	19c2      	adds	r2, r0, r7
 800d5ee:	4631      	mov	r1, r6
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	1e78      	subs	r0, r7, #1
	spacing += 1;
 800d5f4:	3401      	adds	r4, #1
		draw_fill(x-1, y, x+text_width(string, font, spacing), y+text_height(string, font)-1, inv);
 800d5f6:	f7ff ffcf 	bl	800d598 <draw_fill>
	spacing += 1;
 800d5fa:	b2e4      	uxtb	r4, r4
 800d5fc:	f108 38ff 	add.w	r8, r8, #4294967295
	while (*string != 0) {
 800d600:	4639      	mov	r1, r7
 800d602:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 800d606:	b960      	cbnz	r0, 800d622 <draw_text+0x5c>
	return ret;
 800d608:	f367 0007 	bfi	r0, r7, #0, #8
 800d60c:	f366 200f 	bfi	r0, r6, #8, #8
 800d610:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d614:	f365 4017 	bfi	r0, r5, #16, #8
 800d618:	f363 601f 	bfi	r0, r3, #24, #8
}
 800d61c:	b004      	add	sp, #16
 800d61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tmp = draw_char(*string++, x, y, font,inv);
 800d622:	f8cd a000 	str.w	sl, [sp]
 800d626:	464b      	mov	r3, r9
 800d628:	4632      	mov	r2, r6
 800d62a:	f7ff fe95 	bl	800d358 <draw_char>
 800d62e:	f3c0 4507 	ubfx	r5, r0, #16, #8
		x = tmp.x2 + spacing;
 800d632:	1961      	adds	r1, r4, r5
		tmp = draw_char(*string++, x, y, font,inv);
 800d634:	9002      	str	r0, [sp, #8]
		x = tmp.x2 + spacing;
 800d636:	b2c9      	uxtb	r1, r1
 800d638:	e7e3      	b.n	800d602 <draw_text+0x3c>

0800d63a <draw_bmp_h>:
}
/*
 *	image height must be multiplier of 8
 */
void draw_bmp_h(unsigned char x, unsigned char y, unsigned char width ,unsigned char height,unsigned char *pic,unsigned char color)
{
 800d63a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d63e:	b085      	sub	sp, #20
	int index=0;
	for(int ypos=y;ypos<y+height;ypos++)
 800d640:	440b      	add	r3, r1
{
 800d642:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	for(int ypos=y;ypos<y+height;ypos++)
 800d644:	9302      	str	r3, [sp, #8]
{
 800d646:	4682      	mov	sl, r0
 800d648:	4693      	mov	fp, r2
 800d64a:	f1c0 0900 	rsb	r9, r0, #0
	for(int ypos=y;ypos<y+height;ypos++)
 800d64e:	4688      	mov	r8, r1
 800d650:	9b02      	ldr	r3, [sp, #8]
 800d652:	4543      	cmp	r3, r8
 800d654:	dc02      	bgt.n	800d65c <draw_bmp_h+0x22>
			glcd_pixel(xpos+2, ypos, pic[index]&0x20);
			glcd_pixel(xpos+1, ypos, pic[index]&0x40);
			glcd_pixel(xpos+0, ypos, pic[index]&0x80);
		}
	}
}
 800d656:	b005      	add	sp, #20
 800d658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(int xpos=x;xpos<x+width;xpos+=8)
 800d65c:	eb0b 020a 	add.w	r2, fp, sl
 800d660:	4653      	mov	r3, sl
 800d662:	9201      	str	r2, [sp, #4]
			glcd_pixel(xpos+7, ypos, pic[index]&0x01);
 800d664:	fa5f f688 	uxtb.w	r6, r8
		for(int xpos=x;xpos<x+width;xpos+=8)
 800d668:	9a01      	ldr	r2, [sp, #4]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	dc03      	bgt.n	800d676 <draw_bmp_h+0x3c>
	for(int ypos=y;ypos<y+height;ypos++)
 800d66e:	f108 0801 	add.w	r8, r8, #1
 800d672:	44d9      	add	r9, fp
 800d674:	e7ec      	b.n	800d650 <draw_bmp_h+0x16>
			glcd_pixel(xpos+7, ypos, pic[index]&0x01);
 800d676:	b2df      	uxtb	r7, r3
			index=((xpos-x)+(ypos-y)*width)/8;
 800d678:	eb03 0409 	add.w	r4, r3, r9
 800d67c:	9303      	str	r3, [sp, #12]
 800d67e:	2308      	movs	r3, #8
 800d680:	fb94 f4f3 	sdiv	r4, r4, r3
			glcd_pixel(xpos+7, ypos, pic[index]&0x01);
 800d684:	5d2a      	ldrb	r2, [r5, r4]
 800d686:	1df8      	adds	r0, r7, #7
 800d688:	f002 0201 	and.w	r2, r2, #1
 800d68c:	4631      	mov	r1, r6
 800d68e:	b2c0      	uxtb	r0, r0
 800d690:	f000 fcf4 	bl	800e07c <glcd_pixel>
			glcd_pixel(xpos+6, ypos, pic[index]&0x02);
 800d694:	5d2a      	ldrb	r2, [r5, r4]
 800d696:	1db8      	adds	r0, r7, #6
 800d698:	f002 0202 	and.w	r2, r2, #2
 800d69c:	4631      	mov	r1, r6
 800d69e:	b2c0      	uxtb	r0, r0
 800d6a0:	f000 fcec 	bl	800e07c <glcd_pixel>
			glcd_pixel(xpos+5, ypos, pic[index]&0x04);
 800d6a4:	5d2a      	ldrb	r2, [r5, r4]
 800d6a6:	1d78      	adds	r0, r7, #5
 800d6a8:	f002 0204 	and.w	r2, r2, #4
 800d6ac:	4631      	mov	r1, r6
 800d6ae:	b2c0      	uxtb	r0, r0
 800d6b0:	f000 fce4 	bl	800e07c <glcd_pixel>
			glcd_pixel(xpos+4, ypos, pic[index]&0x08);
 800d6b4:	5d2a      	ldrb	r2, [r5, r4]
 800d6b6:	1d38      	adds	r0, r7, #4
 800d6b8:	f002 0208 	and.w	r2, r2, #8
 800d6bc:	4631      	mov	r1, r6
 800d6be:	b2c0      	uxtb	r0, r0
 800d6c0:	f000 fcdc 	bl	800e07c <glcd_pixel>
			glcd_pixel(xpos+3, ypos, pic[index]&0x10);
 800d6c4:	5d2a      	ldrb	r2, [r5, r4]
 800d6c6:	1cf8      	adds	r0, r7, #3
 800d6c8:	f002 0210 	and.w	r2, r2, #16
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	b2c0      	uxtb	r0, r0
 800d6d0:	f000 fcd4 	bl	800e07c <glcd_pixel>
			glcd_pixel(xpos+2, ypos, pic[index]&0x20);
 800d6d4:	5d2a      	ldrb	r2, [r5, r4]
 800d6d6:	1cb8      	adds	r0, r7, #2
 800d6d8:	f002 0220 	and.w	r2, r2, #32
 800d6dc:	4631      	mov	r1, r6
 800d6de:	b2c0      	uxtb	r0, r0
 800d6e0:	f000 fccc 	bl	800e07c <glcd_pixel>
			glcd_pixel(xpos+1, ypos, pic[index]&0x40);
 800d6e4:	5d2a      	ldrb	r2, [r5, r4]
 800d6e6:	1c78      	adds	r0, r7, #1
 800d6e8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800d6ec:	4631      	mov	r1, r6
 800d6ee:	b2c0      	uxtb	r0, r0
 800d6f0:	f000 fcc4 	bl	800e07c <glcd_pixel>
			glcd_pixel(xpos+0, ypos, pic[index]&0x80);
 800d6f4:	5d2a      	ldrb	r2, [r5, r4]
 800d6f6:	4631      	mov	r1, r6
 800d6f8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	f000 fcbd 	bl	800e07c <glcd_pixel>
		for(int xpos=x;xpos<x+width;xpos+=8)
 800d702:	9b03      	ldr	r3, [sp, #12]
 800d704:	3308      	adds	r3, #8
 800d706:	e7af      	b.n	800d668 <draw_bmp_h+0x2e>

0800d708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d708:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d70a:	2400      	movs	r4, #0
{
 800d70c:	b099      	sub	sp, #100	; 0x64
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d70e:	4621      	mov	r1, r4
 800d710:	2214      	movs	r2, #20
 800d712:	a807      	add	r0, sp, #28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d714:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d718:	f008 fc33 	bl	8015f82 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d71c:	4621      	mov	r1, r4
 800d71e:	2210      	movs	r2, #16
 800d720:	a803      	add	r0, sp, #12
 800d722:	f008 fc2e 	bl	8015f82 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d726:	4b22      	ldr	r3, [pc, #136]	; (800d7b0 <SystemClock_Config+0xa8>)
 800d728:	9401      	str	r4, [sp, #4]
 800d72a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d72c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d730:	641a      	str	r2, [r3, #64]	; 0x40
 800d732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d738:	9301      	str	r3, [sp, #4]
 800d73a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d73c:	4b1d      	ldr	r3, [pc, #116]	; (800d7b4 <SystemClock_Config+0xac>)
 800d73e:	9402      	str	r4, [sp, #8]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d746:	601a      	str	r2, [r3, #0]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d74e:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d750:	220d      	movs	r2, #13
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d752:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d758:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d75c:	2301      	movs	r3, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d75e:	2502      	movs	r5, #2
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d760:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800d762:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d768:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 800d76c:	2119      	movs	r1, #25
 800d76e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800d772:	e9cd 1314 	strd	r1, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d776:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800d778:	2307      	movs	r3, #7
 800d77a:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d77c:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d77e:	f002 fa2d 	bl	800fbdc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d782:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d784:	e9cd 3507 	strd	r3, r5, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d788:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800d78c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d790:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d794:	2105      	movs	r1, #5
 800d796:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d798:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d79a:	f002 fbf3 	bl	800ff84 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d79e:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d7a2:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d7a4:	9503      	str	r5, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d7a6:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d7a8:	f002 fcc4 	bl	8010134 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800d7ac:	b019      	add	sp, #100	; 0x64
 800d7ae:	bd30      	pop	{r4, r5, pc}
 800d7b0:	40023800 	.word	0x40023800
 800d7b4:	40007000 	.word	0x40007000

0800d7b8 <main>:
{
 800d7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7bc:	b09e      	sub	sp, #120	; 0x78
  HAL_Init();
 800d7be:	f001 f827 	bl	800e810 <HAL_Init>
  SystemClock_Config();
 800d7c2:	f7ff ffa1 	bl	800d708 <SystemClock_Config>
  MX_GPIO_Init();
 800d7c6:	f7ff fc71 	bl	800d0ac <MX_GPIO_Init>
  MX_DMA_Init();
 800d7ca:	f7ff fa6f 	bl	800ccac <MX_DMA_Init>
  MX_TIM4_Init();
 800d7ce:	f000 feb3 	bl	800e538 <MX_TIM4_Init>
  MX_RTC_Init();
 800d7d2:	f000 faa1 	bl	800dd18 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800d7d6:	f000 faf1 	bl	800ddbc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800d7da:	f005 f883 	bl	80128e4 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800d7de:	f000 feff 	bl	800e5e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800d7e2:	f000 ff19 	bl	800e618 <MX_USART3_UART_Init>
  MX_CRC_Init();
 800d7e6:	f7ff fa39 	bl	800cc5c <MX_CRC_Init>
  MX_USB_HOST_Init();
 800d7ea:	f008 fa25 	bl	8015c38 <MX_USB_HOST_Init>
	printf("\033[0;31;49m\n\r***********************************************************\n\r\033[0;39;49m");
 800d7ee:	489d      	ldr	r0, [pc, #628]	; (800da64 <main+0x2ac>)
	printf("starting bootloader,shared mem= %lu.\n\r", sharedmem);
 800d7f0:	4c9d      	ldr	r4, [pc, #628]	; (800da68 <main+0x2b0>)
	printf("\033[0;31;49m\n\r***********************************************************\n\r\033[0;39;49m");
 800d7f2:	f008 fc77 	bl	80160e4 <iprintf>
	printf(    "\033[0;31;49m*                  ACAM BOOTLOADER                        *\n\r\033[0;39;49m");
 800d7f6:	489d      	ldr	r0, [pc, #628]	; (800da6c <main+0x2b4>)
 800d7f8:	f008 fc74 	bl	80160e4 <iprintf>
	printf(    "\033[0;31;49m***********************************************************\n\r\033[0;39;49m");
 800d7fc:	489c      	ldr	r0, [pc, #624]	; (800da70 <main+0x2b8>)
 800d7fe:	f008 fc71 	bl	80160e4 <iprintf>
	printf("starting bootloader,shared mem= %lu.\n\r", sharedmem);
 800d802:	6821      	ldr	r1, [r4, #0]
 800d804:	489b      	ldr	r0, [pc, #620]	; (800da74 <main+0x2bc>)
 800d806:	f008 fc6d 	bl	80160e4 <iprintf>
	HAL_FLASH_Unlock();
 800d80a:	f001 faf7 	bl	800edfc <HAL_FLASH_Unlock>
	if ((r=EE_Init()) != EE_OK) {
 800d80e:	f7ff fb15 	bl	800ce3c <EE_Init>
 800d812:	4601      	mov	r1, r0
 800d814:	b110      	cbz	r0, 800d81c <main+0x64>
		printf("EEprom Init problem:%d\n\r",r);
 800d816:	4898      	ldr	r0, [pc, #608]	; (800da78 <main+0x2c0>)
 800d818:	f008 fc64 	bl	80160e4 <iprintf>
	HAL_Delay(500);
 800d81c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d820:	f001 f822 	bl	800e868 <HAL_Delay>
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800d824:	4b95      	ldr	r3, [pc, #596]	; (800da7c <main+0x2c4>)
 800d826:	2064      	movs	r0, #100	; 0x64
	if((r=EE_ReadVariable(VirtAddVarTab[0], &current_version))!=EE_OK)
 800d828:	a903      	add	r1, sp, #12
	VirtAddVarTab[0] = EE_ADDR_VERSION;
 800d82a:	8018      	strh	r0, [r3, #0]
	if((r=EE_ReadVariable(VirtAddVarTab[0], &current_version))!=EE_OK)
 800d82c:	f7ff fade 	bl	800cdec <EE_ReadVariable>
 800d830:	4601      	mov	r1, r0
 800d832:	b110      	cbz	r0, 800d83a <main+0x82>
		printf("EEprom Read error:%d\n\r",r);
 800d834:	4892      	ldr	r0, [pc, #584]	; (800da80 <main+0x2c8>)
 800d836:	f008 fc55 	bl	80160e4 <iprintf>
	HAL_FLASH_Lock();
 800d83a:	f001 faf1 	bl	800ee20 <HAL_FLASH_Lock>
	printf("version of firmware:%d.\n\r", current_version);
 800d83e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d842:	4890      	ldr	r0, [pc, #576]	; (800da84 <main+0x2cc>)
	while (IS_BTN_PRESSED() && BTNcounter < 200) {
 800d844:	f8df 8290 	ldr.w	r8, [pc, #656]	; 800dad8 <main+0x320>
			printf("Release button to enter Bootloader.\n\r");
 800d848:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800dadc <main+0x324>
			draw_text("Release to Enter Loader", 0, 10, Tahoma8, 1, 0);
 800d84c:	f8df a244 	ldr.w	sl, [pc, #580]	; 800da94 <main+0x2dc>
	printf("version of firmware:%d.\n\r", current_version);
 800d850:	f008 fc48 	bl	80160e4 <iprintf>
	HAL_GPIO_WritePin(USB_PWR_EN_GPIO_Port, USB_PWR_EN_Pin, GPIO_PIN_SET);
 800d854:	2201      	movs	r2, #1
 800d856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d85a:	488b      	ldr	r0, [pc, #556]	; (800da88 <main+0x2d0>)
 800d85c:	f001 fd80 	bl	800f360 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800d860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d864:	f001 f800 	bl	800e868 <HAL_Delay>
	HAL_GPIO_WritePin(USB_PWR_EN_GPIO_Port, USB_PWR_EN_Pin, GPIO_PIN_RESET);
 800d868:	2200      	movs	r2, #0
 800d86a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d86e:	4886      	ldr	r0, [pc, #536]	; (800da88 <main+0x2d0>)
 800d870:	f001 fd76 	bl	800f360 <HAL_GPIO_WritePin>
	glcd_init(128, 64);
 800d874:	2140      	movs	r1, #64	; 0x40
 800d876:	2080      	movs	r0, #128	; 0x80
 800d878:	f000 fcbe 	bl	800e1f8 <glcd_init>
	glcd_flip_screen(XLR_YTB);
 800d87c:	2000      	movs	r0, #0
 800d87e:	f000 fd31 	bl	800e2e4 <glcd_flip_screen>
	draw_bmp_h(0,0,aCAM_logo_128_02_H[0],aCAM_logo_128_02_H[2],&aCAM_logo_128_02_H[4],1);
 800d882:	4982      	ldr	r1, [pc, #520]	; (800da8c <main+0x2d4>)
 800d884:	788b      	ldrb	r3, [r1, #2]
 800d886:	f811 2b04 	ldrb.w	r2, [r1], #4
 800d88a:	2501      	movs	r5, #1
 800d88c:	e9cd 1500 	strd	r1, r5, [sp]
 800d890:	2100      	movs	r1, #0
 800d892:	4608      	mov	r0, r1
 800d894:	f7ff fed1 	bl	800d63a <draw_bmp_h>
	draw_box(0, 0, 127, 63, 1);
 800d898:	2100      	movs	r1, #0
 800d89a:	4608      	mov	r0, r1
 800d89c:	233f      	movs	r3, #63	; 0x3f
 800d89e:	227f      	movs	r2, #127	; 0x7f
 800d8a0:	9500      	str	r5, [sp, #0]
 800d8a2:	f7ff fe4d 	bl	800d540 <draw_box>
	glcd_refresh();
 800d8a6:	f000 fc3f 	bl	800e128 <glcd_refresh>
	HAL_Delay(2000);
 800d8aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d8ae:	f000 ffdb 	bl	800e868 <HAL_Delay>
	glcd_blank();
 800d8b2:	f000 fc17 	bl	800e0e4 <glcd_blank>
	while (IS_BTN_PRESSED() && BTNcounter < 200) {
 800d8b6:	2500      	movs	r5, #0
 800d8b8:	2110      	movs	r1, #16
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	f001 fd4a 	bl	800f354 <HAL_GPIO_ReadPin>
 800d8c0:	b2ee      	uxtb	r6, r5
 800d8c2:	4607      	mov	r7, r0
 800d8c4:	b918      	cbnz	r0, 800d8ce <main+0x116>
 800d8c6:	2dc8      	cmp	r5, #200	; 0xc8
 800d8c8:	f040 80aa 	bne.w	800da20 <main+0x268>
 800d8cc:	462e      	mov	r6, r5
	if ((BTNcounter < 100 && BTNcounter > 20)
 800d8ce:	3e15      	subs	r6, #21
 800d8d0:	2e4e      	cmp	r6, #78	; 0x4e
 800d8d2:	d91f      	bls.n	800d914 <main+0x15c>
			|| (sharedmem < WRITE_FROM_SD || sharedmem > FORCE_WRITE_FROM_USB)) {
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	1e5a      	subs	r2, r3, #1
 800d8d8:	2a03      	cmp	r2, #3
 800d8da:	f240 8101 	bls.w	800dae0 <main+0x328>
			printf("try to go to application\n\r");
 800d8de:	486c      	ldr	r0, [pc, #432]	; (800da90 <main+0x2d8>)
 800d8e0:	f008 fc00 	bl	80160e4 <iprintf>
			sharedmem = POWER_UP;
 800d8e4:	230c      	movs	r3, #12
 800d8e6:	6023      	str	r3, [r4, #0]
			glcd_blank();
 800d8e8:	f000 fbfc 	bl	800e0e4 <glcd_blank>
			draw_text("Goto Application", 0, 0, Tahoma8, 1, 0);
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e9cd 3200 	strd	r3, r2, [sp]
 800d8f4:	4611      	mov	r1, r2
 800d8f6:	4b67      	ldr	r3, [pc, #412]	; (800da94 <main+0x2dc>)
 800d8f8:	4867      	ldr	r0, [pc, #412]	; (800da98 <main+0x2e0>)
 800d8fa:	f7ff fe64 	bl	800d5c6 <draw_text>
			glcd_refresh();
 800d8fe:	f000 fc13 	bl	800e128 <glcd_refresh>
			HAL_Delay(2000);
 800d902:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d906:	f000 ffaf 	bl	800e868 <HAL_Delay>
			goto_application();
 800d90a:	f7fe ff85 	bl	800c818 <goto_application>
			printf(
 800d90e:	4863      	ldr	r0, [pc, #396]	; (800da9c <main+0x2e4>)
 800d910:	f008 fbe8 	bl	80160e4 <iprintf>
		draw_text("try SD:", 0, 0, Tahoma8, 1, 0);
 800d914:	2600      	movs	r6, #0
 800d916:	2701      	movs	r7, #1
		glcd_blank();
 800d918:	f000 fbe4 	bl	800e0e4 <glcd_blank>
		draw_text("try SD:", 0, 0, Tahoma8, 1, 0);
 800d91c:	4b5d      	ldr	r3, [pc, #372]	; (800da94 <main+0x2dc>)
 800d91e:	4860      	ldr	r0, [pc, #384]	; (800daa0 <main+0x2e8>)
 800d920:	4632      	mov	r2, r6
 800d922:	4631      	mov	r1, r6
 800d924:	e9cd 7600 	strd	r7, r6, [sp]
 800d928:	f7ff fe4d 	bl	800d5c6 <draw_text>
		glcd_refresh();
 800d92c:	f000 fbfc 	bl	800e128 <glcd_refresh>
		if ((result_sd = Check_SDCard(firmware_path, &firmware_version,
 800d930:	aa04      	add	r2, sp, #16
 800d932:	f10d 010e 	add.w	r1, sp, #14
 800d936:	a805      	add	r0, sp, #20
 800d938:	f7fe fe36 	bl	800c5a8 <Check_SDCard>
 800d93c:	4605      	mov	r5, r0
 800d93e:	4680      	mov	r8, r0
 800d940:	2800      	cmp	r0, #0
 800d942:	f040 8084 	bne.w	800da4e <main+0x296>
			printf("Firmware found in SD\n\r");
 800d946:	4857      	ldr	r0, [pc, #348]	; (800daa4 <main+0x2ec>)
 800d948:	f008 fbcc 	bl	80160e4 <iprintf>
			printf("Firmware version:%lu\n\r", firmware_version);
 800d94c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800d950:	4855      	ldr	r0, [pc, #340]	; (800daa8 <main+0x2f0>)
 800d952:	f008 fbc7 	bl	80160e4 <iprintf>
			printf("Firmware checksum:%lu\n\r", firmware_checksum);
 800d956:	9904      	ldr	r1, [sp, #16]
 800d958:	4854      	ldr	r0, [pc, #336]	; (800daac <main+0x2f4>)
 800d95a:	f008 fbc3 	bl	80160e4 <iprintf>
			printf("Firmware path:%s\n\r", firmware_path);
 800d95e:	a905      	add	r1, sp, #20
 800d960:	4853      	ldr	r0, [pc, #332]	; (800dab0 <main+0x2f8>)
 800d962:	f008 fbbf 	bl	80160e4 <iprintf>
			if ((result_sd = Write_Flash(SD_ID, firmware_path, firmware_version,
 800d966:	9b04      	ldr	r3, [sp, #16]
 800d968:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800d96c:	a905      	add	r1, sp, #20
 800d96e:	200a      	movs	r0, #10
 800d970:	f7fe ff64 	bl	800c83c <Write_Flash>
 800d974:	280b      	cmp	r0, #11
 800d976:	4605      	mov	r5, r0
 800d978:	d110      	bne.n	800d99c <main+0x1e4>
				printf("Program Flashed from SD\n\r");
 800d97a:	484e      	ldr	r0, [pc, #312]	; (800dab4 <main+0x2fc>)
 800d97c:	f008 fbb2 	bl	80160e4 <iprintf>
				draw_text("Flashed from SD", 0, 10, Tahoma8, 1, 0);
 800d980:	e9cd 7800 	strd	r7, r8, [sp]
 800d984:	4b43      	ldr	r3, [pc, #268]	; (800da94 <main+0x2dc>)
 800d986:	484c      	ldr	r0, [pc, #304]	; (800dab8 <main+0x300>)
 800d988:	220a      	movs	r2, #10
 800d98a:	4641      	mov	r1, r8
			draw_text("Failed from SD", 0, 10, Tahoma8, 1, 0);
 800d98c:	f7ff fe1b 	bl	800d5c6 <draw_text>
			glcd_refresh();
 800d990:	f000 fbca 	bl	800e128 <glcd_refresh>
			HAL_Delay(1000);
 800d994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d998:	f000 ff66 	bl	800e868 <HAL_Delay>
		draw_text("try USB:", 0, 0, Tahoma8, 1, 0);
 800d99c:	2600      	movs	r6, #0
 800d99e:	2701      	movs	r7, #1
		sharedmem = result_sd;
 800d9a0:	6025      	str	r5, [r4, #0]
		glcd_blank();
 800d9a2:	f000 fb9f 	bl	800e0e4 <glcd_blank>
		draw_text("try USB:", 0, 0, Tahoma8, 1, 0);
 800d9a6:	4b3b      	ldr	r3, [pc, #236]	; (800da94 <main+0x2dc>)
 800d9a8:	4844      	ldr	r0, [pc, #272]	; (800dabc <main+0x304>)
 800d9aa:	4632      	mov	r2, r6
 800d9ac:	4631      	mov	r1, r6
 800d9ae:	e9cd 7600 	strd	r7, r6, [sp]
 800d9b2:	f7ff fe08 	bl	800d5c6 <draw_text>
		glcd_refresh();
 800d9b6:	f000 fbb7 	bl	800e128 <glcd_refresh>
		if (result_sd != FLASH_WRITE_OK) {
 800d9ba:	2d0b      	cmp	r5, #11
 800d9bc:	f000 80d7 	beq.w	800db6e <main+0x3b6>
		if ((result_usb = Check_USBMEM(firmware_path, &firmware_version,
 800d9c0:	aa04      	add	r2, sp, #16
 800d9c2:	f10d 010e 	add.w	r1, sp, #14
 800d9c6:	a805      	add	r0, sp, #20
 800d9c8:	f7fe fe7c 	bl	800c6c4 <Check_USBMEM>
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	4680      	mov	r8, r0
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	f040 810b 	bne.w	800dbec <main+0x434>
			printf("Firmware found in USB\n\r");
 800d9d6:	483a      	ldr	r0, [pc, #232]	; (800dac0 <main+0x308>)
 800d9d8:	f008 fb84 	bl	80160e4 <iprintf>
			printf("Firmware version:%lu\n\r", firmware_version);
 800d9dc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800d9e0:	4831      	ldr	r0, [pc, #196]	; (800daa8 <main+0x2f0>)
 800d9e2:	f008 fb7f 	bl	80160e4 <iprintf>
			printf("Firmware checksum:%lu\n\r", firmware_checksum);
 800d9e6:	9904      	ldr	r1, [sp, #16]
 800d9e8:	4830      	ldr	r0, [pc, #192]	; (800daac <main+0x2f4>)
 800d9ea:	f008 fb7b 	bl	80160e4 <iprintf>
			printf("Firmware path:%s\n\r", firmware_path);
 800d9ee:	a905      	add	r1, sp, #20
 800d9f0:	482f      	ldr	r0, [pc, #188]	; (800dab0 <main+0x2f8>)
 800d9f2:	f008 fb77 	bl	80160e4 <iprintf>
			if ((result_usb = Write_Flash(USB_ID, firmware_path,
 800d9f6:	9b04      	ldr	r3, [sp, #16]
 800d9f8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800d9fc:	a905      	add	r1, sp, #20
 800d9fe:	2014      	movs	r0, #20
 800da00:	f7fe ff1c 	bl	800c83c <Write_Flash>
 800da04:	280b      	cmp	r0, #11
 800da06:	4605      	mov	r5, r0
 800da08:	f040 80b0 	bne.w	800db6c <main+0x3b4>
				printf("Program Flashed from USB\n\r");
 800da0c:	482d      	ldr	r0, [pc, #180]	; (800dac4 <main+0x30c>)
 800da0e:	f008 fb69 	bl	80160e4 <iprintf>
				draw_text("Flashed from USB", 0, 10, Tahoma8, 1, 0);
 800da12:	e9cd 7800 	strd	r7, r8, [sp]
 800da16:	4b1f      	ldr	r3, [pc, #124]	; (800da94 <main+0x2dc>)
 800da18:	482b      	ldr	r0, [pc, #172]	; (800dac8 <main+0x310>)
 800da1a:	220a      	movs	r2, #10
 800da1c:	4641      	mov	r1, r8
 800da1e:	e09d      	b.n	800db5c <main+0x3a4>
		if (BTNcounter == 20) {
 800da20:	2d14      	cmp	r5, #20
 800da22:	d10d      	bne.n	800da40 <main+0x288>
			printf("Release button to enter Bootloader.\n\r");
 800da24:	4648      	mov	r0, r9
 800da26:	f008 fb5d 	bl	80160e4 <iprintf>
			draw_text("Release to Enter Loader", 0, 10, Tahoma8, 1, 0);
 800da2a:	2301      	movs	r3, #1
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	220a      	movs	r2, #10
 800da30:	4653      	mov	r3, sl
 800da32:	4639      	mov	r1, r7
 800da34:	9701      	str	r7, [sp, #4]
 800da36:	4825      	ldr	r0, [pc, #148]	; (800dacc <main+0x314>)
 800da38:	f7ff fdc5 	bl	800d5c6 <draw_text>
			glcd_refresh();
 800da3c:	f000 fb74 	bl	800e128 <glcd_refresh>
		MX_USB_HOST_Process();
 800da40:	f008 f91a 	bl	8015c78 <MX_USB_HOST_Process>
		HAL_Delay(100);
 800da44:	2064      	movs	r0, #100	; 0x64
 800da46:	f000 ff0f 	bl	800e868 <HAL_Delay>
 800da4a:	3501      	adds	r5, #1
 800da4c:	e734      	b.n	800d8b8 <main+0x100>
			printf("SD CARD Have problem(%d)\n\r", result_sd);
 800da4e:	4601      	mov	r1, r0
 800da50:	481f      	ldr	r0, [pc, #124]	; (800dad0 <main+0x318>)
 800da52:	f008 fb47 	bl	80160e4 <iprintf>
			draw_text("Failed from SD", 0, 10, Tahoma8, 1, 0);
 800da56:	e9cd 7600 	strd	r7, r6, [sp]
 800da5a:	4b0e      	ldr	r3, [pc, #56]	; (800da94 <main+0x2dc>)
 800da5c:	481d      	ldr	r0, [pc, #116]	; (800dad4 <main+0x31c>)
 800da5e:	220a      	movs	r2, #10
 800da60:	4631      	mov	r1, r6
 800da62:	e793      	b.n	800d98c <main+0x1d4>
 800da64:	080005e8 	.word	0x080005e8
 800da68:	10000000 	.word	0x10000000
 800da6c:	0800063c 	.word	0x0800063c
 800da70:	0800068e 	.word	0x0800068e
 800da74:	080006e0 	.word	0x080006e0
 800da78:	08000707 	.word	0x08000707
 800da7c:	20000004 	.word	0x20000004
 800da80:	08000720 	.word	0x08000720
 800da84:	08000737 	.word	0x08000737
 800da88:	40021000 	.word	0x40021000
 800da8c:	08000e26 	.word	0x08000e26
 800da90:	0800078f 	.word	0x0800078f
 800da94:	0800098c 	.word	0x0800098c
 800da98:	080007aa 	.word	0x080007aa
 800da9c:	080007bb 	.word	0x080007bb
 800daa0:	080007f7 	.word	0x080007f7
 800daa4:	080007ff 	.word	0x080007ff
 800daa8:	08000816 	.word	0x08000816
 800daac:	0800082d 	.word	0x0800082d
 800dab0:	08000845 	.word	0x08000845
 800dab4:	08000858 	.word	0x08000858
 800dab8:	08000872 	.word	0x08000872
 800dabc:	080008ac 	.word	0x080008ac
 800dac0:	080008b5 	.word	0x080008b5
 800dac4:	080008cd 	.word	0x080008cd
 800dac8:	080008e8 	.word	0x080008e8
 800dacc:	08000777 	.word	0x08000777
 800dad0:	08000882 	.word	0x08000882
 800dad4:	0800089d 	.word	0x0800089d
 800dad8:	40020400 	.word	0x40020400
 800dadc:	08000751 	.word	0x08000751
	} else if (sharedmem == WRITE_FROM_SD || sharedmem == FORCE_WRITE_FROM_SD) {
 800dae0:	f023 0702 	bic.w	r7, r3, #2
 800dae4:	2f01      	cmp	r7, #1
 800dae6:	d16e      	bne.n	800dbc6 <main+0x40e>
		draw_text("try SD:", 0, 0, Tahoma8, 1, 0);
 800dae8:	2600      	movs	r6, #0
		glcd_blank();
 800daea:	f000 fafb 	bl	800e0e4 <glcd_blank>
		draw_text("try SD:", 0, 0, Tahoma8, 1, 0);
 800daee:	4b45      	ldr	r3, [pc, #276]	; (800dc04 <main+0x44c>)
 800daf0:	4845      	ldr	r0, [pc, #276]	; (800dc08 <main+0x450>)
 800daf2:	4632      	mov	r2, r6
 800daf4:	4631      	mov	r1, r6
 800daf6:	e9cd 7600 	strd	r7, r6, [sp]
 800dafa:	f7ff fd64 	bl	800d5c6 <draw_text>
		glcd_refresh();
 800dafe:	f000 fb13 	bl	800e128 <glcd_refresh>
		if ((result_sd = Check_SDCard(firmware_path, &firmware_version,
 800db02:	aa04      	add	r2, sp, #16
 800db04:	f10d 010e 	add.w	r1, sp, #14
 800db08:	a805      	add	r0, sp, #20
 800db0a:	f7fe fd4d 	bl	800c5a8 <Check_SDCard>
 800db0e:	4605      	mov	r5, r0
 800db10:	4680      	mov	r8, r0
 800db12:	2800      	cmp	r0, #0
 800db14:	d14c      	bne.n	800dbb0 <main+0x3f8>
			printf("Firmware found in SD\n\r");
 800db16:	483d      	ldr	r0, [pc, #244]	; (800dc0c <main+0x454>)
 800db18:	f008 fae4 	bl	80160e4 <iprintf>
			printf("Firmware version:%lu\n\r", firmware_version);
 800db1c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800db20:	483b      	ldr	r0, [pc, #236]	; (800dc10 <main+0x458>)
 800db22:	f008 fadf 	bl	80160e4 <iprintf>
			printf("Firmware checksum:%lu\n\r", firmware_checksum);
 800db26:	9904      	ldr	r1, [sp, #16]
 800db28:	483a      	ldr	r0, [pc, #232]	; (800dc14 <main+0x45c>)
 800db2a:	f008 fadb 	bl	80160e4 <iprintf>
			printf("Firmware path:%s\n\r", firmware_path);
 800db2e:	a905      	add	r1, sp, #20
 800db30:	4839      	ldr	r0, [pc, #228]	; (800dc18 <main+0x460>)
 800db32:	f008 fad7 	bl	80160e4 <iprintf>
			if ((result_sd = Write_Flash(SD_ID, firmware_path, firmware_version,
 800db36:	9b04      	ldr	r3, [sp, #16]
 800db38:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800db3c:	a905      	add	r1, sp, #20
 800db3e:	200a      	movs	r0, #10
 800db40:	f7fe fe7c 	bl	800c83c <Write_Flash>
 800db44:	280b      	cmp	r0, #11
 800db46:	4605      	mov	r5, r0
 800db48:	d110      	bne.n	800db6c <main+0x3b4>
				printf("Program Flashed from SD\n\r");
 800db4a:	4834      	ldr	r0, [pc, #208]	; (800dc1c <main+0x464>)
 800db4c:	f008 faca 	bl	80160e4 <iprintf>
				draw_text("Flashed from SD", 0, 10, Tahoma8, 1, 0);
 800db50:	e9cd 7800 	strd	r7, r8, [sp]
 800db54:	4b2b      	ldr	r3, [pc, #172]	; (800dc04 <main+0x44c>)
 800db56:	4832      	ldr	r0, [pc, #200]	; (800dc20 <main+0x468>)
 800db58:	220a      	movs	r2, #10
 800db5a:	4641      	mov	r1, r8
			draw_text("Failed from USB", 0, 10, Tahoma8, 1, 0);
 800db5c:	f7ff fd33 	bl	800d5c6 <draw_text>
			glcd_refresh();
 800db60:	f000 fae2 	bl	800e128 <glcd_refresh>
			HAL_Delay(1000);
 800db64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800db68:	f000 fe7e 	bl	800e868 <HAL_Delay>
		sharedmem = result_usb;
 800db6c:	6025      	str	r5, [r4, #0]
	glcd_blank();
 800db6e:	f000 fab9 	bl	800e0e4 <glcd_blank>
	draw_text("goto app", 0, 0, Tahoma8, 1, 0);
 800db72:	2501      	movs	r5, #1
 800db74:	2200      	movs	r2, #0
 800db76:	e9cd 5200 	strd	r5, r2, [sp]
 800db7a:	4b22      	ldr	r3, [pc, #136]	; (800dc04 <main+0x44c>)
 800db7c:	4829      	ldr	r0, [pc, #164]	; (800dc24 <main+0x46c>)
 800db7e:	4611      	mov	r1, r2
 800db80:	f7ff fd21 	bl	800d5c6 <draw_text>
	glcd_refresh();
 800db84:	f000 fad0 	bl	800e128 <glcd_refresh>
	if (!goto_application()) {
 800db88:	f7fe fe46 	bl	800c818 <goto_application>
 800db8c:	4604      	mov	r4, r0
 800db8e:	b960      	cbnz	r0, 800dbaa <main+0x3f2>
		printf("bootloader could not go to application\n\r");
 800db90:	4825      	ldr	r0, [pc, #148]	; (800dc28 <main+0x470>)
 800db92:	f008 faa7 	bl	80160e4 <iprintf>
		draw_text("Failed Application", 0, 10, Tahoma8, 1, 0);
 800db96:	4b1b      	ldr	r3, [pc, #108]	; (800dc04 <main+0x44c>)
 800db98:	4824      	ldr	r0, [pc, #144]	; (800dc2c <main+0x474>)
 800db9a:	220a      	movs	r2, #10
 800db9c:	4621      	mov	r1, r4
 800db9e:	e9cd 5400 	strd	r5, r4, [sp]
 800dba2:	f7ff fd10 	bl	800d5c6 <draw_text>
		glcd_refresh();
 800dba6:	f000 fabf 	bl	800e128 <glcd_refresh>
    MX_USB_HOST_Process();
 800dbaa:	f008 f865 	bl	8015c78 <MX_USB_HOST_Process>
 800dbae:	e7fc      	b.n	800dbaa <main+0x3f2>
			printf("SD CARD Have problem(%d)\n\r", result_sd);
 800dbb0:	4601      	mov	r1, r0
 800dbb2:	481f      	ldr	r0, [pc, #124]	; (800dc30 <main+0x478>)
 800dbb4:	f008 fa96 	bl	80160e4 <iprintf>
			draw_text("Failed from SD", 0, 10, Tahoma8, 1, 0);
 800dbb8:	e9cd 7600 	strd	r7, r6, [sp]
 800dbbc:	4b11      	ldr	r3, [pc, #68]	; (800dc04 <main+0x44c>)
 800dbbe:	481d      	ldr	r0, [pc, #116]	; (800dc34 <main+0x47c>)
 800dbc0:	220a      	movs	r2, #10
 800dbc2:	4631      	mov	r1, r6
 800dbc4:	e7ca      	b.n	800db5c <main+0x3a4>
	} else if (sharedmem == WRITE_FROM_USB || sharedmem == FORCE_WRITE_FROM_USB) {
 800dbc6:	2b02      	cmp	r3, #2
 800dbc8:	d001      	beq.n	800dbce <main+0x416>
 800dbca:	2b04      	cmp	r3, #4
 800dbcc:	d1cf      	bne.n	800db6e <main+0x3b6>
		draw_text("try USB", 0, 0, Tahoma8, 1, 0);
 800dbce:	2600      	movs	r6, #0
 800dbd0:	2701      	movs	r7, #1
		glcd_blank();
 800dbd2:	f000 fa87 	bl	800e0e4 <glcd_blank>
		draw_text("try USB", 0, 0, Tahoma8, 1, 0);
 800dbd6:	4b0b      	ldr	r3, [pc, #44]	; (800dc04 <main+0x44c>)
 800dbd8:	4817      	ldr	r0, [pc, #92]	; (800dc38 <main+0x480>)
 800dbda:	4632      	mov	r2, r6
 800dbdc:	4631      	mov	r1, r6
 800dbde:	e9cd 7600 	strd	r7, r6, [sp]
 800dbe2:	f7ff fcf0 	bl	800d5c6 <draw_text>
		glcd_refresh();
 800dbe6:	f000 fa9f 	bl	800e128 <glcd_refresh>
 800dbea:	e6e9      	b.n	800d9c0 <main+0x208>
			printf("USB MEMORY Have problem(%d)\n\r", result_usb);
 800dbec:	4601      	mov	r1, r0
 800dbee:	4813      	ldr	r0, [pc, #76]	; (800dc3c <main+0x484>)
 800dbf0:	f008 fa78 	bl	80160e4 <iprintf>
			draw_text("Failed from USB", 0, 10, Tahoma8, 1, 0);
 800dbf4:	e9cd 7600 	strd	r7, r6, [sp]
 800dbf8:	4b02      	ldr	r3, [pc, #8]	; (800dc04 <main+0x44c>)
 800dbfa:	4811      	ldr	r0, [pc, #68]	; (800dc40 <main+0x488>)
 800dbfc:	220a      	movs	r2, #10
 800dbfe:	4631      	mov	r1, r6
 800dc00:	e7ac      	b.n	800db5c <main+0x3a4>
 800dc02:	bf00      	nop
 800dc04:	0800098c 	.word	0x0800098c
 800dc08:	080007f7 	.word	0x080007f7
 800dc0c:	080007ff 	.word	0x080007ff
 800dc10:	08000816 	.word	0x08000816
 800dc14:	0800082d 	.word	0x0800082d
 800dc18:	08000845 	.word	0x08000845
 800dc1c:	08000858 	.word	0x08000858
 800dc20:	08000872 	.word	0x08000872
 800dc24:	0800092f 	.word	0x0800092f
 800dc28:	08000938 	.word	0x08000938
 800dc2c:	08000961 	.word	0x08000961
 800dc30:	08000882 	.word	0x08000882
 800dc34:	0800089d 	.word	0x0800089d
 800dc38:	08000927 	.word	0x08000927
 800dc3c:	080008f9 	.word	0x080008f9
 800dc40:	08000917 	.word	0x08000917

0800dc44 <HAL_TIM_PeriodElapsedCallback>:
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800dc44:	6802      	ldr	r2, [r0, #0]
 800dc46:	4b03      	ldr	r3, [pc, #12]	; (800dc54 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d101      	bne.n	800dc50 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800dc4c:	f000 bdfa 	b.w	800e844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	40010000 	.word	0x40010000

0800dc58 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800dc58:	4770      	bx	lr

0800dc5a <_isatty>:
 800dc5a:	2802      	cmp	r0, #2
 800dc5c:	b508      	push	{r3, lr}
 800dc5e:	d905      	bls.n	800dc6c <_isatty+0x12>
 800dc60:	f008 f94a 	bl	8015ef8 <__errno>
 800dc64:	2309      	movs	r3, #9
 800dc66:	6003      	str	r3, [r0, #0]
 800dc68:	2000      	movs	r0, #0
 800dc6a:	bd08      	pop	{r3, pc}
 800dc6c:	2001      	movs	r0, #1
 800dc6e:	e7fc      	b.n	800dc6a <_isatty+0x10>

0800dc70 <_write>:
 800dc70:	3801      	subs	r0, #1
 800dc72:	2801      	cmp	r0, #1
 800dc74:	b510      	push	{r4, lr}
 800dc76:	4614      	mov	r4, r2
 800dc78:	d80b      	bhi.n	800dc92 <_write+0x22>
 800dc7a:	4809      	ldr	r0, [pc, #36]	; (800dca0 <_write+0x30>)
 800dc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc80:	b292      	uxth	r2, r2
 800dc82:	6800      	ldr	r0, [r0, #0]
 800dc84:	f003 fe0c 	bl	80118a0 <HAL_UART_Transmit>
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	bf18      	it	ne
 800dc8c:	2405      	movne	r4, #5
 800dc8e:	4620      	mov	r0, r4
 800dc90:	bd10      	pop	{r4, pc}
 800dc92:	f008 f931 	bl	8015ef8 <__errno>
 800dc96:	2309      	movs	r3, #9
 800dc98:	6003      	str	r3, [r0, #0]
 800dc9a:	f04f 34ff 	mov.w	r4, #4294967295
 800dc9e:	e7f6      	b.n	800dc8e <_write+0x1e>
 800dca0:	200014e4 	.word	0x200014e4

0800dca4 <_close>:
 800dca4:	2802      	cmp	r0, #2
 800dca6:	b508      	push	{r3, lr}
 800dca8:	d906      	bls.n	800dcb8 <_close+0x14>
 800dcaa:	f008 f925 	bl	8015ef8 <__errno>
 800dcae:	2309      	movs	r3, #9
 800dcb0:	6003      	str	r3, [r0, #0]
 800dcb2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb6:	bd08      	pop	{r3, pc}
 800dcb8:	2000      	movs	r0, #0
 800dcba:	e7fc      	b.n	800dcb6 <_close+0x12>

0800dcbc <_lseek>:
 800dcbc:	b508      	push	{r3, lr}
 800dcbe:	f008 f91b 	bl	8015ef8 <__errno>
 800dcc2:	2309      	movs	r3, #9
 800dcc4:	6003      	str	r3, [r0, #0]
 800dcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcca:	bd08      	pop	{r3, pc}

0800dccc <_read>:
 800dccc:	b508      	push	{r3, lr}
 800dcce:	b958      	cbnz	r0, 800dce8 <_read+0x1c>
 800dcd0:	4809      	ldr	r0, [pc, #36]	; (800dcf8 <_read+0x2c>)
 800dcd2:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	6800      	ldr	r0, [r0, #0]
 800dcda:	f003 fe3d 	bl	8011958 <HAL_UART_Receive>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	bf0c      	ite	eq
 800dce2:	2001      	moveq	r0, #1
 800dce4:	2005      	movne	r0, #5
 800dce6:	bd08      	pop	{r3, pc}
 800dce8:	f008 f906 	bl	8015ef8 <__errno>
 800dcec:	2309      	movs	r3, #9
 800dcee:	6003      	str	r3, [r0, #0]
 800dcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf4:	e7f7      	b.n	800dce6 <_read+0x1a>
 800dcf6:	bf00      	nop
 800dcf8:	200014e4 	.word	0x200014e4

0800dcfc <_fstat>:
 800dcfc:	2802      	cmp	r0, #2
 800dcfe:	b508      	push	{r3, lr}
 800dd00:	d804      	bhi.n	800dd0c <_fstat+0x10>
 800dd02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd06:	604b      	str	r3, [r1, #4]
 800dd08:	2000      	movs	r0, #0
 800dd0a:	bd08      	pop	{r3, pc}
 800dd0c:	f008 f8f4 	bl	8015ef8 <__errno>
 800dd10:	2309      	movs	r3, #9
 800dd12:	6003      	str	r3, [r0, #0]
 800dd14:	e7f8      	b.n	800dd08 <_fstat+0xc>
	...

0800dd18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800dd18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  RTC_TimeTypeDef sTime = {0};
 800dd1a:	2214      	movs	r2, #20
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	a801      	add	r0, sp, #4
 800dd20:	f008 f92f 	bl	8015f82 <memset>
  RTC_DateTypeDef sDate = {0};

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800dd24:	481c      	ldr	r0, [pc, #112]	; (800dd98 <MX_RTC_Init+0x80>)
 800dd26:	4a1d      	ldr	r2, [pc, #116]	; (800dd9c <MX_RTC_Init+0x84>)
  RTC_DateTypeDef sDate = {0};
 800dd28:	2300      	movs	r3, #0
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800dd2a:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 800dd2e:	217f      	movs	r1, #127	; 0x7f
 800dd30:	22ff      	movs	r2, #255	; 0xff
  RTC_DateTypeDef sDate = {0};
 800dd32:	9300      	str	r3, [sp, #0]
  hrtc.Init.SynchPrediv = 255;
 800dd34:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800dd38:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dd3c:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800dd3e:	f002 fb53 	bl	80103e8 <HAL_RTC_Init>
 800dd42:	b108      	cbz	r0, 800dd48 <MX_RTC_Init+0x30>
  {
    Error_Handler();
 800dd44:	f7ff ff88 	bl	800dc58 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead (&hrtc,RTC_BKP_DR0) ==0x5050)
 800dd48:	2100      	movs	r1, #0
 800dd4a:	4813      	ldr	r0, [pc, #76]	; (800dd98 <MX_RTC_Init+0x80>)
 800dd4c:	f002 fc78 	bl	8010640 <HAL_RTCEx_BKUPRead>
 800dd50:	f245 0250 	movw	r2, #20560	; 0x5050
 800dd54:	4290      	cmp	r0, r2
 800dd56:	d01c      	beq.n	800dd92 <MX_RTC_Init+0x7a>
	  return;
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x5050);
 800dd58:	2100      	movs	r1, #0
 800dd5a:	480f      	ldr	r0, [pc, #60]	; (800dd98 <MX_RTC_Init+0x80>)
 800dd5c:	f002 fc6b 	bl	8010636 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800dd60:	2200      	movs	r2, #0
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800dd62:	a901      	add	r1, sp, #4
 800dd64:	480c      	ldr	r0, [pc, #48]	; (800dd98 <MX_RTC_Init+0x80>)
  sTime.Hours = 0;
 800dd66:	f8ad 2004 	strh.w	r2, [sp, #4]
  sTime.Minutes = 0;
 800dd6a:	f88d 2006 	strb.w	r2, [sp, #6]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800dd6e:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800dd72:	f002 fb92 	bl	801049a <HAL_RTC_SetTime>
 800dd76:	b108      	cbz	r0, 800dd7c <MX_RTC_Init+0x64>
  {
    Error_Handler();
 800dd78:	f7ff ff6e 	bl	800dc58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800dd7c:	a906      	add	r1, sp, #24
 800dd7e:	4b08      	ldr	r3, [pc, #32]	; (800dda0 <MX_RTC_Init+0x88>)
 800dd80:	f841 3d18 	str.w	r3, [r1, #-24]!
  sDate.Month = RTC_MONTH_AUGUST;
  sDate.Date = 2;
  sDate.Year = 20;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800dd84:	2200      	movs	r2, #0
 800dd86:	4804      	ldr	r0, [pc, #16]	; (800dd98 <MX_RTC_Init+0x80>)
 800dd88:	f002 fbf8 	bl	801057c <HAL_RTC_SetDate>
 800dd8c:	b108      	cbz	r0, 800dd92 <MX_RTC_Init+0x7a>
  {
    Error_Handler();
 800dd8e:	f7ff ff63 	bl	800dc58 <Error_Handler>
  }

}
 800dd92:	b007      	add	sp, #28
 800dd94:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd98:	200014e8 	.word	0x200014e8
 800dd9c:	40002800 	.word	0x40002800
 800dda0:	14020807 	.word	0x14020807

0800dda4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 800dda4:	6802      	ldr	r2, [r0, #0]
 800dda6:	4b03      	ldr	r3, [pc, #12]	; (800ddb4 <HAL_RTC_MspInit+0x10>)
 800dda8:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ddaa:	bf02      	ittt	eq
 800ddac:	4b02      	ldreq	r3, [pc, #8]	; (800ddb8 <HAL_RTC_MspInit+0x14>)
 800ddae:	2201      	moveq	r2, #1
 800ddb0:	601a      	streq	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800ddb2:	4770      	bx	lr
 800ddb4:	40002800 	.word	0x40002800
 800ddb8:	42470e3c 	.word	0x42470e3c

0800ddbc <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 800ddbc:	4b05      	ldr	r3, [pc, #20]	; (800ddd4 <MX_SDIO_SD_Init+0x18>)
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800ddbe:	4906      	ldr	r1, [pc, #24]	; (800ddd8 <MX_SDIO_SD_Init+0x1c>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	e9c3 1200 	strd	r1, r2, [r3]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ddc6:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ddca:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hsd.Init.ClockDiv = 3;
 800ddce:	2203      	movs	r2, #3
 800ddd0:	619a      	str	r2, [r3, #24]

}
 800ddd2:	4770      	bx	lr
 800ddd4:	200015c8 	.word	0x200015c8
 800ddd8:	40012c00 	.word	0x40012c00

0800dddc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800dddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dde0:	4606      	mov	r6, r0
 800dde2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dde4:	2214      	movs	r2, #20
 800dde6:	2100      	movs	r1, #0
 800dde8:	a803      	add	r0, sp, #12
 800ddea:	f008 f8ca 	bl	8015f82 <memset>
  if(sdHandle->Instance==SDIO)
 800ddee:	6832      	ldr	r2, [r6, #0]
 800ddf0:	4b4b      	ldr	r3, [pc, #300]	; (800df20 <HAL_SD_MspInit+0x144>)
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	f040 8091 	bne.w	800df1a <HAL_SD_MspInit+0x13e>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800ddf8:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800ddfc:	2500      	movs	r5, #0
 800ddfe:	9500      	str	r5, [sp, #0]
 800de00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800de02:	4848      	ldr	r0, [pc, #288]	; (800df24 <HAL_SD_MspInit+0x148>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 800de04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de08:	645a      	str	r2, [r3, #68]	; 0x44
 800de0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de0c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800de10:	9200      	str	r2, [sp, #0]
 800de12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de14:	9501      	str	r5, [sp, #4]
 800de16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de18:	f042 0204 	orr.w	r2, r2, #4
 800de1c:	631a      	str	r2, [r3, #48]	; 0x30
 800de1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de20:	f002 0204 	and.w	r2, r2, #4
 800de24:	9201      	str	r2, [sp, #4]
 800de26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800de28:	9502      	str	r5, [sp, #8]
 800de2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de2c:	f042 0208 	orr.w	r2, r2, #8
 800de30:	631a      	str	r2, [r3, #48]	; 0x30
 800de32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de34:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800de38:	240c      	movs	r4, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800de3a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de3c:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800de40:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800de42:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800de46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de48:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800de4c:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800de50:	e9cd 7406 	strd	r7, r4, [sp, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800de54:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800de58:	f001 f90e 	bl	800f078 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800de5c:	eb0d 0104 	add.w	r1, sp, r4
 800de60:	4831      	ldr	r0, [pc, #196]	; (800df28 <HAL_SD_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800de62:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de64:	e9cd 8903 	strd	r8, r9, [sp, #12]

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800de68:	4c30      	ldr	r4, [pc, #192]	; (800df2c <HAL_SD_MspInit+0x150>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de6a:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800de6e:	f001 f903 	bl	800f078 <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800de72:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 800df38 <HAL_SD_MspInit+0x15c>
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800de76:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800de78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800de7c:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800de80:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800de84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de88:	e9c4 9304 	strd	r9, r3, [r4, #16]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800de8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800de90:	2320      	movs	r3, #32
 800de92:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800de96:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800de9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800de9e:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dea0:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800dea4:	e9c4 5808 	strd	r5, r8, [r4, #32]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800dea8:	e9c4 130b 	strd	r1, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800deac:	f000 fd7e 	bl	800e9ac <HAL_DMA_Init>
 800deb0:	b108      	cbz	r0, 800deb6 <HAL_SD_MspInit+0xda>
    {
      Error_Handler();
 800deb2:	f7ff fed1 	bl	800dc58 <Error_Handler>

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800deb6:	4a1e      	ldr	r2, [pc, #120]	; (800df30 <HAL_SD_MspInit+0x154>)
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800deb8:	6434      	str	r4, [r6, #64]	; 0x40
 800deba:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800debc:	4c1d      	ldr	r4, [pc, #116]	; (800df34 <HAL_SD_MspInit+0x158>)
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800debe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dec2:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dec6:	2140      	movs	r1, #64	; 0x40
 800dec8:	2300      	movs	r3, #0
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800deca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800dece:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ded2:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ded6:	6223      	str	r3, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800ded8:	2704      	movs	r7, #4
 800deda:	2303      	movs	r3, #3
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800dedc:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800dee0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 800dee4:	2220      	movs	r2, #32
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800dee6:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800deea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800deee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800def2:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800def4:	e9c4 5206 	strd	r5, r2, [r4, #24]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800def8:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800defc:	f000 fd56 	bl	800e9ac <HAL_DMA_Init>
 800df00:	b108      	cbz	r0, 800df06 <HAL_SD_MspInit+0x12a>
    {
      Error_Handler();
 800df02:	f7ff fea9 	bl	800dc58 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 1, 0);
 800df06:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800df08:	63f4      	str	r4, [r6, #60]	; 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 1, 0);
 800df0a:	2200      	movs	r2, #0
 800df0c:	2101      	movs	r1, #1
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800df0e:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 1, 0);
 800df10:	f000 fcd0 	bl	800e8b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800df14:	2031      	movs	r0, #49	; 0x31
 800df16:	f000 fd01 	bl	800e91c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800df1a:	b009      	add	sp, #36	; 0x24
 800df1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df20:	40012c00 	.word	0x40012c00
 800df24:	40020800 	.word	0x40020800
 800df28:	40020c00 	.word	0x40020c00
 800df2c:	20001508 	.word	0x20001508
 800df30:	400264a0 	.word	0x400264a0
 800df34:	20001568 	.word	0x20001568
 800df38:	40026458 	.word	0x40026458

0800df3c <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{

  if(sdHandle->Instance==SDIO)
 800df3c:	6802      	ldr	r2, [r0, #0]
 800df3e:	4b0f      	ldr	r3, [pc, #60]	; (800df7c <HAL_SD_MspDeInit+0x40>)
 800df40:	429a      	cmp	r2, r3
{
 800df42:	b510      	push	{r4, lr}
 800df44:	4604      	mov	r4, r0
  if(sdHandle->Instance==SDIO)
 800df46:	d118      	bne.n	800df7a <HAL_SD_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN SDIO_MspDeInit 0 */

  /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();
 800df48:	4a0d      	ldr	r2, [pc, #52]	; (800df80 <HAL_SD_MspDeInit+0x44>)
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PC8     ------> SDIO_D0
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_8);
 800df4a:	480e      	ldr	r0, [pc, #56]	; (800df84 <HAL_SD_MspDeInit+0x48>)
    __HAL_RCC_SDIO_CLK_DISABLE();
 800df4c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800df4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df52:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_8);
 800df54:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800df58:	f001 f96e 	bl	800f238 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 800df5c:	2104      	movs	r1, #4
 800df5e:	480a      	ldr	r0, [pc, #40]	; (800df88 <HAL_SD_MspDeInit+0x4c>)
 800df60:	f001 f96a 	bl	800f238 <HAL_GPIO_DeInit>

    /* SDIO DMA DeInit */
    HAL_DMA_DeInit(sdHandle->hdmarx);
 800df64:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800df66:	f000 fd9f 	bl	800eaa8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(sdHandle->hdmatx);
 800df6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800df6c:	f000 fd9c 	bl	800eaa8 <HAL_DMA_DeInit>

    /* SDIO interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 800df70:	2031      	movs	r0, #49	; 0x31
  /* USER CODE BEGIN SDIO_MspDeInit 1 */

  /* USER CODE END SDIO_MspDeInit 1 */
  }
}
 800df72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 800df76:	f000 bcdf 	b.w	800e938 <HAL_NVIC_DisableIRQ>
}
 800df7a:	bd10      	pop	{r4, pc}
 800df7c:	40012c00 	.word	0x40012c00
 800df80:	40023800 	.word	0x40023800
 800df84:	40020800 	.word	0x40020800
 800df88:	40020c00 	.word	0x40020c00

0800df8c <glcd_data>:
}
/*
 * SPI emulation
 * send data
 */
void glcd_data(uint8_t data) {
 800df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint8_t bits = 0x80;
	ST7567_CMD_SET;
 800df8e:	2201      	movs	r2, #1
 800df90:	2102      	movs	r1, #2
void glcd_data(uint8_t data) {
 800df92:	4607      	mov	r7, r0
	ST7567_CMD_SET;
 800df94:	4819      	ldr	r0, [pc, #100]	; (800dffc <glcd_data+0x70>)
	ST7567_SCLK_RESET;
	ST7567_CS_RESET;

	while (bits) {
		ST7567_SCLK_RESET;
 800df96:	4e1a      	ldr	r6, [pc, #104]	; (800e000 <glcd_data+0x74>)
	ST7567_CMD_SET;
 800df98:	f001 f9e2 	bl	800f360 <HAL_GPIO_WritePin>
	ST7567_SCLK_RESET;
 800df9c:	2200      	movs	r2, #0
 800df9e:	2120      	movs	r1, #32
 800dfa0:	4817      	ldr	r0, [pc, #92]	; (800e000 <glcd_data+0x74>)
 800dfa2:	f001 f9dd 	bl	800f360 <HAL_GPIO_WritePin>
	ST7567_CS_RESET;
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	2180      	movs	r1, #128	; 0x80
 800dfaa:	4815      	ldr	r0, [pc, #84]	; (800e000 <glcd_data+0x74>)
 800dfac:	f001 f9d8 	bl	800f360 <HAL_GPIO_WritePin>
 800dfb0:	2408      	movs	r4, #8
	uint8_t bits = 0x80;
 800dfb2:	2580      	movs	r5, #128	; 0x80
		ST7567_SCLK_RESET;
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	2120      	movs	r1, #32
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f001 f9d1 	bl	800f360 <HAL_GPIO_WritePin>
		//st7567_usdelay(1);
		if (data & bits)
 800dfbe:	ea17 0205 	ands.w	r2, r7, r5
			ST7567_SID_SET;
 800dfc2:	bf18      	it	ne
 800dfc4:	2201      	movne	r2, #1
		else
			ST7567_SID_RESET;
 800dfc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dfca:	4630      	mov	r0, r6
 800dfcc:	f001 f9c8 	bl	800f360 <HAL_GPIO_WritePin>
		ST7567_SCLK_SET;
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	2120      	movs	r1, #32
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	f001 f9c3 	bl	800f360 <HAL_GPIO_WritePin>
	while (bits) {
 800dfda:	3c01      	subs	r4, #1
		//st7567_usdelay(1);
		bits >>= 1;
 800dfdc:	ea4f 0555 	mov.w	r5, r5, lsr #1
	while (bits) {
 800dfe0:	d1e8      	bne.n	800dfb4 <glcd_data+0x28>
	}
	ST7567_CS_SET;
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	2180      	movs	r1, #128	; 0x80
 800dfe6:	4806      	ldr	r0, [pc, #24]	; (800e000 <glcd_data+0x74>)
 800dfe8:	f001 f9ba 	bl	800f360 <HAL_GPIO_WritePin>
	ST7567_CMD_RESET;
 800dfec:	4622      	mov	r2, r4
 800dfee:	2102      	movs	r1, #2
 800dff0:	4802      	ldr	r0, [pc, #8]	; (800dffc <glcd_data+0x70>)

}
 800dff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ST7567_CMD_RESET;
 800dff6:	f001 b9b3 	b.w	800f360 <HAL_GPIO_WritePin>
 800dffa:	bf00      	nop
 800dffc:	40021000 	.word	0x40021000
 800e000:	40020400 	.word	0x40020400

0800e004 <glcd_command>:

void glcd_command(uint8_t command) {
 800e004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint8_t bits = 0x80;
	ST7567_CMD_RESET;
 800e006:	2200      	movs	r2, #0
 800e008:	2102      	movs	r1, #2
void glcd_command(uint8_t command) {
 800e00a:	4607      	mov	r7, r0
	ST7567_CMD_RESET;
 800e00c:	4819      	ldr	r0, [pc, #100]	; (800e074 <glcd_command+0x70>)
	ST7567_SCLK_RESET;
	ST7567_CS_RESET;

	while (bits) {
		ST7567_SCLK_RESET;
 800e00e:	4d1a      	ldr	r5, [pc, #104]	; (800e078 <glcd_command+0x74>)
	ST7567_CMD_RESET;
 800e010:	f001 f9a6 	bl	800f360 <HAL_GPIO_WritePin>
	ST7567_SCLK_RESET;
 800e014:	2200      	movs	r2, #0
 800e016:	2120      	movs	r1, #32
 800e018:	4817      	ldr	r0, [pc, #92]	; (800e078 <glcd_command+0x74>)
 800e01a:	f001 f9a1 	bl	800f360 <HAL_GPIO_WritePin>
	ST7567_CS_RESET;
 800e01e:	2200      	movs	r2, #0
 800e020:	2180      	movs	r1, #128	; 0x80
 800e022:	4815      	ldr	r0, [pc, #84]	; (800e078 <glcd_command+0x74>)
 800e024:	f001 f99c 	bl	800f360 <HAL_GPIO_WritePin>
 800e028:	2608      	movs	r6, #8
	uint8_t bits = 0x80;
 800e02a:	2480      	movs	r4, #128	; 0x80
		ST7567_SCLK_RESET;
 800e02c:	2200      	movs	r2, #0
 800e02e:	2120      	movs	r1, #32
 800e030:	4628      	mov	r0, r5
 800e032:	f001 f995 	bl	800f360 <HAL_GPIO_WritePin>
//		st7567_usdelay(1);
		if (command & bits)
 800e036:	ea17 0204 	ands.w	r2, r7, r4
			ST7567_SID_SET;
 800e03a:	bf18      	it	ne
 800e03c:	2201      	movne	r2, #1
		else
			ST7567_SID_RESET;
 800e03e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e042:	4628      	mov	r0, r5
 800e044:	f001 f98c 	bl	800f360 <HAL_GPIO_WritePin>
		ST7567_SCLK_SET;
 800e048:	2201      	movs	r2, #1
 800e04a:	2120      	movs	r1, #32
 800e04c:	4628      	mov	r0, r5
 800e04e:	f001 f987 	bl	800f360 <HAL_GPIO_WritePin>
	while (bits) {
 800e052:	3e01      	subs	r6, #1
//		st7567_usdelay(1);
		bits >>= 1;
 800e054:	ea4f 0454 	mov.w	r4, r4, lsr #1
	while (bits) {
 800e058:	d1e8      	bne.n	800e02c <glcd_command+0x28>
	}
	ST7567_CS_SET;
 800e05a:	2201      	movs	r2, #1
 800e05c:	2180      	movs	r1, #128	; 0x80
 800e05e:	4806      	ldr	r0, [pc, #24]	; (800e078 <glcd_command+0x74>)
 800e060:	f001 f97e 	bl	800f360 <HAL_GPIO_WritePin>
	ST7567_CMD_SET;
 800e064:	2201      	movs	r2, #1
 800e066:	2102      	movs	r1, #2
 800e068:	4802      	ldr	r0, [pc, #8]	; (800e074 <glcd_command+0x70>)
}
 800e06a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ST7567_CMD_SET;
 800e06e:	f001 b977 	b.w	800f360 <HAL_GPIO_WritePin>
 800e072:	bf00      	nop
 800e074:	40021000 	.word	0x40021000
 800e078:	40020400 	.word	0x40020400

0800e07c <glcd_pixel>:
/*
 *
 */
void glcd_pixel(unsigned char x, unsigned char y, unsigned char colour) {
 800e07c:	4b16      	ldr	r3, [pc, #88]	; (800e0d8 <glcd_pixel+0x5c>)
 800e07e:	b570      	push	{r4, r5, r6, lr}
 800e080:	881d      	ldrh	r5, [r3, #0]
 800e082:	4b16      	ldr	r3, [pc, #88]	; (800e0dc <glcd_pixel+0x60>)
 800e084:	681c      	ldr	r4, [r3, #0]
//		return;

//	// Real screen coordinates are 0-63, not 1-64.
//	x -= 1;
//	y -= 1;
	if (glcd_flipped == 0 || glcd_flipped == 1) {
 800e086:	4b16      	ldr	r3, [pc, #88]	; (800e0e0 <glcd_pixel+0x64>)
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d811      	bhi.n	800e0b2 <glcd_pixel+0x36>
 800e08e:	f001 0607 	and.w	r6, r1, #7
		unsigned short array_pos = x + ((y / 8) * glcd_width);
 800e092:	08c9      	lsrs	r1, r1, #3
 800e094:	fb11 f105 	smulbb	r1, r1, r5
 800e098:	4408      	add	r0, r1
 800e09a:	2301      	movs	r3, #1
 800e09c:	b280      	uxth	r0, r0
 800e09e:	40b3      	lsls	r3, r6
 800e0a0:	b25b      	sxtb	r3, r3
 800e0a2:	5621      	ldrsb	r1, [r4, r0]
#ifdef ST7565_DIRTY_PAGES
	#warning ** ST7565_DIRTY_PAGES enabled, only changed pages will be written to the GLCD **
		glcd_dirty_pages |= 1 << (array_pos / 128);
	#endif

		if (colour) {
 800e0a4:	b112      	cbz	r2, 800e0ac <glcd_pixel+0x30>
			glcd_buffer[array_pos] |= 1 << (y % 8);
 800e0a6:	430b      	orrs	r3, r1
		} else {
			glcd_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 800e0a8:	5423      	strb	r3, [r4, r0]
			glcd_buffer[array_pos] |= 1 << (x % 8);
		} else {
			glcd_buffer[array_pos] &= 0xFF ^ (1 << (x % 8));
		}
	}
}
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}
			glcd_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 800e0ac:	ea21 0303 	bic.w	r3, r1, r3
 800e0b0:	e7fa      	b.n	800e0a8 <glcd_pixel+0x2c>
		unsigned short array_pos = (x / 8 + (y * glcd_width) / 8);
 800e0b2:	434d      	muls	r5, r1
 800e0b4:	08c1      	lsrs	r1, r0, #3
 800e0b6:	eb01 01d5 	add.w	r1, r1, r5, lsr #3
 800e0ba:	b289      	uxth	r1, r1
 800e0bc:	f000 0007 	and.w	r0, r0, #7
 800e0c0:	2501      	movs	r5, #1
 800e0c2:	fa05 f000 	lsl.w	r0, r5, r0
 800e0c6:	5663      	ldrsb	r3, [r4, r1]
 800e0c8:	b240      	sxtb	r0, r0
		if (colour) {
 800e0ca:	b112      	cbz	r2, 800e0d2 <glcd_pixel+0x56>
			glcd_buffer[array_pos] |= 1 << (x % 8);
 800e0cc:	4303      	orrs	r3, r0
			glcd_buffer[array_pos] &= 0xFF ^ (1 << (x % 8));
 800e0ce:	5463      	strb	r3, [r4, r1]
}
 800e0d0:	e7eb      	b.n	800e0aa <glcd_pixel+0x2e>
			glcd_buffer[array_pos] &= 0xFF ^ (1 << (x % 8));
 800e0d2:	ea23 0300 	bic.w	r3, r3, r0
 800e0d6:	e7fa      	b.n	800e0ce <glcd_pixel+0x52>
 800e0d8:	20001650 	.word	0x20001650
 800e0dc:	2000164c 	.word	0x2000164c
 800e0e0:	20000276 	.word	0x20000276

0800e0e4 <glcd_blank>:

void glcd_blank() {
	// Reset the internal buffer
	for (int n = 1; n <= (SCREEN_WIDTH * SCREEN_HEIGHT / 8) - 1; n++) {
		glcd_buffer[n] = 0;
 800e0e4:	480f      	ldr	r0, [pc, #60]	; (800e124 <glcd_blank+0x40>)
void glcd_blank() {
 800e0e6:	b538      	push	{r3, r4, r5, lr}
		glcd_buffer[n] = 0;
 800e0e8:	2100      	movs	r1, #0
	for (int n = 1; n <= (SCREEN_WIDTH * SCREEN_HEIGHT / 8) - 1; n++) {
 800e0ea:	2301      	movs	r3, #1
		glcd_buffer[n] = 0;
 800e0ec:	6802      	ldr	r2, [r0, #0]
 800e0ee:	54d1      	strb	r1, [r2, r3]
	for (int n = 1; n <= (SCREEN_WIDTH * SCREEN_HEIGHT / 8) - 1; n++) {
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0f6:	d1f9      	bne.n	800e0ec <glcd_blank+0x8>
	}

	// Clear the actual screen
	for (int y = 0; y < 8; y++) {
 800e0f8:	2400      	movs	r4, #0
		glcd_command(GLCD_CMD_SET_PAGE | y);
 800e0fa:	f064 004f 	orn	r0, r4, #79	; 0x4f
 800e0fe:	b2c0      	uxtb	r0, r0
 800e100:	f7ff ff80 	bl	800e004 <glcd_command>

		// Reset column to 0 (the left side)
		glcd_command(GLCD_CMD_COLUMN_LOWER);
 800e104:	2000      	movs	r0, #0
 800e106:	f7ff ff7d 	bl	800e004 <glcd_command>
		glcd_command(GLCD_CMD_COLUMN_UPPER);
 800e10a:	2010      	movs	r0, #16
 800e10c:	f7ff ff7a 	bl	800e004 <glcd_command>
 800e110:	2584      	movs	r5, #132	; 0x84

		// We iterate to 132 as the internal buffer is 65*132, not
		// 64*124.
		for (int x = 0; x < 132; x++) {
			glcd_data(0x00);
 800e112:	2000      	movs	r0, #0
 800e114:	f7ff ff3a 	bl	800df8c <glcd_data>
		for (int x = 0; x < 132; x++) {
 800e118:	3d01      	subs	r5, #1
 800e11a:	d1fa      	bne.n	800e112 <glcd_blank+0x2e>
	for (int y = 0; y < 8; y++) {
 800e11c:	3401      	adds	r4, #1
 800e11e:	2c08      	cmp	r4, #8
 800e120:	d1eb      	bne.n	800e0fa <glcd_blank+0x16>
		}
	}
}
 800e122:	bd38      	pop	{r3, r4, r5, pc}
 800e124:	2000164c 	.word	0x2000164c

0800e128 <glcd_refresh>:

void glcd_refresh() {
 800e128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		// pixels differently, the ST7565_REVERSE define allows this to
		// be controlled if necessary.
#ifdef ST7565_REVERSE
		if (!glcd_flipped) {
#else
		if (glcd_flipped == 0 || glcd_flipped == 2) {
 800e12c:	4e1c      	ldr	r6, [pc, #112]	; (800e1a0 <glcd_refresh+0x78>)
 800e12e:	4f1d      	ldr	r7, [pc, #116]	; (800e1a4 <glcd_refresh+0x7c>)
	for (int y = 0; y < 8; y++) {
 800e130:	2400      	movs	r4, #0
 800e132:	46b0      	mov	r8, r6
		glcd_command(GLCD_CMD_SET_PAGE | y);
 800e134:	f064 004f 	orn	r0, r4, #79	; 0x4f
 800e138:	b2c0      	uxtb	r0, r0
 800e13a:	f7ff ff63 	bl	800e004 <glcd_command>
		if (glcd_flipped == 0 || glcd_flipped == 2) {
 800e13e:	7833      	ldrb	r3, [r6, #0]
 800e140:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800e1a8 <glcd_refresh+0x80>
 800e144:	f013 0ffd 	tst.w	r3, #253	; 0xfd
#endif
			glcd_command(GLCD_CMD_COLUMN_LOWER | 4);
 800e148:	bf0c      	ite	eq
 800e14a:	2004      	moveq	r0, #4
		} else {
			glcd_command(GLCD_CMD_COLUMN_LOWER);
 800e14c:	2000      	movne	r0, #0
 800e14e:	f7ff ff59 	bl	800e004 <glcd_command>
		}
		glcd_command(GLCD_CMD_COLUMN_UPPER);
 800e152:	2010      	movs	r0, #16
 800e154:	f7ff ff56 	bl	800e004 <glcd_command>
		if (glcd_flipped == 0 || glcd_flipped == 1) {
 800e158:	f898 3000 	ldrb.w	r3, [r8]
 800e15c:	2b01      	cmp	r3, #1
			for (int x = 0; x < 128; x++) {
 800e15e:	f04f 0500 	mov.w	r5, #0
		if (glcd_flipped == 0 || glcd_flipped == 1) {
 800e162:	d80f      	bhi.n	800e184 <glcd_refresh+0x5c>
				glcd_data(glcd_buffer[y * glcd_width + x]);
 800e164:	883b      	ldrh	r3, [r7, #0]
 800e166:	f8d9 2000 	ldr.w	r2, [r9]
 800e16a:	fb04 2303 	mla	r3, r4, r3, r2
 800e16e:	5d58      	ldrb	r0, [r3, r5]
			for (int x = 0; x < 128; x++) {
 800e170:	3501      	adds	r5, #1
				glcd_data(glcd_buffer[y * glcd_width + x]);
 800e172:	f7ff ff0b 	bl	800df8c <glcd_data>
			for (int x = 0; x < 128; x++) {
 800e176:	2d80      	cmp	r5, #128	; 0x80
 800e178:	d1f4      	bne.n	800e164 <glcd_refresh+0x3c>
	for (int y = 0; y < 8; y++) {
 800e17a:	3401      	adds	r4, #1
 800e17c:	2c08      	cmp	r4, #8
 800e17e:	d1d9      	bne.n	800e134 <glcd_refresh+0xc>
#ifdef ST7565_DIRTY_PAGES
    // All pages have now been updated, reset the indicator.
    glcd_dirty_pages = 0;
#endif

}
 800e180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				glcd_data(glcd_buffer[y + x * glcd_width / 8]);
 800e184:	883b      	ldrh	r3, [r7, #0]
 800e186:	fb05 f203 	mul.w	r2, r5, r3
 800e18a:	f8d9 3000 	ldr.w	r3, [r9]
 800e18e:	eb03 03e2 	add.w	r3, r3, r2, asr #3
			for (int x = 0; x < 128; x++) {
 800e192:	3501      	adds	r5, #1
				glcd_data(glcd_buffer[y + x * glcd_width / 8]);
 800e194:	5d18      	ldrb	r0, [r3, r4]
 800e196:	f7ff fef9 	bl	800df8c <glcd_data>
			for (int x = 0; x < 128; x++) {
 800e19a:	2d80      	cmp	r5, #128	; 0x80
 800e19c:	d1f2      	bne.n	800e184 <glcd_refresh+0x5c>
 800e19e:	e7ec      	b.n	800e17a <glcd_refresh+0x52>
 800e1a0:	20000276 	.word	0x20000276
 800e1a4:	20001650 	.word	0x20001650
 800e1a8:	2000164c 	.word	0x2000164c

0800e1ac <glcd_backlight>:
/*
 *
 */
void glcd_backlight(uint8_t brightness) {
 800e1ac:	b510      	push	{r4, lr}
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800e1ae:	2210      	movs	r2, #16
void glcd_backlight(uint8_t brightness) {
 800e1b0:	b088      	sub	sp, #32
 800e1b2:	4604      	mov	r4, r0
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	eb0d 0002 	add.w	r0, sp, r2
 800e1ba:	f007 fee2 	bl	8015f82 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = (uint16_t) (__HAL_TIM_GET_AUTORELOAD(&DISP_BACK_TIMER)
 800e1be:	480d      	ldr	r0, [pc, #52]	; (800e1f4 <glcd_backlight+0x48>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e1c0:	2360      	movs	r3, #96	; 0x60
 800e1c2:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = (uint16_t) (__HAL_TIM_GET_AUTORELOAD(&DISP_BACK_TIMER)
 800e1c4:	6803      	ldr	r3, [r0, #0]
 800e1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c8:	fb13 f304 	smulbb	r3, r3, r4
			* brightness) / 100;
 800e1cc:	2264      	movs	r2, #100	; 0x64
 800e1ce:	b29b      	uxth	r3, r3
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&DISP_BACK_TIMER, &sConfigOC,
 800e1d0:	a901      	add	r1, sp, #4
			* brightness) / 100;
 800e1d2:	fbb3 f3f2 	udiv	r3, r3, r2
	if (HAL_TIM_PWM_ConfigChannel(&DISP_BACK_TIMER, &sConfigOC,
 800e1d6:	220c      	movs	r2, #12
			* brightness) / 100;
 800e1d8:	9302      	str	r3, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800e1da:	2302      	movs	r3, #2
 800e1dc:	9303      	str	r3, [sp, #12]
	if (HAL_TIM_PWM_ConfigChannel(&DISP_BACK_TIMER, &sConfigOC,
 800e1de:	f003 f8ff 	bl	80113e0 <HAL_TIM_PWM_ConfigChannel>
 800e1e2:	b108      	cbz	r0, 800e1e8 <glcd_backlight+0x3c>
	DISP_BACK_CHANNEL) != HAL_OK) {
		Error_Handler();
 800e1e4:	f7ff fd38 	bl	800dc58 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&DISP_BACK_TIMER, DISP_BACK_CHANNEL);
 800e1e8:	210c      	movs	r1, #12
 800e1ea:	4802      	ldr	r0, [pc, #8]	; (800e1f4 <glcd_backlight+0x48>)
 800e1ec:	f003 fa26 	bl	801163c <HAL_TIM_PWM_Start>
}
 800e1f0:	b008      	add	sp, #32
 800e1f2:	bd10      	pop	{r4, pc}
 800e1f4:	20001694 	.word	0x20001694

0800e1f8 <glcd_init>:
/*
 *
 */
void glcd_init(uint16_t width, uint16_t height) {
 800e1f8:	b570      	push	{r4, r5, r6, lr}
//	unsigned char glcd_buffer[SCREEN_WIDTH * SCREEN_HEIGHT / 8];
	free(glcd_buffer);
 800e1fa:	4c35      	ldr	r4, [pc, #212]	; (800e2d0 <glcd_init+0xd8>)
void glcd_init(uint16_t width, uint16_t height) {
 800e1fc:	4605      	mov	r5, r0
	free(glcd_buffer);
 800e1fe:	6820      	ldr	r0, [r4, #0]
void glcd_init(uint16_t width, uint16_t height) {
 800e200:	460e      	mov	r6, r1
	free(glcd_buffer);
 800e202:	f007 feab 	bl	8015f5c <free>
	glcd_width = width;
 800e206:	4b33      	ldr	r3, [pc, #204]	; (800e2d4 <glcd_init+0xdc>)
 800e208:	801d      	strh	r5, [r3, #0]
	glcd_height = height;
 800e20a:	4b33      	ldr	r3, [pc, #204]	; (800e2d8 <glcd_init+0xe0>)
	glcd_buffer = malloc(
 800e20c:	fb06 f005 	mul.w	r0, r6, r5
	glcd_height = height;
 800e210:	801e      	strh	r6, [r3, #0]
	glcd_buffer = malloc(
 800e212:	f007 fe9b 	bl	8015f4c <malloc>
 800e216:	6020      	str	r0, [r4, #0]
			(sizeof(unsigned char)) * (size_t) glcd_width
					* (size_t) glcd_height);

	// Select the chip
	ST7567_CS_RESET;
 800e218:	4c30      	ldr	r4, [pc, #192]	; (800e2dc <glcd_init+0xe4>)

	ST7567_RST_RESET;
 800e21a:	4d31      	ldr	r5, [pc, #196]	; (800e2e0 <glcd_init+0xe8>)
	ST7567_CS_RESET;
 800e21c:	4620      	mov	r0, r4
 800e21e:	2200      	movs	r2, #0
 800e220:	2180      	movs	r1, #128	; 0x80
 800e222:	f001 f89d 	bl	800f360 <HAL_GPIO_WritePin>
	ST7567_RST_RESET;
 800e226:	2200      	movs	r2, #0
 800e228:	2101      	movs	r1, #1
 800e22a:	4628      	mov	r0, r5
 800e22c:	f001 f898 	bl	800f360 <HAL_GPIO_WritePin>

	// Datasheet says "wait for power to stabilise" but gives
	// no specific time!
	HAL_Delay(50);
 800e230:	2032      	movs	r0, #50	; 0x32
 800e232:	f000 fb19 	bl	800e868 <HAL_Delay>

	ST7567_RST_SET;
 800e236:	2201      	movs	r2, #1
 800e238:	4611      	mov	r1, r2
 800e23a:	4628      	mov	r0, r5
 800e23c:	f001 f890 	bl	800f360 <HAL_GPIO_WritePin>
	//software reset
	glcd_command(GLCD_CMD_RESET);
 800e240:	20e2      	movs	r0, #226	; 0xe2
 800e242:	f7ff fedf 	bl	800e004 <glcd_command>
	// Set LCD bias to 1/9th
	glcd_command(GLCD_CMD_BIAS_7);
 800e246:	20a3      	movs	r0, #163	; 0xa3
 800e248:	f7ff fedc 	bl	800e004 <glcd_command>

	// Horizontal output direction (ADC segment driver selection)
	glcd_command(GLCD_CMD_HORIZONTAL_REVERSE);
 800e24c:	20a1      	movs	r0, #161	; 0xa1
 800e24e:	f7ff fed9 	bl	800e004 <glcd_command>

	// Vertical output direction (common output mode selection)
	glcd_command(GLCD_CMD_VERTICAL_REVERSE);
 800e252:	20c8      	movs	r0, #200	; 0xc8
 800e254:	f7ff fed6 	bl	800e004 <glcd_command>

	// Set internal resistor.  A suitable middle value is used as
	// the default.
	glcd_command(GLCD_CMD_RESISTOR | 0x04);
 800e258:	2024      	movs	r0, #36	; 0x24
 800e25a:	f7ff fed3 	bl	800e004 <glcd_command>

	// Power control setting (datasheet step 7)
	// Note: Skipping straight to 0x7 works with my hardware.
	glcd_command(GLCD_CMD_POWER_CONTROL | 0x04);
 800e25e:	202c      	movs	r0, #44	; 0x2c
 800e260:	f7ff fed0 	bl	800e004 <glcd_command>
	//	DelayMs(50);
	HAL_Delay(50);
 800e264:	2032      	movs	r0, #50	; 0x32
 800e266:	f000 faff 	bl	800e868 <HAL_Delay>
	glcd_command(GLCD_CMD_POWER_CONTROL | 0x06);
 800e26a:	202e      	movs	r0, #46	; 0x2e
 800e26c:	f7ff feca 	bl	800e004 <glcd_command>
	//	DelayMs(50);
	HAL_Delay(50);
 800e270:	2032      	movs	r0, #50	; 0x32
 800e272:	f000 faf9 	bl	800e868 <HAL_Delay>
	glcd_command(GLCD_CMD_POWER_CONTROL | 0x07);
 800e276:	202f      	movs	r0, #47	; 0x2f
 800e278:	f7ff fec4 	bl	800e004 <glcd_command>
	//	DelayMs(10);
	HAL_Delay(50);
 800e27c:	2032      	movs	r0, #50	; 0x32
 800e27e:	f000 faf3 	bl	800e868 <HAL_Delay>

	glcd_command(GLCD_CMD_BOOSTER_LEVEL);
 800e282:	20f8      	movs	r0, #248	; 0xf8
 800e284:	f7ff febe 	bl	800e004 <glcd_command>
	glcd_command(0x00);
 800e288:	2000      	movs	r0, #0
 800e28a:	f7ff febb 	bl	800e004 <glcd_command>

	// Volume set (brightness control).  A middle value is used here
	// also.
	glcd_command(GLCD_CMD_VOLUME_MODE);
 800e28e:	2081      	movs	r0, #129	; 0x81
 800e290:	f7ff feb8 	bl	800e004 <glcd_command>
	glcd_command(0x10);
 800e294:	2010      	movs	r0, #16
 800e296:	f7ff feb5 	bl	800e004 <glcd_command>

	// Reset start position to the top
	glcd_command(GLCD_CMD_DISPLAY_START);
 800e29a:	2040      	movs	r0, #64	; 0x40
 800e29c:	f7ff feb2 	bl	800e004 <glcd_command>

	// Turn the display on
	glcd_command(GLCD_CMD_DISPLAY_ON);
 800e2a0:	20af      	movs	r0, #175	; 0xaf
 800e2a2:	f7ff feaf 	bl	800e004 <glcd_command>

	// Unselect the chip
	ST7567_CS_SET;
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	2180      	movs	r1, #128	; 0x80
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	f001 f858 	bl	800f360 <HAL_GPIO_WritePin>
	glcd_blank();
 800e2b0:	f7ff ff18 	bl	800e0e4 <glcd_blank>
	glcd_backlight(50);
 800e2b4:	2032      	movs	r0, #50	; 0x32
 800e2b6:	f7ff ff79 	bl	800e1ac <glcd_backlight>
 */
void glcd_contrast(char resistor_ratio, char contrast) {
	if (resistor_ratio > 7 || contrast > 63)
		return;

	glcd_command(GLCD_CMD_RESISTOR | resistor_ratio);
 800e2ba:	2024      	movs	r0, #36	; 0x24
 800e2bc:	f7ff fea2 	bl	800e004 <glcd_command>
	glcd_command(GLCD_CMD_VOLUME_MODE);
 800e2c0:	2081      	movs	r0, #129	; 0x81
 800e2c2:	f7ff fe9f 	bl	800e004 <glcd_command>
	glcd_command(contrast);
 800e2c6:	2038      	movs	r0, #56	; 0x38
}
 800e2c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	glcd_command(contrast);
 800e2cc:	f7ff be9a 	b.w	800e004 <glcd_command>
 800e2d0:	2000164c 	.word	0x2000164c
 800e2d4:	20001650 	.word	0x20001650
 800e2d8:	20001652 	.word	0x20001652
 800e2dc:	40020400 	.word	0x40020400
 800e2e0:	40021000 	.word	0x40021000

0800e2e4 <glcd_flip_screen>:
void glcd_flip_screen(unsigned char flip) {
 800e2e4:	b508      	push	{r3, lr}
	switch (flip) {
 800e2e6:	2803      	cmp	r0, #3
 800e2e8:	d80c      	bhi.n	800e304 <glcd_flip_screen+0x20>
 800e2ea:	e8df f000 	tbb	[pc, r0]
 800e2ee:	0c02      	.short	0x0c02
 800e2f0:	1e15      	.short	0x1e15
		glcd_command(GLCD_CMD_HORIZONTAL_REVERSE);
 800e2f2:	20a1      	movs	r0, #161	; 0xa1
 800e2f4:	f7ff fe86 	bl	800e004 <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_NORMAL);
 800e2f8:	20c0      	movs	r0, #192	; 0xc0
 800e2fa:	f7ff fe83 	bl	800e004 <glcd_command>
		glcd_flipped = 0;
 800e2fe:	4b0f      	ldr	r3, [pc, #60]	; (800e33c <glcd_flip_screen+0x58>)
 800e300:	2200      	movs	r2, #0
		glcd_flipped = 3;
 800e302:	701a      	strb	r2, [r3, #0]
}
 800e304:	bd08      	pop	{r3, pc}
		glcd_command(GLCD_CMD_HORIZONTAL_NORMAL);
 800e306:	20a0      	movs	r0, #160	; 0xa0
 800e308:	f7ff fe7c 	bl	800e004 <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_REVERSE);
 800e30c:	20c8      	movs	r0, #200	; 0xc8
 800e30e:	f7ff fe79 	bl	800e004 <glcd_command>
		glcd_flipped = 1;
 800e312:	4b0a      	ldr	r3, [pc, #40]	; (800e33c <glcd_flip_screen+0x58>)
 800e314:	2201      	movs	r2, #1
 800e316:	e7f4      	b.n	800e302 <glcd_flip_screen+0x1e>
		glcd_command(GLCD_CMD_HORIZONTAL_REVERSE);
 800e318:	20a1      	movs	r0, #161	; 0xa1
 800e31a:	f7ff fe73 	bl	800e004 <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_REVERSE);
 800e31e:	20c8      	movs	r0, #200	; 0xc8
 800e320:	f7ff fe70 	bl	800e004 <glcd_command>
		glcd_flipped = 2;
 800e324:	4b05      	ldr	r3, [pc, #20]	; (800e33c <glcd_flip_screen+0x58>)
 800e326:	2202      	movs	r2, #2
 800e328:	e7eb      	b.n	800e302 <glcd_flip_screen+0x1e>
		glcd_command(GLCD_CMD_HORIZONTAL_NORMAL);
 800e32a:	20a0      	movs	r0, #160	; 0xa0
 800e32c:	f7ff fe6a 	bl	800e004 <glcd_command>
		glcd_command(GLCD_CMD_VERTICAL_NORMAL);
 800e330:	20c0      	movs	r0, #192	; 0xc0
 800e332:	f7ff fe67 	bl	800e004 <glcd_command>
		glcd_flipped = 3;
 800e336:	4b01      	ldr	r3, [pc, #4]	; (800e33c <glcd_flip_screen+0x58>)
 800e338:	2203      	movs	r2, #3
 800e33a:	e7e2      	b.n	800e302 <glcd_flip_screen+0x1e>
 800e33c:	20000276 	.word	0x20000276

0800e340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e340:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e342:	4b0c      	ldr	r3, [pc, #48]	; (800e374 <HAL_MspInit+0x34>)
 800e344:	2100      	movs	r1, #0
 800e346:	9100      	str	r1, [sp, #0]
 800e348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e34a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e34e:	645a      	str	r2, [r3, #68]	; 0x44
 800e350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e352:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800e356:	9200      	str	r2, [sp, #0]
 800e358:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e35a:	9101      	str	r1, [sp, #4]
 800e35c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e35e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e362:	641a      	str	r2, [r3, #64]	; 0x40
 800e364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e36a:	9301      	str	r3, [sp, #4]
 800e36c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e36e:	b002      	add	sp, #8
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	40023800 	.word	0x40023800

0800e378 <HAL_InitTick>:
 800e378:	b530      	push	{r4, r5, lr}
 800e37a:	4601      	mov	r1, r0
 800e37c:	b089      	sub	sp, #36	; 0x24
 800e37e:	2200      	movs	r2, #0
 800e380:	2019      	movs	r0, #25
 800e382:	f000 fa97 	bl	800e8b4 <HAL_NVIC_SetPriority>
 800e386:	2019      	movs	r0, #25
 800e388:	f000 fac8 	bl	800e91c <HAL_NVIC_EnableIRQ>
 800e38c:	2500      	movs	r5, #0
 800e38e:	4b15      	ldr	r3, [pc, #84]	; (800e3e4 <HAL_InitTick+0x6c>)
 800e390:	9502      	str	r5, [sp, #8]
 800e392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e394:	4c14      	ldr	r4, [pc, #80]	; (800e3e8 <HAL_InitTick+0x70>)
 800e396:	f042 0201 	orr.w	r2, r2, #1
 800e39a:	645a      	str	r2, [r3, #68]	; 0x44
 800e39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e39e:	f003 0301 	and.w	r3, r3, #1
 800e3a2:	9302      	str	r3, [sp, #8]
 800e3a4:	a901      	add	r1, sp, #4
 800e3a6:	a803      	add	r0, sp, #12
 800e3a8:	9b02      	ldr	r3, [sp, #8]
 800e3aa:	f001 fea5 	bl	80100f8 <HAL_RCC_GetClockConfig>
 800e3ae:	f001 fe93 	bl	80100d8 <HAL_RCC_GetPCLK2Freq>
 800e3b2:	4b0e      	ldr	r3, [pc, #56]	; (800e3ec <HAL_InitTick+0x74>)
 800e3b4:	6023      	str	r3, [r4, #0]
 800e3b6:	f240 33e7 	movw	r3, #999	; 0x3e7
 800e3ba:	60e3      	str	r3, [r4, #12]
 800e3bc:	0040      	lsls	r0, r0, #1
 800e3be:	4b0c      	ldr	r3, [pc, #48]	; (800e3f0 <HAL_InitTick+0x78>)
 800e3c0:	fbb0 f0f3 	udiv	r0, r0, r3
 800e3c4:	3801      	subs	r0, #1
 800e3c6:	6060      	str	r0, [r4, #4]
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	6125      	str	r5, [r4, #16]
 800e3cc:	60a5      	str	r5, [r4, #8]
 800e3ce:	f002 ff9d 	bl	801130c <HAL_TIM_Base_Init>
 800e3d2:	b920      	cbnz	r0, 800e3de <HAL_InitTick+0x66>
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f002 fe7b 	bl	80110d0 <HAL_TIM_Base_Start_IT>
 800e3da:	b009      	add	sp, #36	; 0x24
 800e3dc:	bd30      	pop	{r4, r5, pc}
 800e3de:	2001      	movs	r0, #1
 800e3e0:	e7fb      	b.n	800e3da <HAL_InitTick+0x62>
 800e3e2:	bf00      	nop
 800e3e4:	40023800 	.word	0x40023800
 800e3e8:	20001654 	.word	0x20001654
 800e3ec:	40010000 	.word	0x40010000
 800e3f0:	000f4240 	.word	0x000f4240

0800e3f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e3f4:	e7fe      	b.n	800e3f4 <NMI_Handler>

0800e3f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e3f6:	e7fe      	b.n	800e3f6 <HardFault_Handler>

0800e3f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e3f8:	e7fe      	b.n	800e3f8 <MemManage_Handler>

0800e3fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e3fa:	e7fe      	b.n	800e3fa <BusFault_Handler>

0800e3fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e3fc:	e7fe      	b.n	800e3fc <UsageFault_Handler>

0800e3fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e3fe:	4770      	bx	lr

0800e400 <DebugMon_Handler>:
 800e400:	4770      	bx	lr

0800e402 <PendSV_Handler>:
 800e402:	4770      	bx	lr

0800e404 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e404:	4801      	ldr	r0, [pc, #4]	; (800e40c <TIM1_UP_TIM10_IRQHandler+0x8>)
 800e406:	f002 be78 	b.w	80110fa <HAL_TIM_IRQHandler>
 800e40a:	bf00      	nop
 800e40c:	20001654 	.word	0x20001654

0800e410 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800e410:	4801      	ldr	r0, [pc, #4]	; (800e418 <USART2_IRQHandler+0x8>)
 800e412:	f003 bb41 	b.w	8011a98 <HAL_UART_IRQHandler>
 800e416:	bf00      	nop
 800e418:	20001714 	.word	0x20001714

0800e41c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800e41c:	4801      	ldr	r0, [pc, #4]	; (800e424 <USART3_IRQHandler+0x8>)
 800e41e:	f003 bb3b 	b.w	8011a98 <HAL_UART_IRQHandler>
 800e422:	bf00      	nop
 800e424:	200016d4 	.word	0x200016d4

0800e428 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800e428:	4801      	ldr	r0, [pc, #4]	; (800e430 <SDIO_IRQHandler+0x8>)
 800e42a:	f002 bcb7 	b.w	8010d9c <HAL_SD_IRQHandler>
 800e42e:	bf00      	nop
 800e430:	200015c8 	.word	0x200015c8

0800e434 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800e434:	4801      	ldr	r0, [pc, #4]	; (800e43c <DMA2_Stream3_IRQHandler+0x8>)
 800e436:	f000 bbad 	b.w	800eb94 <HAL_DMA_IRQHandler>
 800e43a:	bf00      	nop
 800e43c:	20001508 	.word	0x20001508

0800e440 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800e440:	4801      	ldr	r0, [pc, #4]	; (800e448 <DMA2_Stream6_IRQHandler+0x8>)
 800e442:	f000 bba7 	b.w	800eb94 <HAL_DMA_IRQHandler>
 800e446:	bf00      	nop
 800e448:	20001568 	.word	0x20001568

0800e44c <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800e44c:	4801      	ldr	r0, [pc, #4]	; (800e454 <OTG_HS_IRQHandler+0x8>)
 800e44e:	f001 b883 	b.w	800f558 <HAL_HCD_IRQHandler>
 800e452:	bf00      	nop
 800e454:	20005c30 	.word	0x20005c30

0800e458 <_sbrk>:
 800e458:	4b0b      	ldr	r3, [pc, #44]	; (800e488 <_sbrk+0x30>)
 800e45a:	6819      	ldr	r1, [r3, #0]
 800e45c:	b510      	push	{r4, lr}
 800e45e:	4602      	mov	r2, r0
 800e460:	b909      	cbnz	r1, 800e466 <_sbrk+0xe>
 800e462:	490a      	ldr	r1, [pc, #40]	; (800e48c <_sbrk+0x34>)
 800e464:	6019      	str	r1, [r3, #0]
 800e466:	6818      	ldr	r0, [r3, #0]
 800e468:	4909      	ldr	r1, [pc, #36]	; (800e490 <_sbrk+0x38>)
 800e46a:	4c0a      	ldr	r4, [pc, #40]	; (800e494 <_sbrk+0x3c>)
 800e46c:	4402      	add	r2, r0
 800e46e:	1b09      	subs	r1, r1, r4
 800e470:	428a      	cmp	r2, r1
 800e472:	d906      	bls.n	800e482 <_sbrk+0x2a>
 800e474:	f007 fd40 	bl	8015ef8 <__errno>
 800e478:	230c      	movs	r3, #12
 800e47a:	6003      	str	r3, [r0, #0]
 800e47c:	f04f 30ff 	mov.w	r0, #4294967295
 800e480:	bd10      	pop	{r4, pc}
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	e7fc      	b.n	800e480 <_sbrk+0x28>
 800e486:	bf00      	nop
 800e488:	20000278 	.word	0x20000278
 800e48c:	20005ef8 	.word	0x20005ef8
 800e490:	20020000 	.word	0x20020000
 800e494:	00001000 	.word	0x00001000

0800e498 <SystemInit>:
 800e498:	4b05      	ldr	r3, [pc, #20]	; (800e4b0 <SystemInit+0x18>)
 800e49a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e49e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800e4a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800e4a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e4aa:	609a      	str	r2, [r3, #8]
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	e000ed00 	.word	0xe000ed00

0800e4b4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 800e4b4:	6802      	ldr	r2, [r0, #0]
 800e4b6:	4b09      	ldr	r3, [pc, #36]	; (800e4dc <HAL_TIM_Base_MspInit+0x28>)
 800e4b8:	429a      	cmp	r2, r3
{
 800e4ba:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM4)
 800e4bc:	d10b      	bne.n	800e4d6 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e4be:	2300      	movs	r3, #0
 800e4c0:	9301      	str	r3, [sp, #4]
 800e4c2:	4b07      	ldr	r3, [pc, #28]	; (800e4e0 <HAL_TIM_Base_MspInit+0x2c>)
 800e4c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e4c6:	f042 0204 	orr.w	r2, r2, #4
 800e4ca:	641a      	str	r2, [r3, #64]	; 0x40
 800e4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ce:	f003 0304 	and.w	r3, r3, #4
 800e4d2:	9301      	str	r3, [sp, #4]
 800e4d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800e4d6:	b002      	add	sp, #8
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	40000800 	.word	0x40000800
 800e4e0:	40023800 	.word	0x40023800

0800e4e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e4e4:	b510      	push	{r4, lr}
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4ea:	2214      	movs	r2, #20
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	a801      	add	r0, sp, #4
 800e4f0:	f007 fd47 	bl	8015f82 <memset>
  if(timHandle->Instance==TIM4)
 800e4f4:	6822      	ldr	r2, [r4, #0]
 800e4f6:	4b0d      	ldr	r3, [pc, #52]	; (800e52c <HAL_TIM_MspPostInit+0x48>)
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d115      	bne.n	800e528 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = DISP_LEDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(DISP_LEDA_GPIO_Port, &GPIO_InitStruct);
 800e502:	480c      	ldr	r0, [pc, #48]	; (800e534 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e506:	f042 0202 	orr.w	r2, r2, #2
 800e50a:	631a      	str	r2, [r3, #48]	; 0x30
 800e50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e50e:	f003 0302 	and.w	r3, r3, #2
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e51a:	2302      	movs	r3, #2
    HAL_GPIO_Init(DISP_LEDA_GPIO_Port, &GPIO_InitStruct);
 800e51c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e51e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e522:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISP_LEDA_GPIO_Port, &GPIO_InitStruct);
 800e524:	f000 fda8 	bl	800f078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800e528:	b006      	add	sp, #24
 800e52a:	bd10      	pop	{r4, pc}
 800e52c:	40000800 	.word	0x40000800
 800e530:	40023800 	.word	0x40023800
 800e534:	40020400 	.word	0x40020400

0800e538 <MX_TIM4_Init>:
{
 800e538:	b510      	push	{r4, lr}
 800e53a:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e53c:	2210      	movs	r2, #16
 800e53e:	2100      	movs	r1, #0
 800e540:	a803      	add	r0, sp, #12
 800e542:	f007 fd1e 	bl	8015f82 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e546:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e548:	221c      	movs	r2, #28
 800e54a:	4621      	mov	r1, r4
 800e54c:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e550:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e554:	f007 fd15 	bl	8015f82 <memset>
  htim4.Instance = TIM4;
 800e558:	481f      	ldr	r0, [pc, #124]	; (800e5d8 <MX_TIM4_Init+0xa0>)
  htim4.Init.Prescaler = 42-1;
 800e55a:	f8df c080 	ldr.w	ip, [pc, #128]	; 800e5dc <MX_TIM4_Init+0xa4>
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e55e:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 42-1;
 800e560:	2329      	movs	r3, #41	; 0x29
 800e562:	e9c0 c300 	strd	ip, r3, [r0]
  htim4.Init.Period = 500-1;
 800e566:	f240 13f3 	movw	r3, #499	; 0x1f3
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e56a:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e56e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800e570:	f002 fecc 	bl	801130c <HAL_TIM_Base_Init>
 800e574:	b108      	cbz	r0, 800e57a <MX_TIM4_Init+0x42>
    Error_Handler();
 800e576:	f7ff fb6f 	bl	800dc58 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e57a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800e57e:	a903      	add	r1, sp, #12
 800e580:	4815      	ldr	r0, [pc, #84]	; (800e5d8 <MX_TIM4_Init+0xa0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e582:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800e584:	f002 ff98 	bl	80114b8 <HAL_TIM_ConfigClockSource>
 800e588:	b108      	cbz	r0, 800e58e <MX_TIM4_Init+0x56>
    Error_Handler();
 800e58a:	f7ff fb65 	bl	800dc58 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800e58e:	4812      	ldr	r0, [pc, #72]	; (800e5d8 <MX_TIM4_Init+0xa0>)
 800e590:	f002 fed6 	bl	8011340 <HAL_TIM_PWM_Init>
 800e594:	b108      	cbz	r0, 800e59a <MX_TIM4_Init+0x62>
    Error_Handler();
 800e596:	f7ff fb5f 	bl	800dc58 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e59a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e59c:	a901      	add	r1, sp, #4
 800e59e:	480e      	ldr	r0, [pc, #56]	; (800e5d8 <MX_TIM4_Init+0xa0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e5a0:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e5a4:	f003 f84c 	bl	8011640 <HAL_TIMEx_MasterConfigSynchronization>
 800e5a8:	b108      	cbz	r0, 800e5ae <MX_TIM4_Init+0x76>
    Error_Handler();
 800e5aa:	f7ff fb55 	bl	800dc58 <Error_Handler>
  sConfigOC.Pulse = 250-1;
 800e5ae:	2260      	movs	r2, #96	; 0x60
 800e5b0:	23f9      	movs	r3, #249	; 0xf9
 800e5b2:	e9cd 2307 	strd	r2, r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800e5b6:	2302      	movs	r3, #2
 800e5b8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e5ba:	220c      	movs	r2, #12
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e5bc:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e5be:	a907      	add	r1, sp, #28
 800e5c0:	4805      	ldr	r0, [pc, #20]	; (800e5d8 <MX_TIM4_Init+0xa0>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e5c2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e5c4:	f002 ff0c 	bl	80113e0 <HAL_TIM_PWM_ConfigChannel>
 800e5c8:	b108      	cbz	r0, 800e5ce <MX_TIM4_Init+0x96>
    Error_Handler();
 800e5ca:	f7ff fb45 	bl	800dc58 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 800e5ce:	4802      	ldr	r0, [pc, #8]	; (800e5d8 <MX_TIM4_Init+0xa0>)
 800e5d0:	f7ff ff88 	bl	800e4e4 <HAL_TIM_MspPostInit>
}
 800e5d4:	b00e      	add	sp, #56	; 0x38
 800e5d6:	bd10      	pop	{r4, pc}
 800e5d8:	20001694 	.word	0x20001694
 800e5dc:	40000800 	.word	0x40000800

0800e5e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 800e5e0:	480b      	ldr	r0, [pc, #44]	; (800e610 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800e5e2:	4a0c      	ldr	r2, [pc, #48]	; (800e614 <MX_USART2_UART_Init+0x34>)
{
 800e5e4:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800e5e6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e5ea:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e5ee:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e5f0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e5f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e5f6:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e5f8:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5fc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800e5fe:	f003 f909 	bl	8011814 <HAL_UART_Init>
 800e602:	b118      	cbz	r0, 800e60c <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800e604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800e608:	f7ff bb26 	b.w	800dc58 <Error_Handler>
}
 800e60c:	bd08      	pop	{r3, pc}
 800e60e:	bf00      	nop
 800e610:	20001714 	.word	0x20001714
 800e614:	40004400 	.word	0x40004400

0800e618 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 800e618:	480b      	ldr	r0, [pc, #44]	; (800e648 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 800e61a:	4a0c      	ldr	r2, [pc, #48]	; (800e64c <MX_USART3_UART_Init+0x34>)
{
 800e61c:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 115200;
 800e61e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e622:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e626:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e628:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e62a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e62e:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e630:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e634:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800e636:	f003 f8ed 	bl	8011814 <HAL_UART_Init>
 800e63a:	b118      	cbz	r0, 800e644 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800e63c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800e640:	f7ff bb0a 	b.w	800dc58 <Error_Handler>
}
 800e644:	bd08      	pop	{r3, pc}
 800e646:	bf00      	nop
 800e648:	200016d4 	.word	0x200016d4
 800e64c:	40004800 	.word	0x40004800

0800e650 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e650:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e652:	2214      	movs	r2, #20
{
 800e654:	b08a      	sub	sp, #40	; 0x28
 800e656:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e658:	2100      	movs	r1, #0
 800e65a:	eb0d 0002 	add.w	r0, sp, r2
 800e65e:	f007 fc90 	bl	8015f82 <memset>
  if(uartHandle->Instance==USART2)
 800e662:	6823      	ldr	r3, [r4, #0]
 800e664:	4a2e      	ldr	r2, [pc, #184]	; (800e720 <HAL_UART_MspInit+0xd0>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d12c      	bne.n	800e6c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800e66a:	4b2e      	ldr	r3, [pc, #184]	; (800e724 <HAL_UART_MspInit+0xd4>)
 800e66c:	2400      	movs	r4, #0
 800e66e:	9401      	str	r4, [sp, #4]
 800e670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e672:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e676:	641a      	str	r2, [r3, #64]	; 0x40
 800e678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e67a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800e67e:	9201      	str	r2, [sp, #4]
 800e680:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e682:	9402      	str	r4, [sp, #8]
 800e684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e686:	f042 0208 	orr.w	r2, r2, #8
 800e68a:	631a      	str	r2, [r3, #48]	; 0x30
 800e68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68e:	f003 0308 	and.w	r3, r3, #8
 800e692:	9302      	str	r3, [sp, #8]
 800e694:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e696:	2060      	movs	r0, #96	; 0x60
 800e698:	2302      	movs	r3, #2
 800e69a:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e69e:	f04f 0c03 	mov.w	ip, #3
 800e6a2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e6a4:	a905      	add	r1, sp, #20
 800e6a6:	4820      	ldr	r0, [pc, #128]	; (800e728 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e6a8:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e6ac:	f000 fce4 	bl	800f078 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e6b0:	2026      	movs	r0, #38	; 0x26
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	2101      	movs	r1, #1
 800e6b6:	f000 f8fd 	bl	800e8b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e6ba:	2026      	movs	r0, #38	; 0x26
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800e6bc:	f000 f92e 	bl	800e91c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800e6c0:	b00a      	add	sp, #40	; 0x28
 800e6c2:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART3)
 800e6c4:	4a19      	ldr	r2, [pc, #100]	; (800e72c <HAL_UART_MspInit+0xdc>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d1fa      	bne.n	800e6c0 <HAL_UART_MspInit+0x70>
    __HAL_RCC_USART3_CLK_ENABLE();
 800e6ca:	4b16      	ldr	r3, [pc, #88]	; (800e724 <HAL_UART_MspInit+0xd4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e6cc:	4818      	ldr	r0, [pc, #96]	; (800e730 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800e6ce:	2400      	movs	r4, #0
 800e6d0:	9403      	str	r4, [sp, #12]
 800e6d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e6d8:	641a      	str	r2, [r3, #64]	; 0x40
 800e6da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6dc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800e6e0:	9203      	str	r2, [sp, #12]
 800e6e2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e6e4:	9404      	str	r4, [sp, #16]
 800e6e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6e8:	f042 0202 	orr.w	r2, r2, #2
 800e6ec:	631a      	str	r2, [r3, #48]	; 0x30
 800e6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f0:	f003 0302 	and.w	r3, r3, #2
 800e6f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6f6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e6fa:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e702:	2103      	movs	r1, #3
 800e704:	2307      	movs	r3, #7
 800e706:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e70a:	a905      	add	r1, sp, #20
 800e70c:	f000 fcb4 	bl	800f078 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800e710:	2027      	movs	r0, #39	; 0x27
 800e712:	4622      	mov	r2, r4
 800e714:	2101      	movs	r1, #1
 800e716:	f000 f8cd 	bl	800e8b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800e71a:	2027      	movs	r0, #39	; 0x27
 800e71c:	e7ce      	b.n	800e6bc <HAL_UART_MspInit+0x6c>
 800e71e:	bf00      	nop
 800e720:	40004400 	.word	0x40004400
 800e724:	40023800 	.word	0x40023800
 800e728:	40020c00 	.word	0x40020c00
 800e72c:	40004800 	.word	0x40004800
 800e730:	40020400 	.word	0x40020400

0800e734 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800e734:	b508      	push	{r3, lr}

  if(uartHandle->Instance==USART2)
 800e736:	4a12      	ldr	r2, [pc, #72]	; (800e780 <HAL_UART_MspDeInit+0x4c>)
 800e738:	6803      	ldr	r3, [r0, #0]
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d10e      	bne.n	800e75c <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800e73e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400

    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_6|GPIO_PIN_5);
 800e742:	4810      	ldr	r0, [pc, #64]	; (800e784 <HAL_UART_MspDeInit+0x50>)
    __HAL_RCC_USART2_CLK_DISABLE();
 800e744:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e746:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e74a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_6|GPIO_PIN_5);
 800e74c:	2160      	movs	r1, #96	; 0x60
 800e74e:	f000 fd73 	bl	800f238 <HAL_GPIO_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800e752:	2026      	movs	r0, #38	; 0x26
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 800e754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800e758:	f000 b8ee 	b.w	800e938 <HAL_NVIC_DisableIRQ>
  else if(uartHandle->Instance==USART3)
 800e75c:	4a0a      	ldr	r2, [pc, #40]	; (800e788 <HAL_UART_MspDeInit+0x54>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d10c      	bne.n	800e77c <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART3_CLK_DISABLE();
 800e762:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800e766:	4809      	ldr	r0, [pc, #36]	; (800e78c <HAL_UART_MspDeInit+0x58>)
    __HAL_RCC_USART3_CLK_DISABLE();
 800e768:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e76a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e76e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800e770:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800e774:	f000 fd60 	bl	800f238 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800e778:	2027      	movs	r0, #39	; 0x27
 800e77a:	e7eb      	b.n	800e754 <HAL_UART_MspDeInit+0x20>
}
 800e77c:	bd08      	pop	{r3, pc}
 800e77e:	bf00      	nop
 800e780:	40004400 	.word	0x40004400
 800e784:	40020c00 	.word	0x40020c00
 800e788:	40004800 	.word	0x40004800
 800e78c:	40020400 	.word	0x40020400

0800e790 <Reset_Handler>:
 800e790:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e7c8 <LoopFillZerobss+0x14>
 800e794:	2100      	movs	r1, #0
 800e796:	e003      	b.n	800e7a0 <LoopCopyDataInit>

0800e798 <CopyDataInit>:
 800e798:	4b0c      	ldr	r3, [pc, #48]	; (800e7cc <LoopFillZerobss+0x18>)
 800e79a:	585b      	ldr	r3, [r3, r1]
 800e79c:	5043      	str	r3, [r0, r1]
 800e79e:	3104      	adds	r1, #4

0800e7a0 <LoopCopyDataInit>:
 800e7a0:	480b      	ldr	r0, [pc, #44]	; (800e7d0 <LoopFillZerobss+0x1c>)
 800e7a2:	4b0c      	ldr	r3, [pc, #48]	; (800e7d4 <LoopFillZerobss+0x20>)
 800e7a4:	1842      	adds	r2, r0, r1
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d3f6      	bcc.n	800e798 <CopyDataInit>
 800e7aa:	4a0b      	ldr	r2, [pc, #44]	; (800e7d8 <LoopFillZerobss+0x24>)
 800e7ac:	e002      	b.n	800e7b4 <LoopFillZerobss>

0800e7ae <FillZerobss>:
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f842 3b04 	str.w	r3, [r2], #4

0800e7b4 <LoopFillZerobss>:
 800e7b4:	4b09      	ldr	r3, [pc, #36]	; (800e7dc <LoopFillZerobss+0x28>)
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d3f9      	bcc.n	800e7ae <FillZerobss>
 800e7ba:	f7ff fe6d 	bl	800e498 <SystemInit>
 800e7be:	f007 fba1 	bl	8015f04 <__libc_init_array>
 800e7c2:	f7fe fff9 	bl	800d7b8 <main>
 800e7c6:	4770      	bx	lr
 800e7c8:	20020000 	.word	0x20020000
 800e7cc:	08017274 	.word	0x08017274
 800e7d0:	20000000 	.word	0x20000000
 800e7d4:	20000258 	.word	0x20000258
 800e7d8:	20000258 	.word	0x20000258
 800e7dc:	20005ef8 	.word	0x20005ef8

0800e7e0 <ADC_IRQHandler>:
 800e7e0:	e7fe      	b.n	800e7e0 <ADC_IRQHandler>

0800e7e2 <HAL_MspDeInit>:
 800e7e2:	4770      	bx	lr

0800e7e4 <HAL_DeInit>:
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	4b09      	ldr	r3, [pc, #36]	; (800e80c <HAL_DeInit+0x28>)
 800e7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7ec:	2400      	movs	r4, #0
 800e7ee:	621a      	str	r2, [r3, #32]
 800e7f0:	621c      	str	r4, [r3, #32]
 800e7f2:	625a      	str	r2, [r3, #36]	; 0x24
 800e7f4:	625c      	str	r4, [r3, #36]	; 0x24
 800e7f6:	611a      	str	r2, [r3, #16]
 800e7f8:	611c      	str	r4, [r3, #16]
 800e7fa:	615a      	str	r2, [r3, #20]
 800e7fc:	615c      	str	r4, [r3, #20]
 800e7fe:	619a      	str	r2, [r3, #24]
 800e800:	619c      	str	r4, [r3, #24]
 800e802:	f7ff ffee 	bl	800e7e2 <HAL_MspDeInit>
 800e806:	4620      	mov	r0, r4
 800e808:	bd10      	pop	{r4, pc}
 800e80a:	bf00      	nop
 800e80c:	40023800 	.word	0x40023800

0800e810 <HAL_Init>:
 800e810:	b508      	push	{r3, lr}
 800e812:	4b0b      	ldr	r3, [pc, #44]	; (800e840 <HAL_Init+0x30>)
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e81a:	601a      	str	r2, [r3, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e822:	601a      	str	r2, [r3, #0]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e82a:	601a      	str	r2, [r3, #0]
 800e82c:	2003      	movs	r0, #3
 800e82e:	f000 f82f 	bl	800e890 <HAL_NVIC_SetPriorityGrouping>
 800e832:	2000      	movs	r0, #0
 800e834:	f7ff fda0 	bl	800e378 <HAL_InitTick>
 800e838:	f7ff fd82 	bl	800e340 <HAL_MspInit>
 800e83c:	2000      	movs	r0, #0
 800e83e:	bd08      	pop	{r3, pc}
 800e840:	40023c00 	.word	0x40023c00

0800e844 <HAL_IncTick>:
 800e844:	4a03      	ldr	r2, [pc, #12]	; (800e854 <HAL_IncTick+0x10>)
 800e846:	4b04      	ldr	r3, [pc, #16]	; (800e858 <HAL_IncTick+0x14>)
 800e848:	6811      	ldr	r1, [r2, #0]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	440b      	add	r3, r1
 800e84e:	6013      	str	r3, [r2, #0]
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	20001754 	.word	0x20001754
 800e858:	2000005c 	.word	0x2000005c

0800e85c <HAL_GetTick>:
 800e85c:	4b01      	ldr	r3, [pc, #4]	; (800e864 <HAL_GetTick+0x8>)
 800e85e:	6818      	ldr	r0, [r3, #0]
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop
 800e864:	20001754 	.word	0x20001754

0800e868 <HAL_Delay>:
 800e868:	b538      	push	{r3, r4, r5, lr}
 800e86a:	4604      	mov	r4, r0
 800e86c:	f7ff fff6 	bl	800e85c <HAL_GetTick>
 800e870:	1c63      	adds	r3, r4, #1
 800e872:	bf1c      	itt	ne
 800e874:	4b05      	ldrne	r3, [pc, #20]	; (800e88c <HAL_Delay+0x24>)
 800e876:	781b      	ldrbne	r3, [r3, #0]
 800e878:	4605      	mov	r5, r0
 800e87a:	bf18      	it	ne
 800e87c:	18e4      	addne	r4, r4, r3
 800e87e:	f7ff ffed 	bl	800e85c <HAL_GetTick>
 800e882:	1b40      	subs	r0, r0, r5
 800e884:	42a0      	cmp	r0, r4
 800e886:	d3fa      	bcc.n	800e87e <HAL_Delay+0x16>
 800e888:	bd38      	pop	{r3, r4, r5, pc}
 800e88a:	bf00      	nop
 800e88c:	2000005c 	.word	0x2000005c

0800e890 <HAL_NVIC_SetPriorityGrouping>:
 800e890:	4a07      	ldr	r2, [pc, #28]	; (800e8b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800e892:	68d3      	ldr	r3, [r2, #12]
 800e894:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e898:	041b      	lsls	r3, r3, #16
 800e89a:	0c1b      	lsrs	r3, r3, #16
 800e89c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e8a0:	0200      	lsls	r0, r0, #8
 800e8a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800e8aa:	4303      	orrs	r3, r0
 800e8ac:	60d3      	str	r3, [r2, #12]
 800e8ae:	4770      	bx	lr
 800e8b0:	e000ed00 	.word	0xe000ed00

0800e8b4 <HAL_NVIC_SetPriority>:
 800e8b4:	4b17      	ldr	r3, [pc, #92]	; (800e914 <HAL_NVIC_SetPriority+0x60>)
 800e8b6:	b570      	push	{r4, r5, r6, lr}
 800e8b8:	68dc      	ldr	r4, [r3, #12]
 800e8ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
 800e8be:	f1c4 0507 	rsb	r5, r4, #7
 800e8c2:	2d04      	cmp	r5, #4
 800e8c4:	f104 0304 	add.w	r3, r4, #4
 800e8c8:	bf28      	it	cs
 800e8ca:	2504      	movcs	r5, #4
 800e8cc:	f04f 36ff 	mov.w	r6, #4294967295
 800e8d0:	2b06      	cmp	r3, #6
 800e8d2:	fa06 f305 	lsl.w	r3, r6, r5
 800e8d6:	bf8c      	ite	hi
 800e8d8:	3c03      	subhi	r4, #3
 800e8da:	2400      	movls	r4, #0
 800e8dc:	ea21 0303 	bic.w	r3, r1, r3
 800e8e0:	40a3      	lsls	r3, r4
 800e8e2:	fa06 f404 	lsl.w	r4, r6, r4
 800e8e6:	ea22 0404 	bic.w	r4, r2, r4
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	ea43 0304 	orr.w	r3, r3, r4
 800e8f0:	bfa8      	it	ge
 800e8f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800e8f6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e8fa:	bfbc      	itt	lt
 800e8fc:	f000 000f 	andlt.w	r0, r0, #15
 800e900:	4a05      	ldrlt	r2, [pc, #20]	; (800e918 <HAL_NVIC_SetPriority+0x64>)
 800e902:	b2db      	uxtb	r3, r3
 800e904:	bfaa      	itet	ge
 800e906:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800e90a:	5413      	strblt	r3, [r2, r0]
 800e90c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
 800e910:	bd70      	pop	{r4, r5, r6, pc}
 800e912:	bf00      	nop
 800e914:	e000ed00 	.word	0xe000ed00
 800e918:	e000ed14 	.word	0xe000ed14

0800e91c <HAL_NVIC_EnableIRQ>:
 800e91c:	2800      	cmp	r0, #0
 800e91e:	db08      	blt.n	800e932 <HAL_NVIC_EnableIRQ+0x16>
 800e920:	0942      	lsrs	r2, r0, #5
 800e922:	2301      	movs	r3, #1
 800e924:	f000 001f 	and.w	r0, r0, #31
 800e928:	fa03 f000 	lsl.w	r0, r3, r0
 800e92c:	4b01      	ldr	r3, [pc, #4]	; (800e934 <HAL_NVIC_EnableIRQ+0x18>)
 800e92e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e932:	4770      	bx	lr
 800e934:	e000e100 	.word	0xe000e100

0800e938 <HAL_NVIC_DisableIRQ>:
 800e938:	2800      	cmp	r0, #0
 800e93a:	db0d      	blt.n	800e958 <HAL_NVIC_DisableIRQ+0x20>
 800e93c:	0943      	lsrs	r3, r0, #5
 800e93e:	2201      	movs	r2, #1
 800e940:	f000 001f 	and.w	r0, r0, #31
 800e944:	fa02 f000 	lsl.w	r0, r2, r0
 800e948:	3320      	adds	r3, #32
 800e94a:	4a04      	ldr	r2, [pc, #16]	; (800e95c <HAL_NVIC_DisableIRQ+0x24>)
 800e94c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800e950:	f3bf 8f4f 	dsb	sy
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	4770      	bx	lr
 800e95a:	bf00      	nop
 800e95c:	e000e100 	.word	0xe000e100

0800e960 <HAL_CRC_Init>:
 800e960:	b510      	push	{r4, lr}
 800e962:	4604      	mov	r4, r0
 800e964:	b150      	cbz	r0, 800e97c <HAL_CRC_Init+0x1c>
 800e966:	7943      	ldrb	r3, [r0, #5]
 800e968:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e96c:	b913      	cbnz	r3, 800e974 <HAL_CRC_Init+0x14>
 800e96e:	7102      	strb	r2, [r0, #4]
 800e970:	f7fe f984 	bl	800cc7c <HAL_CRC_MspInit>
 800e974:	2301      	movs	r3, #1
 800e976:	7163      	strb	r3, [r4, #5]
 800e978:	2000      	movs	r0, #0
 800e97a:	bd10      	pop	{r4, pc}
 800e97c:	2001      	movs	r0, #1
 800e97e:	e7fc      	b.n	800e97a <HAL_CRC_Init+0x1a>

0800e980 <DMA_CalcBaseAndBitshift>:
 800e980:	6803      	ldr	r3, [r0, #0]
 800e982:	b2da      	uxtb	r2, r3
 800e984:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e988:	f023 0303 	bic.w	r3, r3, #3
 800e98c:	2118      	movs	r1, #24
 800e98e:	3a10      	subs	r2, #16
 800e990:	fbb2 f2f1 	udiv	r2, r2, r1
 800e994:	4904      	ldr	r1, [pc, #16]	; (800e9a8 <DMA_CalcBaseAndBitshift+0x28>)
 800e996:	2a03      	cmp	r2, #3
 800e998:	bf88      	it	hi
 800e99a:	3304      	addhi	r3, #4
 800e99c:	5c89      	ldrb	r1, [r1, r2]
 800e99e:	6583      	str	r3, [r0, #88]	; 0x58
 800e9a0:	65c1      	str	r1, [r0, #92]	; 0x5c
 800e9a2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800e9a4:	4770      	bx	lr
 800e9a6:	bf00      	nop
 800e9a8:	0800122a 	.word	0x0800122a

0800e9ac <HAL_DMA_Init>:
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	f7ff ff54 	bl	800e85c <HAL_GetTick>
 800e9b4:	4605      	mov	r5, r0
 800e9b6:	2c00      	cmp	r4, #0
 800e9b8:	d071      	beq.n	800ea9e <HAL_DMA_Init+0xf2>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800e9c0:	6822      	ldr	r2, [r4, #0]
 800e9c2:	2302      	movs	r3, #2
 800e9c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800e9c8:	6813      	ldr	r3, [r2, #0]
 800e9ca:	f023 0301 	bic.w	r3, r3, #1
 800e9ce:	6013      	str	r3, [r2, #0]
 800e9d0:	6821      	ldr	r1, [r4, #0]
 800e9d2:	680b      	ldr	r3, [r1, #0]
 800e9d4:	07d8      	lsls	r0, r3, #31
 800e9d6:	d43c      	bmi.n	800ea52 <HAL_DMA_Init+0xa6>
 800e9d8:	680b      	ldr	r3, [r1, #0]
 800e9da:	4d32      	ldr	r5, [pc, #200]	; (800eaa4 <HAL_DMA_Init+0xf8>)
 800e9dc:	69a0      	ldr	r0, [r4, #24]
 800e9de:	401d      	ands	r5, r3
 800e9e0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800e9e4:	4313      	orrs	r3, r2
 800e9e6:	68e2      	ldr	r2, [r4, #12]
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	6922      	ldr	r2, [r4, #16]
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	6962      	ldr	r2, [r4, #20]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	69e2      	ldr	r2, [r4, #28]
 800e9f4:	4303      	orrs	r3, r0
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	6a22      	ldr	r2, [r4, #32]
 800e9fa:	4313      	orrs	r3, r2
 800e9fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e9fe:	2a04      	cmp	r2, #4
 800ea00:	ea43 0305 	orr.w	r3, r3, r5
 800ea04:	bf02      	ittt	eq
 800ea06:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800ea0a:	4335      	orreq	r5, r6
 800ea0c:	432b      	orreq	r3, r5
 800ea0e:	600b      	str	r3, [r1, #0]
 800ea10:	694b      	ldr	r3, [r1, #20]
 800ea12:	2a04      	cmp	r2, #4
 800ea14:	f023 0307 	bic.w	r3, r3, #7
 800ea18:	ea43 0302 	orr.w	r3, r3, r2
 800ea1c:	d10b      	bne.n	800ea36 <HAL_DMA_Init+0x8a>
 800ea1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ea20:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800ea22:	4313      	orrs	r3, r2
 800ea24:	b13d      	cbz	r5, 800ea36 <HAL_DMA_Init+0x8a>
 800ea26:	b9f8      	cbnz	r0, 800ea68 <HAL_DMA_Init+0xbc>
 800ea28:	2a01      	cmp	r2, #1
 800ea2a:	d02d      	beq.n	800ea88 <HAL_DMA_Init+0xdc>
 800ea2c:	d301      	bcc.n	800ea32 <HAL_DMA_Init+0x86>
 800ea2e:	2a02      	cmp	r2, #2
 800ea30:	d101      	bne.n	800ea36 <HAL_DMA_Init+0x8a>
 800ea32:	01ea      	lsls	r2, r5, #7
 800ea34:	d42b      	bmi.n	800ea8e <HAL_DMA_Init+0xe2>
 800ea36:	614b      	str	r3, [r1, #20]
 800ea38:	4620      	mov	r0, r4
 800ea3a:	f7ff ffa1 	bl	800e980 <DMA_CalcBaseAndBitshift>
 800ea3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ea40:	233f      	movs	r3, #63	; 0x3f
 800ea42:	4093      	lsls	r3, r2
 800ea44:	6083      	str	r3, [r0, #8]
 800ea46:	2000      	movs	r0, #0
 800ea48:	2301      	movs	r3, #1
 800ea4a:	6560      	str	r0, [r4, #84]	; 0x54
 800ea4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800ea50:	e009      	b.n	800ea66 <HAL_DMA_Init+0xba>
 800ea52:	f7ff ff03 	bl	800e85c <HAL_GetTick>
 800ea56:	1b40      	subs	r0, r0, r5
 800ea58:	2805      	cmp	r0, #5
 800ea5a:	d9b9      	bls.n	800e9d0 <HAL_DMA_Init+0x24>
 800ea5c:	2320      	movs	r3, #32
 800ea5e:	6563      	str	r3, [r4, #84]	; 0x54
 800ea60:	2003      	movs	r0, #3
 800ea62:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800ea66:	bd70      	pop	{r4, r5, r6, pc}
 800ea68:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800ea6c:	d113      	bne.n	800ea96 <HAL_DMA_Init+0xea>
 800ea6e:	2a03      	cmp	r2, #3
 800ea70:	d8e1      	bhi.n	800ea36 <HAL_DMA_Init+0x8a>
 800ea72:	a001      	add	r0, pc, #4	; (adr r0, 800ea78 <HAL_DMA_Init+0xcc>)
 800ea74:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800ea78:	0800ea8f 	.word	0x0800ea8f
 800ea7c:	0800ea33 	.word	0x0800ea33
 800ea80:	0800ea8f 	.word	0x0800ea8f
 800ea84:	0800ea89 	.word	0x0800ea89
 800ea88:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800ea8c:	d1d3      	bne.n	800ea36 <HAL_DMA_Init+0x8a>
 800ea8e:	2340      	movs	r3, #64	; 0x40
 800ea90:	6563      	str	r3, [r4, #84]	; 0x54
 800ea92:	2001      	movs	r0, #1
 800ea94:	e7e5      	b.n	800ea62 <HAL_DMA_Init+0xb6>
 800ea96:	2a02      	cmp	r2, #2
 800ea98:	d9f9      	bls.n	800ea8e <HAL_DMA_Init+0xe2>
 800ea9a:	2a03      	cmp	r2, #3
 800ea9c:	e7c8      	b.n	800ea30 <HAL_DMA_Init+0x84>
 800ea9e:	2001      	movs	r0, #1
 800eaa0:	e7e1      	b.n	800ea66 <HAL_DMA_Init+0xba>
 800eaa2:	bf00      	nop
 800eaa4:	f010803f 	.word	0xf010803f

0800eaa8 <HAL_DMA_DeInit>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	4605      	mov	r5, r0
 800eaac:	b320      	cbz	r0, 800eaf8 <HAL_DMA_DeInit+0x50>
 800eaae:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800eab2:	b2e4      	uxtb	r4, r4
 800eab4:	2c02      	cmp	r4, #2
 800eab6:	d01d      	beq.n	800eaf4 <HAL_DMA_DeInit+0x4c>
 800eab8:	6803      	ldr	r3, [r0, #0]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	f022 0201 	bic.w	r2, r2, #1
 800eac0:	2400      	movs	r4, #0
 800eac2:	601a      	str	r2, [r3, #0]
 800eac4:	2221      	movs	r2, #33	; 0x21
 800eac6:	601c      	str	r4, [r3, #0]
 800eac8:	605c      	str	r4, [r3, #4]
 800eaca:	609c      	str	r4, [r3, #8]
 800eacc:	60dc      	str	r4, [r3, #12]
 800eace:	611c      	str	r4, [r3, #16]
 800ead0:	615a      	str	r2, [r3, #20]
 800ead2:	f7ff ff55 	bl	800e980 <DMA_CalcBaseAndBitshift>
 800ead6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800ead8:	233f      	movs	r3, #63	; 0x3f
 800eada:	4093      	lsls	r3, r2
 800eadc:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
 800eae0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
 800eae4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
 800eae8:	6083      	str	r3, [r0, #8]
 800eaea:	656c      	str	r4, [r5, #84]	; 0x54
 800eaec:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 800eaf0:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	e000      	b.n	800eafa <HAL_DMA_DeInit+0x52>
 800eaf8:	2001      	movs	r0, #1
 800eafa:	bd38      	pop	{r3, r4, r5, pc}

0800eafc <HAL_DMA_Start_IT>:
 800eafc:	b570      	push	{r4, r5, r6, lr}
 800eafe:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800eb02:	2c01      	cmp	r4, #1
 800eb04:	d032      	beq.n	800eb6c <HAL_DMA_Start_IT+0x70>
 800eb06:	2401      	movs	r4, #1
 800eb08:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
 800eb0c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800eb10:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800eb12:	2c01      	cmp	r4, #1
 800eb14:	f04f 0500 	mov.w	r5, #0
 800eb18:	f04f 0402 	mov.w	r4, #2
 800eb1c:	d124      	bne.n	800eb68 <HAL_DMA_Start_IT+0x6c>
 800eb1e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
 800eb22:	6804      	ldr	r4, [r0, #0]
 800eb24:	6545      	str	r5, [r0, #84]	; 0x54
 800eb26:	6825      	ldr	r5, [r4, #0]
 800eb28:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800eb2c:	6025      	str	r5, [r4, #0]
 800eb2e:	6063      	str	r3, [r4, #4]
 800eb30:	6883      	ldr	r3, [r0, #8]
 800eb32:	2b40      	cmp	r3, #64	; 0x40
 800eb34:	bf0e      	itee	eq
 800eb36:	60a2      	streq	r2, [r4, #8]
 800eb38:	60a1      	strne	r1, [r4, #8]
 800eb3a:	60e2      	strne	r2, [r4, #12]
 800eb3c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800eb3e:	bf08      	it	eq
 800eb40:	60e1      	streq	r1, [r4, #12]
 800eb42:	233f      	movs	r3, #63	; 0x3f
 800eb44:	4093      	lsls	r3, r2
 800eb46:	60b3      	str	r3, [r6, #8]
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	f043 0316 	orr.w	r3, r3, #22
 800eb4e:	6023      	str	r3, [r4, #0]
 800eb50:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eb52:	b11b      	cbz	r3, 800eb5c <HAL_DMA_Start_IT+0x60>
 800eb54:	6823      	ldr	r3, [r4, #0]
 800eb56:	f043 0308 	orr.w	r3, r3, #8
 800eb5a:	6023      	str	r3, [r4, #0]
 800eb5c:	6823      	ldr	r3, [r4, #0]
 800eb5e:	f043 0301 	orr.w	r3, r3, #1
 800eb62:	6023      	str	r3, [r4, #0]
 800eb64:	2000      	movs	r0, #0
 800eb66:	bd70      	pop	{r4, r5, r6, pc}
 800eb68:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
 800eb6c:	2002      	movs	r0, #2
 800eb6e:	e7fa      	b.n	800eb66 <HAL_DMA_Start_IT+0x6a>

0800eb70 <HAL_DMA_Abort_IT>:
 800eb70:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800eb74:	2b02      	cmp	r3, #2
 800eb76:	d003      	beq.n	800eb80 <HAL_DMA_Abort_IT+0x10>
 800eb78:	2380      	movs	r3, #128	; 0x80
 800eb7a:	6543      	str	r3, [r0, #84]	; 0x54
 800eb7c:	2001      	movs	r0, #1
 800eb7e:	4770      	bx	lr
 800eb80:	6802      	ldr	r2, [r0, #0]
 800eb82:	2305      	movs	r3, #5
 800eb84:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 800eb88:	6813      	ldr	r3, [r2, #0]
 800eb8a:	f023 0301 	bic.w	r3, r3, #1
 800eb8e:	6013      	str	r3, [r2, #0]
 800eb90:	2000      	movs	r0, #0
 800eb92:	4770      	bx	lr

0800eb94 <HAL_DMA_IRQHandler>:
 800eb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb96:	2300      	movs	r3, #0
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	4b5c      	ldr	r3, [pc, #368]	; (800ed0c <HAL_DMA_IRQHandler+0x178>)
 800eb9c:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800eb9e:	681f      	ldr	r7, [r3, #0]
 800eba0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eba2:	682e      	ldr	r6, [r5, #0]
 800eba4:	2208      	movs	r2, #8
 800eba6:	409a      	lsls	r2, r3
 800eba8:	4232      	tst	r2, r6
 800ebaa:	4604      	mov	r4, r0
 800ebac:	d00c      	beq.n	800ebc8 <HAL_DMA_IRQHandler+0x34>
 800ebae:	6801      	ldr	r1, [r0, #0]
 800ebb0:	6808      	ldr	r0, [r1, #0]
 800ebb2:	0740      	lsls	r0, r0, #29
 800ebb4:	d508      	bpl.n	800ebc8 <HAL_DMA_IRQHandler+0x34>
 800ebb6:	6808      	ldr	r0, [r1, #0]
 800ebb8:	f020 0004 	bic.w	r0, r0, #4
 800ebbc:	6008      	str	r0, [r1, #0]
 800ebbe:	60aa      	str	r2, [r5, #8]
 800ebc0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ebc2:	f042 0201 	orr.w	r2, r2, #1
 800ebc6:	6562      	str	r2, [r4, #84]	; 0x54
 800ebc8:	2201      	movs	r2, #1
 800ebca:	409a      	lsls	r2, r3
 800ebcc:	4232      	tst	r2, r6
 800ebce:	d008      	beq.n	800ebe2 <HAL_DMA_IRQHandler+0x4e>
 800ebd0:	6821      	ldr	r1, [r4, #0]
 800ebd2:	6949      	ldr	r1, [r1, #20]
 800ebd4:	0609      	lsls	r1, r1, #24
 800ebd6:	bf41      	itttt	mi
 800ebd8:	60aa      	strmi	r2, [r5, #8]
 800ebda:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800ebdc:	f042 0202 	orrmi.w	r2, r2, #2
 800ebe0:	6562      	strmi	r2, [r4, #84]	; 0x54
 800ebe2:	2204      	movs	r2, #4
 800ebe4:	409a      	lsls	r2, r3
 800ebe6:	4232      	tst	r2, r6
 800ebe8:	d008      	beq.n	800ebfc <HAL_DMA_IRQHandler+0x68>
 800ebea:	6821      	ldr	r1, [r4, #0]
 800ebec:	6809      	ldr	r1, [r1, #0]
 800ebee:	0788      	lsls	r0, r1, #30
 800ebf0:	bf41      	itttt	mi
 800ebf2:	60aa      	strmi	r2, [r5, #8]
 800ebf4:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800ebf6:	f042 0204 	orrmi.w	r2, r2, #4
 800ebfa:	6562      	strmi	r2, [r4, #84]	; 0x54
 800ebfc:	2210      	movs	r2, #16
 800ebfe:	409a      	lsls	r2, r3
 800ec00:	4232      	tst	r2, r6
 800ec02:	d010      	beq.n	800ec26 <HAL_DMA_IRQHandler+0x92>
 800ec04:	6823      	ldr	r3, [r4, #0]
 800ec06:	6819      	ldr	r1, [r3, #0]
 800ec08:	0709      	lsls	r1, r1, #28
 800ec0a:	d50c      	bpl.n	800ec26 <HAL_DMA_IRQHandler+0x92>
 800ec0c:	60aa      	str	r2, [r5, #8]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	0350      	lsls	r0, r2, #13
 800ec12:	d537      	bpl.n	800ec84 <HAL_DMA_IRQHandler+0xf0>
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	0319      	lsls	r1, r3, #12
 800ec18:	d401      	bmi.n	800ec1e <HAL_DMA_IRQHandler+0x8a>
 800ec1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec1c:	e000      	b.n	800ec20 <HAL_DMA_IRQHandler+0x8c>
 800ec1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec20:	b10b      	cbz	r3, 800ec26 <HAL_DMA_IRQHandler+0x92>
 800ec22:	4620      	mov	r0, r4
 800ec24:	4798      	blx	r3
 800ec26:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ec28:	2220      	movs	r2, #32
 800ec2a:	408a      	lsls	r2, r1
 800ec2c:	4232      	tst	r2, r6
 800ec2e:	d03a      	beq.n	800eca6 <HAL_DMA_IRQHandler+0x112>
 800ec30:	6823      	ldr	r3, [r4, #0]
 800ec32:	6818      	ldr	r0, [r3, #0]
 800ec34:	06c6      	lsls	r6, r0, #27
 800ec36:	d536      	bpl.n	800eca6 <HAL_DMA_IRQHandler+0x112>
 800ec38:	60aa      	str	r2, [r5, #8]
 800ec3a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800ec3e:	2a05      	cmp	r2, #5
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	d127      	bne.n	800ec94 <HAL_DMA_IRQHandler+0x100>
 800ec44:	f022 0216 	bic.w	r2, r2, #22
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	695a      	ldr	r2, [r3, #20]
 800ec4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec50:	615a      	str	r2, [r3, #20]
 800ec52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ec54:	b90a      	cbnz	r2, 800ec5a <HAL_DMA_IRQHandler+0xc6>
 800ec56:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ec58:	b11a      	cbz	r2, 800ec62 <HAL_DMA_IRQHandler+0xce>
 800ec5a:	681a      	ldr	r2, [r3, #0]
 800ec5c:	f022 0208 	bic.w	r2, r2, #8
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	233f      	movs	r3, #63	; 0x3f
 800ec64:	408b      	lsls	r3, r1
 800ec66:	60ab      	str	r3, [r5, #8]
 800ec68:	2300      	movs	r3, #0
 800ec6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800ec6e:	2301      	movs	r3, #1
 800ec70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800ec74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d045      	beq.n	800ed06 <HAL_DMA_IRQHandler+0x172>
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	b003      	add	sp, #12
 800ec7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec82:	4718      	bx	r3
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	05d2      	lsls	r2, r2, #23
 800ec88:	bf5e      	ittt	pl
 800ec8a:	681a      	ldrpl	r2, [r3, #0]
 800ec8c:	f022 0208 	bicpl.w	r2, r2, #8
 800ec90:	601a      	strpl	r2, [r3, #0]
 800ec92:	e7c2      	b.n	800ec1a <HAL_DMA_IRQHandler+0x86>
 800ec94:	0350      	lsls	r0, r2, #13
 800ec96:	d527      	bpl.n	800ece8 <HAL_DMA_IRQHandler+0x154>
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	0319      	lsls	r1, r3, #12
 800ec9c:	d431      	bmi.n	800ed02 <HAL_DMA_IRQHandler+0x16e>
 800ec9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eca0:	b10b      	cbz	r3, 800eca6 <HAL_DMA_IRQHandler+0x112>
 800eca2:	4620      	mov	r0, r4
 800eca4:	4798      	blx	r3
 800eca6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800eca8:	b36b      	cbz	r3, 800ed06 <HAL_DMA_IRQHandler+0x172>
 800ecaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ecac:	07da      	lsls	r2, r3, #31
 800ecae:	d519      	bpl.n	800ece4 <HAL_DMA_IRQHandler+0x150>
 800ecb0:	2305      	movs	r3, #5
 800ecb2:	6822      	ldr	r2, [r4, #0]
 800ecb4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800ecb8:	6813      	ldr	r3, [r2, #0]
 800ecba:	f023 0301 	bic.w	r3, r3, #1
 800ecbe:	6013      	str	r3, [r2, #0]
 800ecc0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800ecc4:	fbb7 f7f3 	udiv	r7, r7, r3
 800ecc8:	9b01      	ldr	r3, [sp, #4]
 800ecca:	3301      	adds	r3, #1
 800eccc:	42bb      	cmp	r3, r7
 800ecce:	9301      	str	r3, [sp, #4]
 800ecd0:	d802      	bhi.n	800ecd8 <HAL_DMA_IRQHandler+0x144>
 800ecd2:	6813      	ldr	r3, [r2, #0]
 800ecd4:	07db      	lsls	r3, r3, #31
 800ecd6:	d4f7      	bmi.n	800ecc8 <HAL_DMA_IRQHandler+0x134>
 800ecd8:	2300      	movs	r3, #0
 800ecda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800ecde:	2301      	movs	r3, #1
 800ece0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800ece4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ece6:	e7c6      	b.n	800ec76 <HAL_DMA_IRQHandler+0xe2>
 800ece8:	681a      	ldr	r2, [r3, #0]
 800ecea:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800ecee:	d108      	bne.n	800ed02 <HAL_DMA_IRQHandler+0x16e>
 800ecf0:	6819      	ldr	r1, [r3, #0]
 800ecf2:	f021 0110 	bic.w	r1, r1, #16
 800ecf6:	6019      	str	r1, [r3, #0]
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 800ecfe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800ed02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ed04:	e7cc      	b.n	800eca0 <HAL_DMA_IRQHandler+0x10c>
 800ed06:	b003      	add	sp, #12
 800ed08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	20000058 	.word	0x20000058

0800ed10 <HAL_DMA_GetError>:
 800ed10:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800ed12:	4770      	bx	lr

0800ed14 <FLASH_Program_DoubleWord>:
 800ed14:	4909      	ldr	r1, [pc, #36]	; (800ed3c <FLASH_Program_DoubleWord+0x28>)
 800ed16:	b510      	push	{r4, lr}
 800ed18:	690c      	ldr	r4, [r1, #16]
 800ed1a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800ed1e:	610c      	str	r4, [r1, #16]
 800ed20:	690c      	ldr	r4, [r1, #16]
 800ed22:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800ed26:	610c      	str	r4, [r1, #16]
 800ed28:	690c      	ldr	r4, [r1, #16]
 800ed2a:	f044 0401 	orr.w	r4, r4, #1
 800ed2e:	610c      	str	r4, [r1, #16]
 800ed30:	6002      	str	r2, [r0, #0]
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	6043      	str	r3, [r0, #4]
 800ed38:	bd10      	pop	{r4, pc}
 800ed3a:	bf00      	nop
 800ed3c:	40023c00 	.word	0x40023c00

0800ed40 <FLASH_Program_Word>:
 800ed40:	4b07      	ldr	r3, [pc, #28]	; (800ed60 <FLASH_Program_Word+0x20>)
 800ed42:	691a      	ldr	r2, [r3, #16]
 800ed44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ed48:	611a      	str	r2, [r3, #16]
 800ed4a:	691a      	ldr	r2, [r3, #16]
 800ed4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed50:	611a      	str	r2, [r3, #16]
 800ed52:	691a      	ldr	r2, [r3, #16]
 800ed54:	f042 0201 	orr.w	r2, r2, #1
 800ed58:	611a      	str	r2, [r3, #16]
 800ed5a:	6001      	str	r1, [r0, #0]
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	40023c00 	.word	0x40023c00

0800ed64 <FLASH_Program_HalfWord>:
 800ed64:	4b07      	ldr	r3, [pc, #28]	; (800ed84 <FLASH_Program_HalfWord+0x20>)
 800ed66:	691a      	ldr	r2, [r3, #16]
 800ed68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ed6c:	611a      	str	r2, [r3, #16]
 800ed6e:	691a      	ldr	r2, [r3, #16]
 800ed70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed74:	611a      	str	r2, [r3, #16]
 800ed76:	691a      	ldr	r2, [r3, #16]
 800ed78:	f042 0201 	orr.w	r2, r2, #1
 800ed7c:	611a      	str	r2, [r3, #16]
 800ed7e:	8001      	strh	r1, [r0, #0]
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop
 800ed84:	40023c00 	.word	0x40023c00

0800ed88 <FLASH_SetErrorCode>:
 800ed88:	4b1a      	ldr	r3, [pc, #104]	; (800edf4 <FLASH_SetErrorCode+0x6c>)
 800ed8a:	68da      	ldr	r2, [r3, #12]
 800ed8c:	06d2      	lsls	r2, r2, #27
 800ed8e:	d506      	bpl.n	800ed9e <FLASH_SetErrorCode+0x16>
 800ed90:	4919      	ldr	r1, [pc, #100]	; (800edf8 <FLASH_SetErrorCode+0x70>)
 800ed92:	69ca      	ldr	r2, [r1, #28]
 800ed94:	f042 0210 	orr.w	r2, r2, #16
 800ed98:	61ca      	str	r2, [r1, #28]
 800ed9a:	2210      	movs	r2, #16
 800ed9c:	60da      	str	r2, [r3, #12]
 800ed9e:	68da      	ldr	r2, [r3, #12]
 800eda0:	0690      	lsls	r0, r2, #26
 800eda2:	d506      	bpl.n	800edb2 <FLASH_SetErrorCode+0x2a>
 800eda4:	4914      	ldr	r1, [pc, #80]	; (800edf8 <FLASH_SetErrorCode+0x70>)
 800eda6:	69ca      	ldr	r2, [r1, #28]
 800eda8:	f042 0208 	orr.w	r2, r2, #8
 800edac:	61ca      	str	r2, [r1, #28]
 800edae:	2220      	movs	r2, #32
 800edb0:	60da      	str	r2, [r3, #12]
 800edb2:	4b10      	ldr	r3, [pc, #64]	; (800edf4 <FLASH_SetErrorCode+0x6c>)
 800edb4:	68da      	ldr	r2, [r3, #12]
 800edb6:	0651      	lsls	r1, r2, #25
 800edb8:	d506      	bpl.n	800edc8 <FLASH_SetErrorCode+0x40>
 800edba:	490f      	ldr	r1, [pc, #60]	; (800edf8 <FLASH_SetErrorCode+0x70>)
 800edbc:	69ca      	ldr	r2, [r1, #28]
 800edbe:	f042 0204 	orr.w	r2, r2, #4
 800edc2:	61ca      	str	r2, [r1, #28]
 800edc4:	2240      	movs	r2, #64	; 0x40
 800edc6:	60da      	str	r2, [r3, #12]
 800edc8:	68da      	ldr	r2, [r3, #12]
 800edca:	0612      	lsls	r2, r2, #24
 800edcc:	d506      	bpl.n	800eddc <FLASH_SetErrorCode+0x54>
 800edce:	490a      	ldr	r1, [pc, #40]	; (800edf8 <FLASH_SetErrorCode+0x70>)
 800edd0:	69ca      	ldr	r2, [r1, #28]
 800edd2:	f042 0202 	orr.w	r2, r2, #2
 800edd6:	61ca      	str	r2, [r1, #28]
 800edd8:	2280      	movs	r2, #128	; 0x80
 800edda:	60da      	str	r2, [r3, #12]
 800eddc:	4a05      	ldr	r2, [pc, #20]	; (800edf4 <FLASH_SetErrorCode+0x6c>)
 800edde:	68d3      	ldr	r3, [r2, #12]
 800ede0:	079b      	lsls	r3, r3, #30
 800ede2:	d506      	bpl.n	800edf2 <FLASH_SetErrorCode+0x6a>
 800ede4:	4904      	ldr	r1, [pc, #16]	; (800edf8 <FLASH_SetErrorCode+0x70>)
 800ede6:	69cb      	ldr	r3, [r1, #28]
 800ede8:	f043 0320 	orr.w	r3, r3, #32
 800edec:	61cb      	str	r3, [r1, #28]
 800edee:	2302      	movs	r3, #2
 800edf0:	60d3      	str	r3, [r2, #12]
 800edf2:	4770      	bx	lr
 800edf4:	40023c00 	.word	0x40023c00
 800edf8:	20001758 	.word	0x20001758

0800edfc <HAL_FLASH_Unlock>:
 800edfc:	4b06      	ldr	r3, [pc, #24]	; (800ee18 <HAL_FLASH_Unlock+0x1c>)
 800edfe:	691a      	ldr	r2, [r3, #16]
 800ee00:	2a00      	cmp	r2, #0
 800ee02:	bfbf      	itttt	lt
 800ee04:	4a05      	ldrlt	r2, [pc, #20]	; (800ee1c <HAL_FLASH_Unlock+0x20>)
 800ee06:	605a      	strlt	r2, [r3, #4]
 800ee08:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 800ee0c:	605a      	strlt	r2, [r3, #4]
 800ee0e:	bfba      	itte	lt
 800ee10:	6918      	ldrlt	r0, [r3, #16]
 800ee12:	0fc0      	lsrlt	r0, r0, #31
 800ee14:	2000      	movge	r0, #0
 800ee16:	4770      	bx	lr
 800ee18:	40023c00 	.word	0x40023c00
 800ee1c:	45670123 	.word	0x45670123

0800ee20 <HAL_FLASH_Lock>:
 800ee20:	4a03      	ldr	r2, [pc, #12]	; (800ee30 <HAL_FLASH_Lock+0x10>)
 800ee22:	6913      	ldr	r3, [r2, #16]
 800ee24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ee28:	6113      	str	r3, [r2, #16]
 800ee2a:	2000      	movs	r0, #0
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop
 800ee30:	40023c00 	.word	0x40023c00

0800ee34 <FLASH_WaitForLastOperation>:
 800ee34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee36:	4b12      	ldr	r3, [pc, #72]	; (800ee80 <FLASH_WaitForLastOperation+0x4c>)
 800ee38:	4c12      	ldr	r4, [pc, #72]	; (800ee84 <FLASH_WaitForLastOperation+0x50>)
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	61da      	str	r2, [r3, #28]
 800ee40:	f7ff fd0c 	bl	800e85c <HAL_GetTick>
 800ee44:	4626      	mov	r6, r4
 800ee46:	4607      	mov	r7, r0
 800ee48:	68e3      	ldr	r3, [r4, #12]
 800ee4a:	03da      	lsls	r2, r3, #15
 800ee4c:	d40c      	bmi.n	800ee68 <FLASH_WaitForLastOperation+0x34>
 800ee4e:	68e3      	ldr	r3, [r4, #12]
 800ee50:	07db      	lsls	r3, r3, #31
 800ee52:	bf44      	itt	mi
 800ee54:	2301      	movmi	r3, #1
 800ee56:	60e3      	strmi	r3, [r4, #12]
 800ee58:	68f0      	ldr	r0, [r6, #12]
 800ee5a:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 800ee5e:	d007      	beq.n	800ee70 <FLASH_WaitForLastOperation+0x3c>
 800ee60:	f7ff ff92 	bl	800ed88 <FLASH_SetErrorCode>
 800ee64:	2001      	movs	r0, #1
 800ee66:	e003      	b.n	800ee70 <FLASH_WaitForLastOperation+0x3c>
 800ee68:	1c69      	adds	r1, r5, #1
 800ee6a:	d0ed      	beq.n	800ee48 <FLASH_WaitForLastOperation+0x14>
 800ee6c:	b90d      	cbnz	r5, 800ee72 <FLASH_WaitForLastOperation+0x3e>
 800ee6e:	2003      	movs	r0, #3
 800ee70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee72:	f7ff fcf3 	bl	800e85c <HAL_GetTick>
 800ee76:	1bc0      	subs	r0, r0, r7
 800ee78:	42a8      	cmp	r0, r5
 800ee7a:	d9e5      	bls.n	800ee48 <FLASH_WaitForLastOperation+0x14>
 800ee7c:	e7f7      	b.n	800ee6e <FLASH_WaitForLastOperation+0x3a>
 800ee7e:	bf00      	nop
 800ee80:	20001758 	.word	0x20001758
 800ee84:	40023c00 	.word	0x40023c00

0800ee88 <HAL_FLASH_Program>:
 800ee88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8c:	4d1f      	ldr	r5, [pc, #124]	; (800ef0c <HAL_FLASH_Program+0x84>)
 800ee8e:	4698      	mov	r8, r3
 800ee90:	7e2b      	ldrb	r3, [r5, #24]
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	4607      	mov	r7, r0
 800ee96:	460e      	mov	r6, r1
 800ee98:	4614      	mov	r4, r2
 800ee9a:	d035      	beq.n	800ef08 <HAL_FLASH_Program+0x80>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800eea2:	762b      	strb	r3, [r5, #24]
 800eea4:	f7ff ffc6 	bl	800ee34 <FLASH_WaitForLastOperation>
 800eea8:	b9b0      	cbnz	r0, 800eed8 <HAL_FLASH_Program+0x50>
 800eeaa:	b9cf      	cbnz	r7, 800eee0 <HAL_FLASH_Program+0x58>
 800eeac:	4b18      	ldr	r3, [pc, #96]	; (800ef10 <HAL_FLASH_Program+0x88>)
 800eeae:	691a      	ldr	r2, [r3, #16]
 800eeb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800eeb4:	611a      	str	r2, [r3, #16]
 800eeb6:	691a      	ldr	r2, [r3, #16]
 800eeb8:	611a      	str	r2, [r3, #16]
 800eeba:	691a      	ldr	r2, [r3, #16]
 800eebc:	b2e4      	uxtb	r4, r4
 800eebe:	f042 0201 	orr.w	r2, r2, #1
 800eec2:	611a      	str	r2, [r3, #16]
 800eec4:	7034      	strb	r4, [r6, #0]
 800eec6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800eeca:	f7ff ffb3 	bl	800ee34 <FLASH_WaitForLastOperation>
 800eece:	4a10      	ldr	r2, [pc, #64]	; (800ef10 <HAL_FLASH_Program+0x88>)
 800eed0:	6913      	ldr	r3, [r2, #16]
 800eed2:	f023 0301 	bic.w	r3, r3, #1
 800eed6:	6113      	str	r3, [r2, #16]
 800eed8:	2300      	movs	r3, #0
 800eeda:	762b      	strb	r3, [r5, #24]
 800eedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee0:	2f01      	cmp	r7, #1
 800eee2:	d104      	bne.n	800eeee <HAL_FLASH_Program+0x66>
 800eee4:	b2a1      	uxth	r1, r4
 800eee6:	4630      	mov	r0, r6
 800eee8:	f7ff ff3c 	bl	800ed64 <FLASH_Program_HalfWord>
 800eeec:	e7eb      	b.n	800eec6 <HAL_FLASH_Program+0x3e>
 800eeee:	2f02      	cmp	r7, #2
 800eef0:	d104      	bne.n	800eefc <HAL_FLASH_Program+0x74>
 800eef2:	4621      	mov	r1, r4
 800eef4:	4630      	mov	r0, r6
 800eef6:	f7ff ff23 	bl	800ed40 <FLASH_Program_Word>
 800eefa:	e7e4      	b.n	800eec6 <HAL_FLASH_Program+0x3e>
 800eefc:	4622      	mov	r2, r4
 800eefe:	4643      	mov	r3, r8
 800ef00:	4630      	mov	r0, r6
 800ef02:	f7ff ff07 	bl	800ed14 <FLASH_Program_DoubleWord>
 800ef06:	e7de      	b.n	800eec6 <HAL_FLASH_Program+0x3e>
 800ef08:	2002      	movs	r0, #2
 800ef0a:	e7e7      	b.n	800eedc <HAL_FLASH_Program+0x54>
 800ef0c:	20001758 	.word	0x20001758
 800ef10:	40023c00 	.word	0x40023c00

0800ef14 <FLASH_MassErase.isra.0>:
 800ef14:	4b07      	ldr	r3, [pc, #28]	; (800ef34 <FLASH_MassErase.isra.0+0x20>)
 800ef16:	691a      	ldr	r2, [r3, #16]
 800ef18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ef1c:	611a      	str	r2, [r3, #16]
 800ef1e:	691a      	ldr	r2, [r3, #16]
 800ef20:	f042 0204 	orr.w	r2, r2, #4
 800ef24:	611a      	str	r2, [r3, #16]
 800ef26:	691a      	ldr	r2, [r3, #16]
 800ef28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ef2c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800ef30:	6118      	str	r0, [r3, #16]
 800ef32:	4770      	bx	lr
 800ef34:	40023c00 	.word	0x40023c00

0800ef38 <FLASH_Erase_Sector>:
 800ef38:	b139      	cbz	r1, 800ef4a <FLASH_Erase_Sector+0x12>
 800ef3a:	2901      	cmp	r1, #1
 800ef3c:	d01c      	beq.n	800ef78 <FLASH_Erase_Sector+0x40>
 800ef3e:	2902      	cmp	r1, #2
 800ef40:	bf0c      	ite	eq
 800ef42:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800ef46:	f44f 7140 	movne.w	r1, #768	; 0x300
 800ef4a:	4b0d      	ldr	r3, [pc, #52]	; (800ef80 <FLASH_Erase_Sector+0x48>)
 800ef4c:	691a      	ldr	r2, [r3, #16]
 800ef4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ef52:	611a      	str	r2, [r3, #16]
 800ef54:	691a      	ldr	r2, [r3, #16]
 800ef56:	4311      	orrs	r1, r2
 800ef58:	6119      	str	r1, [r3, #16]
 800ef5a:	691a      	ldr	r2, [r3, #16]
 800ef5c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800ef60:	611a      	str	r2, [r3, #16]
 800ef62:	691a      	ldr	r2, [r3, #16]
 800ef64:	f042 0202 	orr.w	r2, r2, #2
 800ef68:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800ef6c:	6118      	str	r0, [r3, #16]
 800ef6e:	691a      	ldr	r2, [r3, #16]
 800ef70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ef74:	611a      	str	r2, [r3, #16]
 800ef76:	4770      	bx	lr
 800ef78:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ef7c:	e7e5      	b.n	800ef4a <FLASH_Erase_Sector+0x12>
 800ef7e:	bf00      	nop
 800ef80:	40023c00 	.word	0x40023c00

0800ef84 <FLASH_FlushCaches>:
 800ef84:	4b14      	ldr	r3, [pc, #80]	; (800efd8 <FLASH_FlushCaches+0x54>)
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	0591      	lsls	r1, r2, #22
 800ef8a:	d50f      	bpl.n	800efac <FLASH_FlushCaches+0x28>
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ef92:	601a      	str	r2, [r3, #0]
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef9a:	601a      	str	r2, [r3, #0]
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800efa2:	601a      	str	r2, [r3, #0]
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efaa:	601a      	str	r2, [r3, #0]
 800efac:	4b0a      	ldr	r3, [pc, #40]	; (800efd8 <FLASH_FlushCaches+0x54>)
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	0552      	lsls	r2, r2, #21
 800efb2:	d50f      	bpl.n	800efd4 <FLASH_FlushCaches+0x50>
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efba:	601a      	str	r2, [r3, #0]
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800efca:	601a      	str	r2, [r3, #0]
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800efd2:	601a      	str	r2, [r3, #0]
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	40023c00 	.word	0x40023c00

0800efdc <HAL_FLASHEx_Erase>:
 800efdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe0:	4e23      	ldr	r6, [pc, #140]	; (800f070 <HAL_FLASHEx_Erase+0x94>)
 800efe2:	7e33      	ldrb	r3, [r6, #24]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	4604      	mov	r4, r0
 800efe8:	4688      	mov	r8, r1
 800efea:	d03f      	beq.n	800f06c <HAL_FLASHEx_Erase+0x90>
 800efec:	2301      	movs	r3, #1
 800efee:	f24c 3050 	movw	r0, #50000	; 0xc350
 800eff2:	7633      	strb	r3, [r6, #24]
 800eff4:	f7ff ff1e 	bl	800ee34 <FLASH_WaitForLastOperation>
 800eff8:	4605      	mov	r5, r0
 800effa:	b9a8      	cbnz	r0, 800f028 <HAL_FLASHEx_Erase+0x4c>
 800effc:	f04f 33ff 	mov.w	r3, #4294967295
 800f000:	f8c8 3000 	str.w	r3, [r8]
 800f004:	6823      	ldr	r3, [r4, #0]
 800f006:	2b01      	cmp	r3, #1
 800f008:	d113      	bne.n	800f032 <HAL_FLASHEx_Erase+0x56>
 800f00a:	7c20      	ldrb	r0, [r4, #16]
 800f00c:	f7ff ff82 	bl	800ef14 <FLASH_MassErase.isra.0>
 800f010:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f014:	f7ff ff0e 	bl	800ee34 <FLASH_WaitForLastOperation>
 800f018:	4a16      	ldr	r2, [pc, #88]	; (800f074 <HAL_FLASHEx_Erase+0x98>)
 800f01a:	6913      	ldr	r3, [r2, #16]
 800f01c:	f023 0304 	bic.w	r3, r3, #4
 800f020:	4605      	mov	r5, r0
 800f022:	6113      	str	r3, [r2, #16]
 800f024:	f7ff ffae 	bl	800ef84 <FLASH_FlushCaches>
 800f028:	2300      	movs	r3, #0
 800f02a:	7633      	strb	r3, [r6, #24]
 800f02c:	4628      	mov	r0, r5
 800f02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f032:	68a7      	ldr	r7, [r4, #8]
 800f034:	f8df 903c 	ldr.w	r9, [pc, #60]	; 800f074 <HAL_FLASHEx_Erase+0x98>
 800f038:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f03c:	4413      	add	r3, r2
 800f03e:	42bb      	cmp	r3, r7
 800f040:	d9f0      	bls.n	800f024 <HAL_FLASHEx_Erase+0x48>
 800f042:	7c21      	ldrb	r1, [r4, #16]
 800f044:	4638      	mov	r0, r7
 800f046:	f7ff ff77 	bl	800ef38 <FLASH_Erase_Sector>
 800f04a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f04e:	f7ff fef1 	bl	800ee34 <FLASH_WaitForLastOperation>
 800f052:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f056:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800f05a:	f8c9 3010 	str.w	r3, [r9, #16]
 800f05e:	b118      	cbz	r0, 800f068 <HAL_FLASHEx_Erase+0x8c>
 800f060:	f8c8 7000 	str.w	r7, [r8]
 800f064:	4605      	mov	r5, r0
 800f066:	e7dd      	b.n	800f024 <HAL_FLASHEx_Erase+0x48>
 800f068:	3701      	adds	r7, #1
 800f06a:	e7e5      	b.n	800f038 <HAL_FLASHEx_Erase+0x5c>
 800f06c:	2502      	movs	r5, #2
 800f06e:	e7dd      	b.n	800f02c <HAL_FLASHEx_Erase+0x50>
 800f070:	20001758 	.word	0x20001758
 800f074:	40023c00 	.word	0x40023c00

0800f078 <HAL_GPIO_Init>:
 800f078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f07c:	b085      	sub	sp, #20
 800f07e:	680b      	ldr	r3, [r1, #0]
 800f080:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800f230 <HAL_GPIO_Init+0x1b8>
 800f084:	4a68      	ldr	r2, [pc, #416]	; (800f228 <HAL_GPIO_Init+0x1b0>)
 800f086:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800f234 <HAL_GPIO_Init+0x1bc>
 800f08a:	9301      	str	r3, [sp, #4]
 800f08c:	2300      	movs	r3, #0
 800f08e:	2401      	movs	r4, #1
 800f090:	9d01      	ldr	r5, [sp, #4]
 800f092:	409c      	lsls	r4, r3
 800f094:	4025      	ands	r5, r4
 800f096:	42ac      	cmp	r4, r5
 800f098:	f040 80b0 	bne.w	800f1fc <HAL_GPIO_Init+0x184>
 800f09c:	684c      	ldr	r4, [r1, #4]
 800f09e:	f024 0c10 	bic.w	ip, r4, #16
 800f0a2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800f0a6:	2603      	movs	r6, #3
 800f0a8:	f10c 37ff 	add.w	r7, ip, #4294967295
 800f0ac:	fa06 f60e 	lsl.w	r6, r6, lr
 800f0b0:	2f01      	cmp	r7, #1
 800f0b2:	ea6f 0606 	mvn.w	r6, r6
 800f0b6:	d811      	bhi.n	800f0dc <HAL_GPIO_Init+0x64>
 800f0b8:	6887      	ldr	r7, [r0, #8]
 800f0ba:	ea07 0a06 	and.w	sl, r7, r6
 800f0be:	68cf      	ldr	r7, [r1, #12]
 800f0c0:	fa07 f70e 	lsl.w	r7, r7, lr
 800f0c4:	ea47 070a 	orr.w	r7, r7, sl
 800f0c8:	6087      	str	r7, [r0, #8]
 800f0ca:	6847      	ldr	r7, [r0, #4]
 800f0cc:	ea27 0a05 	bic.w	sl, r7, r5
 800f0d0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800f0d4:	409f      	lsls	r7, r3
 800f0d6:	ea47 070a 	orr.w	r7, r7, sl
 800f0da:	6047      	str	r7, [r0, #4]
 800f0dc:	68c7      	ldr	r7, [r0, #12]
 800f0de:	ea07 0a06 	and.w	sl, r7, r6
 800f0e2:	688f      	ldr	r7, [r1, #8]
 800f0e4:	fa07 f70e 	lsl.w	r7, r7, lr
 800f0e8:	ea47 070a 	orr.w	r7, r7, sl
 800f0ec:	f1bc 0f02 	cmp.w	ip, #2
 800f0f0:	60c7      	str	r7, [r0, #12]
 800f0f2:	d116      	bne.n	800f122 <HAL_GPIO_Init+0xaa>
 800f0f4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800f0f8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800f0fc:	f003 0b07 	and.w	fp, r3, #7
 800f100:	f8da 7020 	ldr.w	r7, [sl, #32]
 800f104:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800f108:	f04f 0c0f 	mov.w	ip, #15
 800f10c:	fa0c fc0b 	lsl.w	ip, ip, fp
 800f110:	ea27 0c0c 	bic.w	ip, r7, ip
 800f114:	690f      	ldr	r7, [r1, #16]
 800f116:	fa07 f70b 	lsl.w	r7, r7, fp
 800f11a:	ea47 070c 	orr.w	r7, r7, ip
 800f11e:	f8ca 7020 	str.w	r7, [sl, #32]
 800f122:	6807      	ldr	r7, [r0, #0]
 800f124:	403e      	ands	r6, r7
 800f126:	f004 0703 	and.w	r7, r4, #3
 800f12a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800f12e:	ea4e 0606 	orr.w	r6, lr, r6
 800f132:	6006      	str	r6, [r0, #0]
 800f134:	00e6      	lsls	r6, r4, #3
 800f136:	d561      	bpl.n	800f1fc <HAL_GPIO_Init+0x184>
 800f138:	f04f 0b00 	mov.w	fp, #0
 800f13c:	f8cd b00c 	str.w	fp, [sp, #12]
 800f140:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800f144:	4e39      	ldr	r6, [pc, #228]	; (800f22c <HAL_GPIO_Init+0x1b4>)
 800f146:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800f14a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800f14e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800f152:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800f156:	9703      	str	r7, [sp, #12]
 800f158:	9f03      	ldr	r7, [sp, #12]
 800f15a:	f023 0703 	bic.w	r7, r3, #3
 800f15e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800f162:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800f166:	f003 0e03 	and.w	lr, r3, #3
 800f16a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800f16e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800f172:	f04f 0c0f 	mov.w	ip, #15
 800f176:	fa0c fc0e 	lsl.w	ip, ip, lr
 800f17a:	42b0      	cmp	r0, r6
 800f17c:	ea2a 0c0c 	bic.w	ip, sl, ip
 800f180:	d043      	beq.n	800f20a <HAL_GPIO_Init+0x192>
 800f182:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f186:	42b0      	cmp	r0, r6
 800f188:	d041      	beq.n	800f20e <HAL_GPIO_Init+0x196>
 800f18a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f18e:	42b0      	cmp	r0, r6
 800f190:	d03f      	beq.n	800f212 <HAL_GPIO_Init+0x19a>
 800f192:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f196:	42b0      	cmp	r0, r6
 800f198:	d03d      	beq.n	800f216 <HAL_GPIO_Init+0x19e>
 800f19a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f19e:	42b0      	cmp	r0, r6
 800f1a0:	d03b      	beq.n	800f21a <HAL_GPIO_Init+0x1a2>
 800f1a2:	4548      	cmp	r0, r9
 800f1a4:	d03b      	beq.n	800f21e <HAL_GPIO_Init+0x1a6>
 800f1a6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800f1aa:	42b0      	cmp	r0, r6
 800f1ac:	d039      	beq.n	800f222 <HAL_GPIO_Init+0x1aa>
 800f1ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f1b2:	42b0      	cmp	r0, r6
 800f1b4:	bf14      	ite	ne
 800f1b6:	2608      	movne	r6, #8
 800f1b8:	2607      	moveq	r6, #7
 800f1ba:	fa06 f60e 	lsl.w	r6, r6, lr
 800f1be:	ea46 060c 	orr.w	r6, r6, ip
 800f1c2:	60be      	str	r6, [r7, #8]
 800f1c4:	6816      	ldr	r6, [r2, #0]
 800f1c6:	43ef      	mvns	r7, r5
 800f1c8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800f1cc:	bf0c      	ite	eq
 800f1ce:	403e      	andeq	r6, r7
 800f1d0:	432e      	orrne	r6, r5
 800f1d2:	6016      	str	r6, [r2, #0]
 800f1d4:	6856      	ldr	r6, [r2, #4]
 800f1d6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 800f1da:	bf0c      	ite	eq
 800f1dc:	403e      	andeq	r6, r7
 800f1de:	432e      	orrne	r6, r5
 800f1e0:	6056      	str	r6, [r2, #4]
 800f1e2:	6896      	ldr	r6, [r2, #8]
 800f1e4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 800f1e8:	bf0c      	ite	eq
 800f1ea:	403e      	andeq	r6, r7
 800f1ec:	432e      	orrne	r6, r5
 800f1ee:	6096      	str	r6, [r2, #8]
 800f1f0:	68d6      	ldr	r6, [r2, #12]
 800f1f2:	02a4      	lsls	r4, r4, #10
 800f1f4:	bf54      	ite	pl
 800f1f6:	403e      	andpl	r6, r7
 800f1f8:	432e      	orrmi	r6, r5
 800f1fa:	60d6      	str	r6, [r2, #12]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	2b10      	cmp	r3, #16
 800f200:	f47f af45 	bne.w	800f08e <HAL_GPIO_Init+0x16>
 800f204:	b005      	add	sp, #20
 800f206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f20a:	465e      	mov	r6, fp
 800f20c:	e7d5      	b.n	800f1ba <HAL_GPIO_Init+0x142>
 800f20e:	2601      	movs	r6, #1
 800f210:	e7d3      	b.n	800f1ba <HAL_GPIO_Init+0x142>
 800f212:	2602      	movs	r6, #2
 800f214:	e7d1      	b.n	800f1ba <HAL_GPIO_Init+0x142>
 800f216:	2603      	movs	r6, #3
 800f218:	e7cf      	b.n	800f1ba <HAL_GPIO_Init+0x142>
 800f21a:	2604      	movs	r6, #4
 800f21c:	e7cd      	b.n	800f1ba <HAL_GPIO_Init+0x142>
 800f21e:	2605      	movs	r6, #5
 800f220:	e7cb      	b.n	800f1ba <HAL_GPIO_Init+0x142>
 800f222:	2606      	movs	r6, #6
 800f224:	e7c9      	b.n	800f1ba <HAL_GPIO_Init+0x142>
 800f226:	bf00      	nop
 800f228:	40013c00 	.word	0x40013c00
 800f22c:	40020000 	.word	0x40020000
 800f230:	40023800 	.word	0x40023800
 800f234:	40021400 	.word	0x40021400

0800f238 <HAL_GPIO_DeInit>:
 800f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f23c:	4d40      	ldr	r5, [pc, #256]	; (800f340 <HAL_GPIO_DeInit+0x108>)
 800f23e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f348 <HAL_GPIO_DeInit+0x110>
 800f242:	f8df a108 	ldr.w	sl, [pc, #264]	; 800f34c <HAL_GPIO_DeInit+0x114>
 800f246:	f8df b108 	ldr.w	fp, [pc, #264]	; 800f350 <HAL_GPIO_DeInit+0x118>
 800f24a:	2200      	movs	r2, #0
 800f24c:	2301      	movs	r3, #1
 800f24e:	fa03 fe02 	lsl.w	lr, r3, r2
 800f252:	ea0e 0401 	and.w	r4, lr, r1
 800f256:	45a6      	cmp	lr, r4
 800f258:	d15f      	bne.n	800f31a <HAL_GPIO_DeInit+0xe2>
 800f25a:	f022 0603 	bic.w	r6, r2, #3
 800f25e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800f262:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800f266:	f002 0c03 	and.w	ip, r2, #3
 800f26a:	4b36      	ldr	r3, [pc, #216]	; (800f344 <HAL_GPIO_DeInit+0x10c>)
 800f26c:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800f270:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f274:	270f      	movs	r7, #15
 800f276:	fa07 f70c 	lsl.w	r7, r7, ip
 800f27a:	4298      	cmp	r0, r3
 800f27c:	ea07 0808 	and.w	r8, r7, r8
 800f280:	d050      	beq.n	800f324 <HAL_GPIO_DeInit+0xec>
 800f282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f286:	4298      	cmp	r0, r3
 800f288:	d04e      	beq.n	800f328 <HAL_GPIO_DeInit+0xf0>
 800f28a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f28e:	4298      	cmp	r0, r3
 800f290:	d04c      	beq.n	800f32c <HAL_GPIO_DeInit+0xf4>
 800f292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f296:	4298      	cmp	r0, r3
 800f298:	d04a      	beq.n	800f330 <HAL_GPIO_DeInit+0xf8>
 800f29a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f29e:	4298      	cmp	r0, r3
 800f2a0:	d048      	beq.n	800f334 <HAL_GPIO_DeInit+0xfc>
 800f2a2:	4548      	cmp	r0, r9
 800f2a4:	d048      	beq.n	800f338 <HAL_GPIO_DeInit+0x100>
 800f2a6:	4550      	cmp	r0, sl
 800f2a8:	d048      	beq.n	800f33c <HAL_GPIO_DeInit+0x104>
 800f2aa:	4558      	cmp	r0, fp
 800f2ac:	bf0c      	ite	eq
 800f2ae:	2307      	moveq	r3, #7
 800f2b0:	2308      	movne	r3, #8
 800f2b2:	fa03 f30c 	lsl.w	r3, r3, ip
 800f2b6:	4543      	cmp	r3, r8
 800f2b8:	d110      	bne.n	800f2dc <HAL_GPIO_DeInit+0xa4>
 800f2ba:	682b      	ldr	r3, [r5, #0]
 800f2bc:	43e4      	mvns	r4, r4
 800f2be:	4023      	ands	r3, r4
 800f2c0:	602b      	str	r3, [r5, #0]
 800f2c2:	686b      	ldr	r3, [r5, #4]
 800f2c4:	4023      	ands	r3, r4
 800f2c6:	606b      	str	r3, [r5, #4]
 800f2c8:	68ab      	ldr	r3, [r5, #8]
 800f2ca:	4023      	ands	r3, r4
 800f2cc:	60ab      	str	r3, [r5, #8]
 800f2ce:	68eb      	ldr	r3, [r5, #12]
 800f2d0:	401c      	ands	r4, r3
 800f2d2:	60ec      	str	r4, [r5, #12]
 800f2d4:	68b3      	ldr	r3, [r6, #8]
 800f2d6:	ea23 0707 	bic.w	r7, r3, r7
 800f2da:	60b7      	str	r7, [r6, #8]
 800f2dc:	0056      	lsls	r6, r2, #1
 800f2de:	2303      	movs	r3, #3
 800f2e0:	6804      	ldr	r4, [r0, #0]
 800f2e2:	40b3      	lsls	r3, r6
 800f2e4:	43db      	mvns	r3, r3
 800f2e6:	401c      	ands	r4, r3
 800f2e8:	6004      	str	r4, [r0, #0]
 800f2ea:	08d4      	lsrs	r4, r2, #3
 800f2ec:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800f2f0:	f002 0c07 	and.w	ip, r2, #7
 800f2f4:	6a26      	ldr	r6, [r4, #32]
 800f2f6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f2fa:	270f      	movs	r7, #15
 800f2fc:	fa07 f70c 	lsl.w	r7, r7, ip
 800f300:	ea26 0707 	bic.w	r7, r6, r7
 800f304:	6227      	str	r7, [r4, #32]
 800f306:	68c4      	ldr	r4, [r0, #12]
 800f308:	401c      	ands	r4, r3
 800f30a:	60c4      	str	r4, [r0, #12]
 800f30c:	6844      	ldr	r4, [r0, #4]
 800f30e:	ea24 040e 	bic.w	r4, r4, lr
 800f312:	6044      	str	r4, [r0, #4]
 800f314:	6884      	ldr	r4, [r0, #8]
 800f316:	4023      	ands	r3, r4
 800f318:	6083      	str	r3, [r0, #8]
 800f31a:	3201      	adds	r2, #1
 800f31c:	2a10      	cmp	r2, #16
 800f31e:	d195      	bne.n	800f24c <HAL_GPIO_DeInit+0x14>
 800f320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f324:	2300      	movs	r3, #0
 800f326:	e7c4      	b.n	800f2b2 <HAL_GPIO_DeInit+0x7a>
 800f328:	2301      	movs	r3, #1
 800f32a:	e7c2      	b.n	800f2b2 <HAL_GPIO_DeInit+0x7a>
 800f32c:	2302      	movs	r3, #2
 800f32e:	e7c0      	b.n	800f2b2 <HAL_GPIO_DeInit+0x7a>
 800f330:	2303      	movs	r3, #3
 800f332:	e7be      	b.n	800f2b2 <HAL_GPIO_DeInit+0x7a>
 800f334:	2304      	movs	r3, #4
 800f336:	e7bc      	b.n	800f2b2 <HAL_GPIO_DeInit+0x7a>
 800f338:	2305      	movs	r3, #5
 800f33a:	e7ba      	b.n	800f2b2 <HAL_GPIO_DeInit+0x7a>
 800f33c:	2306      	movs	r3, #6
 800f33e:	e7b8      	b.n	800f2b2 <HAL_GPIO_DeInit+0x7a>
 800f340:	40013c00 	.word	0x40013c00
 800f344:	40020000 	.word	0x40020000
 800f348:	40021400 	.word	0x40021400
 800f34c:	40021800 	.word	0x40021800
 800f350:	40021c00 	.word	0x40021c00

0800f354 <HAL_GPIO_ReadPin>:
 800f354:	6903      	ldr	r3, [r0, #16]
 800f356:	4219      	tst	r1, r3
 800f358:	bf14      	ite	ne
 800f35a:	2001      	movne	r0, #1
 800f35c:	2000      	moveq	r0, #0
 800f35e:	4770      	bx	lr

0800f360 <HAL_GPIO_WritePin>:
 800f360:	b10a      	cbz	r2, 800f366 <HAL_GPIO_WritePin+0x6>
 800f362:	6181      	str	r1, [r0, #24]
 800f364:	4770      	bx	lr
 800f366:	0409      	lsls	r1, r1, #16
 800f368:	e7fb      	b.n	800f362 <HAL_GPIO_WritePin+0x2>

0800f36a <HAL_HCD_HC_Init>:
 800f36a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f36e:	4604      	mov	r4, r0
 800f370:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
 800f374:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f378:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 800f37c:	f8bd e038 	ldrh.w	lr, [sp, #56]	; 0x38
 800f380:	2801      	cmp	r0, #1
 800f382:	d027      	beq.n	800f3d4 <HAL_HCD_HC_Init+0x6a>
 800f384:	2028      	movs	r0, #40	; 0x28
 800f386:	fb00 4001 	mla	r0, r0, r1, r4
 800f38a:	2501      	movs	r5, #1
 800f38c:	2600      	movs	r6, #0
 800f38e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f392:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
 800f396:	f002 097f 	and.w	r9, r2, #127	; 0x7f
 800f39a:	bf08      	it	eq
 800f39c:	4635      	moveq	r5, r6
 800f39e:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
 800f3a2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800f3a6:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 800f3aa:	f880 c03f 	strb.w	ip, [r0, #63]	; 0x3f
 800f3ae:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
 800f3b2:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
 800f3b6:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
 800f3ba:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
 800f3be:	e9cd ce01 	strd	ip, lr, [sp, #4]
 800f3c2:	9700      	str	r7, [sp, #0]
 800f3c4:	6820      	ldr	r0, [r4, #0]
 800f3c6:	f003 f8bf 	bl	8012548 <USB_HC_Init>
 800f3ca:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8
 800f3ce:	b004      	add	sp, #16
 800f3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3d4:	2002      	movs	r0, #2
 800f3d6:	e7fa      	b.n	800f3ce <HAL_HCD_HC_Init+0x64>

0800f3d8 <HAL_HCD_HC_Halt>:
 800f3d8:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	b510      	push	{r4, lr}
 800f3e0:	4604      	mov	r4, r0
 800f3e2:	d009      	beq.n	800f3f8 <HAL_HCD_HC_Halt+0x20>
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
 800f3ea:	6800      	ldr	r0, [r0, #0]
 800f3ec:	f003 f934 	bl	8012658 <USB_HC_Halt>
 800f3f0:	2000      	movs	r0, #0
 800f3f2:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
 800f3f6:	bd10      	pop	{r4, pc}
 800f3f8:	2002      	movs	r0, #2
 800f3fa:	e7fc      	b.n	800f3f6 <HAL_HCD_HC_Halt+0x1e>

0800f3fc <HAL_HCD_Init>:
 800f3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f400:	4607      	mov	r7, r0
 800f402:	b08a      	sub	sp, #40	; 0x28
 800f404:	2800      	cmp	r0, #0
 800f406:	d041      	beq.n	800f48c <HAL_HCD_Init+0x90>
 800f408:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
 800f40c:	6804      	ldr	r4, [r0, #0]
 800f40e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f412:	b91b      	cbnz	r3, 800f41c <HAL_HCD_Init+0x20>
 800f414:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
 800f418:	f006 fc34 	bl	8015c84 <HAL_HCD_MspInit>
 800f41c:	2303      	movs	r3, #3
 800f41e:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
 800f422:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f424:	463c      	mov	r4, r7
 800f426:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800f42a:	f854 0b10 	ldr.w	r0, [r4], #16
 800f42e:	bf08      	it	eq
 800f430:	613b      	streq	r3, [r7, #16]
 800f432:	f002 ff45 	bl	80122c0 <USB_DisableGlobalInt>
 800f436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f438:	466d      	mov	r5, sp
 800f43a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f43c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f43e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f440:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f444:	e885 0003 	stmia.w	r5, {r0, r1}
 800f448:	f107 0804 	add.w	r8, r7, #4
 800f44c:	463e      	mov	r6, r7
 800f44e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800f452:	6838      	ldr	r0, [r7, #0]
 800f454:	f002 feee 	bl	8012234 <USB_CoreInit>
 800f458:	f856 0b10 	ldr.w	r0, [r6], #16
 800f45c:	2101      	movs	r1, #1
 800f45e:	f002 ff35 	bl	80122cc <USB_SetCurrentMode>
 800f462:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f464:	466d      	mov	r5, sp
 800f466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f468:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f46a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f46c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f470:	e885 0003 	stmia.w	r5, {r0, r1}
 800f474:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800f478:	6838      	ldr	r0, [r7, #0]
 800f47a:	f002 ffe5 	bl	8012448 <USB_HostInit>
 800f47e:	2301      	movs	r3, #1
 800f480:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
 800f484:	2000      	movs	r0, #0
 800f486:	b00a      	add	sp, #40	; 0x28
 800f488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f48c:	2001      	movs	r0, #1
 800f48e:	e7fa      	b.n	800f486 <HAL_HCD_Init+0x8a>

0800f490 <HAL_HCD_HC_SubmitRequest>:
 800f490:	b4f0      	push	{r4, r5, r6, r7}
 800f492:	2428      	movs	r4, #40	; 0x28
 800f494:	fb04 0401 	mla	r4, r4, r1, r0
 800f498:	f89d 7010 	ldrb.w	r7, [sp, #16]
 800f49c:	9e05      	ldr	r6, [sp, #20]
 800f49e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800f4a2:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800f4a6:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
 800f4aa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f4ae:	b97f      	cbnz	r7, 800f4d0 <HAL_HCD_HC_SubmitRequest+0x40>
 800f4b0:	2703      	movs	r7, #3
 800f4b2:	2b02      	cmp	r3, #2
 800f4b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f4b8:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
 800f4bc:	d02b      	beq.n	800f516 <HAL_HCD_HC_SubmitRequest+0x86>
 800f4be:	42bb      	cmp	r3, r7
 800f4c0:	d029      	beq.n	800f516 <HAL_HCD_HC_SubmitRequest+0x86>
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d131      	bne.n	800f52a <HAL_HCD_HC_SubmitRequest+0x9a>
 800f4c6:	2328      	movs	r3, #40	; 0x28
 800f4c8:	fb03 0301 	mla	r3, r3, r1, r0
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	e02a      	b.n	800f526 <HAL_HCD_HC_SubmitRequest+0x96>
 800f4d0:	f04f 0c02 	mov.w	ip, #2
 800f4d4:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
 800f4d8:	2b03      	cmp	r3, #3
 800f4da:	d826      	bhi.n	800f52a <HAL_HCD_HC_SubmitRequest+0x9a>
 800f4dc:	a401      	add	r4, pc, #4	; (adr r4, 800f4e4 <HAL_HCD_HC_SubmitRequest+0x54>)
 800f4de:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 800f4e2:	bf00      	nop
 800f4e4:	0800f4f5 	.word	0x0800f4f5
 800f4e8:	0800f4c7 	.word	0x0800f4c7
 800f4ec:	0800f517 	.word	0x0800f517
 800f4f0:	0800f517 	.word	0x0800f517
 800f4f4:	2f01      	cmp	r7, #1
 800f4f6:	d118      	bne.n	800f52a <HAL_HCD_HC_SubmitRequest+0x9a>
 800f4f8:	b9ba      	cbnz	r2, 800f52a <HAL_HCD_HC_SubmitRequest+0x9a>
 800f4fa:	b925      	cbnz	r5, 800f506 <HAL_HCD_HC_SubmitRequest+0x76>
 800f4fc:	2328      	movs	r3, #40	; 0x28
 800f4fe:	fb03 0301 	mla	r3, r3, r1, r0
 800f502:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
 800f506:	2328      	movs	r3, #40	; 0x28
 800f508:	fb03 0301 	mla	r3, r3, r1, r0
 800f50c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800f510:	b14a      	cbz	r2, 800f526 <HAL_HCD_HC_SubmitRequest+0x96>
 800f512:	2202      	movs	r2, #2
 800f514:	e007      	b.n	800f526 <HAL_HCD_HC_SubmitRequest+0x96>
 800f516:	2328      	movs	r3, #40	; 0x28
 800f518:	fb03 0301 	mla	r3, r3, r1, r0
 800f51c:	b9ca      	cbnz	r2, 800f552 <HAL_HCD_HC_SubmitRequest+0xc2>
 800f51e:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 800f522:	2c00      	cmp	r4, #0
 800f524:	d1f5      	bne.n	800f512 <HAL_HCD_HC_SubmitRequest+0x82>
 800f526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f52a:	2428      	movs	r4, #40	; 0x28
 800f52c:	fb04 0301 	mla	r3, r4, r1, r0
 800f530:	2200      	movs	r2, #0
 800f532:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 800f536:	4619      	mov	r1, r3
 800f538:	e9c3 6511 	strd	r6, r5, [r3, #68]	; 0x44
 800f53c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800f540:	64da      	str	r2, [r3, #76]	; 0x4c
 800f542:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f546:	3138      	adds	r1, #56	; 0x38
 800f548:	7c02      	ldrb	r2, [r0, #16]
 800f54a:	6800      	ldr	r0, [r0, #0]
 800f54c:	bcf0      	pop	{r4, r5, r6, r7}
 800f54e:	f003 b8e7 	b.w	8012720 <USB_HC_StartXfer>
 800f552:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800f556:	e7db      	b.n	800f510 <HAL_HCD_HC_SubmitRequest+0x80>

0800f558 <HAL_HCD_IRQHandler>:
 800f558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55c:	6806      	ldr	r6, [r0, #0]
 800f55e:	b085      	sub	sp, #20
 800f560:	4605      	mov	r5, r0
 800f562:	4630      	mov	r0, r6
 800f564:	f002 ff12 	bl	801238c <USB_GetMode>
 800f568:	2801      	cmp	r0, #1
 800f56a:	f040 80e4 	bne.w	800f736 <HAL_HCD_IRQHandler+0x1de>
 800f56e:	6828      	ldr	r0, [r5, #0]
 800f570:	f002 ff08 	bl	8012384 <USB_ReadInterrupts>
 800f574:	2800      	cmp	r0, #0
 800f576:	f000 80de 	beq.w	800f736 <HAL_HCD_IRQHandler+0x1de>
 800f57a:	6828      	ldr	r0, [r5, #0]
 800f57c:	f002 ff02 	bl	8012384 <USB_ReadInterrupts>
 800f580:	0284      	lsls	r4, r0, #10
 800f582:	bf48      	it	mi
 800f584:	682b      	ldrmi	r3, [r5, #0]
 800f586:	6828      	ldr	r0, [r5, #0]
 800f588:	bf44      	itt	mi
 800f58a:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 800f58e:	615a      	strmi	r2, [r3, #20]
 800f590:	f002 fef8 	bl	8012384 <USB_ReadInterrupts>
 800f594:	02c0      	lsls	r0, r0, #11
 800f596:	bf48      	it	mi
 800f598:	682b      	ldrmi	r3, [r5, #0]
 800f59a:	6828      	ldr	r0, [r5, #0]
 800f59c:	bf44      	itt	mi
 800f59e:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 800f5a2:	615a      	strmi	r2, [r3, #20]
 800f5a4:	f002 feee 	bl	8012384 <USB_ReadInterrupts>
 800f5a8:	0141      	lsls	r1, r0, #5
 800f5aa:	bf48      	it	mi
 800f5ac:	682b      	ldrmi	r3, [r5, #0]
 800f5ae:	6828      	ldr	r0, [r5, #0]
 800f5b0:	bf44      	itt	mi
 800f5b2:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 800f5b6:	615a      	strmi	r2, [r3, #20]
 800f5b8:	f002 fee4 	bl	8012384 <USB_ReadInterrupts>
 800f5bc:	0782      	lsls	r2, r0, #30
 800f5be:	bf48      	it	mi
 800f5c0:	682b      	ldrmi	r3, [r5, #0]
 800f5c2:	6828      	ldr	r0, [r5, #0]
 800f5c4:	bf44      	itt	mi
 800f5c6:	2202      	movmi	r2, #2
 800f5c8:	615a      	strmi	r2, [r3, #20]
 800f5ca:	f002 fedb 	bl	8012384 <USB_ReadInterrupts>
 800f5ce:	0083      	lsls	r3, r0, #2
 800f5d0:	d50e      	bpl.n	800f5f0 <HAL_HCD_IRQHandler+0x98>
 800f5d2:	682b      	ldr	r3, [r5, #0]
 800f5d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f5d8:	615a      	str	r2, [r3, #20]
 800f5da:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 800f5de:	07df      	lsls	r7, r3, #31
 800f5e0:	d406      	bmi.n	800f5f0 <HAL_HCD_IRQHandler+0x98>
 800f5e2:	4628      	mov	r0, r5
 800f5e4:	f006 fb96 	bl	8015d14 <HAL_HCD_Disconnect_Callback>
 800f5e8:	2101      	movs	r1, #1
 800f5ea:	6828      	ldr	r0, [r5, #0]
 800f5ec:	f002 fed2 	bl	8012394 <USB_InitFSLSPClkSel>
 800f5f0:	6828      	ldr	r0, [r5, #0]
 800f5f2:	f002 fec7 	bl	8012384 <USB_ReadInterrupts>
 800f5f6:	01c4      	lsls	r4, r0, #7
 800f5f8:	d53c      	bpl.n	800f674 <HAL_HCD_IRQHandler+0x11c>
 800f5fa:	682c      	ldr	r4, [r5, #0]
 800f5fc:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800f600:	9302      	str	r3, [sp, #8]
 800f602:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800f606:	9303      	str	r3, [sp, #12]
 800f608:	9b03      	ldr	r3, [sp, #12]
 800f60a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f60e:	9303      	str	r3, [sp, #12]
 800f610:	9b02      	ldr	r3, [sp, #8]
 800f612:	0798      	lsls	r0, r3, #30
 800f614:	d509      	bpl.n	800f62a <HAL_HCD_IRQHandler+0xd2>
 800f616:	9b02      	ldr	r3, [sp, #8]
 800f618:	07d9      	lsls	r1, r3, #31
 800f61a:	d502      	bpl.n	800f622 <HAL_HCD_IRQHandler+0xca>
 800f61c:	4628      	mov	r0, r5
 800f61e:	f006 fb75 	bl	8015d0c <HAL_HCD_Connect_Callback>
 800f622:	9b03      	ldr	r3, [sp, #12]
 800f624:	f043 0302 	orr.w	r3, r3, #2
 800f628:	9303      	str	r3, [sp, #12]
 800f62a:	9b02      	ldr	r3, [sp, #8]
 800f62c:	071a      	lsls	r2, r3, #28
 800f62e:	d517      	bpl.n	800f660 <HAL_HCD_IRQHandler+0x108>
 800f630:	9b03      	ldr	r3, [sp, #12]
 800f632:	f043 0308 	orr.w	r3, r3, #8
 800f636:	9303      	str	r3, [sp, #12]
 800f638:	9b02      	ldr	r3, [sp, #8]
 800f63a:	075b      	lsls	r3, r3, #29
 800f63c:	f140 8086 	bpl.w	800f74c <HAL_HCD_IRQHandler+0x1f4>
 800f640:	69a9      	ldr	r1, [r5, #24]
 800f642:	2902      	cmp	r1, #2
 800f644:	d17a      	bne.n	800f73c <HAL_HCD_IRQHandler+0x1e4>
 800f646:	9b02      	ldr	r3, [sp, #8]
 800f648:	6828      	ldr	r0, [r5, #0]
 800f64a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800f64e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f652:	bf18      	it	ne
 800f654:	2101      	movne	r1, #1
 800f656:	f002 fe9d 	bl	8012394 <USB_InitFSLSPClkSel>
 800f65a:	4628      	mov	r0, r5
 800f65c:	f006 fb5f 	bl	8015d1e <HAL_HCD_PortEnabled_Callback>
 800f660:	9b02      	ldr	r3, [sp, #8]
 800f662:	069f      	lsls	r7, r3, #26
 800f664:	bf42      	ittt	mi
 800f666:	9b03      	ldrmi	r3, [sp, #12]
 800f668:	f043 0320 	orrmi.w	r3, r3, #32
 800f66c:	9303      	strmi	r3, [sp, #12]
 800f66e:	9b03      	ldr	r3, [sp, #12]
 800f670:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
 800f674:	6828      	ldr	r0, [r5, #0]
 800f676:	f002 fe85 	bl	8012384 <USB_ReadInterrupts>
 800f67a:	0704      	lsls	r4, r0, #28
 800f67c:	d505      	bpl.n	800f68a <HAL_HCD_IRQHandler+0x132>
 800f67e:	4628      	mov	r0, r5
 800f680:	f006 fb40 	bl	8015d04 <HAL_HCD_SOF_Callback>
 800f684:	682b      	ldr	r3, [r5, #0]
 800f686:	2208      	movs	r2, #8
 800f688:	615a      	str	r2, [r3, #20]
 800f68a:	6828      	ldr	r0, [r5, #0]
 800f68c:	f002 fe7a 	bl	8012384 <USB_ReadInterrupts>
 800f690:	0180      	lsls	r0, r0, #6
 800f692:	d512      	bpl.n	800f6ba <HAL_HCD_IRQHandler+0x162>
 800f694:	6828      	ldr	r0, [r5, #0]
 800f696:	f002 ffda 	bl	801264e <USB_HC_ReadInterrupt>
 800f69a:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 800f69e:	9000      	str	r0, [sp, #0]
 800f6a0:	f04f 0900 	mov.w	r9, #0
 800f6a4:	9301      	str	r3, [sp, #4]
 800f6a6:	2728      	movs	r7, #40	; 0x28
 800f6a8:	f04f 0802 	mov.w	r8, #2
 800f6ac:	68ab      	ldr	r3, [r5, #8]
 800f6ae:	6828      	ldr	r0, [r5, #0]
 800f6b0:	454b      	cmp	r3, r9
 800f6b2:	d84f      	bhi.n	800f754 <HAL_HCD_IRQHandler+0x1fc>
 800f6b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f6b8:	6143      	str	r3, [r0, #20]
 800f6ba:	6828      	ldr	r0, [r5, #0]
 800f6bc:	f002 fe62 	bl	8012384 <USB_ReadInterrupts>
 800f6c0:	06c3      	lsls	r3, r0, #27
 800f6c2:	d538      	bpl.n	800f736 <HAL_HCD_IRQHandler+0x1de>
 800f6c4:	682c      	ldr	r4, [r5, #0]
 800f6c6:	69a3      	ldr	r3, [r4, #24]
 800f6c8:	f023 0310 	bic.w	r3, r3, #16
 800f6cc:	61a3      	str	r3, [r4, #24]
 800f6ce:	6a26      	ldr	r6, [r4, #32]
 800f6d0:	f3c6 4243 	ubfx	r2, r6, #17, #4
 800f6d4:	2a02      	cmp	r2, #2
 800f6d6:	d129      	bne.n	800f72c <HAL_HCD_IRQHandler+0x1d4>
 800f6d8:	f3c6 180a 	ubfx	r8, r6, #4, #11
 800f6dc:	f1b8 0f00 	cmp.w	r8, #0
 800f6e0:	d024      	beq.n	800f72c <HAL_HCD_IRQHandler+0x1d4>
 800f6e2:	f006 060f 	and.w	r6, r6, #15
 800f6e6:	2728      	movs	r7, #40	; 0x28
 800f6e8:	fb07 5706 	mla	r7, r7, r6, r5
 800f6ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6ee:	b1e9      	cbz	r1, 800f72c <HAL_HCD_IRQHandler+0x1d4>
 800f6f0:	4642      	mov	r2, r8
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	f002 fe38 	bl	8012368 <USB_ReadPacket>
 800f6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6fa:	4443      	add	r3, r8
 800f6fc:	647b      	str	r3, [r7, #68]	; 0x44
 800f6fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f700:	4443      	add	r3, r8
 800f702:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f704:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
 800f708:	0173      	lsls	r3, r6, #5
 800f70a:	18e2      	adds	r2, r4, r3
 800f70c:	6911      	ldr	r1, [r2, #16]
 800f70e:	4ab1      	ldr	r2, [pc, #708]	; (800f9d4 <HAL_HCD_IRQHandler+0x47c>)
 800f710:	400a      	ands	r2, r1
 800f712:	b15a      	cbz	r2, 800f72c <HAL_HCD_IRQHandler+0x1d4>
 800f714:	58e2      	ldr	r2, [r4, r3]
 800f716:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800f71a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f71e:	50e2      	str	r2, [r4, r3]
 800f720:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800f724:	f083 0301 	eor.w	r3, r3, #1
 800f728:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800f72c:	682a      	ldr	r2, [r5, #0]
 800f72e:	6993      	ldr	r3, [r2, #24]
 800f730:	f043 0310 	orr.w	r3, r3, #16
 800f734:	6193      	str	r3, [r2, #24]
 800f736:	b005      	add	sp, #20
 800f738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f73c:	68eb      	ldr	r3, [r5, #12]
 800f73e:	2b01      	cmp	r3, #1
 800f740:	bf04      	itt	eq
 800f742:	f64e 2260 	movweq	r2, #60000	; 0xea60
 800f746:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 800f74a:	e786      	b.n	800f65a <HAL_HCD_IRQHandler+0x102>
 800f74c:	4628      	mov	r0, r5
 800f74e:	f006 faea 	bl	8015d26 <HAL_HCD_PortDisabled_Callback>
 800f752:	e785      	b.n	800f660 <HAL_HCD_IRQHandler+0x108>
 800f754:	9a00      	ldr	r2, [sp, #0]
 800f756:	f009 030f 	and.w	r3, r9, #15
 800f75a:	fa22 f303 	lsr.w	r3, r2, r3
 800f75e:	07d9      	lsls	r1, r3, #31
 800f760:	f140 8095 	bpl.w	800f88e <HAL_HCD_IRQHandler+0x336>
 800f764:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800f768:	9a01      	ldr	r2, [sp, #4]
 800f76a:	fa5f f689 	uxtb.w	r6, r9
 800f76e:	58d1      	ldr	r1, [r2, r3]
 800f770:	f500 6ba0 	add.w	fp, r0, #1280	; 0x500
 800f774:	ea4f 1a46 	mov.w	sl, r6, lsl #5
 800f778:	eb0b 040a 	add.w	r4, fp, sl
 800f77c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800f780:	68a1      	ldr	r1, [r4, #8]
 800f782:	f000 811d 	beq.w	800f9c0 <HAL_HCD_IRQHandler+0x468>
 800f786:	074a      	lsls	r2, r1, #29
 800f788:	d513      	bpl.n	800f7b2 <HAL_HCD_IRQHandler+0x25a>
 800f78a:	2104      	movs	r1, #4
 800f78c:	60a1      	str	r1, [r4, #8]
 800f78e:	68e1      	ldr	r1, [r4, #12]
 800f790:	f041 0102 	orr.w	r1, r1, #2
 800f794:	60e1      	str	r1, [r4, #12]
 800f796:	68a1      	ldr	r1, [r4, #8]
 800f798:	0588      	lsls	r0, r1, #22
 800f79a:	d54a      	bpl.n	800f832 <HAL_HCD_IRQHandler+0x2da>
 800f79c:	68e3      	ldr	r3, [r4, #12]
 800f79e:	6828      	ldr	r0, [r5, #0]
 800f7a0:	f043 0302 	orr.w	r3, r3, #2
 800f7a4:	60e3      	str	r3, [r4, #12]
 800f7a6:	4631      	mov	r1, r6
 800f7a8:	f002 ff56 	bl	8012658 <USB_HC_Halt>
 800f7ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7b0:	e0e6      	b.n	800f980 <HAL_HCD_IRQHandler+0x428>
 800f7b2:	68a1      	ldr	r1, [r4, #8]
 800f7b4:	05cb      	lsls	r3, r1, #23
 800f7b6:	d510      	bpl.n	800f7da <HAL_HCD_IRQHandler+0x282>
 800f7b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f7bc:	60a1      	str	r1, [r4, #8]
 800f7be:	fb07 5106 	mla	r1, r7, r6, r5
 800f7c2:	f04f 0c07 	mov.w	ip, #7
 800f7c6:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
 800f7ca:	68e1      	ldr	r1, [r4, #12]
 800f7cc:	f041 0102 	orr.w	r1, r1, #2
 800f7d0:	60e1      	str	r1, [r4, #12]
 800f7d2:	4631      	mov	r1, r6
 800f7d4:	f002 ff40 	bl	8012658 <USB_HC_Halt>
 800f7d8:	e7dd      	b.n	800f796 <HAL_HCD_IRQHandler+0x23e>
 800f7da:	68a1      	ldr	r1, [r4, #8]
 800f7dc:	0689      	lsls	r1, r1, #26
 800f7de:	d502      	bpl.n	800f7e6 <HAL_HCD_IRQHandler+0x28e>
 800f7e0:	2120      	movs	r1, #32
 800f7e2:	60a1      	str	r1, [r4, #8]
 800f7e4:	e7d7      	b.n	800f796 <HAL_HCD_IRQHandler+0x23e>
 800f7e6:	68a1      	ldr	r1, [r4, #8]
 800f7e8:	070a      	lsls	r2, r1, #28
 800f7ea:	d50e      	bpl.n	800f80a <HAL_HCD_IRQHandler+0x2b2>
 800f7ec:	68e1      	ldr	r1, [r4, #12]
 800f7ee:	f041 0102 	orr.w	r1, r1, #2
 800f7f2:	60e1      	str	r1, [r4, #12]
 800f7f4:	fb07 5106 	mla	r1, r7, r6, r5
 800f7f8:	f04f 0c05 	mov.w	ip, #5
 800f7fc:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
 800f800:	2110      	movs	r1, #16
 800f802:	60a1      	str	r1, [r4, #8]
 800f804:	2108      	movs	r1, #8
 800f806:	60a1      	str	r1, [r4, #8]
 800f808:	e7e3      	b.n	800f7d2 <HAL_HCD_IRQHandler+0x27a>
 800f80a:	68a1      	ldr	r1, [r4, #8]
 800f80c:	054b      	lsls	r3, r1, #21
 800f80e:	d5c2      	bpl.n	800f796 <HAL_HCD_IRQHandler+0x23e>
 800f810:	68e1      	ldr	r1, [r4, #12]
 800f812:	f041 0102 	orr.w	r1, r1, #2
 800f816:	60e1      	str	r1, [r4, #12]
 800f818:	4631      	mov	r1, r6
 800f81a:	f002 ff1d 	bl	8012658 <USB_HC_Halt>
 800f81e:	2110      	movs	r1, #16
 800f820:	60a1      	str	r1, [r4, #8]
 800f822:	fb07 5106 	mla	r1, r7, r6, r5
 800f826:	2008      	movs	r0, #8
 800f828:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
 800f82c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f830:	e7d7      	b.n	800f7e2 <HAL_HCD_IRQHandler+0x28a>
 800f832:	68a1      	ldr	r1, [r4, #8]
 800f834:	07c9      	lsls	r1, r1, #31
 800f836:	d548      	bpl.n	800f8ca <HAL_HCD_IRQHandler+0x372>
 800f838:	6929      	ldr	r1, [r5, #16]
 800f83a:	b149      	cbz	r1, 800f850 <HAL_HCD_IRQHandler+0x2f8>
 800f83c:	fb07 5c06 	mla	ip, r7, r6, r5
 800f840:	6920      	ldr	r0, [r4, #16]
 800f842:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 800f846:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800f84a:	1a09      	subs	r1, r1, r0
 800f84c:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
 800f850:	fb07 5106 	mla	r1, r7, r6, r5
 800f854:	2301      	movs	r3, #1
 800f856:	2000      	movs	r0, #0
 800f858:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
 800f85c:	6588      	str	r0, [r1, #88]	; 0x58
 800f85e:	60a3      	str	r3, [r4, #8]
 800f860:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 800f864:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 800f868:	d114      	bne.n	800f894 <HAL_HCD_IRQHandler+0x33c>
 800f86a:	68e3      	ldr	r3, [r4, #12]
 800f86c:	6828      	ldr	r0, [r5, #0]
 800f86e:	f043 0302 	orr.w	r3, r3, #2
 800f872:	60e3      	str	r3, [r4, #12]
 800f874:	4631      	mov	r1, r6
 800f876:	f002 feef 	bl	8012658 <USB_HC_Halt>
 800f87a:	2310      	movs	r3, #16
 800f87c:	60a3      	str	r3, [r4, #8]
 800f87e:	fb07 5606 	mla	r6, r7, r6, r5
 800f882:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 800f886:	f083 0301 	eor.w	r3, r3, #1
 800f88a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800f88e:	f109 0901 	add.w	r9, r9, #1
 800f892:	e70b      	b.n	800f6ac <HAL_HCD_IRQHandler+0x154>
 800f894:	2a03      	cmp	r2, #3
 800f896:	d10d      	bne.n	800f8b4 <HAL_HCD_IRQHandler+0x35c>
 800f898:	f85b 000a 	ldr.w	r0, [fp, sl]
 800f89c:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800f8a0:	f84b 000a 	str.w	r0, [fp, sl]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
 800f8aa:	4631      	mov	r1, r6
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	f006 fa35 	bl	8015d1c <HAL_HCD_HC_NotifyURBChange_Callback>
 800f8b2:	e7e4      	b.n	800f87e <HAL_HCD_IRQHandler+0x326>
 800f8b4:	2a01      	cmp	r2, #1
 800f8b6:	d1e2      	bne.n	800f87e <HAL_HCD_IRQHandler+0x326>
 800f8b8:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
 800f8bc:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
 800f8c0:	f083 0301 	eor.w	r3, r3, #1
 800f8c4:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
 800f8c8:	e7ef      	b.n	800f8aa <HAL_HCD_IRQHandler+0x352>
 800f8ca:	68a1      	ldr	r1, [r4, #8]
 800f8cc:	078a      	lsls	r2, r1, #30
 800f8ce:	d542      	bpl.n	800f956 <HAL_HCD_IRQHandler+0x3fe>
 800f8d0:	68e1      	ldr	r1, [r4, #12]
 800f8d2:	fb07 5006 	mla	r0, r7, r6, r5
 800f8d6:	f021 0102 	bic.w	r1, r1, #2
 800f8da:	60e1      	str	r1, [r4, #12]
 800f8dc:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 800f8e0:	2901      	cmp	r1, #1
 800f8e2:	d102      	bne.n	800f8ea <HAL_HCD_IRQHandler+0x392>
 800f8e4:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 800f8e8:	e02a      	b.n	800f940 <HAL_HCD_IRQHandler+0x3e8>
 800f8ea:	2905      	cmp	r1, #5
 800f8ec:	d0fa      	beq.n	800f8e4 <HAL_HCD_IRQHandler+0x38c>
 800f8ee:	2906      	cmp	r1, #6
 800f8f0:	d001      	beq.n	800f8f6 <HAL_HCD_IRQHandler+0x39e>
 800f8f2:	2908      	cmp	r1, #8
 800f8f4:	d10f      	bne.n	800f916 <HAL_HCD_IRQHandler+0x3be>
 800f8f6:	fb07 5106 	mla	r1, r7, r6, r5
 800f8fa:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	2803      	cmp	r0, #3
 800f900:	6588      	str	r0, [r1, #88]	; 0x58
 800f902:	bf81      	itttt	hi
 800f904:	2000      	movhi	r0, #0
 800f906:	6588      	strhi	r0, [r1, #88]	; 0x58
 800f908:	2004      	movhi	r0, #4
 800f90a:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
 800f90e:	bf98      	it	ls
 800f910:	f881 805c 	strbls.w	r8, [r1, #92]	; 0x5c
 800f914:	e003      	b.n	800f91e <HAL_HCD_IRQHandler+0x3c6>
 800f916:	2903      	cmp	r1, #3
 800f918:	d10a      	bne.n	800f930 <HAL_HCD_IRQHandler+0x3d8>
 800f91a:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 800f91e:	f85b 100a 	ldr.w	r1, [fp, sl]
 800f922:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 800f926:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800f92a:	f84b 100a 	str.w	r1, [fp, sl]
 800f92e:	e007      	b.n	800f940 <HAL_HCD_IRQHandler+0x3e8>
 800f930:	2907      	cmp	r1, #7
 800f932:	d105      	bne.n	800f940 <HAL_HCD_IRQHandler+0x3e8>
 800f934:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800f936:	3301      	adds	r3, #1
 800f938:	6583      	str	r3, [r0, #88]	; 0x58
 800f93a:	2304      	movs	r3, #4
 800f93c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 800f940:	fb07 5306 	mla	r3, r7, r6, r5
 800f944:	f8c4 8008 	str.w	r8, [r4, #8]
 800f948:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800f94c:	4631      	mov	r1, r6
 800f94e:	4628      	mov	r0, r5
 800f950:	f006 f9e4 	bl	8015d1c <HAL_HCD_HC_NotifyURBChange_Callback>
 800f954:	e79b      	b.n	800f88e <HAL_HCD_IRQHandler+0x336>
 800f956:	68a1      	ldr	r1, [r4, #8]
 800f958:	6828      	ldr	r0, [r5, #0]
 800f95a:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800f95e:	d011      	beq.n	800f984 <HAL_HCD_IRQHandler+0x42c>
 800f960:	68e3      	ldr	r3, [r4, #12]
 800f962:	fb07 5206 	mla	r2, r7, r6, r5
 800f966:	f043 0302 	orr.w	r3, r3, #2
 800f96a:	60e3      	str	r3, [r4, #12]
 800f96c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f96e:	3301      	adds	r3, #1
 800f970:	6593      	str	r3, [r2, #88]	; 0x58
 800f972:	2306      	movs	r3, #6
 800f974:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 800f978:	4631      	mov	r1, r6
 800f97a:	f002 fe6d 	bl	8012658 <USB_HC_Halt>
 800f97e:	2380      	movs	r3, #128	; 0x80
 800f980:	60a3      	str	r3, [r4, #8]
 800f982:	e784      	b.n	800f88e <HAL_HCD_IRQHandler+0x336>
 800f984:	68a3      	ldr	r3, [r4, #8]
 800f986:	06db      	lsls	r3, r3, #27
 800f988:	d581      	bpl.n	800f88e <HAL_HCD_IRQHandler+0x336>
 800f98a:	fb07 5206 	mla	r2, r7, r6, r5
 800f98e:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800f992:	2b03      	cmp	r3, #3
 800f994:	d109      	bne.n	800f9aa <HAL_HCD_IRQHandler+0x452>
 800f996:	6591      	str	r1, [r2, #88]	; 0x58
 800f998:	68e3      	ldr	r3, [r4, #12]
 800f99a:	f043 0302 	orr.w	r3, r3, #2
 800f99e:	60e3      	str	r3, [r4, #12]
 800f9a0:	4631      	mov	r1, r6
 800f9a2:	f002 fe59 	bl	8012658 <USB_HC_Halt>
 800f9a6:	2310      	movs	r3, #16
 800f9a8:	e7ea      	b.n	800f980 <HAL_HCD_IRQHandler+0x428>
 800f9aa:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 800f9ae:	d1fa      	bne.n	800f9a6 <HAL_HCD_IRQHandler+0x44e>
 800f9b0:	6593      	str	r3, [r2, #88]	; 0x58
 800f9b2:	692b      	ldr	r3, [r5, #16]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1f6      	bne.n	800f9a6 <HAL_HCD_IRQHandler+0x44e>
 800f9b8:	2303      	movs	r3, #3
 800f9ba:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 800f9be:	e7eb      	b.n	800f998 <HAL_HCD_IRQHandler+0x440>
 800f9c0:	f011 0c04 	ands.w	ip, r1, #4
 800f9c4:	d008      	beq.n	800f9d8 <HAL_HCD_IRQHandler+0x480>
 800f9c6:	2304      	movs	r3, #4
 800f9c8:	60a3      	str	r3, [r4, #8]
 800f9ca:	68e3      	ldr	r3, [r4, #12]
 800f9cc:	f043 0302 	orr.w	r3, r3, #2
 800f9d0:	60e3      	str	r3, [r4, #12]
 800f9d2:	e75c      	b.n	800f88e <HAL_HCD_IRQHandler+0x336>
 800f9d4:	1ff80000 	.word	0x1ff80000
 800f9d8:	68a1      	ldr	r1, [r4, #8]
 800f9da:	f011 0120 	ands.w	r1, r1, #32
 800f9de:	d014      	beq.n	800fa0a <HAL_HCD_IRQHandler+0x4b2>
 800f9e0:	2320      	movs	r3, #32
 800f9e2:	60a3      	str	r3, [r4, #8]
 800f9e4:	fb07 5306 	mla	r3, r7, r6, r5
 800f9e8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800f9ec:	2a01      	cmp	r2, #1
 800f9ee:	f47f af4e 	bne.w	800f88e <HAL_HCD_IRQHandler+0x336>
 800f9f2:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
 800f9f6:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
 800f9fa:	68e3      	ldr	r3, [r4, #12]
 800f9fc:	f043 0302 	orr.w	r3, r3, #2
 800fa00:	60e3      	str	r3, [r4, #12]
 800fa02:	4631      	mov	r1, r6
 800fa04:	f002 fe28 	bl	8012658 <USB_HC_Halt>
 800fa08:	e741      	b.n	800f88e <HAL_HCD_IRQHandler+0x336>
 800fa0a:	68a3      	ldr	r3, [r4, #8]
 800fa0c:	065a      	lsls	r2, r3, #25
 800fa0e:	d511      	bpl.n	800fa34 <HAL_HCD_IRQHandler+0x4dc>
 800fa10:	fb07 5306 	mla	r3, r7, r6, r5
 800fa14:	2204      	movs	r2, #4
 800fa16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800fa20:	6599      	str	r1, [r3, #88]	; 0x58
 800fa22:	68e3      	ldr	r3, [r4, #12]
 800fa24:	f043 0302 	orr.w	r3, r3, #2
 800fa28:	60e3      	str	r3, [r4, #12]
 800fa2a:	4631      	mov	r1, r6
 800fa2c:	f002 fe14 	bl	8012658 <USB_HC_Halt>
 800fa30:	2340      	movs	r3, #64	; 0x40
 800fa32:	e7a5      	b.n	800f980 <HAL_HCD_IRQHandler+0x428>
 800fa34:	68a1      	ldr	r1, [r4, #8]
 800fa36:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 800fa3a:	d005      	beq.n	800fa48 <HAL_HCD_IRQHandler+0x4f0>
 800fa3c:	68e3      	ldr	r3, [r4, #12]
 800fa3e:	f043 0302 	orr.w	r3, r3, #2
 800fa42:	60e3      	str	r3, [r4, #12]
 800fa44:	4631      	mov	r1, r6
 800fa46:	e6af      	b.n	800f7a8 <HAL_HCD_IRQHandler+0x250>
 800fa48:	68a3      	ldr	r3, [r4, #8]
 800fa4a:	07db      	lsls	r3, r3, #31
 800fa4c:	d50f      	bpl.n	800fa6e <HAL_HCD_IRQHandler+0x516>
 800fa4e:	68e2      	ldr	r2, [r4, #12]
 800fa50:	fb07 5a06 	mla	sl, r7, r6, r5
 800fa54:	f042 0202 	orr.w	r2, r2, #2
 800fa58:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
 800fa5c:	60e2      	str	r2, [r4, #12]
 800fa5e:	4631      	mov	r1, r6
 800fa60:	f002 fdfa 	bl	8012658 <USB_HC_Halt>
 800fa64:	2201      	movs	r2, #1
 800fa66:	60a2      	str	r2, [r4, #8]
 800fa68:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 800fa6c:	e70f      	b.n	800f88e <HAL_HCD_IRQHandler+0x336>
 800fa6e:	68a1      	ldr	r1, [r4, #8]
 800fa70:	0709      	lsls	r1, r1, #28
 800fa72:	d50e      	bpl.n	800fa92 <HAL_HCD_IRQHandler+0x53a>
 800fa74:	2308      	movs	r3, #8
 800fa76:	60a3      	str	r3, [r4, #8]
 800fa78:	68e3      	ldr	r3, [r4, #12]
 800fa7a:	f043 0302 	orr.w	r3, r3, #2
 800fa7e:	60e3      	str	r3, [r4, #12]
 800fa80:	4631      	mov	r1, r6
 800fa82:	f002 fde9 	bl	8012658 <USB_HC_Halt>
 800fa86:	fb07 5606 	mla	r6, r7, r6, r5
 800fa8a:	2305      	movs	r3, #5
 800fa8c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 800fa90:	e6fd      	b.n	800f88e <HAL_HCD_IRQHandler+0x336>
 800fa92:	68a1      	ldr	r1, [r4, #8]
 800fa94:	06ca      	lsls	r2, r1, #27
 800fa96:	d514      	bpl.n	800fac2 <HAL_HCD_IRQHandler+0x56a>
 800fa98:	fb07 5306 	mla	r3, r7, r6, r5
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	659a      	str	r2, [r3, #88]	; 0x58
 800faa0:	2203      	movs	r2, #3
 800faa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800faa6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800faaa:	2a00      	cmp	r2, #0
 800faac:	f47f af74 	bne.w	800f998 <HAL_HCD_IRQHandler+0x440>
 800fab0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800fab4:	2a00      	cmp	r2, #0
 800fab6:	f47f af6f 	bne.w	800f998 <HAL_HCD_IRQHandler+0x440>
 800faba:	2201      	movs	r2, #1
 800fabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800fac0:	e76a      	b.n	800f998 <HAL_HCD_IRQHandler+0x440>
 800fac2:	68a1      	ldr	r1, [r4, #8]
 800fac4:	060b      	lsls	r3, r1, #24
 800fac6:	d50c      	bpl.n	800fae2 <HAL_HCD_IRQHandler+0x58a>
 800fac8:	68e3      	ldr	r3, [r4, #12]
 800faca:	f043 0302 	orr.w	r3, r3, #2
 800face:	60e3      	str	r3, [r4, #12]
 800fad0:	4631      	mov	r1, r6
 800fad2:	fb07 5606 	mla	r6, r7, r6, r5
 800fad6:	f002 fdbf 	bl	8012658 <USB_HC_Halt>
 800fada:	2306      	movs	r3, #6
 800fadc:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 800fae0:	e74d      	b.n	800f97e <HAL_HCD_IRQHandler+0x426>
 800fae2:	68a1      	ldr	r1, [r4, #8]
 800fae4:	0549      	lsls	r1, r1, #21
 800fae6:	d50f      	bpl.n	800fb08 <HAL_HCD_IRQHandler+0x5b0>
 800fae8:	68e3      	ldr	r3, [r4, #12]
 800faea:	f043 0302 	orr.w	r3, r3, #2
 800faee:	60e3      	str	r3, [r4, #12]
 800faf0:	4631      	mov	r1, r6
 800faf2:	f002 fdb1 	bl	8012658 <USB_HC_Halt>
 800faf6:	2310      	movs	r3, #16
 800faf8:	60a3      	str	r3, [r4, #8]
 800fafa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fafe:	60a3      	str	r3, [r4, #8]
 800fb00:	fb07 5606 	mla	r6, r7, r6, r5
 800fb04:	2308      	movs	r3, #8
 800fb06:	e7c1      	b.n	800fa8c <HAL_HCD_IRQHandler+0x534>
 800fb08:	68a1      	ldr	r1, [r4, #8]
 800fb0a:	078a      	lsls	r2, r1, #30
 800fb0c:	f57f aebf 	bpl.w	800f88e <HAL_HCD_IRQHandler+0x336>
 800fb10:	68e1      	ldr	r1, [r4, #12]
 800fb12:	fb07 5006 	mla	r0, r7, r6, r5
 800fb16:	f021 0102 	bic.w	r1, r1, #2
 800fb1a:	60e1      	str	r1, [r4, #12]
 800fb1c:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 800fb20:	2901      	cmp	r1, #1
 800fb22:	d10e      	bne.n	800fb42 <HAL_HCD_IRQHandler+0x5ea>
 800fb24:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800fb28:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 800fb2c:	3b02      	subs	r3, #2
 800fb2e:	2b01      	cmp	r3, #1
 800fb30:	f63f af06 	bhi.w	800f940 <HAL_HCD_IRQHandler+0x3e8>
 800fb34:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800fb38:	f083 0301 	eor.w	r3, r3, #1
 800fb3c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 800fb40:	e6fe      	b.n	800f940 <HAL_HCD_IRQHandler+0x3e8>
 800fb42:	2903      	cmp	r1, #3
 800fb44:	d102      	bne.n	800fb4c <HAL_HCD_IRQHandler+0x5f4>
 800fb46:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 800fb4a:	e6f9      	b.n	800f940 <HAL_HCD_IRQHandler+0x3e8>
 800fb4c:	2904      	cmp	r1, #4
 800fb4e:	d0fa      	beq.n	800fb46 <HAL_HCD_IRQHandler+0x5ee>
 800fb50:	2905      	cmp	r1, #5
 800fb52:	f43f aec7 	beq.w	800f8e4 <HAL_HCD_IRQHandler+0x38c>
 800fb56:	2906      	cmp	r1, #6
 800fb58:	f43f aecd 	beq.w	800f8f6 <HAL_HCD_IRQHandler+0x39e>
 800fb5c:	2908      	cmp	r1, #8
 800fb5e:	f47f aeef 	bne.w	800f940 <HAL_HCD_IRQHandler+0x3e8>
 800fb62:	e6c8      	b.n	800f8f6 <HAL_HCD_IRQHandler+0x39e>

0800fb64 <HAL_HCD_Start>:
 800fb64:	b538      	push	{r3, r4, r5, lr}
 800fb66:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	4604      	mov	r4, r0
 800fb6e:	d00d      	beq.n	800fb8c <HAL_HCD_Start+0x28>
 800fb70:	2501      	movs	r5, #1
 800fb72:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
 800fb76:	6800      	ldr	r0, [r0, #0]
 800fb78:	f002 fb9c 	bl	80122b4 <USB_EnableGlobalInt>
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	6820      	ldr	r0, [r4, #0]
 800fb80:	f002 fc42 	bl	8012408 <USB_DriveVbus>
 800fb84:	2000      	movs	r0, #0
 800fb86:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
 800fb8a:	bd38      	pop	{r3, r4, r5, pc}
 800fb8c:	2002      	movs	r0, #2
 800fb8e:	e7fc      	b.n	800fb8a <HAL_HCD_Start+0x26>

0800fb90 <HAL_HCD_Stop>:
 800fb90:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	b510      	push	{r4, lr}
 800fb98:	4604      	mov	r4, r0
 800fb9a:	d009      	beq.n	800fbb0 <HAL_HCD_Stop+0x20>
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
 800fba2:	6800      	ldr	r0, [r0, #0]
 800fba4:	f002 fe68 	bl	8012878 <USB_StopHost>
 800fba8:	2000      	movs	r0, #0
 800fbaa:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
 800fbae:	bd10      	pop	{r4, pc}
 800fbb0:	2002      	movs	r0, #2
 800fbb2:	e7fc      	b.n	800fbae <HAL_HCD_Stop+0x1e>

0800fbb4 <HAL_HCD_ResetPort>:
 800fbb4:	6800      	ldr	r0, [r0, #0]
 800fbb6:	f002 bc09 	b.w	80123cc <USB_ResetPort>

0800fbba <HAL_HCD_HC_GetURBState>:
 800fbba:	2328      	movs	r3, #40	; 0x28
 800fbbc:	fb03 0101 	mla	r1, r3, r1, r0
 800fbc0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800fbc4:	4770      	bx	lr

0800fbc6 <HAL_HCD_HC_GetXferCount>:
 800fbc6:	2328      	movs	r3, #40	; 0x28
 800fbc8:	fb03 0101 	mla	r1, r3, r1, r0
 800fbcc:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800fbce:	4770      	bx	lr

0800fbd0 <HAL_HCD_GetCurrentFrame>:
 800fbd0:	6800      	ldr	r0, [r0, #0]
 800fbd2:	f002 bcb4 	b.w	801253e <USB_GetCurrentFrame>

0800fbd6 <HAL_HCD_GetCurrentSpeed>:
 800fbd6:	6800      	ldr	r0, [r0, #0]
 800fbd8:	f002 bca6 	b.w	8012528 <USB_GetHostSpeed>

0800fbdc <HAL_RCC_OscConfig>:
 800fbdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	b908      	cbnz	r0, 800fbe8 <HAL_RCC_OscConfig+0xc>
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	e03f      	b.n	800fc68 <HAL_RCC_OscConfig+0x8c>
 800fbe8:	6803      	ldr	r3, [r0, #0]
 800fbea:	07dd      	lsls	r5, r3, #31
 800fbec:	d410      	bmi.n	800fc10 <HAL_RCC_OscConfig+0x34>
 800fbee:	6823      	ldr	r3, [r4, #0]
 800fbf0:	0798      	lsls	r0, r3, #30
 800fbf2:	d45a      	bmi.n	800fcaa <HAL_RCC_OscConfig+0xce>
 800fbf4:	6823      	ldr	r3, [r4, #0]
 800fbf6:	071a      	lsls	r2, r3, #28
 800fbf8:	f100 809c 	bmi.w	800fd34 <HAL_RCC_OscConfig+0x158>
 800fbfc:	6823      	ldr	r3, [r4, #0]
 800fbfe:	075b      	lsls	r3, r3, #29
 800fc00:	f100 80ba 	bmi.w	800fd78 <HAL_RCC_OscConfig+0x19c>
 800fc04:	69a0      	ldr	r0, [r4, #24]
 800fc06:	2800      	cmp	r0, #0
 800fc08:	f040 811b 	bne.w	800fe42 <HAL_RCC_OscConfig+0x266>
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	e02b      	b.n	800fc68 <HAL_RCC_OscConfig+0x8c>
 800fc10:	4ba7      	ldr	r3, [pc, #668]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fc12:	689a      	ldr	r2, [r3, #8]
 800fc14:	f002 020c 	and.w	r2, r2, #12
 800fc18:	2a04      	cmp	r2, #4
 800fc1a:	d007      	beq.n	800fc2c <HAL_RCC_OscConfig+0x50>
 800fc1c:	689a      	ldr	r2, [r3, #8]
 800fc1e:	f002 020c 	and.w	r2, r2, #12
 800fc22:	2a08      	cmp	r2, #8
 800fc24:	d10a      	bne.n	800fc3c <HAL_RCC_OscConfig+0x60>
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	0259      	lsls	r1, r3, #9
 800fc2a:	d507      	bpl.n	800fc3c <HAL_RCC_OscConfig+0x60>
 800fc2c:	4ba0      	ldr	r3, [pc, #640]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	039a      	lsls	r2, r3, #14
 800fc32:	d5dc      	bpl.n	800fbee <HAL_RCC_OscConfig+0x12>
 800fc34:	6863      	ldr	r3, [r4, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1d9      	bne.n	800fbee <HAL_RCC_OscConfig+0x12>
 800fc3a:	e7d3      	b.n	800fbe4 <HAL_RCC_OscConfig+0x8>
 800fc3c:	6863      	ldr	r3, [r4, #4]
 800fc3e:	4d9c      	ldr	r5, [pc, #624]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fc40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc44:	d113      	bne.n	800fc6e <HAL_RCC_OscConfig+0x92>
 800fc46:	682b      	ldr	r3, [r5, #0]
 800fc48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fc4c:	602b      	str	r3, [r5, #0]
 800fc4e:	f7fe fe05 	bl	800e85c <HAL_GetTick>
 800fc52:	4d97      	ldr	r5, [pc, #604]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fc54:	4606      	mov	r6, r0
 800fc56:	682b      	ldr	r3, [r5, #0]
 800fc58:	039b      	lsls	r3, r3, #14
 800fc5a:	d4c8      	bmi.n	800fbee <HAL_RCC_OscConfig+0x12>
 800fc5c:	f7fe fdfe 	bl	800e85c <HAL_GetTick>
 800fc60:	1b80      	subs	r0, r0, r6
 800fc62:	2864      	cmp	r0, #100	; 0x64
 800fc64:	d9f7      	bls.n	800fc56 <HAL_RCC_OscConfig+0x7a>
 800fc66:	2003      	movs	r0, #3
 800fc68:	b002      	add	sp, #8
 800fc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fc72:	d104      	bne.n	800fc7e <HAL_RCC_OscConfig+0xa2>
 800fc74:	682b      	ldr	r3, [r5, #0]
 800fc76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fc7a:	602b      	str	r3, [r5, #0]
 800fc7c:	e7e3      	b.n	800fc46 <HAL_RCC_OscConfig+0x6a>
 800fc7e:	682a      	ldr	r2, [r5, #0]
 800fc80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fc84:	602a      	str	r2, [r5, #0]
 800fc86:	682a      	ldr	r2, [r5, #0]
 800fc88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fc8c:	602a      	str	r2, [r5, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d1dd      	bne.n	800fc4e <HAL_RCC_OscConfig+0x72>
 800fc92:	f7fe fde3 	bl	800e85c <HAL_GetTick>
 800fc96:	4606      	mov	r6, r0
 800fc98:	682b      	ldr	r3, [r5, #0]
 800fc9a:	039f      	lsls	r7, r3, #14
 800fc9c:	d5a7      	bpl.n	800fbee <HAL_RCC_OscConfig+0x12>
 800fc9e:	f7fe fddd 	bl	800e85c <HAL_GetTick>
 800fca2:	1b80      	subs	r0, r0, r6
 800fca4:	2864      	cmp	r0, #100	; 0x64
 800fca6:	d9f7      	bls.n	800fc98 <HAL_RCC_OscConfig+0xbc>
 800fca8:	e7dd      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800fcaa:	4b81      	ldr	r3, [pc, #516]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fcac:	689a      	ldr	r2, [r3, #8]
 800fcae:	f012 0f0c 	tst.w	r2, #12
 800fcb2:	d007      	beq.n	800fcc4 <HAL_RCC_OscConfig+0xe8>
 800fcb4:	689a      	ldr	r2, [r3, #8]
 800fcb6:	f002 020c 	and.w	r2, r2, #12
 800fcba:	2a08      	cmp	r2, #8
 800fcbc:	d111      	bne.n	800fce2 <HAL_RCC_OscConfig+0x106>
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	025e      	lsls	r6, r3, #9
 800fcc2:	d40e      	bmi.n	800fce2 <HAL_RCC_OscConfig+0x106>
 800fcc4:	4b7a      	ldr	r3, [pc, #488]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	0795      	lsls	r5, r2, #30
 800fcca:	d502      	bpl.n	800fcd2 <HAL_RCC_OscConfig+0xf6>
 800fccc:	68e2      	ldr	r2, [r4, #12]
 800fcce:	2a01      	cmp	r2, #1
 800fcd0:	d188      	bne.n	800fbe4 <HAL_RCC_OscConfig+0x8>
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	6921      	ldr	r1, [r4, #16]
 800fcd6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800fcda:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800fcde:	601a      	str	r2, [r3, #0]
 800fce0:	e788      	b.n	800fbf4 <HAL_RCC_OscConfig+0x18>
 800fce2:	68e2      	ldr	r2, [r4, #12]
 800fce4:	4b73      	ldr	r3, [pc, #460]	; (800feb4 <HAL_RCC_OscConfig+0x2d8>)
 800fce6:	b1b2      	cbz	r2, 800fd16 <HAL_RCC_OscConfig+0x13a>
 800fce8:	2201      	movs	r2, #1
 800fcea:	601a      	str	r2, [r3, #0]
 800fcec:	f7fe fdb6 	bl	800e85c <HAL_GetTick>
 800fcf0:	4d6f      	ldr	r5, [pc, #444]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	682b      	ldr	r3, [r5, #0]
 800fcf6:	0798      	lsls	r0, r3, #30
 800fcf8:	d507      	bpl.n	800fd0a <HAL_RCC_OscConfig+0x12e>
 800fcfa:	682b      	ldr	r3, [r5, #0]
 800fcfc:	6922      	ldr	r2, [r4, #16]
 800fcfe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fd02:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fd06:	602b      	str	r3, [r5, #0]
 800fd08:	e774      	b.n	800fbf4 <HAL_RCC_OscConfig+0x18>
 800fd0a:	f7fe fda7 	bl	800e85c <HAL_GetTick>
 800fd0e:	1b80      	subs	r0, r0, r6
 800fd10:	2802      	cmp	r0, #2
 800fd12:	d9ef      	bls.n	800fcf4 <HAL_RCC_OscConfig+0x118>
 800fd14:	e7a7      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800fd16:	601a      	str	r2, [r3, #0]
 800fd18:	f7fe fda0 	bl	800e85c <HAL_GetTick>
 800fd1c:	4d64      	ldr	r5, [pc, #400]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fd1e:	4606      	mov	r6, r0
 800fd20:	682b      	ldr	r3, [r5, #0]
 800fd22:	0799      	lsls	r1, r3, #30
 800fd24:	f57f af66 	bpl.w	800fbf4 <HAL_RCC_OscConfig+0x18>
 800fd28:	f7fe fd98 	bl	800e85c <HAL_GetTick>
 800fd2c:	1b80      	subs	r0, r0, r6
 800fd2e:	2802      	cmp	r0, #2
 800fd30:	d9f6      	bls.n	800fd20 <HAL_RCC_OscConfig+0x144>
 800fd32:	e798      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800fd34:	6962      	ldr	r2, [r4, #20]
 800fd36:	4b60      	ldr	r3, [pc, #384]	; (800feb8 <HAL_RCC_OscConfig+0x2dc>)
 800fd38:	b17a      	cbz	r2, 800fd5a <HAL_RCC_OscConfig+0x17e>
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	601a      	str	r2, [r3, #0]
 800fd3e:	f7fe fd8d 	bl	800e85c <HAL_GetTick>
 800fd42:	4d5b      	ldr	r5, [pc, #364]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fd44:	4606      	mov	r6, r0
 800fd46:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fd48:	079f      	lsls	r7, r3, #30
 800fd4a:	f53f af57 	bmi.w	800fbfc <HAL_RCC_OscConfig+0x20>
 800fd4e:	f7fe fd85 	bl	800e85c <HAL_GetTick>
 800fd52:	1b80      	subs	r0, r0, r6
 800fd54:	2802      	cmp	r0, #2
 800fd56:	d9f6      	bls.n	800fd46 <HAL_RCC_OscConfig+0x16a>
 800fd58:	e785      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800fd5a:	601a      	str	r2, [r3, #0]
 800fd5c:	f7fe fd7e 	bl	800e85c <HAL_GetTick>
 800fd60:	4d53      	ldr	r5, [pc, #332]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fd62:	4606      	mov	r6, r0
 800fd64:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fd66:	0798      	lsls	r0, r3, #30
 800fd68:	f57f af48 	bpl.w	800fbfc <HAL_RCC_OscConfig+0x20>
 800fd6c:	f7fe fd76 	bl	800e85c <HAL_GetTick>
 800fd70:	1b80      	subs	r0, r0, r6
 800fd72:	2802      	cmp	r0, #2
 800fd74:	d9f6      	bls.n	800fd64 <HAL_RCC_OscConfig+0x188>
 800fd76:	e776      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800fd78:	4b4d      	ldr	r3, [pc, #308]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fd7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fd7c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800fd80:	d128      	bne.n	800fdd4 <HAL_RCC_OscConfig+0x1f8>
 800fd82:	9201      	str	r2, [sp, #4]
 800fd84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fd86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800fd8a:	641a      	str	r2, [r3, #64]	; 0x40
 800fd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd92:	9301      	str	r3, [sp, #4]
 800fd94:	9b01      	ldr	r3, [sp, #4]
 800fd96:	2601      	movs	r6, #1
 800fd98:	4d48      	ldr	r5, [pc, #288]	; (800febc <HAL_RCC_OscConfig+0x2e0>)
 800fd9a:	682b      	ldr	r3, [r5, #0]
 800fd9c:	05d9      	lsls	r1, r3, #23
 800fd9e:	d51b      	bpl.n	800fdd8 <HAL_RCC_OscConfig+0x1fc>
 800fda0:	68a3      	ldr	r3, [r4, #8]
 800fda2:	4d43      	ldr	r5, [pc, #268]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d127      	bne.n	800fdf8 <HAL_RCC_OscConfig+0x21c>
 800fda8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fdaa:	f043 0301 	orr.w	r3, r3, #1
 800fdae:	672b      	str	r3, [r5, #112]	; 0x70
 800fdb0:	f7fe fd54 	bl	800e85c <HAL_GetTick>
 800fdb4:	4d3e      	ldr	r5, [pc, #248]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fdb6:	4607      	mov	r7, r0
 800fdb8:	f241 3888 	movw	r8, #5000	; 0x1388
 800fdbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fdbe:	079b      	lsls	r3, r3, #30
 800fdc0:	d539      	bpl.n	800fe36 <HAL_RCC_OscConfig+0x25a>
 800fdc2:	2e00      	cmp	r6, #0
 800fdc4:	f43f af1e 	beq.w	800fc04 <HAL_RCC_OscConfig+0x28>
 800fdc8:	4a39      	ldr	r2, [pc, #228]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fdca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fdcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fdd0:	6413      	str	r3, [r2, #64]	; 0x40
 800fdd2:	e717      	b.n	800fc04 <HAL_RCC_OscConfig+0x28>
 800fdd4:	2600      	movs	r6, #0
 800fdd6:	e7df      	b.n	800fd98 <HAL_RCC_OscConfig+0x1bc>
 800fdd8:	682b      	ldr	r3, [r5, #0]
 800fdda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fdde:	602b      	str	r3, [r5, #0]
 800fde0:	f7fe fd3c 	bl	800e85c <HAL_GetTick>
 800fde4:	4607      	mov	r7, r0
 800fde6:	682b      	ldr	r3, [r5, #0]
 800fde8:	05da      	lsls	r2, r3, #23
 800fdea:	d4d9      	bmi.n	800fda0 <HAL_RCC_OscConfig+0x1c4>
 800fdec:	f7fe fd36 	bl	800e85c <HAL_GetTick>
 800fdf0:	1bc0      	subs	r0, r0, r7
 800fdf2:	2802      	cmp	r0, #2
 800fdf4:	d9f7      	bls.n	800fde6 <HAL_RCC_OscConfig+0x20a>
 800fdf6:	e736      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800fdf8:	2b05      	cmp	r3, #5
 800fdfa:	d104      	bne.n	800fe06 <HAL_RCC_OscConfig+0x22a>
 800fdfc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fdfe:	f043 0304 	orr.w	r3, r3, #4
 800fe02:	672b      	str	r3, [r5, #112]	; 0x70
 800fe04:	e7d0      	b.n	800fda8 <HAL_RCC_OscConfig+0x1cc>
 800fe06:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800fe08:	f022 0201 	bic.w	r2, r2, #1
 800fe0c:	672a      	str	r2, [r5, #112]	; 0x70
 800fe0e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800fe10:	f022 0204 	bic.w	r2, r2, #4
 800fe14:	672a      	str	r2, [r5, #112]	; 0x70
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d1ca      	bne.n	800fdb0 <HAL_RCC_OscConfig+0x1d4>
 800fe1a:	f7fe fd1f 	bl	800e85c <HAL_GetTick>
 800fe1e:	f241 3888 	movw	r8, #5000	; 0x1388
 800fe22:	4607      	mov	r7, r0
 800fe24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fe26:	0798      	lsls	r0, r3, #30
 800fe28:	d5cb      	bpl.n	800fdc2 <HAL_RCC_OscConfig+0x1e6>
 800fe2a:	f7fe fd17 	bl	800e85c <HAL_GetTick>
 800fe2e:	1bc0      	subs	r0, r0, r7
 800fe30:	4540      	cmp	r0, r8
 800fe32:	d9f7      	bls.n	800fe24 <HAL_RCC_OscConfig+0x248>
 800fe34:	e717      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800fe36:	f7fe fd11 	bl	800e85c <HAL_GetTick>
 800fe3a:	1bc0      	subs	r0, r0, r7
 800fe3c:	4540      	cmp	r0, r8
 800fe3e:	d9bd      	bls.n	800fdbc <HAL_RCC_OscConfig+0x1e0>
 800fe40:	e711      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800fe42:	4d1b      	ldr	r5, [pc, #108]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fe44:	68ab      	ldr	r3, [r5, #8]
 800fe46:	f003 030c 	and.w	r3, r3, #12
 800fe4a:	2b08      	cmp	r3, #8
 800fe4c:	d047      	beq.n	800fede <HAL_RCC_OscConfig+0x302>
 800fe4e:	4e1c      	ldr	r6, [pc, #112]	; (800fec0 <HAL_RCC_OscConfig+0x2e4>)
 800fe50:	2300      	movs	r3, #0
 800fe52:	2802      	cmp	r0, #2
 800fe54:	6033      	str	r3, [r6, #0]
 800fe56:	d135      	bne.n	800fec4 <HAL_RCC_OscConfig+0x2e8>
 800fe58:	f7fe fd00 	bl	800e85c <HAL_GetTick>
 800fe5c:	4607      	mov	r7, r0
 800fe5e:	682b      	ldr	r3, [r5, #0]
 800fe60:	0199      	lsls	r1, r3, #6
 800fe62:	d41e      	bmi.n	800fea2 <HAL_RCC_OscConfig+0x2c6>
 800fe64:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fe6c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800fe70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fe72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fe76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fe78:	4c0d      	ldr	r4, [pc, #52]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fe7a:	0852      	lsrs	r2, r2, #1
 800fe7c:	3a01      	subs	r2, #1
 800fe7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe82:	606b      	str	r3, [r5, #4]
 800fe84:	2301      	movs	r3, #1
 800fe86:	6033      	str	r3, [r6, #0]
 800fe88:	f7fe fce8 	bl	800e85c <HAL_GetTick>
 800fe8c:	4605      	mov	r5, r0
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	019a      	lsls	r2, r3, #6
 800fe92:	f53f aebb 	bmi.w	800fc0c <HAL_RCC_OscConfig+0x30>
 800fe96:	f7fe fce1 	bl	800e85c <HAL_GetTick>
 800fe9a:	1b40      	subs	r0, r0, r5
 800fe9c:	2802      	cmp	r0, #2
 800fe9e:	d9f6      	bls.n	800fe8e <HAL_RCC_OscConfig+0x2b2>
 800fea0:	e6e1      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800fea2:	f7fe fcdb 	bl	800e85c <HAL_GetTick>
 800fea6:	1bc0      	subs	r0, r0, r7
 800fea8:	2802      	cmp	r0, #2
 800feaa:	d9d8      	bls.n	800fe5e <HAL_RCC_OscConfig+0x282>
 800feac:	e6db      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800feae:	bf00      	nop
 800feb0:	40023800 	.word	0x40023800
 800feb4:	42470000 	.word	0x42470000
 800feb8:	42470e80 	.word	0x42470e80
 800febc:	40007000 	.word	0x40007000
 800fec0:	42470060 	.word	0x42470060
 800fec4:	f7fe fcca 	bl	800e85c <HAL_GetTick>
 800fec8:	4604      	mov	r4, r0
 800feca:	682b      	ldr	r3, [r5, #0]
 800fecc:	019b      	lsls	r3, r3, #6
 800fece:	f57f ae9d 	bpl.w	800fc0c <HAL_RCC_OscConfig+0x30>
 800fed2:	f7fe fcc3 	bl	800e85c <HAL_GetTick>
 800fed6:	1b00      	subs	r0, r0, r4
 800fed8:	2802      	cmp	r0, #2
 800feda:	d9f6      	bls.n	800feca <HAL_RCC_OscConfig+0x2ee>
 800fedc:	e6c3      	b.n	800fc66 <HAL_RCC_OscConfig+0x8a>
 800fede:	2801      	cmp	r0, #1
 800fee0:	f43f aec2 	beq.w	800fc68 <HAL_RCC_OscConfig+0x8c>
 800fee4:	6868      	ldr	r0, [r5, #4]
 800fee6:	69e3      	ldr	r3, [r4, #28]
 800fee8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 800feec:	429a      	cmp	r2, r3
 800feee:	f47f ae79 	bne.w	800fbe4 <HAL_RCC_OscConfig+0x8>
 800fef2:	6a22      	ldr	r2, [r4, #32]
 800fef4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800fef8:	4293      	cmp	r3, r2
 800fefa:	f47f ae73 	bne.w	800fbe4 <HAL_RCC_OscConfig+0x8>
 800fefe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ff00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ff04:	4003      	ands	r3, r0
 800ff06:	4293      	cmp	r3, r2
 800ff08:	f47f ae6c 	bne.w	800fbe4 <HAL_RCC_OscConfig+0x8>
 800ff0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ff0e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
 800ff12:	4293      	cmp	r3, r2
 800ff14:	f47f ae66 	bne.w	800fbe4 <HAL_RCC_OscConfig+0x8>
 800ff18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff1a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800ff1e:	1ac0      	subs	r0, r0, r3
 800ff20:	bf18      	it	ne
 800ff22:	2001      	movne	r0, #1
 800ff24:	e6a0      	b.n	800fc68 <HAL_RCC_OscConfig+0x8c>
 800ff26:	bf00      	nop

0800ff28 <HAL_RCC_GetSysClockFreq>:
 800ff28:	4913      	ldr	r1, [pc, #76]	; (800ff78 <HAL_RCC_GetSysClockFreq+0x50>)
 800ff2a:	b508      	push	{r3, lr}
 800ff2c:	688b      	ldr	r3, [r1, #8]
 800ff2e:	f003 030c 	and.w	r3, r3, #12
 800ff32:	2b04      	cmp	r3, #4
 800ff34:	d003      	beq.n	800ff3e <HAL_RCC_GetSysClockFreq+0x16>
 800ff36:	2b08      	cmp	r3, #8
 800ff38:	d003      	beq.n	800ff42 <HAL_RCC_GetSysClockFreq+0x1a>
 800ff3a:	4810      	ldr	r0, [pc, #64]	; (800ff7c <HAL_RCC_GetSysClockFreq+0x54>)
 800ff3c:	e000      	b.n	800ff40 <HAL_RCC_GetSysClockFreq+0x18>
 800ff3e:	4810      	ldr	r0, [pc, #64]	; (800ff80 <HAL_RCC_GetSysClockFreq+0x58>)
 800ff40:	bd08      	pop	{r3, pc}
 800ff42:	684a      	ldr	r2, [r1, #4]
 800ff44:	684b      	ldr	r3, [r1, #4]
 800ff46:	6849      	ldr	r1, [r1, #4]
 800ff48:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800ff4c:	bf14      	ite	ne
 800ff4e:	480c      	ldrne	r0, [pc, #48]	; (800ff80 <HAL_RCC_GetSysClockFreq+0x58>)
 800ff50:	480a      	ldreq	r0, [pc, #40]	; (800ff7c <HAL_RCC_GetSysClockFreq+0x54>)
 800ff52:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ff56:	bf18      	it	ne
 800ff58:	2300      	movne	r3, #0
 800ff5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ff5e:	fba1 0100 	umull	r0, r1, r1, r0
 800ff62:	f7fc f8c5 	bl	800c0f0 <__aeabi_uldivmod>
 800ff66:	4b04      	ldr	r3, [pc, #16]	; (800ff78 <HAL_RCC_GetSysClockFreq+0x50>)
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ff6e:	3301      	adds	r3, #1
 800ff70:	005b      	lsls	r3, r3, #1
 800ff72:	fbb0 f0f3 	udiv	r0, r0, r3
 800ff76:	e7e3      	b.n	800ff40 <HAL_RCC_GetSysClockFreq+0x18>
 800ff78:	40023800 	.word	0x40023800
 800ff7c:	00f42400 	.word	0x00f42400
 800ff80:	017d7840 	.word	0x017d7840

0800ff84 <HAL_RCC_ClockConfig>:
 800ff84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff88:	460d      	mov	r5, r1
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	b910      	cbnz	r0, 800ff94 <HAL_RCC_ClockConfig+0x10>
 800ff8e:	2001      	movs	r0, #1
 800ff90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff94:	4b43      	ldr	r3, [pc, #268]	; (80100a4 <HAL_RCC_ClockConfig+0x120>)
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	f002 020f 	and.w	r2, r2, #15
 800ff9c:	428a      	cmp	r2, r1
 800ff9e:	d328      	bcc.n	800fff2 <HAL_RCC_ClockConfig+0x6e>
 800ffa0:	6821      	ldr	r1, [r4, #0]
 800ffa2:	078f      	lsls	r7, r1, #30
 800ffa4:	d42d      	bmi.n	8010002 <HAL_RCC_ClockConfig+0x7e>
 800ffa6:	07c8      	lsls	r0, r1, #31
 800ffa8:	d440      	bmi.n	801002c <HAL_RCC_ClockConfig+0xa8>
 800ffaa:	4b3e      	ldr	r3, [pc, #248]	; (80100a4 <HAL_RCC_ClockConfig+0x120>)
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	f002 020f 	and.w	r2, r2, #15
 800ffb2:	42aa      	cmp	r2, r5
 800ffb4:	d865      	bhi.n	8010082 <HAL_RCC_ClockConfig+0xfe>
 800ffb6:	6822      	ldr	r2, [r4, #0]
 800ffb8:	0751      	lsls	r1, r2, #29
 800ffba:	d46b      	bmi.n	8010094 <HAL_RCC_ClockConfig+0x110>
 800ffbc:	0713      	lsls	r3, r2, #28
 800ffbe:	d507      	bpl.n	800ffd0 <HAL_RCC_ClockConfig+0x4c>
 800ffc0:	4a39      	ldr	r2, [pc, #228]	; (80100a8 <HAL_RCC_ClockConfig+0x124>)
 800ffc2:	6921      	ldr	r1, [r4, #16]
 800ffc4:	6893      	ldr	r3, [r2, #8]
 800ffc6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ffca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ffce:	6093      	str	r3, [r2, #8]
 800ffd0:	f7ff ffaa 	bl	800ff28 <HAL_RCC_GetSysClockFreq>
 800ffd4:	4b34      	ldr	r3, [pc, #208]	; (80100a8 <HAL_RCC_ClockConfig+0x124>)
 800ffd6:	4a35      	ldr	r2, [pc, #212]	; (80100ac <HAL_RCC_ClockConfig+0x128>)
 800ffd8:	689b      	ldr	r3, [r3, #8]
 800ffda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ffde:	5cd3      	ldrb	r3, [r2, r3]
 800ffe0:	40d8      	lsrs	r0, r3
 800ffe2:	4b33      	ldr	r3, [pc, #204]	; (80100b0 <HAL_RCC_ClockConfig+0x12c>)
 800ffe4:	6018      	str	r0, [r3, #0]
 800ffe6:	4b33      	ldr	r3, [pc, #204]	; (80100b4 <HAL_RCC_ClockConfig+0x130>)
 800ffe8:	6818      	ldr	r0, [r3, #0]
 800ffea:	f7fe f9c5 	bl	800e378 <HAL_InitTick>
 800ffee:	2000      	movs	r0, #0
 800fff0:	e7ce      	b.n	800ff90 <HAL_RCC_ClockConfig+0xc>
 800fff2:	b2ca      	uxtb	r2, r1
 800fff4:	701a      	strb	r2, [r3, #0]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f003 030f 	and.w	r3, r3, #15
 800fffc:	428b      	cmp	r3, r1
 800fffe:	d1c6      	bne.n	800ff8e <HAL_RCC_ClockConfig+0xa>
 8010000:	e7ce      	b.n	800ffa0 <HAL_RCC_ClockConfig+0x1c>
 8010002:	4b29      	ldr	r3, [pc, #164]	; (80100a8 <HAL_RCC_ClockConfig+0x124>)
 8010004:	f011 0f04 	tst.w	r1, #4
 8010008:	bf1e      	ittt	ne
 801000a:	689a      	ldrne	r2, [r3, #8]
 801000c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8010010:	609a      	strne	r2, [r3, #8]
 8010012:	070e      	lsls	r6, r1, #28
 8010014:	bf42      	ittt	mi
 8010016:	689a      	ldrmi	r2, [r3, #8]
 8010018:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 801001c:	609a      	strmi	r2, [r3, #8]
 801001e:	689a      	ldr	r2, [r3, #8]
 8010020:	68a0      	ldr	r0, [r4, #8]
 8010022:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8010026:	4302      	orrs	r2, r0
 8010028:	609a      	str	r2, [r3, #8]
 801002a:	e7bc      	b.n	800ffa6 <HAL_RCC_ClockConfig+0x22>
 801002c:	6862      	ldr	r2, [r4, #4]
 801002e:	4b1e      	ldr	r3, [pc, #120]	; (80100a8 <HAL_RCC_ClockConfig+0x124>)
 8010030:	2a01      	cmp	r2, #1
 8010032:	d11c      	bne.n	801006e <HAL_RCC_ClockConfig+0xea>
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 801003a:	d0a8      	beq.n	800ff8e <HAL_RCC_ClockConfig+0xa>
 801003c:	4e1a      	ldr	r6, [pc, #104]	; (80100a8 <HAL_RCC_ClockConfig+0x124>)
 801003e:	68b3      	ldr	r3, [r6, #8]
 8010040:	f023 0303 	bic.w	r3, r3, #3
 8010044:	4313      	orrs	r3, r2
 8010046:	60b3      	str	r3, [r6, #8]
 8010048:	f7fe fc08 	bl	800e85c <HAL_GetTick>
 801004c:	f241 3888 	movw	r8, #5000	; 0x1388
 8010050:	4607      	mov	r7, r0
 8010052:	68b3      	ldr	r3, [r6, #8]
 8010054:	6862      	ldr	r2, [r4, #4]
 8010056:	f003 030c 	and.w	r3, r3, #12
 801005a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801005e:	d0a4      	beq.n	800ffaa <HAL_RCC_ClockConfig+0x26>
 8010060:	f7fe fbfc 	bl	800e85c <HAL_GetTick>
 8010064:	1bc0      	subs	r0, r0, r7
 8010066:	4540      	cmp	r0, r8
 8010068:	d9f3      	bls.n	8010052 <HAL_RCC_ClockConfig+0xce>
 801006a:	2003      	movs	r0, #3
 801006c:	e790      	b.n	800ff90 <HAL_RCC_ClockConfig+0xc>
 801006e:	1e91      	subs	r1, r2, #2
 8010070:	2901      	cmp	r1, #1
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	d802      	bhi.n	801007c <HAL_RCC_ClockConfig+0xf8>
 8010076:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 801007a:	e7de      	b.n	801003a <HAL_RCC_ClockConfig+0xb6>
 801007c:	f013 0f02 	tst.w	r3, #2
 8010080:	e7db      	b.n	801003a <HAL_RCC_ClockConfig+0xb6>
 8010082:	b2ea      	uxtb	r2, r5
 8010084:	701a      	strb	r2, [r3, #0]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f003 030f 	and.w	r3, r3, #15
 801008c:	42ab      	cmp	r3, r5
 801008e:	f47f af7e 	bne.w	800ff8e <HAL_RCC_ClockConfig+0xa>
 8010092:	e790      	b.n	800ffb6 <HAL_RCC_ClockConfig+0x32>
 8010094:	4904      	ldr	r1, [pc, #16]	; (80100a8 <HAL_RCC_ClockConfig+0x124>)
 8010096:	68e0      	ldr	r0, [r4, #12]
 8010098:	688b      	ldr	r3, [r1, #8]
 801009a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 801009e:	4303      	orrs	r3, r0
 80100a0:	608b      	str	r3, [r1, #8]
 80100a2:	e78b      	b.n	800ffbc <HAL_RCC_ClockConfig+0x38>
 80100a4:	40023c00 	.word	0x40023c00
 80100a8:	40023800 	.word	0x40023800
 80100ac:	08000974 	.word	0x08000974
 80100b0:	20000058 	.word	0x20000058
 80100b4:	20000060 	.word	0x20000060

080100b8 <HAL_RCC_GetPCLK1Freq>:
 80100b8:	4b04      	ldr	r3, [pc, #16]	; (80100cc <HAL_RCC_GetPCLK1Freq+0x14>)
 80100ba:	4a05      	ldr	r2, [pc, #20]	; (80100d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80100c2:	5cd3      	ldrb	r3, [r2, r3]
 80100c4:	4a03      	ldr	r2, [pc, #12]	; (80100d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80100c6:	6810      	ldr	r0, [r2, #0]
 80100c8:	40d8      	lsrs	r0, r3
 80100ca:	4770      	bx	lr
 80100cc:	40023800 	.word	0x40023800
 80100d0:	08000984 	.word	0x08000984
 80100d4:	20000058 	.word	0x20000058

080100d8 <HAL_RCC_GetPCLK2Freq>:
 80100d8:	4b04      	ldr	r3, [pc, #16]	; (80100ec <HAL_RCC_GetPCLK2Freq+0x14>)
 80100da:	4a05      	ldr	r2, [pc, #20]	; (80100f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80100e2:	5cd3      	ldrb	r3, [r2, r3]
 80100e4:	4a03      	ldr	r2, [pc, #12]	; (80100f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80100e6:	6810      	ldr	r0, [r2, #0]
 80100e8:	40d8      	lsrs	r0, r3
 80100ea:	4770      	bx	lr
 80100ec:	40023800 	.word	0x40023800
 80100f0:	08000984 	.word	0x08000984
 80100f4:	20000058 	.word	0x20000058

080100f8 <HAL_RCC_GetClockConfig>:
 80100f8:	230f      	movs	r3, #15
 80100fa:	6003      	str	r3, [r0, #0]
 80100fc:	4b0b      	ldr	r3, [pc, #44]	; (801012c <HAL_RCC_GetClockConfig+0x34>)
 80100fe:	689a      	ldr	r2, [r3, #8]
 8010100:	f002 0203 	and.w	r2, r2, #3
 8010104:	6042      	str	r2, [r0, #4]
 8010106:	689a      	ldr	r2, [r3, #8]
 8010108:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 801010c:	6082      	str	r2, [r0, #8]
 801010e:	689a      	ldr	r2, [r3, #8]
 8010110:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8010114:	60c2      	str	r2, [r0, #12]
 8010116:	689b      	ldr	r3, [r3, #8]
 8010118:	08db      	lsrs	r3, r3, #3
 801011a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 801011e:	6103      	str	r3, [r0, #16]
 8010120:	4b03      	ldr	r3, [pc, #12]	; (8010130 <HAL_RCC_GetClockConfig+0x38>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f003 030f 	and.w	r3, r3, #15
 8010128:	600b      	str	r3, [r1, #0]
 801012a:	4770      	bx	lr
 801012c:	40023800 	.word	0x40023800
 8010130:	40023c00 	.word	0x40023c00

08010134 <HAL_RCCEx_PeriphCLKConfig>:
 8010134:	6803      	ldr	r3, [r0, #0]
 8010136:	f013 0f05 	tst.w	r3, #5
 801013a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801013c:	4605      	mov	r5, r0
 801013e:	d105      	bne.n	801014c <HAL_RCCEx_PeriphCLKConfig+0x18>
 8010140:	6828      	ldr	r0, [r5, #0]
 8010142:	f010 0002 	ands.w	r0, r0, #2
 8010146:	d128      	bne.n	801019a <HAL_RCCEx_PeriphCLKConfig+0x66>
 8010148:	b003      	add	sp, #12
 801014a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801014c:	4c41      	ldr	r4, [pc, #260]	; (8010254 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801014e:	4e42      	ldr	r6, [pc, #264]	; (8010258 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8010150:	2300      	movs	r3, #0
 8010152:	6023      	str	r3, [r4, #0]
 8010154:	f7fe fb82 	bl	800e85c <HAL_GetTick>
 8010158:	4607      	mov	r7, r0
 801015a:	6833      	ldr	r3, [r6, #0]
 801015c:	011b      	lsls	r3, r3, #4
 801015e:	d415      	bmi.n	801018c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8010160:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8010164:	071b      	lsls	r3, r3, #28
 8010166:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801016a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
 801016e:	2301      	movs	r3, #1
 8010170:	6023      	str	r3, [r4, #0]
 8010172:	f7fe fb73 	bl	800e85c <HAL_GetTick>
 8010176:	4c38      	ldr	r4, [pc, #224]	; (8010258 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8010178:	4606      	mov	r6, r0
 801017a:	6823      	ldr	r3, [r4, #0]
 801017c:	0118      	lsls	r0, r3, #4
 801017e:	d4df      	bmi.n	8010140 <HAL_RCCEx_PeriphCLKConfig+0xc>
 8010180:	f7fe fb6c 	bl	800e85c <HAL_GetTick>
 8010184:	1b80      	subs	r0, r0, r6
 8010186:	2802      	cmp	r0, #2
 8010188:	d9f7      	bls.n	801017a <HAL_RCCEx_PeriphCLKConfig+0x46>
 801018a:	e004      	b.n	8010196 <HAL_RCCEx_PeriphCLKConfig+0x62>
 801018c:	f7fe fb66 	bl	800e85c <HAL_GetTick>
 8010190:	1bc0      	subs	r0, r0, r7
 8010192:	2802      	cmp	r0, #2
 8010194:	d9e1      	bls.n	801015a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8010196:	2003      	movs	r0, #3
 8010198:	e7d6      	b.n	8010148 <HAL_RCCEx_PeriphCLKConfig+0x14>
 801019a:	2300      	movs	r3, #0
 801019c:	9301      	str	r3, [sp, #4]
 801019e:	4b2e      	ldr	r3, [pc, #184]	; (8010258 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80101a0:	4c2e      	ldr	r4, [pc, #184]	; (801025c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80101a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80101a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80101a8:	641a      	str	r2, [r3, #64]	; 0x40
 80101aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101b0:	9301      	str	r3, [sp, #4]
 80101b2:	9b01      	ldr	r3, [sp, #4]
 80101b4:	6823      	ldr	r3, [r4, #0]
 80101b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101ba:	6023      	str	r3, [r4, #0]
 80101bc:	f7fe fb4e 	bl	800e85c <HAL_GetTick>
 80101c0:	4606      	mov	r6, r0
 80101c2:	6823      	ldr	r3, [r4, #0]
 80101c4:	05d9      	lsls	r1, r3, #23
 80101c6:	d51b      	bpl.n	8010200 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80101c8:	4c23      	ldr	r4, [pc, #140]	; (8010258 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80101ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80101cc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80101d0:	d11c      	bne.n	801020c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80101d2:	68eb      	ldr	r3, [r5, #12]
 80101d4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80101d8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80101dc:	4a1e      	ldr	r2, [pc, #120]	; (8010258 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80101de:	d134      	bne.n	801024a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80101e0:	6891      	ldr	r1, [r2, #8]
 80101e2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80101e6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80101ea:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80101ee:	4301      	orrs	r1, r0
 80101f0:	6091      	str	r1, [r2, #8]
 80101f2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80101f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80101f8:	430b      	orrs	r3, r1
 80101fa:	6713      	str	r3, [r2, #112]	; 0x70
 80101fc:	2000      	movs	r0, #0
 80101fe:	e7a3      	b.n	8010148 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8010200:	f7fe fb2c 	bl	800e85c <HAL_GetTick>
 8010204:	1b80      	subs	r0, r0, r6
 8010206:	2802      	cmp	r0, #2
 8010208:	d9db      	bls.n	80101c2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 801020a:	e7c4      	b.n	8010196 <HAL_RCCEx_PeriphCLKConfig+0x62>
 801020c:	68ea      	ldr	r2, [r5, #12]
 801020e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8010212:	4293      	cmp	r3, r2
 8010214:	d0dd      	beq.n	80101d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8010216:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010218:	4a11      	ldr	r2, [pc, #68]	; (8010260 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801021a:	2101      	movs	r1, #1
 801021c:	6011      	str	r1, [r2, #0]
 801021e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010222:	2100      	movs	r1, #0
 8010224:	6011      	str	r1, [r2, #0]
 8010226:	6723      	str	r3, [r4, #112]	; 0x70
 8010228:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801022a:	07da      	lsls	r2, r3, #31
 801022c:	d5d1      	bpl.n	80101d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 801022e:	f7fe fb15 	bl	800e85c <HAL_GetTick>
 8010232:	f241 3788 	movw	r7, #5000	; 0x1388
 8010236:	4606      	mov	r6, r0
 8010238:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801023a:	079b      	lsls	r3, r3, #30
 801023c:	d4c9      	bmi.n	80101d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 801023e:	f7fe fb0d 	bl	800e85c <HAL_GetTick>
 8010242:	1b80      	subs	r0, r0, r6
 8010244:	42b8      	cmp	r0, r7
 8010246:	d9f7      	bls.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8010248:	e7a5      	b.n	8010196 <HAL_RCCEx_PeriphCLKConfig+0x62>
 801024a:	6891      	ldr	r1, [r2, #8]
 801024c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8010250:	e7ce      	b.n	80101f0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8010252:	bf00      	nop
 8010254:	42470068 	.word	0x42470068
 8010258:	40023800 	.word	0x40023800
 801025c:	40007000 	.word	0x40007000
 8010260:	42470e40 	.word	0x42470e40

08010264 <HAL_RCC_DeInit>:
 8010264:	b570      	push	{r4, r5, r6, lr}
 8010266:	4c41      	ldr	r4, [pc, #260]	; (801036c <HAL_RCC_DeInit+0x108>)
 8010268:	f7fe faf8 	bl	800e85c <HAL_GetTick>
 801026c:	6823      	ldr	r3, [r4, #0]
 801026e:	f043 0301 	orr.w	r3, r3, #1
 8010272:	4605      	mov	r5, r0
 8010274:	6023      	str	r3, [r4, #0]
 8010276:	6823      	ldr	r3, [r4, #0]
 8010278:	0798      	lsls	r0, r3, #30
 801027a:	d558      	bpl.n	801032e <HAL_RCC_DeInit+0xca>
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010282:	6023      	str	r3, [r4, #0]
 8010284:	f7fe faea 	bl	800e85c <HAL_GetTick>
 8010288:	2300      	movs	r3, #0
 801028a:	60a3      	str	r3, [r4, #8]
 801028c:	4c37      	ldr	r4, [pc, #220]	; (801036c <HAL_RCC_DeInit+0x108>)
 801028e:	4605      	mov	r5, r0
 8010290:	f241 3688 	movw	r6, #5000	; 0x1388
 8010294:	68a3      	ldr	r3, [r4, #8]
 8010296:	f013 0f0c 	tst.w	r3, #12
 801029a:	d14f      	bne.n	801033c <HAL_RCC_DeInit+0xd8>
 801029c:	f7fe fade 	bl	800e85c <HAL_GetTick>
 80102a0:	6823      	ldr	r3, [r4, #0]
 80102a2:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80102a6:	6023      	str	r3, [r4, #0]
 80102a8:	4c30      	ldr	r4, [pc, #192]	; (801036c <HAL_RCC_DeInit+0x108>)
 80102aa:	4605      	mov	r5, r0
 80102ac:	6823      	ldr	r3, [r4, #0]
 80102ae:	0399      	lsls	r1, r3, #14
 80102b0:	d44a      	bmi.n	8010348 <HAL_RCC_DeInit+0xe4>
 80102b2:	f7fe fad3 	bl	800e85c <HAL_GetTick>
 80102b6:	6823      	ldr	r3, [r4, #0]
 80102b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80102bc:	6023      	str	r3, [r4, #0]
 80102be:	4c2b      	ldr	r4, [pc, #172]	; (801036c <HAL_RCC_DeInit+0x108>)
 80102c0:	4605      	mov	r5, r0
 80102c2:	6823      	ldr	r3, [r4, #0]
 80102c4:	019a      	lsls	r2, r3, #6
 80102c6:	d445      	bmi.n	8010354 <HAL_RCC_DeInit+0xf0>
 80102c8:	f7fe fac8 	bl	800e85c <HAL_GetTick>
 80102cc:	6823      	ldr	r3, [r4, #0]
 80102ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80102d2:	6023      	str	r3, [r4, #0]
 80102d4:	4c25      	ldr	r4, [pc, #148]	; (801036c <HAL_RCC_DeInit+0x108>)
 80102d6:	4605      	mov	r5, r0
 80102d8:	6823      	ldr	r3, [r4, #0]
 80102da:	011b      	lsls	r3, r3, #4
 80102dc:	d440      	bmi.n	8010360 <HAL_RCC_DeInit+0xfc>
 80102de:	4b24      	ldr	r3, [pc, #144]	; (8010370 <HAL_RCC_DeInit+0x10c>)
 80102e0:	6063      	str	r3, [r4, #4]
 80102e2:	4b24      	ldr	r3, [pc, #144]	; (8010374 <HAL_RCC_DeInit+0x110>)
 80102e4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80102e8:	68e3      	ldr	r3, [r4, #12]
 80102ea:	4a23      	ldr	r2, [pc, #140]	; (8010378 <HAL_RCC_DeInit+0x114>)
 80102ec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80102f0:	60e3      	str	r3, [r4, #12]
 80102f2:	68e3      	ldr	r3, [r4, #12]
 80102f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80102f8:	60e3      	str	r3, [r4, #12]
 80102fa:	68e3      	ldr	r3, [r4, #12]
 80102fc:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8010300:	60e3      	str	r3, [r4, #12]
 8010302:	68e3      	ldr	r3, [r4, #12]
 8010304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010308:	60e3      	str	r3, [r4, #12]
 801030a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801030c:	f023 0301 	bic.w	r3, r3, #1
 8010310:	6763      	str	r3, [r4, #116]	; 0x74
 8010312:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8010314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010318:	6763      	str	r3, [r4, #116]	; 0x74
 801031a:	4b18      	ldr	r3, [pc, #96]	; (801037c <HAL_RCC_DeInit+0x118>)
 801031c:	601a      	str	r2, [r3, #0]
 801031e:	4b18      	ldr	r3, [pc, #96]	; (8010380 <HAL_RCC_DeInit+0x11c>)
 8010320:	6818      	ldr	r0, [r3, #0]
 8010322:	f7fe f829 	bl	800e378 <HAL_InitTick>
 8010326:	3000      	adds	r0, #0
 8010328:	bf18      	it	ne
 801032a:	2001      	movne	r0, #1
 801032c:	e005      	b.n	801033a <HAL_RCC_DeInit+0xd6>
 801032e:	f7fe fa95 	bl	800e85c <HAL_GetTick>
 8010332:	1b40      	subs	r0, r0, r5
 8010334:	2802      	cmp	r0, #2
 8010336:	d99e      	bls.n	8010276 <HAL_RCC_DeInit+0x12>
 8010338:	2003      	movs	r0, #3
 801033a:	bd70      	pop	{r4, r5, r6, pc}
 801033c:	f7fe fa8e 	bl	800e85c <HAL_GetTick>
 8010340:	1b40      	subs	r0, r0, r5
 8010342:	42b0      	cmp	r0, r6
 8010344:	d9a6      	bls.n	8010294 <HAL_RCC_DeInit+0x30>
 8010346:	e7f7      	b.n	8010338 <HAL_RCC_DeInit+0xd4>
 8010348:	f7fe fa88 	bl	800e85c <HAL_GetTick>
 801034c:	1b40      	subs	r0, r0, r5
 801034e:	2864      	cmp	r0, #100	; 0x64
 8010350:	d9ac      	bls.n	80102ac <HAL_RCC_DeInit+0x48>
 8010352:	e7f1      	b.n	8010338 <HAL_RCC_DeInit+0xd4>
 8010354:	f7fe fa82 	bl	800e85c <HAL_GetTick>
 8010358:	1b40      	subs	r0, r0, r5
 801035a:	2802      	cmp	r0, #2
 801035c:	d9b1      	bls.n	80102c2 <HAL_RCC_DeInit+0x5e>
 801035e:	e7eb      	b.n	8010338 <HAL_RCC_DeInit+0xd4>
 8010360:	f7fe fa7c 	bl	800e85c <HAL_GetTick>
 8010364:	1b40      	subs	r0, r0, r5
 8010366:	2802      	cmp	r0, #2
 8010368:	d9b6      	bls.n	80102d8 <HAL_RCC_DeInit+0x74>
 801036a:	e7e5      	b.n	8010338 <HAL_RCC_DeInit+0xd4>
 801036c:	40023800 	.word	0x40023800
 8010370:	04003010 	.word	0x04003010
 8010374:	20003000 	.word	0x20003000
 8010378:	00f42400 	.word	0x00f42400
 801037c:	20000058 	.word	0x20000058
 8010380:	20000060 	.word	0x20000060

08010384 <HAL_RTC_WaitForSynchro>:
 8010384:	6802      	ldr	r2, [r0, #0]
 8010386:	b538      	push	{r3, r4, r5, lr}
 8010388:	68d3      	ldr	r3, [r2, #12]
 801038a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801038e:	60d3      	str	r3, [r2, #12]
 8010390:	4604      	mov	r4, r0
 8010392:	f7fe fa63 	bl	800e85c <HAL_GetTick>
 8010396:	4605      	mov	r5, r0
 8010398:	6823      	ldr	r3, [r4, #0]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	069b      	lsls	r3, r3, #26
 801039e:	d501      	bpl.n	80103a4 <HAL_RTC_WaitForSynchro+0x20>
 80103a0:	2000      	movs	r0, #0
 80103a2:	bd38      	pop	{r3, r4, r5, pc}
 80103a4:	f7fe fa5a 	bl	800e85c <HAL_GetTick>
 80103a8:	1b40      	subs	r0, r0, r5
 80103aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80103ae:	d9f3      	bls.n	8010398 <HAL_RTC_WaitForSynchro+0x14>
 80103b0:	2003      	movs	r0, #3
 80103b2:	e7f6      	b.n	80103a2 <HAL_RTC_WaitForSynchro+0x1e>

080103b4 <RTC_EnterInitMode>:
 80103b4:	b538      	push	{r3, r4, r5, lr}
 80103b6:	6803      	ldr	r3, [r0, #0]
 80103b8:	68da      	ldr	r2, [r3, #12]
 80103ba:	0652      	lsls	r2, r2, #25
 80103bc:	4604      	mov	r4, r0
 80103be:	d501      	bpl.n	80103c4 <RTC_EnterInitMode+0x10>
 80103c0:	2000      	movs	r0, #0
 80103c2:	bd38      	pop	{r3, r4, r5, pc}
 80103c4:	f04f 32ff 	mov.w	r2, #4294967295
 80103c8:	60da      	str	r2, [r3, #12]
 80103ca:	f7fe fa47 	bl	800e85c <HAL_GetTick>
 80103ce:	4605      	mov	r5, r0
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	065b      	lsls	r3, r3, #25
 80103d6:	d4f3      	bmi.n	80103c0 <RTC_EnterInitMode+0xc>
 80103d8:	f7fe fa40 	bl	800e85c <HAL_GetTick>
 80103dc:	1b40      	subs	r0, r0, r5
 80103de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80103e2:	d9f5      	bls.n	80103d0 <RTC_EnterInitMode+0x1c>
 80103e4:	2003      	movs	r0, #3
 80103e6:	e7ec      	b.n	80103c2 <RTC_EnterInitMode+0xe>

080103e8 <HAL_RTC_Init>:
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	4604      	mov	r4, r0
 80103ec:	b1b8      	cbz	r0, 801041e <HAL_RTC_Init+0x36>
 80103ee:	7f43      	ldrb	r3, [r0, #29]
 80103f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80103f4:	b913      	cbnz	r3, 80103fc <HAL_RTC_Init+0x14>
 80103f6:	7702      	strb	r2, [r0, #28]
 80103f8:	f7fd fcd4 	bl	800dda4 <HAL_RTC_MspInit>
 80103fc:	2302      	movs	r3, #2
 80103fe:	7763      	strb	r3, [r4, #29]
 8010400:	6823      	ldr	r3, [r4, #0]
 8010402:	22ca      	movs	r2, #202	; 0xca
 8010404:	625a      	str	r2, [r3, #36]	; 0x24
 8010406:	2253      	movs	r2, #83	; 0x53
 8010408:	625a      	str	r2, [r3, #36]	; 0x24
 801040a:	4620      	mov	r0, r4
 801040c:	f7ff ffd2 	bl	80103b4 <RTC_EnterInitMode>
 8010410:	6823      	ldr	r3, [r4, #0]
 8010412:	4605      	mov	r5, r0
 8010414:	b128      	cbz	r0, 8010422 <HAL_RTC_Init+0x3a>
 8010416:	22ff      	movs	r2, #255	; 0xff
 8010418:	625a      	str	r2, [r3, #36]	; 0x24
 801041a:	2304      	movs	r3, #4
 801041c:	7763      	strb	r3, [r4, #29]
 801041e:	2501      	movs	r5, #1
 8010420:	e02e      	b.n	8010480 <HAL_RTC_Init+0x98>
 8010422:	689a      	ldr	r2, [r3, #8]
 8010424:	6920      	ldr	r0, [r4, #16]
 8010426:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 801042a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801042e:	609a      	str	r2, [r3, #8]
 8010430:	6862      	ldr	r2, [r4, #4]
 8010432:	6899      	ldr	r1, [r3, #8]
 8010434:	4302      	orrs	r2, r0
 8010436:	6960      	ldr	r0, [r4, #20]
 8010438:	4302      	orrs	r2, r0
 801043a:	430a      	orrs	r2, r1
 801043c:	609a      	str	r2, [r3, #8]
 801043e:	68e2      	ldr	r2, [r4, #12]
 8010440:	611a      	str	r2, [r3, #16]
 8010442:	691a      	ldr	r2, [r3, #16]
 8010444:	68a1      	ldr	r1, [r4, #8]
 8010446:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801044a:	611a      	str	r2, [r3, #16]
 801044c:	68da      	ldr	r2, [r3, #12]
 801044e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010452:	60da      	str	r2, [r3, #12]
 8010454:	689b      	ldr	r3, [r3, #8]
 8010456:	069b      	lsls	r3, r3, #26
 8010458:	d405      	bmi.n	8010466 <HAL_RTC_Init+0x7e>
 801045a:	4620      	mov	r0, r4
 801045c:	f7ff ff92 	bl	8010384 <HAL_RTC_WaitForSynchro>
 8010460:	b108      	cbz	r0, 8010466 <HAL_RTC_Init+0x7e>
 8010462:	6823      	ldr	r3, [r4, #0]
 8010464:	e7d7      	b.n	8010416 <HAL_RTC_Init+0x2e>
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	69a1      	ldr	r1, [r4, #24]
 801046a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801046c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010470:	641a      	str	r2, [r3, #64]	; 0x40
 8010472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010474:	430a      	orrs	r2, r1
 8010476:	641a      	str	r2, [r3, #64]	; 0x40
 8010478:	22ff      	movs	r2, #255	; 0xff
 801047a:	625a      	str	r2, [r3, #36]	; 0x24
 801047c:	2301      	movs	r3, #1
 801047e:	7763      	strb	r3, [r4, #29]
 8010480:	4628      	mov	r0, r5
 8010482:	bd38      	pop	{r3, r4, r5, pc}

08010484 <RTC_ByteToBcd2>:
 8010484:	2300      	movs	r3, #0
 8010486:	2809      	cmp	r0, #9
 8010488:	d803      	bhi.n	8010492 <RTC_ByteToBcd2+0xe>
 801048a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 801048e:	b2c0      	uxtb	r0, r0
 8010490:	4770      	bx	lr
 8010492:	380a      	subs	r0, #10
 8010494:	3301      	adds	r3, #1
 8010496:	b2c0      	uxtb	r0, r0
 8010498:	e7f5      	b.n	8010486 <RTC_ByteToBcd2+0x2>

0801049a <HAL_RTC_SetTime>:
 801049a:	7f03      	ldrb	r3, [r0, #28]
 801049c:	2b01      	cmp	r3, #1
 801049e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a2:	4606      	mov	r6, r0
 80104a4:	460f      	mov	r7, r1
 80104a6:	f04f 0502 	mov.w	r5, #2
 80104aa:	d02e      	beq.n	801050a <HAL_RTC_SetTime+0x70>
 80104ac:	2301      	movs	r3, #1
 80104ae:	6801      	ldr	r1, [r0, #0]
 80104b0:	7703      	strb	r3, [r0, #28]
 80104b2:	7745      	strb	r5, [r0, #29]
 80104b4:	7838      	ldrb	r0, [r7, #0]
 80104b6:	787d      	ldrb	r5, [r7, #1]
 80104b8:	78bc      	ldrb	r4, [r7, #2]
 80104ba:	688b      	ldr	r3, [r1, #8]
 80104bc:	bb42      	cbnz	r2, 8010510 <HAL_RTC_SetTime+0x76>
 80104be:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80104c2:	bf08      	it	eq
 80104c4:	70fb      	strbeq	r3, [r7, #3]
 80104c6:	f7ff ffdd 	bl	8010484 <RTC_ByteToBcd2>
 80104ca:	4680      	mov	r8, r0
 80104cc:	4628      	mov	r0, r5
 80104ce:	f7ff ffd9 	bl	8010484 <RTC_ByteToBcd2>
 80104d2:	4602      	mov	r2, r0
 80104d4:	4620      	mov	r0, r4
 80104d6:	f7ff ffd5 	bl	8010484 <RTC_ByteToBcd2>
 80104da:	78fb      	ldrb	r3, [r7, #3]
 80104dc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80104e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80104e4:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
 80104e8:	23ca      	movs	r3, #202	; 0xca
 80104ea:	624b      	str	r3, [r1, #36]	; 0x24
 80104ec:	2353      	movs	r3, #83	; 0x53
 80104ee:	624b      	str	r3, [r1, #36]	; 0x24
 80104f0:	4630      	mov	r0, r6
 80104f2:	f7ff ff5f 	bl	80103b4 <RTC_EnterInitMode>
 80104f6:	6833      	ldr	r3, [r6, #0]
 80104f8:	4605      	mov	r5, r0
 80104fa:	b1b0      	cbz	r0, 801052a <HAL_RTC_SetTime+0x90>
 80104fc:	22ff      	movs	r2, #255	; 0xff
 80104fe:	625a      	str	r2, [r3, #36]	; 0x24
 8010500:	2304      	movs	r3, #4
 8010502:	7773      	strb	r3, [r6, #29]
 8010504:	2300      	movs	r3, #0
 8010506:	7733      	strb	r3, [r6, #28]
 8010508:	2501      	movs	r5, #1
 801050a:	4628      	mov	r0, r5
 801050c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010510:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8010514:	ea4f 2505 	mov.w	r5, r5, lsl #8
 8010518:	bf08      	it	eq
 801051a:	70fb      	strbeq	r3, [r7, #3]
 801051c:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8010520:	4320      	orrs	r0, r4
 8010522:	78fc      	ldrb	r4, [r7, #3]
 8010524:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8010528:	e7de      	b.n	80104e8 <HAL_RTC_SetTime+0x4e>
 801052a:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 801052e:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8010532:	601c      	str	r4, [r3, #0]
 8010534:	689a      	ldr	r2, [r3, #8]
 8010536:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801053a:	609a      	str	r2, [r3, #8]
 801053c:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 8010540:	6899      	ldr	r1, [r3, #8]
 8010542:	4302      	orrs	r2, r0
 8010544:	430a      	orrs	r2, r1
 8010546:	609a      	str	r2, [r3, #8]
 8010548:	68da      	ldr	r2, [r3, #12]
 801054a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801054e:	60da      	str	r2, [r3, #12]
 8010550:	689b      	ldr	r3, [r3, #8]
 8010552:	069b      	lsls	r3, r3, #26
 8010554:	d40a      	bmi.n	801056c <HAL_RTC_SetTime+0xd2>
 8010556:	4630      	mov	r0, r6
 8010558:	f7ff ff14 	bl	8010384 <HAL_RTC_WaitForSynchro>
 801055c:	b130      	cbz	r0, 801056c <HAL_RTC_SetTime+0xd2>
 801055e:	6833      	ldr	r3, [r6, #0]
 8010560:	22ff      	movs	r2, #255	; 0xff
 8010562:	625a      	str	r2, [r3, #36]	; 0x24
 8010564:	2304      	movs	r3, #4
 8010566:	7773      	strb	r3, [r6, #29]
 8010568:	7735      	strb	r5, [r6, #28]
 801056a:	e7cd      	b.n	8010508 <HAL_RTC_SetTime+0x6e>
 801056c:	6833      	ldr	r3, [r6, #0]
 801056e:	22ff      	movs	r2, #255	; 0xff
 8010570:	625a      	str	r2, [r3, #36]	; 0x24
 8010572:	2301      	movs	r3, #1
 8010574:	7773      	strb	r3, [r6, #29]
 8010576:	2300      	movs	r3, #0
 8010578:	7733      	strb	r3, [r6, #28]
 801057a:	e7c6      	b.n	801050a <HAL_RTC_SetTime+0x70>

0801057c <HAL_RTC_SetDate>:
 801057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801057e:	7f03      	ldrb	r3, [r0, #28]
 8010580:	2b01      	cmp	r3, #1
 8010582:	4606      	mov	r6, r0
 8010584:	f04f 0502 	mov.w	r5, #2
 8010588:	d030      	beq.n	80105ec <HAL_RTC_SetDate+0x70>
 801058a:	2301      	movs	r3, #1
 801058c:	7703      	strb	r3, [r0, #28]
 801058e:	7745      	strb	r5, [r0, #29]
 8010590:	780d      	ldrb	r5, [r1, #0]
 8010592:	78c8      	ldrb	r0, [r1, #3]
 8010594:	784c      	ldrb	r4, [r1, #1]
 8010596:	788f      	ldrb	r7, [r1, #2]
 8010598:	036d      	lsls	r5, r5, #13
 801059a:	2a00      	cmp	r2, #0
 801059c:	d147      	bne.n	801062e <HAL_RTC_SetDate+0xb2>
 801059e:	06e2      	lsls	r2, r4, #27
 80105a0:	d503      	bpl.n	80105aa <HAL_RTC_SetDate+0x2e>
 80105a2:	f024 0410 	bic.w	r4, r4, #16
 80105a6:	340a      	adds	r4, #10
 80105a8:	704c      	strb	r4, [r1, #1]
 80105aa:	f7ff ff6b 	bl	8010484 <RTC_ByteToBcd2>
 80105ae:	4602      	mov	r2, r0
 80105b0:	7848      	ldrb	r0, [r1, #1]
 80105b2:	f7ff ff67 	bl	8010484 <RTC_ByteToBcd2>
 80105b6:	4604      	mov	r4, r0
 80105b8:	4638      	mov	r0, r7
 80105ba:	f7ff ff63 	bl	8010484 <RTC_ByteToBcd2>
 80105be:	4328      	orrs	r0, r5
 80105c0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80105c4:	6833      	ldr	r3, [r6, #0]
 80105c6:	22ca      	movs	r2, #202	; 0xca
 80105c8:	625a      	str	r2, [r3, #36]	; 0x24
 80105ca:	2253      	movs	r2, #83	; 0x53
 80105cc:	625a      	str	r2, [r3, #36]	; 0x24
 80105ce:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
 80105d2:	4630      	mov	r0, r6
 80105d4:	f7ff feee 	bl	80103b4 <RTC_EnterInitMode>
 80105d8:	6833      	ldr	r3, [r6, #0]
 80105da:	4605      	mov	r5, r0
 80105dc:	b140      	cbz	r0, 80105f0 <HAL_RTC_SetDate+0x74>
 80105de:	22ff      	movs	r2, #255	; 0xff
 80105e0:	625a      	str	r2, [r3, #36]	; 0x24
 80105e2:	2304      	movs	r3, #4
 80105e4:	7773      	strb	r3, [r6, #29]
 80105e6:	2300      	movs	r3, #0
 80105e8:	7733      	strb	r3, [r6, #28]
 80105ea:	2501      	movs	r5, #1
 80105ec:	4628      	mov	r0, r5
 80105ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105f0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80105f4:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80105f8:	605c      	str	r4, [r3, #4]
 80105fa:	68da      	ldr	r2, [r3, #12]
 80105fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010600:	60da      	str	r2, [r3, #12]
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	069b      	lsls	r3, r3, #26
 8010606:	d40a      	bmi.n	801061e <HAL_RTC_SetDate+0xa2>
 8010608:	4630      	mov	r0, r6
 801060a:	f7ff febb 	bl	8010384 <HAL_RTC_WaitForSynchro>
 801060e:	b130      	cbz	r0, 801061e <HAL_RTC_SetDate+0xa2>
 8010610:	6833      	ldr	r3, [r6, #0]
 8010612:	22ff      	movs	r2, #255	; 0xff
 8010614:	625a      	str	r2, [r3, #36]	; 0x24
 8010616:	2304      	movs	r3, #4
 8010618:	7773      	strb	r3, [r6, #29]
 801061a:	7735      	strb	r5, [r6, #28]
 801061c:	e7e5      	b.n	80105ea <HAL_RTC_SetDate+0x6e>
 801061e:	6833      	ldr	r3, [r6, #0]
 8010620:	22ff      	movs	r2, #255	; 0xff
 8010622:	625a      	str	r2, [r3, #36]	; 0x24
 8010624:	2301      	movs	r3, #1
 8010626:	7773      	strb	r3, [r6, #29]
 8010628:	2300      	movs	r3, #0
 801062a:	7733      	strb	r3, [r6, #28]
 801062c:	e7de      	b.n	80105ec <HAL_RTC_SetDate+0x70>
 801062e:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8010632:	4338      	orrs	r0, r7
 8010634:	e7c6      	b.n	80105c4 <HAL_RTC_SetDate+0x48>

08010636 <HAL_RTCEx_BKUPWrite>:
 8010636:	6803      	ldr	r3, [r0, #0]
 8010638:	3350      	adds	r3, #80	; 0x50
 801063a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801063e:	4770      	bx	lr

08010640 <HAL_RTCEx_BKUPRead>:
 8010640:	6803      	ldr	r3, [r0, #0]
 8010642:	3350      	adds	r3, #80	; 0x50
 8010644:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010648:	4770      	bx	lr

0801064a <SD_DMATransmitCplt>:
 801064a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8010650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010654:	63d3      	str	r3, [r2, #60]	; 0x3c
 8010656:	4770      	bx	lr

08010658 <HAL_SD_DeInit>:
 8010658:	b510      	push	{r4, lr}
 801065a:	4604      	mov	r4, r0
 801065c:	b168      	cbz	r0, 801067a <HAL_SD_DeInit+0x22>
 801065e:	2303      	movs	r3, #3
 8010660:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8010664:	6800      	ldr	r0, [r0, #0]
 8010666:	f001 fbc5 	bl	8011df4 <SDIO_PowerState_OFF>
 801066a:	4620      	mov	r0, r4
 801066c:	f7fd fc66 	bl	800df3c <HAL_SD_MspDeInit>
 8010670:	2000      	movs	r0, #0
 8010672:	63a0      	str	r0, [r4, #56]	; 0x38
 8010674:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8010678:	bd10      	pop	{r4, pc}
 801067a:	2001      	movs	r0, #1
 801067c:	e7fc      	b.n	8010678 <HAL_SD_DeInit+0x20>
	...

08010680 <HAL_SD_ReadBlocks_DMA>:
 8010680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010684:	4604      	mov	r4, r0
 8010686:	b087      	sub	sp, #28
 8010688:	4617      	mov	r7, r2
 801068a:	4698      	mov	r8, r3
 801068c:	b941      	cbnz	r1, 80106a0 <HAL_SD_ReadBlocks_DMA+0x20>
 801068e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010690:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010694:	63a3      	str	r3, [r4, #56]	; 0x38
 8010696:	2501      	movs	r5, #1
 8010698:	4628      	mov	r0, r5
 801069a:	b007      	add	sp, #28
 801069c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106a0:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 80106a4:	b2f6      	uxtb	r6, r6
 80106a6:	2e01      	cmp	r6, #1
 80106a8:	d176      	bne.n	8010798 <HAL_SD_ReadBlocks_DMA+0x118>
 80106aa:	2200      	movs	r2, #0
 80106ac:	6382      	str	r2, [r0, #56]	; 0x38
 80106ae:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80106b0:	18fb      	adds	r3, r7, r3
 80106b2:	4283      	cmp	r3, r0
 80106b4:	d903      	bls.n	80106be <HAL_SD_ReadBlocks_DMA+0x3e>
 80106b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80106b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80106bc:	e7ea      	b.n	8010694 <HAL_SD_ReadBlocks_DMA+0x14>
 80106be:	6825      	ldr	r5, [r4, #0]
 80106c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80106c2:	2303      	movs	r3, #3
 80106c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80106c8:	62ea      	str	r2, [r5, #44]	; 0x2c
 80106ca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80106cc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80106d0:	f043 0302 	orr.w	r3, r3, #2
 80106d4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80106d6:	4b31      	ldr	r3, [pc, #196]	; (801079c <HAL_SD_ReadBlocks_DMA+0x11c>)
 80106d8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80106da:	4b31      	ldr	r3, [pc, #196]	; (80107a0 <HAL_SD_ReadBlocks_DMA+0x120>)
 80106dc:	ea4f 2948 	mov.w	r9, r8, lsl #9
 80106e0:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
 80106e4:	460a      	mov	r2, r1
 80106e6:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80106ea:	f105 0180 	add.w	r1, r5, #128	; 0x80
 80106ee:	f7fe fa05 	bl	800eafc <HAL_DMA_Start_IT>
 80106f2:	4605      	mov	r5, r0
 80106f4:	b168      	cbz	r0, 8010712 <HAL_SD_ReadBlocks_DMA+0x92>
 80106f6:	6823      	ldr	r3, [r4, #0]
 80106f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80106fa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80106fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8010700:	4a28      	ldr	r2, [pc, #160]	; (80107a4 <HAL_SD_ReadBlocks_DMA+0x124>)
 8010702:	639a      	str	r2, [r3, #56]	; 0x38
 8010704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010706:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801070a:	63a3      	str	r3, [r4, #56]	; 0x38
 801070c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8010710:	e7c1      	b.n	8010696 <HAL_SD_ReadBlocks_DMA+0x16>
 8010712:	4b25      	ldr	r3, [pc, #148]	; (80107a8 <HAL_SD_ReadBlocks_DMA+0x128>)
 8010714:	6820      	ldr	r0, [r4, #0]
 8010716:	601e      	str	r6, [r3, #0]
 8010718:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801071e:	2b01      	cmp	r3, #1
 8010720:	bf18      	it	ne
 8010722:	027f      	lslne	r7, r7, #9
 8010724:	f001 fb97 	bl	8011e56 <SDMMC_CmdBlockLength>
 8010728:	b148      	cbz	r0, 801073e <HAL_SD_ReadBlocks_DMA+0xbe>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	4a1d      	ldr	r2, [pc, #116]	; (80107a4 <HAL_SD_ReadBlocks_DMA+0x124>)
 801072e:	639a      	str	r2, [r3, #56]	; 0x38
 8010730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010732:	2501      	movs	r5, #1
 8010734:	4318      	orrs	r0, r3
 8010736:	63a0      	str	r0, [r4, #56]	; 0x38
 8010738:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 801073c:	e7ac      	b.n	8010698 <HAL_SD_ReadBlocks_DMA+0x18>
 801073e:	f04f 33ff 	mov.w	r3, #4294967295
 8010742:	e9cd 3900 	strd	r3, r9, [sp]
 8010746:	2290      	movs	r2, #144	; 0x90
 8010748:	2302      	movs	r3, #2
 801074a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801074e:	9004      	str	r0, [sp, #16]
 8010750:	2301      	movs	r3, #1
 8010752:	4669      	mov	r1, sp
 8010754:	6820      	ldr	r0, [r4, #0]
 8010756:	9305      	str	r3, [sp, #20]
 8010758:	f001 fb6a 	bl	8011e30 <SDIO_ConfigData>
 801075c:	f1b8 0f01 	cmp.w	r8, #1
 8010760:	d913      	bls.n	801078a <HAL_SD_ReadBlocks_DMA+0x10a>
 8010762:	2382      	movs	r3, #130	; 0x82
 8010764:	6323      	str	r3, [r4, #48]	; 0x30
 8010766:	4639      	mov	r1, r7
 8010768:	6820      	ldr	r0, [r4, #0]
 801076a:	f001 fba4 	bl	8011eb6 <SDMMC_CmdReadMultiBlock>
 801076e:	2800      	cmp	r0, #0
 8010770:	d092      	beq.n	8010698 <HAL_SD_ReadBlocks_DMA+0x18>
 8010772:	6823      	ldr	r3, [r4, #0]
 8010774:	4a0b      	ldr	r2, [pc, #44]	; (80107a4 <HAL_SD_ReadBlocks_DMA+0x124>)
 8010776:	639a      	str	r2, [r3, #56]	; 0x38
 8010778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801077a:	2501      	movs	r5, #1
 801077c:	4318      	orrs	r0, r3
 801077e:	2300      	movs	r3, #0
 8010780:	63a0      	str	r0, [r4, #56]	; 0x38
 8010782:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8010786:	6323      	str	r3, [r4, #48]	; 0x30
 8010788:	e786      	b.n	8010698 <HAL_SD_ReadBlocks_DMA+0x18>
 801078a:	2381      	movs	r3, #129	; 0x81
 801078c:	6323      	str	r3, [r4, #48]	; 0x30
 801078e:	4639      	mov	r1, r7
 8010790:	6820      	ldr	r0, [r4, #0]
 8010792:	f001 fb78 	bl	8011e86 <SDMMC_CmdReadSingleBlock>
 8010796:	e7ea      	b.n	801076e <HAL_SD_ReadBlocks_DMA+0xee>
 8010798:	2502      	movs	r5, #2
 801079a:	e77d      	b.n	8010698 <HAL_SD_ReadBlocks_DMA+0x18>
 801079c:	080108df 	.word	0x080108df
 80107a0:	08010cf9 	.word	0x08010cf9
 80107a4:	004005ff 	.word	0x004005ff
 80107a8:	4225858c 	.word	0x4225858c

080107ac <HAL_SD_WriteBlocks_DMA>:
 80107ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107b0:	4604      	mov	r4, r0
 80107b2:	b087      	sub	sp, #28
 80107b4:	4616      	mov	r6, r2
 80107b6:	461f      	mov	r7, r3
 80107b8:	4689      	mov	r9, r1
 80107ba:	b941      	cbnz	r1, 80107ce <HAL_SD_WriteBlocks_DMA+0x22>
 80107bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80107be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80107c2:	6383      	str	r3, [r0, #56]	; 0x38
 80107c4:	2501      	movs	r5, #1
 80107c6:	4628      	mov	r0, r5
 80107c8:	b007      	add	sp, #28
 80107ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107ce:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 80107d2:	b2ed      	uxtb	r5, r5
 80107d4:	2d01      	cmp	r5, #1
 80107d6:	d177      	bne.n	80108c8 <HAL_SD_WriteBlocks_DMA+0x11c>
 80107d8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80107da:	18f3      	adds	r3, r6, r3
 80107dc:	2200      	movs	r2, #0
 80107de:	428b      	cmp	r3, r1
 80107e0:	6382      	str	r2, [r0, #56]	; 0x38
 80107e2:	d904      	bls.n	80107ee <HAL_SD_WriteBlocks_DMA+0x42>
 80107e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80107e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80107ea:	6383      	str	r3, [r0, #56]	; 0x38
 80107ec:	e7eb      	b.n	80107c6 <HAL_SD_WriteBlocks_DMA+0x1a>
 80107ee:	2303      	movs	r3, #3
 80107f0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 80107f4:	6800      	ldr	r0, [r0, #0]
 80107f6:	4935      	ldr	r1, [pc, #212]	; (80108cc <HAL_SD_WriteBlocks_DMA+0x120>)
 80107f8:	62c2      	str	r2, [r0, #44]	; 0x2c
 80107fa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80107fc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8010800:	f043 0302 	orr.w	r3, r3, #2
 8010804:	63c3      	str	r3, [r0, #60]	; 0x3c
 8010806:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010808:	63d9      	str	r1, [r3, #60]	; 0x3c
 801080a:	4931      	ldr	r1, [pc, #196]	; (80108d0 <HAL_SD_WriteBlocks_DMA+0x124>)
 801080c:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
 8010810:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010812:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010816:	2b01      	cmp	r3, #1
 8010818:	bf18      	it	ne
 801081a:	0276      	lslne	r6, r6, #9
 801081c:	f001 fb1b 	bl	8011e56 <SDMMC_CmdBlockLength>
 8010820:	4602      	mov	r2, r0
 8010822:	6820      	ldr	r0, [r4, #0]
 8010824:	b142      	cbz	r2, 8010838 <HAL_SD_WriteBlocks_DMA+0x8c>
 8010826:	4b2b      	ldr	r3, [pc, #172]	; (80108d4 <HAL_SD_WriteBlocks_DMA+0x128>)
 8010828:	6383      	str	r3, [r0, #56]	; 0x38
 801082a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801082c:	2501      	movs	r5, #1
 801082e:	4313      	orrs	r3, r2
 8010830:	63a3      	str	r3, [r4, #56]	; 0x38
 8010832:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8010836:	e7c6      	b.n	80107c6 <HAL_SD_WriteBlocks_DMA+0x1a>
 8010838:	2f01      	cmp	r7, #1
 801083a:	d912      	bls.n	8010862 <HAL_SD_WriteBlocks_DMA+0xb6>
 801083c:	23a0      	movs	r3, #160	; 0xa0
 801083e:	6323      	str	r3, [r4, #48]	; 0x30
 8010840:	4631      	mov	r1, r6
 8010842:	f001 fb68 	bl	8011f16 <SDMMC_CmdWriteMultiBlock>
 8010846:	4606      	mov	r6, r0
 8010848:	6822      	ldr	r2, [r4, #0]
 801084a:	b180      	cbz	r0, 801086e <HAL_SD_WriteBlocks_DMA+0xc2>
 801084c:	4b21      	ldr	r3, [pc, #132]	; (80108d4 <HAL_SD_WriteBlocks_DMA+0x128>)
 801084e:	6393      	str	r3, [r2, #56]	; 0x38
 8010850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010852:	2501      	movs	r5, #1
 8010854:	431e      	orrs	r6, r3
 8010856:	2300      	movs	r3, #0
 8010858:	63a6      	str	r6, [r4, #56]	; 0x38
 801085a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 801085e:	6323      	str	r3, [r4, #48]	; 0x30
 8010860:	e7b1      	b.n	80107c6 <HAL_SD_WriteBlocks_DMA+0x1a>
 8010862:	2390      	movs	r3, #144	; 0x90
 8010864:	6323      	str	r3, [r4, #48]	; 0x30
 8010866:	4631      	mov	r1, r6
 8010868:	f001 fb3d 	bl	8011ee6 <SDMMC_CmdWriteSingleBlock>
 801086c:	e7eb      	b.n	8010846 <HAL_SD_WriteBlocks_DMA+0x9a>
 801086e:	4b1a      	ldr	r3, [pc, #104]	; (80108d8 <HAL_SD_WriteBlocks_DMA+0x12c>)
 8010870:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010872:	f04f 0801 	mov.w	r8, #1
 8010876:	027f      	lsls	r7, r7, #9
 8010878:	f8c3 8000 	str.w	r8, [r3]
 801087c:	3280      	adds	r2, #128	; 0x80
 801087e:	08bb      	lsrs	r3, r7, #2
 8010880:	4649      	mov	r1, r9
 8010882:	f7fe f93b 	bl	800eafc <HAL_DMA_Start_IT>
 8010886:	4605      	mov	r5, r0
 8010888:	b180      	cbz	r0, 80108ac <HAL_SD_WriteBlocks_DMA+0x100>
 801088a:	6822      	ldr	r2, [r4, #0]
 801088c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801088e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8010892:	f023 0302 	bic.w	r3, r3, #2
 8010896:	63d3      	str	r3, [r2, #60]	; 0x3c
 8010898:	4b0e      	ldr	r3, [pc, #56]	; (80108d4 <HAL_SD_WriteBlocks_DMA+0x128>)
 801089a:	6393      	str	r3, [r2, #56]	; 0x38
 801089c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801089e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80108a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80108a4:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
 80108a8:	6326      	str	r6, [r4, #48]	; 0x30
 80108aa:	e78b      	b.n	80107c4 <HAL_SD_WriteBlocks_DMA+0x18>
 80108ac:	f04f 33ff 	mov.w	r3, #4294967295
 80108b0:	e9cd 3700 	strd	r3, r7, [sp]
 80108b4:	4669      	mov	r1, sp
 80108b6:	2390      	movs	r3, #144	; 0x90
 80108b8:	6820      	ldr	r0, [r4, #0]
 80108ba:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80108be:	e9cd 6804 	strd	r6, r8, [sp, #16]
 80108c2:	f001 fab5 	bl	8011e30 <SDIO_ConfigData>
 80108c6:	e77e      	b.n	80107c6 <HAL_SD_WriteBlocks_DMA+0x1a>
 80108c8:	2502      	movs	r5, #2
 80108ca:	e77c      	b.n	80107c6 <HAL_SD_WriteBlocks_DMA+0x1a>
 80108cc:	0801064b 	.word	0x0801064b
 80108d0:	08010cf9 	.word	0x08010cf9
 80108d4:	004005ff 	.word	0x004005ff
 80108d8:	4225858c 	.word	0x4225858c

080108dc <HAL_SD_ErrorCallback>:
 80108dc:	4770      	bx	lr

080108de <SD_DMAReceiveCplt>:
 80108de:	b510      	push	{r4, lr}
 80108e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80108e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80108e4:	2b82      	cmp	r3, #130	; 0x82
 80108e6:	d109      	bne.n	80108fc <SD_DMAReceiveCplt+0x1e>
 80108e8:	6820      	ldr	r0, [r4, #0]
 80108ea:	f001 fb2d 	bl	8011f48 <SDMMC_CmdStopTransfer>
 80108ee:	b128      	cbz	r0, 80108fc <SD_DMAReceiveCplt+0x1e>
 80108f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80108f2:	4318      	orrs	r0, r3
 80108f4:	63a0      	str	r0, [r4, #56]	; 0x38
 80108f6:	4620      	mov	r0, r4
 80108f8:	f7ff fff0 	bl	80108dc <HAL_SD_ErrorCallback>
 80108fc:	6823      	ldr	r3, [r4, #0]
 80108fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010900:	f022 0208 	bic.w	r2, r2, #8
 8010904:	62da      	str	r2, [r3, #44]	; 0x2c
 8010906:	f240 523a 	movw	r2, #1338	; 0x53a
 801090a:	639a      	str	r2, [r3, #56]	; 0x38
 801090c:	2301      	movs	r3, #1
 801090e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010912:	2300      	movs	r3, #0
 8010914:	6323      	str	r3, [r4, #48]	; 0x30
 8010916:	4620      	mov	r0, r4
 8010918:	f002 f845 	bl	80129a6 <HAL_SD_RxCpltCallback>
 801091c:	bd10      	pop	{r4, pc}
	...

08010920 <HAL_SD_GetCardCSD>:
 8010920:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8010922:	0f9a      	lsrs	r2, r3, #30
 8010924:	700a      	strb	r2, [r1, #0]
 8010926:	f3c3 6283 	ubfx	r2, r3, #26, #4
 801092a:	704a      	strb	r2, [r1, #1]
 801092c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8010930:	708a      	strb	r2, [r1, #2]
 8010932:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010936:	70ca      	strb	r2, [r1, #3]
 8010938:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801093c:	b2db      	uxtb	r3, r3
 801093e:	710a      	strb	r2, [r1, #4]
 8010940:	714b      	strb	r3, [r1, #5]
 8010942:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8010944:	0d1a      	lsrs	r2, r3, #20
 8010946:	80ca      	strh	r2, [r1, #6]
 8010948:	f3c3 4203 	ubfx	r2, r3, #16, #4
 801094c:	720a      	strb	r2, [r1, #8]
 801094e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8010952:	724a      	strb	r2, [r1, #9]
 8010954:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8010958:	728a      	strb	r2, [r1, #10]
 801095a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 801095e:	72ca      	strb	r2, [r1, #11]
 8010960:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8010964:	730a      	strb	r2, [r1, #12]
 8010966:	2200      	movs	r2, #0
 8010968:	734a      	strb	r2, [r1, #13]
 801096a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801096c:	b510      	push	{r4, lr}
 801096e:	2a00      	cmp	r2, #0
 8010970:	d16b      	bne.n	8010a4a <HAL_SD_GetCardCSD+0x12a>
 8010972:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8010974:	f640 74fc 	movw	r4, #4092	; 0xffc
 8010978:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 801097c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8010980:	610b      	str	r3, [r1, #16]
 8010982:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8010986:	750b      	strb	r3, [r1, #20]
 8010988:	f3c2 6302 	ubfx	r3, r2, #24, #3
 801098c:	754b      	strb	r3, [r1, #21]
 801098e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8010992:	758b      	strb	r3, [r1, #22]
 8010994:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8010998:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 801099c:	75cb      	strb	r3, [r1, #23]
 801099e:	760a      	strb	r2, [r1, #24]
 80109a0:	690b      	ldr	r3, [r1, #16]
 80109a2:	7e0a      	ldrb	r2, [r1, #24]
 80109a4:	f002 0207 	and.w	r2, r2, #7
 80109a8:	3202      	adds	r2, #2
 80109aa:	3301      	adds	r3, #1
 80109ac:	4093      	lsls	r3, r2
 80109ae:	6543      	str	r3, [r0, #84]	; 0x54
 80109b0:	7a0a      	ldrb	r2, [r1, #8]
 80109b2:	f002 040f 	and.w	r4, r2, #15
 80109b6:	2201      	movs	r2, #1
 80109b8:	40a2      	lsls	r2, r4
 80109ba:	6582      	str	r2, [r0, #88]	; 0x58
 80109bc:	0a52      	lsrs	r2, r2, #9
 80109be:	4353      	muls	r3, r2
 80109c0:	65c3      	str	r3, [r0, #92]	; 0x5c
 80109c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109c6:	6603      	str	r3, [r0, #96]	; 0x60
 80109c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80109ca:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80109ce:	764a      	strb	r2, [r1, #25]
 80109d0:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 80109d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109d8:	768a      	strb	r2, [r1, #26]
 80109da:	76cb      	strb	r3, [r1, #27]
 80109dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80109de:	0fda      	lsrs	r2, r3, #31
 80109e0:	770a      	strb	r2, [r1, #28]
 80109e2:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80109e6:	774a      	strb	r2, [r1, #29]
 80109e8:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80109ec:	778a      	strb	r2, [r1, #30]
 80109ee:	f3c3 5283 	ubfx	r2, r3, #22, #4
 80109f2:	77ca      	strb	r2, [r1, #31]
 80109f4:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80109f8:	f881 2020 	strb.w	r2, [r1, #32]
 80109fc:	2000      	movs	r0, #0
 80109fe:	f3c3 4200 	ubfx	r2, r3, #16, #1
 8010a02:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
 8010a06:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
 8010a0a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8010a0e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
 8010a12:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8010a16:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
 8010a1a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8010a1e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
 8010a22:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8010a26:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
 8010a2a:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8010a2e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
 8010a32:	f3c3 2201 	ubfx	r2, r3, #8, #2
 8010a36:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8010a3a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
 8010a3e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
 8010a42:	2301      	movs	r3, #1
 8010a44:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
 8010a48:	bd10      	pop	{r4, pc}
 8010a4a:	2a01      	cmp	r2, #1
 8010a4c:	d10f      	bne.n	8010a6e <HAL_SD_GetCardCSD+0x14e>
 8010a4e:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8010a52:	041b      	lsls	r3, r3, #16
 8010a54:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	610b      	str	r3, [r1, #16]
 8010a5c:	690b      	ldr	r3, [r1, #16]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	029b      	lsls	r3, r3, #10
 8010a62:	6543      	str	r3, [r0, #84]	; 0x54
 8010a64:	65c3      	str	r3, [r0, #92]	; 0x5c
 8010a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a6a:	6583      	str	r3, [r0, #88]	; 0x58
 8010a6c:	e7ab      	b.n	80109c6 <HAL_SD_GetCardCSD+0xa6>
 8010a6e:	6803      	ldr	r3, [r0, #0]
 8010a70:	4a05      	ldr	r2, [pc, #20]	; (8010a88 <HAL_SD_GetCardCSD+0x168>)
 8010a72:	639a      	str	r2, [r3, #56]	; 0x38
 8010a74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a7a:	6383      	str	r3, [r0, #56]	; 0x38
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8010a82:	4618      	mov	r0, r3
 8010a84:	e7e0      	b.n	8010a48 <HAL_SD_GetCardCSD+0x128>
 8010a86:	bf00      	nop
 8010a88:	004005ff 	.word	0x004005ff

08010a8c <HAL_SD_InitCard>:
 8010a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a90:	2300      	movs	r3, #0
 8010a92:	b099      	sub	sp, #100	; 0x64
 8010a94:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8010a98:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8010a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a9e:	2376      	movs	r3, #118	; 0x76
 8010aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8010aa2:	ab0a      	add	r3, sp, #40	; 0x28
 8010aa4:	4604      	mov	r4, r0
 8010aa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010aaa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010aae:	ab07      	add	r3, sp, #28
 8010ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ab2:	6820      	ldr	r0, [r4, #0]
 8010ab4:	f001 f972 	bl	8011d9c <SDIO_Init>
 8010ab8:	4605      	mov	r5, r0
 8010aba:	2800      	cmp	r0, #0
 8010abc:	f040 80d4 	bne.w	8010c68 <HAL_SD_InitCard+0x1dc>
 8010ac0:	4f6a      	ldr	r7, [pc, #424]	; (8010c6c <HAL_SD_InitCard+0x1e0>)
 8010ac2:	2601      	movs	r6, #1
 8010ac4:	6038      	str	r0, [r7, #0]
 8010ac6:	6820      	ldr	r0, [r4, #0]
 8010ac8:	f001 f98c 	bl	8011de4 <SDIO_PowerState_ON>
 8010acc:	603e      	str	r6, [r7, #0]
 8010ace:	6820      	ldr	r0, [r4, #0]
 8010ad0:	9506      	str	r5, [sp, #24]
 8010ad2:	f001 fa6b 	bl	8011fac <SDMMC_CmdGoIdleState>
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	b940      	cbnz	r0, 8010aec <HAL_SD_InitCard+0x60>
 8010ada:	6820      	ldr	r0, [r4, #0]
 8010adc:	f001 fa8e 	bl	8011ffc <SDMMC_CmdOperCond>
 8010ae0:	b158      	cbz	r0, 8010afa <HAL_SD_InitCard+0x6e>
 8010ae2:	64a5      	str	r5, [r4, #72]	; 0x48
 8010ae4:	6820      	ldr	r0, [r4, #0]
 8010ae6:	f001 fa61 	bl	8011fac <SDMMC_CmdGoIdleState>
 8010aea:	b138      	cbz	r0, 8010afc <HAL_SD_InitCard+0x70>
 8010aec:	2501      	movs	r5, #1
 8010aee:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8010af2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010af4:	4318      	orrs	r0, r3
 8010af6:	63a0      	str	r0, [r4, #56]	; 0x38
 8010af8:	e084      	b.n	8010c04 <HAL_SD_InitCard+0x178>
 8010afa:	64a6      	str	r6, [r4, #72]	; 0x48
 8010afc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d134      	bne.n	8010b6c <HAL_SD_InitCard+0xe0>
 8010b02:	2100      	movs	r1, #0
 8010b04:	6820      	ldr	r0, [r4, #0]
 8010b06:	f001 fab9 	bl	801207c <SDMMC_CmdAppCommand>
 8010b0a:	b378      	cbz	r0, 8010b6c <HAL_SD_InitCard+0xe0>
 8010b0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010b10:	e7ec      	b.n	8010aec <HAL_SD_InitCard+0x60>
 8010b12:	4631      	mov	r1, r6
 8010b14:	6820      	ldr	r0, [r4, #0]
 8010b16:	f001 fab1 	bl	801207c <SDMMC_CmdAppCommand>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	d1e6      	bne.n	8010aec <HAL_SD_InitCard+0x60>
 8010b1e:	4649      	mov	r1, r9
 8010b20:	6820      	ldr	r0, [r4, #0]
 8010b22:	f001 fac3 	bl	80120ac <SDMMC_CmdAppOperCommand>
 8010b26:	2800      	cmp	r0, #0
 8010b28:	d1f0      	bne.n	8010b0c <HAL_SD_InitCard+0x80>
 8010b2a:	4631      	mov	r1, r6
 8010b2c:	6820      	ldr	r0, [r4, #0]
 8010b2e:	f001 f97c 	bl	8011e2a <SDIO_GetResponse>
 8010b32:	9b06      	ldr	r3, [sp, #24]
 8010b34:	3301      	adds	r3, #1
 8010b36:	4605      	mov	r5, r0
 8010b38:	9306      	str	r3, [sp, #24]
 8010b3a:	0fc6      	lsrs	r6, r0, #31
 8010b3c:	9b06      	ldr	r3, [sp, #24]
 8010b3e:	42bb      	cmp	r3, r7
 8010b40:	d801      	bhi.n	8010b46 <HAL_SD_InitCard+0xba>
 8010b42:	2e00      	cmp	r6, #0
 8010b44:	d0e5      	beq.n	8010b12 <HAL_SD_InitCard+0x86>
 8010b46:	9b06      	ldr	r3, [sp, #24]
 8010b48:	4543      	cmp	r3, r8
 8010b4a:	d816      	bhi.n	8010b7a <HAL_SD_InitCard+0xee>
 8010b4c:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 8010b50:	f04f 0301 	mov.w	r3, #1
 8010b54:	bf18      	it	ne
 8010b56:	461d      	movne	r5, r3
 8010b58:	6465      	str	r5, [r4, #68]	; 0x44
 8010b5a:	6820      	ldr	r0, [r4, #0]
 8010b5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010b60:	f001 f94c 	bl	8011dfc <SDIO_GetPowerState>
 8010b64:	b960      	cbnz	r0, 8010b80 <HAL_SD_InitCard+0xf4>
 8010b66:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8010b6a:	e056      	b.n	8010c1a <HAL_SD_InitCard+0x18e>
 8010b6c:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 8010b70:	2600      	movs	r6, #0
 8010b72:	46b8      	mov	r8, r7
 8010b74:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8010c70 <HAL_SD_InitCard+0x1e4>
 8010b78:	e7e0      	b.n	8010b3c <HAL_SD_InitCard+0xb0>
 8010b7a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8010b7e:	e7b5      	b.n	8010aec <HAL_SD_InitCard+0x60>
 8010b80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010b82:	2b03      	cmp	r3, #3
 8010b84:	d019      	beq.n	8010bba <HAL_SD_InitCard+0x12e>
 8010b86:	6820      	ldr	r0, [r4, #0]
 8010b88:	f001 faa9 	bl	80120de <SDMMC_CmdSendCID>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d144      	bne.n	8010c1a <HAL_SD_InitCard+0x18e>
 8010b90:	4601      	mov	r1, r0
 8010b92:	6820      	ldr	r0, [r4, #0]
 8010b94:	f001 f949 	bl	8011e2a <SDIO_GetResponse>
 8010b98:	2104      	movs	r1, #4
 8010b9a:	6760      	str	r0, [r4, #116]	; 0x74
 8010b9c:	6820      	ldr	r0, [r4, #0]
 8010b9e:	f001 f944 	bl	8011e2a <SDIO_GetResponse>
 8010ba2:	2108      	movs	r1, #8
 8010ba4:	67a0      	str	r0, [r4, #120]	; 0x78
 8010ba6:	6820      	ldr	r0, [r4, #0]
 8010ba8:	f001 f93f 	bl	8011e2a <SDIO_GetResponse>
 8010bac:	210c      	movs	r1, #12
 8010bae:	67e0      	str	r0, [r4, #124]	; 0x7c
 8010bb0:	6820      	ldr	r0, [r4, #0]
 8010bb2:	f001 f93a 	bl	8011e2a <SDIO_GetResponse>
 8010bb6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8010bba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010bbc:	2b03      	cmp	r3, #3
 8010bbe:	d125      	bne.n	8010c0c <HAL_SD_InitCard+0x180>
 8010bc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010bc2:	2b03      	cmp	r3, #3
 8010bc4:	d12f      	bne.n	8010c26 <HAL_SD_InitCard+0x19a>
 8010bc6:	2104      	movs	r1, #4
 8010bc8:	6820      	ldr	r0, [r4, #0]
 8010bca:	f001 f92e 	bl	8011e2a <SDIO_GetResponse>
 8010bce:	0d00      	lsrs	r0, r0, #20
 8010bd0:	64e0      	str	r0, [r4, #76]	; 0x4c
 8010bd2:	a90d      	add	r1, sp, #52	; 0x34
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f7ff fea3 	bl	8010920 <HAL_SD_GetCardCSD>
 8010bda:	4605      	mov	r5, r0
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	d140      	bne.n	8010c62 <HAL_SD_InitCard+0x1d6>
 8010be0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010be2:	4603      	mov	r3, r0
 8010be4:	0412      	lsls	r2, r2, #16
 8010be6:	6820      	ldr	r0, [r4, #0]
 8010be8:	f001 f9c8 	bl	8011f7c <SDMMC_CmdSelDesel>
 8010bec:	b9a8      	cbnz	r0, 8010c1a <HAL_SD_InitCard+0x18e>
 8010bee:	f104 0310 	add.w	r3, r4, #16
 8010bf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010bf6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010bfa:	1d23      	adds	r3, r4, #4
 8010bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010bfe:	6820      	ldr	r0, [r4, #0]
 8010c00:	f001 f8cc 	bl	8011d9c <SDIO_Init>
 8010c04:	4628      	mov	r0, r5
 8010c06:	b019      	add	sp, #100	; 0x64
 8010c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c0c:	f10d 0116 	add.w	r1, sp, #22
 8010c10:	6820      	ldr	r0, [r4, #0]
 8010c12:	f001 fa8f 	bl	8012134 <SDMMC_CmdSetRelAdd>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d0d2      	beq.n	8010bc0 <HAL_SD_InitCard+0x134>
 8010c1a:	2501      	movs	r5, #1
 8010c1c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8010c20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010c22:	4308      	orrs	r0, r1
 8010c24:	e767      	b.n	8010af6 <HAL_SD_InitCard+0x6a>
 8010c26:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8010c2a:	6521      	str	r1, [r4, #80]	; 0x50
 8010c2c:	6820      	ldr	r0, [r4, #0]
 8010c2e:	0409      	lsls	r1, r1, #16
 8010c30:	f001 fa6a 	bl	8012108 <SDMMC_CmdSendCSD>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	d1f0      	bne.n	8010c1a <HAL_SD_InitCard+0x18e>
 8010c38:	4601      	mov	r1, r0
 8010c3a:	6820      	ldr	r0, [r4, #0]
 8010c3c:	f001 f8f5 	bl	8011e2a <SDIO_GetResponse>
 8010c40:	2104      	movs	r1, #4
 8010c42:	6660      	str	r0, [r4, #100]	; 0x64
 8010c44:	6820      	ldr	r0, [r4, #0]
 8010c46:	f001 f8f0 	bl	8011e2a <SDIO_GetResponse>
 8010c4a:	2108      	movs	r1, #8
 8010c4c:	66a0      	str	r0, [r4, #104]	; 0x68
 8010c4e:	6820      	ldr	r0, [r4, #0]
 8010c50:	f001 f8eb 	bl	8011e2a <SDIO_GetResponse>
 8010c54:	210c      	movs	r1, #12
 8010c56:	66e0      	str	r0, [r4, #108]	; 0x6c
 8010c58:	6820      	ldr	r0, [r4, #0]
 8010c5a:	f001 f8e6 	bl	8011e2a <SDIO_GetResponse>
 8010c5e:	6720      	str	r0, [r4, #112]	; 0x70
 8010c60:	e7b1      	b.n	8010bc6 <HAL_SD_InitCard+0x13a>
 8010c62:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010c66:	e7d8      	b.n	8010c1a <HAL_SD_InitCard+0x18e>
 8010c68:	2501      	movs	r5, #1
 8010c6a:	e7cb      	b.n	8010c04 <HAL_SD_InitCard+0x178>
 8010c6c:	422580a0 	.word	0x422580a0
 8010c70:	c1100000 	.word	0xc1100000

08010c74 <HAL_SD_Init>:
 8010c74:	b510      	push	{r4, lr}
 8010c76:	4604      	mov	r4, r0
 8010c78:	b908      	cbnz	r0, 8010c7e <HAL_SD_Init+0xa>
 8010c7a:	2001      	movs	r0, #1
 8010c7c:	bd10      	pop	{r4, pc}
 8010c7e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8010c82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010c86:	b913      	cbnz	r3, 8010c8e <HAL_SD_Init+0x1a>
 8010c88:	7702      	strb	r2, [r0, #28]
 8010c8a:	f7fd f8a7 	bl	800dddc <HAL_SD_MspInit>
 8010c8e:	2303      	movs	r3, #3
 8010c90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010c94:	4620      	mov	r0, r4
 8010c96:	f7ff fef9 	bl	8010a8c <HAL_SD_InitCard>
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	d1ed      	bne.n	8010c7a <HAL_SD_Init+0x6>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	63a0      	str	r0, [r4, #56]	; 0x38
 8010ca2:	6320      	str	r0, [r4, #48]	; 0x30
 8010ca4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010ca8:	e7e8      	b.n	8010c7c <HAL_SD_Init+0x8>

08010caa <HAL_SD_GetCardInfo>:
 8010caa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010cac:	600b      	str	r3, [r1, #0]
 8010cae:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8010cb0:	604b      	str	r3, [r1, #4]
 8010cb2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010cb4:	608b      	str	r3, [r1, #8]
 8010cb6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010cb8:	60cb      	str	r3, [r1, #12]
 8010cba:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8010cbc:	610b      	str	r3, [r1, #16]
 8010cbe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8010cc0:	614b      	str	r3, [r1, #20]
 8010cc2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8010cc4:	618b      	str	r3, [r1, #24]
 8010cc6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8010cc8:	61cb      	str	r3, [r1, #28]
 8010cca:	2000      	movs	r0, #0
 8010ccc:	4770      	bx	lr

08010cce <HAL_SD_GetCardState>:
 8010cce:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	0409      	lsls	r1, r1, #16
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	6800      	ldr	r0, [r0, #0]
 8010cd8:	f001 fa7c 	bl	80121d4 <SDMMC_CmdSendStatus>
 8010cdc:	4601      	mov	r1, r0
 8010cde:	b928      	cbnz	r0, 8010cec <HAL_SD_GetCardState+0x1e>
 8010ce0:	6820      	ldr	r0, [r4, #0]
 8010ce2:	f001 f8a2 	bl	8011e2a <SDIO_GetResponse>
 8010ce6:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8010cea:	bd10      	pop	{r4, pc}
 8010cec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010cee:	4319      	orrs	r1, r3
 8010cf0:	63a1      	str	r1, [r4, #56]	; 0x38
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	e7f7      	b.n	8010ce6 <HAL_SD_GetCardState+0x18>
	...

08010cf8 <SD_DMAError>:
 8010cf8:	b510      	push	{r4, lr}
 8010cfa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8010cfc:	f7fe f808 	bl	800ed10 <HAL_DMA_GetError>
 8010d00:	2802      	cmp	r0, #2
 8010d02:	d026      	beq.n	8010d52 <SD_DMAError+0x5a>
 8010d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010d08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010d0a:	2a01      	cmp	r2, #1
 8010d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d0e:	d001      	beq.n	8010d14 <SD_DMAError+0x1c>
 8010d10:	2b01      	cmp	r3, #1
 8010d12:	d11b      	bne.n	8010d4c <SD_DMAError+0x54>
 8010d14:	6823      	ldr	r3, [r4, #0]
 8010d16:	4a0f      	ldr	r2, [pc, #60]	; (8010d54 <SD_DMAError+0x5c>)
 8010d18:	639a      	str	r2, [r3, #56]	; 0x38
 8010d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010d1c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8010d20:	63da      	str	r2, [r3, #60]	; 0x3c
 8010d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d28:	63a3      	str	r3, [r4, #56]	; 0x38
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	f7ff ffcf 	bl	8010cce <HAL_SD_GetCardState>
 8010d30:	3805      	subs	r0, #5
 8010d32:	2801      	cmp	r0, #1
 8010d34:	d805      	bhi.n	8010d42 <SD_DMAError+0x4a>
 8010d36:	6820      	ldr	r0, [r4, #0]
 8010d38:	f001 f906 	bl	8011f48 <SDMMC_CmdStopTransfer>
 8010d3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010d3e:	4318      	orrs	r0, r3
 8010d40:	63a0      	str	r0, [r4, #56]	; 0x38
 8010d42:	2301      	movs	r3, #1
 8010d44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010d48:	2300      	movs	r3, #0
 8010d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f7ff fdc5 	bl	80108dc <HAL_SD_ErrorCallback>
 8010d52:	bd10      	pop	{r4, pc}
 8010d54:	004005ff 	.word	0x004005ff

08010d58 <SD_DMATxAbort>:
 8010d58:	b510      	push	{r4, lr}
 8010d5a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8010d5c:	6823      	ldr	r3, [r4, #0]
 8010d5e:	f240 523a 	movw	r2, #1338	; 0x53a
 8010d62:	639a      	str	r2, [r3, #56]	; 0x38
 8010d64:	4620      	mov	r0, r4
 8010d66:	f7ff ffb2 	bl	8010cce <HAL_SD_GetCardState>
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	3805      	subs	r0, #5
 8010d6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010d72:	2801      	cmp	r0, #1
 8010d74:	f04f 0300 	mov.w	r3, #0
 8010d78:	6323      	str	r3, [r4, #48]	; 0x30
 8010d7a:	d805      	bhi.n	8010d88 <SD_DMATxAbort+0x30>
 8010d7c:	6820      	ldr	r0, [r4, #0]
 8010d7e:	f001 f8e3 	bl	8011f48 <SDMMC_CmdStopTransfer>
 8010d82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010d84:	4318      	orrs	r0, r3
 8010d86:	63a0      	str	r0, [r4, #56]	; 0x38
 8010d88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	b913      	cbnz	r3, 8010d94 <SD_DMATxAbort+0x3c>
 8010d8e:	f001 fe02 	bl	8012996 <HAL_SD_AbortCallback>
 8010d92:	bd10      	pop	{r4, pc}
 8010d94:	f7ff fda2 	bl	80108dc <HAL_SD_ErrorCallback>
 8010d98:	e7fb      	b.n	8010d92 <SD_DMATxAbort+0x3a>
	...

08010d9c <HAL_SD_IRQHandler>:
 8010d9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010da0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8010da2:	4604      	mov	r4, r0
 8010da4:	6800      	ldr	r0, [r0, #0]
 8010da6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010da8:	041a      	lsls	r2, r3, #16
 8010daa:	d51f      	bpl.n	8010dec <HAL_SD_IRQHandler+0x50>
 8010dac:	072b      	lsls	r3, r5, #28
 8010dae:	d51d      	bpl.n	8010dec <HAL_SD_IRQHandler+0x50>
 8010db0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010db2:	b1c7      	cbz	r7, 8010de6 <HAL_SD_IRQHandler+0x4a>
 8010db4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010db6:	1d35      	adds	r5, r6, #4
 8010db8:	f106 0824 	add.w	r8, r6, #36	; 0x24
 8010dbc:	6820      	ldr	r0, [r4, #0]
 8010dbe:	f001 f809 	bl	8011dd4 <SDIO_ReadFIFO>
 8010dc2:	0a03      	lsrs	r3, r0, #8
 8010dc4:	f805 0c04 	strb.w	r0, [r5, #-4]
 8010dc8:	f805 3c03 	strb.w	r3, [r5, #-3]
 8010dcc:	0c03      	lsrs	r3, r0, #16
 8010dce:	0e00      	lsrs	r0, r0, #24
 8010dd0:	f805 3c02 	strb.w	r3, [r5, #-2]
 8010dd4:	f805 0c01 	strb.w	r0, [r5, #-1]
 8010dd8:	3504      	adds	r5, #4
 8010dda:	4545      	cmp	r5, r8
 8010ddc:	d1ee      	bne.n	8010dbc <HAL_SD_IRQHandler+0x20>
 8010dde:	3620      	adds	r6, #32
 8010de0:	3f20      	subs	r7, #32
 8010de2:	62a6      	str	r6, [r4, #40]	; 0x28
 8010de4:	62e7      	str	r7, [r4, #44]	; 0x2c
 8010de6:	b002      	add	sp, #8
 8010de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010dee:	05df      	lsls	r7, r3, #23
 8010df0:	d545      	bpl.n	8010e7e <HAL_SD_IRQHandler+0xe2>
 8010df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010df6:	6383      	str	r3, [r0, #56]	; 0x38
 8010df8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8010dfa:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8010dfe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8010e02:	63c3      	str	r3, [r0, #60]	; 0x3c
 8010e04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010e06:	072e      	lsls	r6, r5, #28
 8010e08:	f023 0301 	bic.w	r3, r3, #1
 8010e0c:	62c3      	str	r3, [r0, #44]	; 0x2c
 8010e0e:	d51b      	bpl.n	8010e48 <HAL_SD_IRQHandler+0xac>
 8010e10:	f015 0f22 	tst.w	r5, #34	; 0x22
 8010e14:	d008      	beq.n	8010e28 <HAL_SD_IRQHandler+0x8c>
 8010e16:	f001 f897 	bl	8011f48 <SDMMC_CmdStopTransfer>
 8010e1a:	b128      	cbz	r0, 8010e28 <HAL_SD_IRQHandler+0x8c>
 8010e1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e1e:	4318      	orrs	r0, r3
 8010e20:	63a0      	str	r0, [r4, #56]	; 0x38
 8010e22:	4620      	mov	r0, r4
 8010e24:	f7ff fd5a 	bl	80108dc <HAL_SD_ErrorCallback>
 8010e28:	6823      	ldr	r3, [r4, #0]
 8010e2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8010e2e:	639a      	str	r2, [r3, #56]	; 0x38
 8010e30:	2301      	movs	r3, #1
 8010e32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010e36:	07a9      	lsls	r1, r5, #30
 8010e38:	f04f 0300 	mov.w	r3, #0
 8010e3c:	6323      	str	r3, [r4, #48]	; 0x30
 8010e3e:	4620      	mov	r0, r4
 8010e40:	d01a      	beq.n	8010e78 <HAL_SD_IRQHandler+0xdc>
 8010e42:	f001 fdb0 	bl	80129a6 <HAL_SD_RxCpltCallback>
 8010e46:	e7ce      	b.n	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010e48:	062a      	lsls	r2, r5, #24
 8010e4a:	d5cc      	bpl.n	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010e4c:	06ab      	lsls	r3, r5, #26
 8010e4e:	d508      	bpl.n	8010e62 <HAL_SD_IRQHandler+0xc6>
 8010e50:	f001 f87a 	bl	8011f48 <SDMMC_CmdStopTransfer>
 8010e54:	b128      	cbz	r0, 8010e62 <HAL_SD_IRQHandler+0xc6>
 8010e56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e58:	4318      	orrs	r0, r3
 8010e5a:	63a0      	str	r0, [r4, #56]	; 0x38
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f7ff fd3d 	bl	80108dc <HAL_SD_ErrorCallback>
 8010e62:	07af      	lsls	r7, r5, #30
 8010e64:	d1bf      	bne.n	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010e66:	6822      	ldr	r2, [r4, #0]
 8010e68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8010e6a:	f023 0308 	bic.w	r3, r3, #8
 8010e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010e70:	2301      	movs	r3, #1
 8010e72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010e76:	4620      	mov	r0, r4
 8010e78:	f001 fd91 	bl	801299e <HAL_SD_TxCpltCallback>
 8010e7c:	e7b3      	b.n	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010e7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010e80:	045e      	lsls	r6, r3, #17
 8010e82:	d526      	bpl.n	8010ed2 <HAL_SD_IRQHandler+0x136>
 8010e84:	0729      	lsls	r1, r5, #28
 8010e86:	d524      	bpl.n	8010ed2 <HAL_SD_IRQHandler+0x136>
 8010e88:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8010e8a:	2f00      	cmp	r7, #0
 8010e8c:	d0ab      	beq.n	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010e8e:	6a26      	ldr	r6, [r4, #32]
 8010e90:	1d35      	adds	r5, r6, #4
 8010e92:	f106 0824 	add.w	r8, r6, #36	; 0x24
 8010e96:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8010e9a:	9301      	str	r3, [sp, #4]
 8010e9c:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8010ea0:	6820      	ldr	r0, [r4, #0]
 8010ea2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8010eac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010eb0:	9301      	str	r3, [sp, #4]
 8010eb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010eb6:	a901      	add	r1, sp, #4
 8010eb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010ebc:	3504      	adds	r5, #4
 8010ebe:	9301      	str	r3, [sp, #4]
 8010ec0:	f000 ff8b 	bl	8011dda <SDIO_WriteFIFO>
 8010ec4:	4545      	cmp	r5, r8
 8010ec6:	d1e6      	bne.n	8010e96 <HAL_SD_IRQHandler+0xfa>
 8010ec8:	3620      	adds	r6, #32
 8010eca:	3f20      	subs	r7, #32
 8010ecc:	6226      	str	r6, [r4, #32]
 8010ece:	6267      	str	r7, [r4, #36]	; 0x24
 8010ed0:	e789      	b.n	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010ed2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010ed4:	f240 233a 	movw	r3, #570	; 0x23a
 8010ed8:	421a      	tst	r2, r3
 8010eda:	d084      	beq.n	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010edc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010ede:	079a      	lsls	r2, r3, #30
 8010ee0:	bf42      	ittt	mi
 8010ee2:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8010ee4:	f043 0302 	orrmi.w	r3, r3, #2
 8010ee8:	63a3      	strmi	r3, [r4, #56]	; 0x38
 8010eea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010eec:	071b      	lsls	r3, r3, #28
 8010eee:	bf42      	ittt	mi
 8010ef0:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8010ef2:	f043 0308 	orrmi.w	r3, r3, #8
 8010ef6:	63a3      	strmi	r3, [r4, #56]	; 0x38
 8010ef8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010efa:	069f      	lsls	r7, r3, #26
 8010efc:	bf42      	ittt	mi
 8010efe:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8010f00:	f043 0320 	orrmi.w	r3, r3, #32
 8010f04:	63a3      	strmi	r3, [r4, #56]	; 0x38
 8010f06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010f08:	06de      	lsls	r6, r3, #27
 8010f0a:	bf42      	ittt	mi
 8010f0c:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8010f0e:	f043 0310 	orrmi.w	r3, r3, #16
 8010f12:	63a3      	strmi	r3, [r4, #56]	; 0x38
 8010f14:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010f16:	0599      	lsls	r1, r3, #22
 8010f18:	bf42      	ittt	mi
 8010f1a:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8010f1c:	f043 0308 	orrmi.w	r3, r3, #8
 8010f20:	63a3      	strmi	r3, [r4, #56]	; 0x38
 8010f22:	f240 733a 	movw	r3, #1850	; 0x73a
 8010f26:	6383      	str	r3, [r0, #56]	; 0x38
 8010f28:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8010f2a:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8010f2e:	f023 0302 	bic.w	r3, r3, #2
 8010f32:	63c3      	str	r3, [r0, #60]	; 0x3c
 8010f34:	f001 f808 	bl	8011f48 <SDMMC_CmdStopTransfer>
 8010f38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f3a:	072a      	lsls	r2, r5, #28
 8010f3c:	ea40 0003 	orr.w	r0, r0, r3
 8010f40:	63a0      	str	r0, [r4, #56]	; 0x38
 8010f42:	d508      	bpl.n	8010f56 <HAL_SD_IRQHandler+0x1ba>
 8010f44:	2301      	movs	r3, #1
 8010f46:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	6323      	str	r3, [r4, #48]	; 0x30
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f7ff fcc4 	bl	80108dc <HAL_SD_ErrorCallback>
 8010f54:	e747      	b.n	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010f56:	062b      	lsls	r3, r5, #24
 8010f58:	f57f af45 	bpl.w	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010f5c:	f015 0f30 	tst.w	r5, #48	; 0x30
 8010f60:	d00b      	beq.n	8010f7a <HAL_SD_IRQHandler+0x1de>
 8010f62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010f64:	4b10      	ldr	r3, [pc, #64]	; (8010fa8 <HAL_SD_IRQHandler+0x20c>)
 8010f66:	6503      	str	r3, [r0, #80]	; 0x50
 8010f68:	f7fd fe02 	bl	800eb70 <HAL_DMA_Abort_IT>
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	f43f af3a 	beq.w	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010f72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010f74:	f7ff fef0 	bl	8010d58 <SD_DMATxAbort>
 8010f78:	e735      	b.n	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010f7a:	f015 0503 	ands.w	r5, r5, #3
 8010f7e:	d009      	beq.n	8010f94 <HAL_SD_IRQHandler+0x1f8>
 8010f80:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010f82:	4b0a      	ldr	r3, [pc, #40]	; (8010fac <HAL_SD_IRQHandler+0x210>)
 8010f84:	6503      	str	r3, [r0, #80]	; 0x50
 8010f86:	f7fd fdf3 	bl	800eb70 <HAL_DMA_Abort_IT>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	f43f af2b 	beq.w	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010f90:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010f92:	e7ef      	b.n	8010f74 <HAL_SD_IRQHandler+0x1d8>
 8010f94:	2301      	movs	r3, #1
 8010f96:	63a5      	str	r5, [r4, #56]	; 0x38
 8010f98:	4620      	mov	r0, r4
 8010f9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010f9e:	6325      	str	r5, [r4, #48]	; 0x30
 8010fa0:	f001 fcf9 	bl	8012996 <HAL_SD_AbortCallback>
 8010fa4:	e71f      	b.n	8010de6 <HAL_SD_IRQHandler+0x4a>
 8010fa6:	bf00      	nop
 8010fa8:	08010d59 	.word	0x08010d59
 8010fac:	08010fb1 	.word	0x08010fb1

08010fb0 <SD_DMARxAbort>:
 8010fb0:	f7ff bed2 	b.w	8010d58 <SD_DMATxAbort>

08010fb4 <TIM_OC1_SetConfig>:
 8010fb4:	6a03      	ldr	r3, [r0, #32]
 8010fb6:	f023 0301 	bic.w	r3, r3, #1
 8010fba:	6203      	str	r3, [r0, #32]
 8010fbc:	6a03      	ldr	r3, [r0, #32]
 8010fbe:	b570      	push	{r4, r5, r6, lr}
 8010fc0:	6844      	ldr	r4, [r0, #4]
 8010fc2:	6982      	ldr	r2, [r0, #24]
 8010fc4:	680d      	ldr	r5, [r1, #0]
 8010fc6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8010fca:	432a      	orrs	r2, r5
 8010fcc:	688d      	ldr	r5, [r1, #8]
 8010fce:	f023 0302 	bic.w	r3, r3, #2
 8010fd2:	432b      	orrs	r3, r5
 8010fd4:	4d0e      	ldr	r5, [pc, #56]	; (8011010 <TIM_OC1_SetConfig+0x5c>)
 8010fd6:	42a8      	cmp	r0, r5
 8010fd8:	d002      	beq.n	8010fe0 <TIM_OC1_SetConfig+0x2c>
 8010fda:	4e0e      	ldr	r6, [pc, #56]	; (8011014 <TIM_OC1_SetConfig+0x60>)
 8010fdc:	42b0      	cmp	r0, r6
 8010fde:	d110      	bne.n	8011002 <TIM_OC1_SetConfig+0x4e>
 8010fe0:	68ce      	ldr	r6, [r1, #12]
 8010fe2:	f023 0308 	bic.w	r3, r3, #8
 8010fe6:	4333      	orrs	r3, r6
 8010fe8:	42a8      	cmp	r0, r5
 8010fea:	f023 0304 	bic.w	r3, r3, #4
 8010fee:	d002      	beq.n	8010ff6 <TIM_OC1_SetConfig+0x42>
 8010ff0:	4d08      	ldr	r5, [pc, #32]	; (8011014 <TIM_OC1_SetConfig+0x60>)
 8010ff2:	42a8      	cmp	r0, r5
 8010ff4:	d105      	bne.n	8011002 <TIM_OC1_SetConfig+0x4e>
 8010ff6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8010ffa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8010ffe:	4335      	orrs	r5, r6
 8011000:	432c      	orrs	r4, r5
 8011002:	6044      	str	r4, [r0, #4]
 8011004:	6182      	str	r2, [r0, #24]
 8011006:	684a      	ldr	r2, [r1, #4]
 8011008:	6342      	str	r2, [r0, #52]	; 0x34
 801100a:	6203      	str	r3, [r0, #32]
 801100c:	bd70      	pop	{r4, r5, r6, pc}
 801100e:	bf00      	nop
 8011010:	40010000 	.word	0x40010000
 8011014:	40010400 	.word	0x40010400

08011018 <TIM_OC3_SetConfig>:
 8011018:	6a03      	ldr	r3, [r0, #32]
 801101a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801101e:	6203      	str	r3, [r0, #32]
 8011020:	6a03      	ldr	r3, [r0, #32]
 8011022:	b570      	push	{r4, r5, r6, lr}
 8011024:	6844      	ldr	r4, [r0, #4]
 8011026:	69c2      	ldr	r2, [r0, #28]
 8011028:	680d      	ldr	r5, [r1, #0]
 801102a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 801102e:	432a      	orrs	r2, r5
 8011030:	688d      	ldr	r5, [r1, #8]
 8011032:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011036:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 801103a:	4d11      	ldr	r5, [pc, #68]	; (8011080 <TIM_OC3_SetConfig+0x68>)
 801103c:	42a8      	cmp	r0, r5
 801103e:	d003      	beq.n	8011048 <TIM_OC3_SetConfig+0x30>
 8011040:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8011044:	42a8      	cmp	r0, r5
 8011046:	d114      	bne.n	8011072 <TIM_OC3_SetConfig+0x5a>
 8011048:	68cd      	ldr	r5, [r1, #12]
 801104a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801104e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8011052:	4d0b      	ldr	r5, [pc, #44]	; (8011080 <TIM_OC3_SetConfig+0x68>)
 8011054:	42a8      	cmp	r0, r5
 8011056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801105a:	d003      	beq.n	8011064 <TIM_OC3_SetConfig+0x4c>
 801105c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8011060:	42a8      	cmp	r0, r5
 8011062:	d106      	bne.n	8011072 <TIM_OC3_SetConfig+0x5a>
 8011064:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8011068:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
 801106c:	4335      	orrs	r5, r6
 801106e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8011072:	6044      	str	r4, [r0, #4]
 8011074:	61c2      	str	r2, [r0, #28]
 8011076:	684a      	ldr	r2, [r1, #4]
 8011078:	63c2      	str	r2, [r0, #60]	; 0x3c
 801107a:	6203      	str	r3, [r0, #32]
 801107c:	bd70      	pop	{r4, r5, r6, pc}
 801107e:	bf00      	nop
 8011080:	40010000 	.word	0x40010000

08011084 <TIM_OC4_SetConfig>:
 8011084:	6a03      	ldr	r3, [r0, #32]
 8011086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801108a:	6203      	str	r3, [r0, #32]
 801108c:	6a03      	ldr	r3, [r0, #32]
 801108e:	b530      	push	{r4, r5, lr}
 8011090:	6844      	ldr	r4, [r0, #4]
 8011092:	69c2      	ldr	r2, [r0, #28]
 8011094:	680d      	ldr	r5, [r1, #0]
 8011096:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 801109a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 801109e:	688d      	ldr	r5, [r1, #8]
 80110a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80110a4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 80110a8:	4d08      	ldr	r5, [pc, #32]	; (80110cc <TIM_OC4_SetConfig+0x48>)
 80110aa:	42a8      	cmp	r0, r5
 80110ac:	d003      	beq.n	80110b6 <TIM_OC4_SetConfig+0x32>
 80110ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80110b2:	42a8      	cmp	r0, r5
 80110b4:	d104      	bne.n	80110c0 <TIM_OC4_SetConfig+0x3c>
 80110b6:	694d      	ldr	r5, [r1, #20]
 80110b8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80110bc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80110c0:	6044      	str	r4, [r0, #4]
 80110c2:	61c2      	str	r2, [r0, #28]
 80110c4:	684a      	ldr	r2, [r1, #4]
 80110c6:	6402      	str	r2, [r0, #64]	; 0x40
 80110c8:	6203      	str	r3, [r0, #32]
 80110ca:	bd30      	pop	{r4, r5, pc}
 80110cc:	40010000 	.word	0x40010000

080110d0 <HAL_TIM_Base_Start_IT>:
 80110d0:	6803      	ldr	r3, [r0, #0]
 80110d2:	68da      	ldr	r2, [r3, #12]
 80110d4:	f042 0201 	orr.w	r2, r2, #1
 80110d8:	60da      	str	r2, [r3, #12]
 80110da:	689a      	ldr	r2, [r3, #8]
 80110dc:	f002 0207 	and.w	r2, r2, #7
 80110e0:	2a06      	cmp	r2, #6
 80110e2:	bf1e      	ittt	ne
 80110e4:	681a      	ldrne	r2, [r3, #0]
 80110e6:	f042 0201 	orrne.w	r2, r2, #1
 80110ea:	601a      	strne	r2, [r3, #0]
 80110ec:	2000      	movs	r0, #0
 80110ee:	4770      	bx	lr

080110f0 <HAL_TIM_PWM_MspInit>:
 80110f0:	4770      	bx	lr

080110f2 <HAL_TIM_OC_DelayElapsedCallback>:
 80110f2:	4770      	bx	lr

080110f4 <HAL_TIM_IC_CaptureCallback>:
 80110f4:	4770      	bx	lr

080110f6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80110f6:	4770      	bx	lr

080110f8 <HAL_TIM_TriggerCallback>:
 80110f8:	4770      	bx	lr

080110fa <HAL_TIM_IRQHandler>:
 80110fa:	6803      	ldr	r3, [r0, #0]
 80110fc:	691a      	ldr	r2, [r3, #16]
 80110fe:	0791      	lsls	r1, r2, #30
 8011100:	b510      	push	{r4, lr}
 8011102:	4604      	mov	r4, r0
 8011104:	d50e      	bpl.n	8011124 <HAL_TIM_IRQHandler+0x2a>
 8011106:	68da      	ldr	r2, [r3, #12]
 8011108:	0792      	lsls	r2, r2, #30
 801110a:	d50b      	bpl.n	8011124 <HAL_TIM_IRQHandler+0x2a>
 801110c:	f06f 0202 	mvn.w	r2, #2
 8011110:	611a      	str	r2, [r3, #16]
 8011112:	699b      	ldr	r3, [r3, #24]
 8011114:	2201      	movs	r2, #1
 8011116:	079b      	lsls	r3, r3, #30
 8011118:	7702      	strb	r2, [r0, #28]
 801111a:	d077      	beq.n	801120c <HAL_TIM_IRQHandler+0x112>
 801111c:	f7ff ffea 	bl	80110f4 <HAL_TIM_IC_CaptureCallback>
 8011120:	2300      	movs	r3, #0
 8011122:	7723      	strb	r3, [r4, #28]
 8011124:	6823      	ldr	r3, [r4, #0]
 8011126:	691a      	ldr	r2, [r3, #16]
 8011128:	0750      	lsls	r0, r2, #29
 801112a:	d510      	bpl.n	801114e <HAL_TIM_IRQHandler+0x54>
 801112c:	68da      	ldr	r2, [r3, #12]
 801112e:	0751      	lsls	r1, r2, #29
 8011130:	d50d      	bpl.n	801114e <HAL_TIM_IRQHandler+0x54>
 8011132:	f06f 0204 	mvn.w	r2, #4
 8011136:	611a      	str	r2, [r3, #16]
 8011138:	699b      	ldr	r3, [r3, #24]
 801113a:	2202      	movs	r2, #2
 801113c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8011140:	7722      	strb	r2, [r4, #28]
 8011142:	4620      	mov	r0, r4
 8011144:	d068      	beq.n	8011218 <HAL_TIM_IRQHandler+0x11e>
 8011146:	f7ff ffd5 	bl	80110f4 <HAL_TIM_IC_CaptureCallback>
 801114a:	2300      	movs	r3, #0
 801114c:	7723      	strb	r3, [r4, #28]
 801114e:	6823      	ldr	r3, [r4, #0]
 8011150:	691a      	ldr	r2, [r3, #16]
 8011152:	0712      	lsls	r2, r2, #28
 8011154:	d50f      	bpl.n	8011176 <HAL_TIM_IRQHandler+0x7c>
 8011156:	68da      	ldr	r2, [r3, #12]
 8011158:	0710      	lsls	r0, r2, #28
 801115a:	d50c      	bpl.n	8011176 <HAL_TIM_IRQHandler+0x7c>
 801115c:	f06f 0208 	mvn.w	r2, #8
 8011160:	611a      	str	r2, [r3, #16]
 8011162:	69db      	ldr	r3, [r3, #28]
 8011164:	2204      	movs	r2, #4
 8011166:	0799      	lsls	r1, r3, #30
 8011168:	7722      	strb	r2, [r4, #28]
 801116a:	4620      	mov	r0, r4
 801116c:	d05a      	beq.n	8011224 <HAL_TIM_IRQHandler+0x12a>
 801116e:	f7ff ffc1 	bl	80110f4 <HAL_TIM_IC_CaptureCallback>
 8011172:	2300      	movs	r3, #0
 8011174:	7723      	strb	r3, [r4, #28]
 8011176:	6823      	ldr	r3, [r4, #0]
 8011178:	691a      	ldr	r2, [r3, #16]
 801117a:	06d2      	lsls	r2, r2, #27
 801117c:	d510      	bpl.n	80111a0 <HAL_TIM_IRQHandler+0xa6>
 801117e:	68da      	ldr	r2, [r3, #12]
 8011180:	06d0      	lsls	r0, r2, #27
 8011182:	d50d      	bpl.n	80111a0 <HAL_TIM_IRQHandler+0xa6>
 8011184:	f06f 0210 	mvn.w	r2, #16
 8011188:	611a      	str	r2, [r3, #16]
 801118a:	69db      	ldr	r3, [r3, #28]
 801118c:	2208      	movs	r2, #8
 801118e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8011192:	7722      	strb	r2, [r4, #28]
 8011194:	4620      	mov	r0, r4
 8011196:	d04b      	beq.n	8011230 <HAL_TIM_IRQHandler+0x136>
 8011198:	f7ff ffac 	bl	80110f4 <HAL_TIM_IC_CaptureCallback>
 801119c:	2300      	movs	r3, #0
 801119e:	7723      	strb	r3, [r4, #28]
 80111a0:	6823      	ldr	r3, [r4, #0]
 80111a2:	691a      	ldr	r2, [r3, #16]
 80111a4:	07d1      	lsls	r1, r2, #31
 80111a6:	d508      	bpl.n	80111ba <HAL_TIM_IRQHandler+0xc0>
 80111a8:	68da      	ldr	r2, [r3, #12]
 80111aa:	07d2      	lsls	r2, r2, #31
 80111ac:	d505      	bpl.n	80111ba <HAL_TIM_IRQHandler+0xc0>
 80111ae:	f06f 0201 	mvn.w	r2, #1
 80111b2:	611a      	str	r2, [r3, #16]
 80111b4:	4620      	mov	r0, r4
 80111b6:	f7fc fd45 	bl	800dc44 <HAL_TIM_PeriodElapsedCallback>
 80111ba:	6823      	ldr	r3, [r4, #0]
 80111bc:	691a      	ldr	r2, [r3, #16]
 80111be:	0610      	lsls	r0, r2, #24
 80111c0:	d508      	bpl.n	80111d4 <HAL_TIM_IRQHandler+0xda>
 80111c2:	68da      	ldr	r2, [r3, #12]
 80111c4:	0611      	lsls	r1, r2, #24
 80111c6:	d505      	bpl.n	80111d4 <HAL_TIM_IRQHandler+0xda>
 80111c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80111cc:	611a      	str	r2, [r3, #16]
 80111ce:	4620      	mov	r0, r4
 80111d0:	f000 fa79 	bl	80116c6 <HAL_TIMEx_BreakCallback>
 80111d4:	6823      	ldr	r3, [r4, #0]
 80111d6:	691a      	ldr	r2, [r3, #16]
 80111d8:	0652      	lsls	r2, r2, #25
 80111da:	d508      	bpl.n	80111ee <HAL_TIM_IRQHandler+0xf4>
 80111dc:	68da      	ldr	r2, [r3, #12]
 80111de:	0650      	lsls	r0, r2, #25
 80111e0:	d505      	bpl.n	80111ee <HAL_TIM_IRQHandler+0xf4>
 80111e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80111e6:	611a      	str	r2, [r3, #16]
 80111e8:	4620      	mov	r0, r4
 80111ea:	f7ff ff85 	bl	80110f8 <HAL_TIM_TriggerCallback>
 80111ee:	6823      	ldr	r3, [r4, #0]
 80111f0:	691a      	ldr	r2, [r3, #16]
 80111f2:	0691      	lsls	r1, r2, #26
 80111f4:	d522      	bpl.n	801123c <HAL_TIM_IRQHandler+0x142>
 80111f6:	68da      	ldr	r2, [r3, #12]
 80111f8:	0692      	lsls	r2, r2, #26
 80111fa:	d51f      	bpl.n	801123c <HAL_TIM_IRQHandler+0x142>
 80111fc:	f06f 0220 	mvn.w	r2, #32
 8011200:	4620      	mov	r0, r4
 8011202:	611a      	str	r2, [r3, #16]
 8011204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011208:	f000 ba5c 	b.w	80116c4 <HAL_TIMEx_CommutCallback>
 801120c:	f7ff ff71 	bl	80110f2 <HAL_TIM_OC_DelayElapsedCallback>
 8011210:	4620      	mov	r0, r4
 8011212:	f7ff ff70 	bl	80110f6 <HAL_TIM_PWM_PulseFinishedCallback>
 8011216:	e783      	b.n	8011120 <HAL_TIM_IRQHandler+0x26>
 8011218:	f7ff ff6b 	bl	80110f2 <HAL_TIM_OC_DelayElapsedCallback>
 801121c:	4620      	mov	r0, r4
 801121e:	f7ff ff6a 	bl	80110f6 <HAL_TIM_PWM_PulseFinishedCallback>
 8011222:	e792      	b.n	801114a <HAL_TIM_IRQHandler+0x50>
 8011224:	f7ff ff65 	bl	80110f2 <HAL_TIM_OC_DelayElapsedCallback>
 8011228:	4620      	mov	r0, r4
 801122a:	f7ff ff64 	bl	80110f6 <HAL_TIM_PWM_PulseFinishedCallback>
 801122e:	e7a0      	b.n	8011172 <HAL_TIM_IRQHandler+0x78>
 8011230:	f7ff ff5f 	bl	80110f2 <HAL_TIM_OC_DelayElapsedCallback>
 8011234:	4620      	mov	r0, r4
 8011236:	f7ff ff5e 	bl	80110f6 <HAL_TIM_PWM_PulseFinishedCallback>
 801123a:	e7af      	b.n	801119c <HAL_TIM_IRQHandler+0xa2>
 801123c:	bd10      	pop	{r4, pc}
	...

08011240 <TIM_Base_SetConfig>:
 8011240:	4a30      	ldr	r2, [pc, #192]	; (8011304 <TIM_Base_SetConfig+0xc4>)
 8011242:	6803      	ldr	r3, [r0, #0]
 8011244:	4290      	cmp	r0, r2
 8011246:	d012      	beq.n	801126e <TIM_Base_SetConfig+0x2e>
 8011248:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801124c:	d00f      	beq.n	801126e <TIM_Base_SetConfig+0x2e>
 801124e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8011252:	4290      	cmp	r0, r2
 8011254:	d00b      	beq.n	801126e <TIM_Base_SetConfig+0x2e>
 8011256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801125a:	4290      	cmp	r0, r2
 801125c:	d007      	beq.n	801126e <TIM_Base_SetConfig+0x2e>
 801125e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011262:	4290      	cmp	r0, r2
 8011264:	d003      	beq.n	801126e <TIM_Base_SetConfig+0x2e>
 8011266:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801126a:	4290      	cmp	r0, r2
 801126c:	d119      	bne.n	80112a2 <TIM_Base_SetConfig+0x62>
 801126e:	684a      	ldr	r2, [r1, #4]
 8011270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011274:	4313      	orrs	r3, r2
 8011276:	4a23      	ldr	r2, [pc, #140]	; (8011304 <TIM_Base_SetConfig+0xc4>)
 8011278:	4290      	cmp	r0, r2
 801127a:	d029      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 801127c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011280:	d026      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 8011282:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8011286:	4290      	cmp	r0, r2
 8011288:	d022      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 801128a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801128e:	4290      	cmp	r0, r2
 8011290:	d01e      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 8011292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011296:	4290      	cmp	r0, r2
 8011298:	d01a      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 801129a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801129e:	4290      	cmp	r0, r2
 80112a0:	d016      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 80112a2:	4a19      	ldr	r2, [pc, #100]	; (8011308 <TIM_Base_SetConfig+0xc8>)
 80112a4:	4290      	cmp	r0, r2
 80112a6:	d013      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 80112a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80112ac:	4290      	cmp	r0, r2
 80112ae:	d00f      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 80112b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80112b4:	4290      	cmp	r0, r2
 80112b6:	d00b      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 80112b8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80112bc:	4290      	cmp	r0, r2
 80112be:	d007      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 80112c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80112c4:	4290      	cmp	r0, r2
 80112c6:	d003      	beq.n	80112d0 <TIM_Base_SetConfig+0x90>
 80112c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80112cc:	4290      	cmp	r0, r2
 80112ce:	d103      	bne.n	80112d8 <TIM_Base_SetConfig+0x98>
 80112d0:	68ca      	ldr	r2, [r1, #12]
 80112d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80112d6:	4313      	orrs	r3, r2
 80112d8:	694a      	ldr	r2, [r1, #20]
 80112da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80112de:	4313      	orrs	r3, r2
 80112e0:	6003      	str	r3, [r0, #0]
 80112e2:	688b      	ldr	r3, [r1, #8]
 80112e4:	62c3      	str	r3, [r0, #44]	; 0x2c
 80112e6:	680b      	ldr	r3, [r1, #0]
 80112e8:	6283      	str	r3, [r0, #40]	; 0x28
 80112ea:	4b06      	ldr	r3, [pc, #24]	; (8011304 <TIM_Base_SetConfig+0xc4>)
 80112ec:	4298      	cmp	r0, r3
 80112ee:	d003      	beq.n	80112f8 <TIM_Base_SetConfig+0xb8>
 80112f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80112f4:	4298      	cmp	r0, r3
 80112f6:	d101      	bne.n	80112fc <TIM_Base_SetConfig+0xbc>
 80112f8:	690b      	ldr	r3, [r1, #16]
 80112fa:	6303      	str	r3, [r0, #48]	; 0x30
 80112fc:	2301      	movs	r3, #1
 80112fe:	6143      	str	r3, [r0, #20]
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop
 8011304:	40010000 	.word	0x40010000
 8011308:	40014000 	.word	0x40014000

0801130c <HAL_TIM_Base_Init>:
 801130c:	b510      	push	{r4, lr}
 801130e:	4604      	mov	r4, r0
 8011310:	b1a0      	cbz	r0, 801133c <HAL_TIM_Base_Init+0x30>
 8011312:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8011316:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801131a:	b91b      	cbnz	r3, 8011324 <HAL_TIM_Base_Init+0x18>
 801131c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8011320:	f7fd f8c8 	bl	800e4b4 <HAL_TIM_Base_MspInit>
 8011324:	2302      	movs	r3, #2
 8011326:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 801132a:	6820      	ldr	r0, [r4, #0]
 801132c:	1d21      	adds	r1, r4, #4
 801132e:	f7ff ff87 	bl	8011240 <TIM_Base_SetConfig>
 8011332:	2301      	movs	r3, #1
 8011334:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8011338:	2000      	movs	r0, #0
 801133a:	bd10      	pop	{r4, pc}
 801133c:	2001      	movs	r0, #1
 801133e:	e7fc      	b.n	801133a <HAL_TIM_Base_Init+0x2e>

08011340 <HAL_TIM_PWM_Init>:
 8011340:	b510      	push	{r4, lr}
 8011342:	4604      	mov	r4, r0
 8011344:	b1a0      	cbz	r0, 8011370 <HAL_TIM_PWM_Init+0x30>
 8011346:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801134a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801134e:	b91b      	cbnz	r3, 8011358 <HAL_TIM_PWM_Init+0x18>
 8011350:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8011354:	f7ff fecc 	bl	80110f0 <HAL_TIM_PWM_MspInit>
 8011358:	2302      	movs	r3, #2
 801135a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 801135e:	6820      	ldr	r0, [r4, #0]
 8011360:	1d21      	adds	r1, r4, #4
 8011362:	f7ff ff6d 	bl	8011240 <TIM_Base_SetConfig>
 8011366:	2301      	movs	r3, #1
 8011368:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 801136c:	2000      	movs	r0, #0
 801136e:	bd10      	pop	{r4, pc}
 8011370:	2001      	movs	r0, #1
 8011372:	e7fc      	b.n	801136e <HAL_TIM_PWM_Init+0x2e>

08011374 <TIM_OC2_SetConfig>:
 8011374:	6a03      	ldr	r3, [r0, #32]
 8011376:	f023 0310 	bic.w	r3, r3, #16
 801137a:	6203      	str	r3, [r0, #32]
 801137c:	6a03      	ldr	r3, [r0, #32]
 801137e:	b570      	push	{r4, r5, r6, lr}
 8011380:	6844      	ldr	r4, [r0, #4]
 8011382:	6982      	ldr	r2, [r0, #24]
 8011384:	680d      	ldr	r5, [r1, #0]
 8011386:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 801138a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 801138e:	688d      	ldr	r5, [r1, #8]
 8011390:	f023 0320 	bic.w	r3, r3, #32
 8011394:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8011398:	4d10      	ldr	r5, [pc, #64]	; (80113dc <TIM_OC2_SetConfig+0x68>)
 801139a:	42a8      	cmp	r0, r5
 801139c:	d003      	beq.n	80113a6 <TIM_OC2_SetConfig+0x32>
 801139e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80113a2:	42a8      	cmp	r0, r5
 80113a4:	d114      	bne.n	80113d0 <TIM_OC2_SetConfig+0x5c>
 80113a6:	68cd      	ldr	r5, [r1, #12]
 80113a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80113b0:	4d0a      	ldr	r5, [pc, #40]	; (80113dc <TIM_OC2_SetConfig+0x68>)
 80113b2:	42a8      	cmp	r0, r5
 80113b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113b8:	d003      	beq.n	80113c2 <TIM_OC2_SetConfig+0x4e>
 80113ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80113be:	42a8      	cmp	r0, r5
 80113c0:	d106      	bne.n	80113d0 <TIM_OC2_SetConfig+0x5c>
 80113c2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80113c6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 80113ca:	4335      	orrs	r5, r6
 80113cc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80113d0:	6044      	str	r4, [r0, #4]
 80113d2:	6182      	str	r2, [r0, #24]
 80113d4:	684a      	ldr	r2, [r1, #4]
 80113d6:	6382      	str	r2, [r0, #56]	; 0x38
 80113d8:	6203      	str	r3, [r0, #32]
 80113da:	bd70      	pop	{r4, r5, r6, pc}
 80113dc:	40010000 	.word	0x40010000

080113e0 <HAL_TIM_PWM_ConfigChannel>:
 80113e0:	b538      	push	{r3, r4, r5, lr}
 80113e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80113e6:	2b01      	cmp	r3, #1
 80113e8:	4604      	mov	r4, r0
 80113ea:	f04f 0002 	mov.w	r0, #2
 80113ee:	d025      	beq.n	801143c <HAL_TIM_PWM_ConfigChannel+0x5c>
 80113f0:	2301      	movs	r3, #1
 80113f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80113f6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80113fa:	2a0c      	cmp	r2, #12
 80113fc:	d818      	bhi.n	8011430 <HAL_TIM_PWM_ConfigChannel+0x50>
 80113fe:	e8df f002 	tbb	[pc, r2]
 8011402:	1707      	.short	0x1707
 8011404:	171e1717 	.word	0x171e1717
 8011408:	172f1717 	.word	0x172f1717
 801140c:	1717      	.short	0x1717
 801140e:	40          	.byte	0x40
 801140f:	00          	.byte	0x00
 8011410:	6820      	ldr	r0, [r4, #0]
 8011412:	f7ff fdcf 	bl	8010fb4 <TIM_OC1_SetConfig>
 8011416:	6823      	ldr	r3, [r4, #0]
 8011418:	6909      	ldr	r1, [r1, #16]
 801141a:	699a      	ldr	r2, [r3, #24]
 801141c:	f042 0208 	orr.w	r2, r2, #8
 8011420:	619a      	str	r2, [r3, #24]
 8011422:	699a      	ldr	r2, [r3, #24]
 8011424:	f022 0204 	bic.w	r2, r2, #4
 8011428:	619a      	str	r2, [r3, #24]
 801142a:	699a      	ldr	r2, [r3, #24]
 801142c:	430a      	orrs	r2, r1
 801142e:	619a      	str	r2, [r3, #24]
 8011430:	2301      	movs	r3, #1
 8011432:	2000      	movs	r0, #0
 8011434:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8011438:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 801143c:	bd38      	pop	{r3, r4, r5, pc}
 801143e:	6820      	ldr	r0, [r4, #0]
 8011440:	f7ff ff98 	bl	8011374 <TIM_OC2_SetConfig>
 8011444:	6823      	ldr	r3, [r4, #0]
 8011446:	6909      	ldr	r1, [r1, #16]
 8011448:	699a      	ldr	r2, [r3, #24]
 801144a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801144e:	619a      	str	r2, [r3, #24]
 8011450:	699a      	ldr	r2, [r3, #24]
 8011452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011456:	619a      	str	r2, [r3, #24]
 8011458:	699a      	ldr	r2, [r3, #24]
 801145a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801145e:	e7e6      	b.n	801142e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8011460:	6820      	ldr	r0, [r4, #0]
 8011462:	f7ff fdd9 	bl	8011018 <TIM_OC3_SetConfig>
 8011466:	6823      	ldr	r3, [r4, #0]
 8011468:	6909      	ldr	r1, [r1, #16]
 801146a:	69da      	ldr	r2, [r3, #28]
 801146c:	f042 0208 	orr.w	r2, r2, #8
 8011470:	61da      	str	r2, [r3, #28]
 8011472:	69da      	ldr	r2, [r3, #28]
 8011474:	f022 0204 	bic.w	r2, r2, #4
 8011478:	61da      	str	r2, [r3, #28]
 801147a:	69da      	ldr	r2, [r3, #28]
 801147c:	430a      	orrs	r2, r1
 801147e:	61da      	str	r2, [r3, #28]
 8011480:	e7d6      	b.n	8011430 <HAL_TIM_PWM_ConfigChannel+0x50>
 8011482:	6820      	ldr	r0, [r4, #0]
 8011484:	f7ff fdfe 	bl	8011084 <TIM_OC4_SetConfig>
 8011488:	6823      	ldr	r3, [r4, #0]
 801148a:	6909      	ldr	r1, [r1, #16]
 801148c:	69da      	ldr	r2, [r3, #28]
 801148e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011492:	61da      	str	r2, [r3, #28]
 8011494:	69da      	ldr	r2, [r3, #28]
 8011496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801149a:	61da      	str	r2, [r3, #28]
 801149c:	69da      	ldr	r2, [r3, #28]
 801149e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80114a2:	e7ec      	b.n	801147e <HAL_TIM_PWM_ConfigChannel+0x9e>

080114a4 <TIM_ETR_SetConfig>:
 80114a4:	b510      	push	{r4, lr}
 80114a6:	6884      	ldr	r4, [r0, #8]
 80114a8:	430a      	orrs	r2, r1
 80114aa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80114ae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80114b2:	4323      	orrs	r3, r4
 80114b4:	6083      	str	r3, [r0, #8]
 80114b6:	bd10      	pop	{r4, pc}

080114b8 <HAL_TIM_ConfigClockSource>:
 80114b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80114bc:	2b01      	cmp	r3, #1
 80114be:	b570      	push	{r4, r5, r6, lr}
 80114c0:	4604      	mov	r4, r0
 80114c2:	f04f 0002 	mov.w	r0, #2
 80114c6:	d019      	beq.n	80114fc <HAL_TIM_ConfigClockSource+0x44>
 80114c8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80114cc:	6820      	ldr	r0, [r4, #0]
 80114ce:	2301      	movs	r3, #1
 80114d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80114d4:	6883      	ldr	r3, [r0, #8]
 80114d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80114da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80114de:	6083      	str	r3, [r0, #8]
 80114e0:	680b      	ldr	r3, [r1, #0]
 80114e2:	2b40      	cmp	r3, #64	; 0x40
 80114e4:	d065      	beq.n	80115b2 <HAL_TIM_ConfigClockSource+0xfa>
 80114e6:	d815      	bhi.n	8011514 <HAL_TIM_ConfigClockSource+0x5c>
 80114e8:	2b10      	cmp	r3, #16
 80114ea:	d00c      	beq.n	8011506 <HAL_TIM_ConfigClockSource+0x4e>
 80114ec:	d807      	bhi.n	80114fe <HAL_TIM_ConfigClockSource+0x46>
 80114ee:	b153      	cbz	r3, 8011506 <HAL_TIM_ConfigClockSource+0x4e>
 80114f0:	2301      	movs	r3, #1
 80114f2:	2000      	movs	r0, #0
 80114f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80114f8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80114fc:	bd70      	pop	{r4, r5, r6, pc}
 80114fe:	2b20      	cmp	r3, #32
 8011500:	d001      	beq.n	8011506 <HAL_TIM_ConfigClockSource+0x4e>
 8011502:	2b30      	cmp	r3, #48	; 0x30
 8011504:	d1f4      	bne.n	80114f0 <HAL_TIM_ConfigClockSource+0x38>
 8011506:	6882      	ldr	r2, [r0, #8]
 8011508:	f043 0307 	orr.w	r3, r3, #7
 801150c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8011510:	4313      	orrs	r3, r2
 8011512:	e01a      	b.n	801154a <HAL_TIM_ConfigClockSource+0x92>
 8011514:	2b60      	cmp	r3, #96	; 0x60
 8011516:	d034      	beq.n	8011582 <HAL_TIM_ConfigClockSource+0xca>
 8011518:	d819      	bhi.n	801154e <HAL_TIM_ConfigClockSource+0x96>
 801151a:	2b50      	cmp	r3, #80	; 0x50
 801151c:	d1e8      	bne.n	80114f0 <HAL_TIM_ConfigClockSource+0x38>
 801151e:	684a      	ldr	r2, [r1, #4]
 8011520:	68ce      	ldr	r6, [r1, #12]
 8011522:	6a01      	ldr	r1, [r0, #32]
 8011524:	6a05      	ldr	r5, [r0, #32]
 8011526:	f025 0501 	bic.w	r5, r5, #1
 801152a:	6205      	str	r5, [r0, #32]
 801152c:	6983      	ldr	r3, [r0, #24]
 801152e:	f021 010a 	bic.w	r1, r1, #10
 8011532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011536:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 801153a:	430a      	orrs	r2, r1
 801153c:	6183      	str	r3, [r0, #24]
 801153e:	6202      	str	r2, [r0, #32]
 8011540:	6883      	ldr	r3, [r0, #8]
 8011542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011546:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 801154a:	6083      	str	r3, [r0, #8]
 801154c:	e7d0      	b.n	80114f0 <HAL_TIM_ConfigClockSource+0x38>
 801154e:	2b70      	cmp	r3, #112	; 0x70
 8011550:	d00c      	beq.n	801156c <HAL_TIM_ConfigClockSource+0xb4>
 8011552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011556:	d1cb      	bne.n	80114f0 <HAL_TIM_ConfigClockSource+0x38>
 8011558:	68cb      	ldr	r3, [r1, #12]
 801155a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801155e:	f7ff ffa1 	bl	80114a4 <TIM_ETR_SetConfig>
 8011562:	6822      	ldr	r2, [r4, #0]
 8011564:	6893      	ldr	r3, [r2, #8]
 8011566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801156a:	e008      	b.n	801157e <HAL_TIM_ConfigClockSource+0xc6>
 801156c:	68cb      	ldr	r3, [r1, #12]
 801156e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011572:	f7ff ff97 	bl	80114a4 <TIM_ETR_SetConfig>
 8011576:	6822      	ldr	r2, [r4, #0]
 8011578:	6893      	ldr	r3, [r2, #8]
 801157a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801157e:	6093      	str	r3, [r2, #8]
 8011580:	e7b6      	b.n	80114f0 <HAL_TIM_ConfigClockSource+0x38>
 8011582:	684d      	ldr	r5, [r1, #4]
 8011584:	68ce      	ldr	r6, [r1, #12]
 8011586:	6a01      	ldr	r1, [r0, #32]
 8011588:	f021 0110 	bic.w	r1, r1, #16
 801158c:	6201      	str	r1, [r0, #32]
 801158e:	6982      	ldr	r2, [r0, #24]
 8011590:	6a03      	ldr	r3, [r0, #32]
 8011592:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8011596:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801159a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 801159e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
 80115a2:	6182      	str	r2, [r0, #24]
 80115a4:	6203      	str	r3, [r0, #32]
 80115a6:	6883      	ldr	r3, [r0, #8]
 80115a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115ac:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80115b0:	e7cb      	b.n	801154a <HAL_TIM_ConfigClockSource+0x92>
 80115b2:	684a      	ldr	r2, [r1, #4]
 80115b4:	68ce      	ldr	r6, [r1, #12]
 80115b6:	6a01      	ldr	r1, [r0, #32]
 80115b8:	6a05      	ldr	r5, [r0, #32]
 80115ba:	f025 0501 	bic.w	r5, r5, #1
 80115be:	6205      	str	r5, [r0, #32]
 80115c0:	6983      	ldr	r3, [r0, #24]
 80115c2:	f021 010a 	bic.w	r1, r1, #10
 80115c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80115ca:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80115ce:	430a      	orrs	r2, r1
 80115d0:	6183      	str	r3, [r0, #24]
 80115d2:	6202      	str	r2, [r0, #32]
 80115d4:	6883      	ldr	r3, [r0, #8]
 80115d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115da:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80115de:	e7b4      	b.n	801154a <HAL_TIM_ConfigClockSource+0x92>

080115e0 <TIM_CCxChannelCmd>:
 80115e0:	6a03      	ldr	r3, [r0, #32]
 80115e2:	f001 011f 	and.w	r1, r1, #31
 80115e6:	b510      	push	{r4, lr}
 80115e8:	2401      	movs	r4, #1
 80115ea:	408c      	lsls	r4, r1
 80115ec:	ea23 0304 	bic.w	r3, r3, r4
 80115f0:	6203      	str	r3, [r0, #32]
 80115f2:	6a03      	ldr	r3, [r0, #32]
 80115f4:	408a      	lsls	r2, r1
 80115f6:	431a      	orrs	r2, r3
 80115f8:	6202      	str	r2, [r0, #32]
 80115fa:	bd10      	pop	{r4, pc}

080115fc <HAL_TIM_OC_Start>:
 80115fc:	b510      	push	{r4, lr}
 80115fe:	4604      	mov	r4, r0
 8011600:	2201      	movs	r2, #1
 8011602:	6800      	ldr	r0, [r0, #0]
 8011604:	f7ff ffec 	bl	80115e0 <TIM_CCxChannelCmd>
 8011608:	6823      	ldr	r3, [r4, #0]
 801160a:	4a0b      	ldr	r2, [pc, #44]	; (8011638 <HAL_TIM_OC_Start+0x3c>)
 801160c:	4293      	cmp	r3, r2
 801160e:	d003      	beq.n	8011618 <HAL_TIM_OC_Start+0x1c>
 8011610:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011614:	4293      	cmp	r3, r2
 8011616:	d103      	bne.n	8011620 <HAL_TIM_OC_Start+0x24>
 8011618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801161a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801161e:	645a      	str	r2, [r3, #68]	; 0x44
 8011620:	689a      	ldr	r2, [r3, #8]
 8011622:	f002 0207 	and.w	r2, r2, #7
 8011626:	2a06      	cmp	r2, #6
 8011628:	bf1e      	ittt	ne
 801162a:	681a      	ldrne	r2, [r3, #0]
 801162c:	f042 0201 	orrne.w	r2, r2, #1
 8011630:	601a      	strne	r2, [r3, #0]
 8011632:	2000      	movs	r0, #0
 8011634:	bd10      	pop	{r4, pc}
 8011636:	bf00      	nop
 8011638:	40010000 	.word	0x40010000

0801163c <HAL_TIM_PWM_Start>:
 801163c:	f7ff bfde 	b.w	80115fc <HAL_TIM_OC_Start>

08011640 <HAL_TIMEx_MasterConfigSynchronization>:
 8011640:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011644:	2b01      	cmp	r3, #1
 8011646:	b530      	push	{r4, r5, lr}
 8011648:	f04f 0302 	mov.w	r3, #2
 801164c:	d035      	beq.n	80116ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 801164e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8011652:	6803      	ldr	r3, [r0, #0]
 8011654:	680d      	ldr	r5, [r1, #0]
 8011656:	685c      	ldr	r4, [r3, #4]
 8011658:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 801165c:	2201      	movs	r2, #1
 801165e:	432c      	orrs	r4, r5
 8011660:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8011664:	689a      	ldr	r2, [r3, #8]
 8011666:	605c      	str	r4, [r3, #4]
 8011668:	4c15      	ldr	r4, [pc, #84]	; (80116c0 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 801166a:	42a3      	cmp	r3, r4
 801166c:	d01a      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 801166e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011672:	d017      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8011674:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8011678:	42a3      	cmp	r3, r4
 801167a:	d013      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 801167c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8011680:	42a3      	cmp	r3, r4
 8011682:	d00f      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8011684:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8011688:	42a3      	cmp	r3, r4
 801168a:	d00b      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 801168c:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8011690:	42a3      	cmp	r3, r4
 8011692:	d007      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8011694:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8011698:	42a3      	cmp	r3, r4
 801169a:	d003      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 801169c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80116a0:	42a3      	cmp	r3, r4
 80116a2:	d104      	bne.n	80116ae <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80116a4:	6849      	ldr	r1, [r1, #4]
 80116a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80116aa:	430a      	orrs	r2, r1
 80116ac:	609a      	str	r2, [r3, #8]
 80116ae:	2301      	movs	r3, #1
 80116b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80116b4:	2300      	movs	r3, #0
 80116b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80116ba:	4618      	mov	r0, r3
 80116bc:	bd30      	pop	{r4, r5, pc}
 80116be:	bf00      	nop
 80116c0:	40010000 	.word	0x40010000

080116c4 <HAL_TIMEx_CommutCallback>:
 80116c4:	4770      	bx	lr

080116c6 <HAL_TIMEx_BreakCallback>:
 80116c6:	4770      	bx	lr

080116c8 <UART_EndRxTransfer>:
 80116c8:	6803      	ldr	r3, [r0, #0]
 80116ca:	68da      	ldr	r2, [r3, #12]
 80116cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80116d0:	60da      	str	r2, [r3, #12]
 80116d2:	695a      	ldr	r2, [r3, #20]
 80116d4:	f022 0201 	bic.w	r2, r2, #1
 80116d8:	615a      	str	r2, [r3, #20]
 80116da:	2320      	movs	r3, #32
 80116dc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80116e0:	4770      	bx	lr
	...

080116e4 <UART_SetConfig>:
 80116e4:	6803      	ldr	r3, [r0, #0]
 80116e6:	68c1      	ldr	r1, [r0, #12]
 80116e8:	691a      	ldr	r2, [r3, #16]
 80116ea:	b570      	push	{r4, r5, r6, lr}
 80116ec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80116f0:	4604      	mov	r4, r0
 80116f2:	430a      	orrs	r2, r1
 80116f4:	611a      	str	r2, [r3, #16]
 80116f6:	6925      	ldr	r5, [r4, #16]
 80116f8:	68a2      	ldr	r2, [r4, #8]
 80116fa:	68d9      	ldr	r1, [r3, #12]
 80116fc:	69c0      	ldr	r0, [r0, #28]
 80116fe:	432a      	orrs	r2, r5
 8011700:	6965      	ldr	r5, [r4, #20]
 8011702:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8011706:	432a      	orrs	r2, r5
 8011708:	f021 010c 	bic.w	r1, r1, #12
 801170c:	4302      	orrs	r2, r0
 801170e:	430a      	orrs	r2, r1
 8011710:	60da      	str	r2, [r3, #12]
 8011712:	695a      	ldr	r2, [r3, #20]
 8011714:	69a1      	ldr	r1, [r4, #24]
 8011716:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801171a:	430a      	orrs	r2, r1
 801171c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8011720:	615a      	str	r2, [r3, #20]
 8011722:	4a26      	ldr	r2, [pc, #152]	; (80117bc <UART_SetConfig+0xd8>)
 8011724:	d129      	bne.n	801177a <UART_SetConfig+0x96>
 8011726:	4293      	cmp	r3, r2
 8011728:	d003      	beq.n	8011732 <UART_SetConfig+0x4e>
 801172a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801172e:	4293      	cmp	r3, r2
 8011730:	d120      	bne.n	8011774 <UART_SetConfig+0x90>
 8011732:	f7fe fcd1 	bl	80100d8 <HAL_RCC_GetPCLK2Freq>
 8011736:	6862      	ldr	r2, [r4, #4]
 8011738:	2600      	movs	r6, #0
 801173a:	1892      	adds	r2, r2, r2
 801173c:	f04f 0119 	mov.w	r1, #25
 8011740:	eb46 0306 	adc.w	r3, r6, r6
 8011744:	fba0 0101 	umull	r0, r1, r0, r1
 8011748:	f7fa fcd2 	bl	800c0f0 <__aeabi_uldivmod>
 801174c:	2164      	movs	r1, #100	; 0x64
 801174e:	fbb0 f5f1 	udiv	r5, r0, r1
 8011752:	fb01 0315 	mls	r3, r1, r5, r0
 8011756:	00db      	lsls	r3, r3, #3
 8011758:	3332      	adds	r3, #50	; 0x32
 801175a:	fbb3 f3f1 	udiv	r3, r3, r1
 801175e:	f003 0207 	and.w	r2, r3, #7
 8011762:	005b      	lsls	r3, r3, #1
 8011764:	6821      	ldr	r1, [r4, #0]
 8011766:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 801176a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801176e:	4413      	add	r3, r2
 8011770:	608b      	str	r3, [r1, #8]
 8011772:	bd70      	pop	{r4, r5, r6, pc}
 8011774:	f7fe fca0 	bl	80100b8 <HAL_RCC_GetPCLK1Freq>
 8011778:	e7dd      	b.n	8011736 <UART_SetConfig+0x52>
 801177a:	4293      	cmp	r3, r2
 801177c:	d002      	beq.n	8011784 <UART_SetConfig+0xa0>
 801177e:	4a10      	ldr	r2, [pc, #64]	; (80117c0 <UART_SetConfig+0xdc>)
 8011780:	4293      	cmp	r3, r2
 8011782:	d117      	bne.n	80117b4 <UART_SetConfig+0xd0>
 8011784:	f7fe fca8 	bl	80100d8 <HAL_RCC_GetPCLK2Freq>
 8011788:	6863      	ldr	r3, [r4, #4]
 801178a:	2119      	movs	r1, #25
 801178c:	009a      	lsls	r2, r3, #2
 801178e:	fba0 0101 	umull	r0, r1, r0, r1
 8011792:	0f9b      	lsrs	r3, r3, #30
 8011794:	f7fa fcac 	bl	800c0f0 <__aeabi_uldivmod>
 8011798:	2264      	movs	r2, #100	; 0x64
 801179a:	fbb0 f1f2 	udiv	r1, r0, r2
 801179e:	fb02 0311 	mls	r3, r2, r1, r0
 80117a2:	6824      	ldr	r4, [r4, #0]
 80117a4:	011b      	lsls	r3, r3, #4
 80117a6:	3332      	adds	r3, #50	; 0x32
 80117a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80117ac:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80117b0:	60a3      	str	r3, [r4, #8]
 80117b2:	e7de      	b.n	8011772 <UART_SetConfig+0x8e>
 80117b4:	f7fe fc80 	bl	80100b8 <HAL_RCC_GetPCLK1Freq>
 80117b8:	e7e6      	b.n	8011788 <UART_SetConfig+0xa4>
 80117ba:	bf00      	nop
 80117bc:	40011000 	.word	0x40011000
 80117c0:	40011400 	.word	0x40011400

080117c4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
 80117c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117c6:	4604      	mov	r4, r0
 80117c8:	460e      	mov	r6, r1
 80117ca:	4617      	mov	r7, r2
 80117cc:	461d      	mov	r5, r3
 80117ce:	6821      	ldr	r1, [r4, #0]
 80117d0:	680b      	ldr	r3, [r1, #0]
 80117d2:	ea36 0303 	bics.w	r3, r6, r3
 80117d6:	d101      	bne.n	80117dc <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
 80117d8:	2000      	movs	r0, #0
 80117da:	e014      	b.n	8011806 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
 80117dc:	1c6b      	adds	r3, r5, #1
 80117de:	d0f7      	beq.n	80117d0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
 80117e0:	b995      	cbnz	r5, 8011808 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
 80117e2:	6823      	ldr	r3, [r4, #0]
 80117e4:	68da      	ldr	r2, [r3, #12]
 80117e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80117ea:	60da      	str	r2, [r3, #12]
 80117ec:	695a      	ldr	r2, [r3, #20]
 80117ee:	f022 0201 	bic.w	r2, r2, #1
 80117f2:	615a      	str	r2, [r3, #20]
 80117f4:	2320      	movs	r3, #32
 80117f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80117fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80117fe:	2300      	movs	r3, #0
 8011800:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8011804:	2003      	movs	r0, #3
 8011806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011808:	f7fd f828 	bl	800e85c <HAL_GetTick>
 801180c:	1bc0      	subs	r0, r0, r7
 801180e:	4285      	cmp	r5, r0
 8011810:	d2dd      	bcs.n	80117ce <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8011812:	e7e6      	b.n	80117e2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08011814 <HAL_UART_Init>:
 8011814:	b510      	push	{r4, lr}
 8011816:	4604      	mov	r4, r0
 8011818:	b340      	cbz	r0, 801186c <HAL_UART_Init+0x58>
 801181a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801181e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011822:	b91b      	cbnz	r3, 801182c <HAL_UART_Init+0x18>
 8011824:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8011828:	f7fc ff12 	bl	800e650 <HAL_UART_MspInit>
 801182c:	6822      	ldr	r2, [r4, #0]
 801182e:	2324      	movs	r3, #36	; 0x24
 8011830:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8011834:	68d3      	ldr	r3, [r2, #12]
 8011836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801183a:	60d3      	str	r3, [r2, #12]
 801183c:	4620      	mov	r0, r4
 801183e:	f7ff ff51 	bl	80116e4 <UART_SetConfig>
 8011842:	6823      	ldr	r3, [r4, #0]
 8011844:	691a      	ldr	r2, [r3, #16]
 8011846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801184a:	611a      	str	r2, [r3, #16]
 801184c:	695a      	ldr	r2, [r3, #20]
 801184e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011852:	615a      	str	r2, [r3, #20]
 8011854:	68da      	ldr	r2, [r3, #12]
 8011856:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801185a:	60da      	str	r2, [r3, #12]
 801185c:	2000      	movs	r0, #0
 801185e:	2320      	movs	r3, #32
 8011860:	63e0      	str	r0, [r4, #60]	; 0x3c
 8011862:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8011866:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 801186a:	bd10      	pop	{r4, pc}
 801186c:	2001      	movs	r0, #1
 801186e:	e7fc      	b.n	801186a <HAL_UART_Init+0x56>

08011870 <HAL_UART_DeInit>:
 8011870:	b510      	push	{r4, lr}
 8011872:	4604      	mov	r4, r0
 8011874:	b190      	cbz	r0, 801189c <HAL_UART_DeInit+0x2c>
 8011876:	6802      	ldr	r2, [r0, #0]
 8011878:	2324      	movs	r3, #36	; 0x24
 801187a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 801187e:	68d3      	ldr	r3, [r2, #12]
 8011880:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011884:	60d3      	str	r3, [r2, #12]
 8011886:	f7fc ff55 	bl	800e734 <HAL_UART_MspDeInit>
 801188a:	2000      	movs	r0, #0
 801188c:	63e0      	str	r0, [r4, #60]	; 0x3c
 801188e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 8011892:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8011896:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801189a:	bd10      	pop	{r4, pc}
 801189c:	2001      	movs	r0, #1
 801189e:	e7fc      	b.n	801189a <HAL_UART_DeInit+0x2a>

080118a0 <HAL_UART_Transmit>:
 80118a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118a4:	461f      	mov	r7, r3
 80118a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80118aa:	2b20      	cmp	r3, #32
 80118ac:	4604      	mov	r4, r0
 80118ae:	460d      	mov	r5, r1
 80118b0:	4690      	mov	r8, r2
 80118b2:	d14f      	bne.n	8011954 <HAL_UART_Transmit+0xb4>
 80118b4:	2900      	cmp	r1, #0
 80118b6:	d04b      	beq.n	8011950 <HAL_UART_Transmit+0xb0>
 80118b8:	2a00      	cmp	r2, #0
 80118ba:	d049      	beq.n	8011950 <HAL_UART_Transmit+0xb0>
 80118bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d047      	beq.n	8011954 <HAL_UART_Transmit+0xb4>
 80118c4:	2301      	movs	r3, #1
 80118c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80118ca:	f04f 0900 	mov.w	r9, #0
 80118ce:	2321      	movs	r3, #33	; 0x21
 80118d0:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
 80118d4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 80118d8:	f7fc ffc0 	bl	800e85c <HAL_GetTick>
 80118dc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
 80118e0:	4606      	mov	r6, r0
 80118e2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
 80118e6:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
 80118ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	b953      	cbnz	r3, 8011906 <HAL_UART_Transmit+0x66>
 80118f0:	463b      	mov	r3, r7
 80118f2:	4632      	mov	r2, r6
 80118f4:	2140      	movs	r1, #64	; 0x40
 80118f6:	4620      	mov	r0, r4
 80118f8:	f7ff ff64 	bl	80117c4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80118fc:	b998      	cbnz	r0, 8011926 <HAL_UART_Transmit+0x86>
 80118fe:	2320      	movs	r3, #32
 8011900:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8011904:	e010      	b.n	8011928 <HAL_UART_Transmit+0x88>
 8011906:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8011908:	3b01      	subs	r3, #1
 801190a:	b29b      	uxth	r3, r3
 801190c:	84e3      	strh	r3, [r4, #38]	; 0x26
 801190e:	68a3      	ldr	r3, [r4, #8]
 8011910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011914:	4632      	mov	r2, r6
 8011916:	463b      	mov	r3, r7
 8011918:	f04f 0180 	mov.w	r1, #128	; 0x80
 801191c:	4620      	mov	r0, r4
 801191e:	d10e      	bne.n	801193e <HAL_UART_Transmit+0x9e>
 8011920:	f7ff ff50 	bl	80117c4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011924:	b110      	cbz	r0, 801192c <HAL_UART_Transmit+0x8c>
 8011926:	2003      	movs	r0, #3
 8011928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801192c:	882b      	ldrh	r3, [r5, #0]
 801192e:	6822      	ldr	r2, [r4, #0]
 8011930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011934:	6053      	str	r3, [r2, #4]
 8011936:	6923      	ldr	r3, [r4, #16]
 8011938:	b943      	cbnz	r3, 801194c <HAL_UART_Transmit+0xac>
 801193a:	3502      	adds	r5, #2
 801193c:	e7d5      	b.n	80118ea <HAL_UART_Transmit+0x4a>
 801193e:	f7ff ff41 	bl	80117c4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011942:	2800      	cmp	r0, #0
 8011944:	d1ef      	bne.n	8011926 <HAL_UART_Transmit+0x86>
 8011946:	6823      	ldr	r3, [r4, #0]
 8011948:	782a      	ldrb	r2, [r5, #0]
 801194a:	605a      	str	r2, [r3, #4]
 801194c:	3501      	adds	r5, #1
 801194e:	e7cc      	b.n	80118ea <HAL_UART_Transmit+0x4a>
 8011950:	2001      	movs	r0, #1
 8011952:	e7e9      	b.n	8011928 <HAL_UART_Transmit+0x88>
 8011954:	2002      	movs	r0, #2
 8011956:	e7e7      	b.n	8011928 <HAL_UART_Transmit+0x88>

08011958 <HAL_UART_Receive>:
 8011958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801195c:	461f      	mov	r7, r3
 801195e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8011962:	2b20      	cmp	r3, #32
 8011964:	4604      	mov	r4, r0
 8011966:	460d      	mov	r5, r1
 8011968:	4690      	mov	r8, r2
 801196a:	d155      	bne.n	8011a18 <HAL_UART_Receive+0xc0>
 801196c:	2900      	cmp	r1, #0
 801196e:	d051      	beq.n	8011a14 <HAL_UART_Receive+0xbc>
 8011970:	2a00      	cmp	r2, #0
 8011972:	d04f      	beq.n	8011a14 <HAL_UART_Receive+0xbc>
 8011974:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011978:	2b01      	cmp	r3, #1
 801197a:	d04d      	beq.n	8011a18 <HAL_UART_Receive+0xc0>
 801197c:	2301      	movs	r3, #1
 801197e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8011982:	f04f 0900 	mov.w	r9, #0
 8011986:	2322      	movs	r3, #34	; 0x22
 8011988:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
 801198c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8011990:	f7fc ff64 	bl	800e85c <HAL_GetTick>
 8011994:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
 8011998:	4606      	mov	r6, r0
 801199a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
 801199e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
 80119a2:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80119a4:	b280      	uxth	r0, r0
 80119a6:	b918      	cbnz	r0, 80119b0 <HAL_UART_Receive+0x58>
 80119a8:	2320      	movs	r3, #32
 80119aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80119ae:	e010      	b.n	80119d2 <HAL_UART_Receive+0x7a>
 80119b0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80119b2:	3b01      	subs	r3, #1
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80119b8:	68a3      	ldr	r3, [r4, #8]
 80119ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119be:	4632      	mov	r2, r6
 80119c0:	463b      	mov	r3, r7
 80119c2:	f04f 0120 	mov.w	r1, #32
 80119c6:	4620      	mov	r0, r4
 80119c8:	d116      	bne.n	80119f8 <HAL_UART_Receive+0xa0>
 80119ca:	f7ff fefb 	bl	80117c4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80119ce:	b110      	cbz	r0, 80119d6 <HAL_UART_Receive+0x7e>
 80119d0:	2003      	movs	r0, #3
 80119d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119d6:	6922      	ldr	r2, [r4, #16]
 80119d8:	6823      	ldr	r3, [r4, #0]
 80119da:	b93a      	cbnz	r2, 80119ec <HAL_UART_Receive+0x94>
 80119dc:	685a      	ldr	r2, [r3, #4]
 80119de:	462b      	mov	r3, r5
 80119e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80119e4:	f823 2b02 	strh.w	r2, [r3], #2
 80119e8:	461d      	mov	r5, r3
 80119ea:	e7da      	b.n	80119a2 <HAL_UART_Receive+0x4a>
 80119ec:	685a      	ldr	r2, [r3, #4]
 80119ee:	462b      	mov	r3, r5
 80119f0:	b2d2      	uxtb	r2, r2
 80119f2:	f823 2b01 	strh.w	r2, [r3], #1
 80119f6:	e7f7      	b.n	80119e8 <HAL_UART_Receive+0x90>
 80119f8:	f7ff fee4 	bl	80117c4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80119fc:	2800      	cmp	r0, #0
 80119fe:	d1e7      	bne.n	80119d0 <HAL_UART_Receive+0x78>
 8011a00:	6822      	ldr	r2, [r4, #0]
 8011a02:	6921      	ldr	r1, [r4, #16]
 8011a04:	6852      	ldr	r2, [r2, #4]
 8011a06:	1c6b      	adds	r3, r5, #1
 8011a08:	b909      	cbnz	r1, 8011a0e <HAL_UART_Receive+0xb6>
 8011a0a:	702a      	strb	r2, [r5, #0]
 8011a0c:	e7ec      	b.n	80119e8 <HAL_UART_Receive+0x90>
 8011a0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011a12:	e7fa      	b.n	8011a0a <HAL_UART_Receive+0xb2>
 8011a14:	2001      	movs	r0, #1
 8011a16:	e7dc      	b.n	80119d2 <HAL_UART_Receive+0x7a>
 8011a18:	2002      	movs	r0, #2
 8011a1a:	e7da      	b.n	80119d2 <HAL_UART_Receive+0x7a>

08011a1c <HAL_UART_TxCpltCallback>:
 8011a1c:	4770      	bx	lr

08011a1e <HAL_UART_RxCpltCallback>:
 8011a1e:	4770      	bx	lr

08011a20 <UART_Receive_IT>:
 8011a20:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8011a24:	2b22      	cmp	r3, #34	; 0x22
 8011a26:	b510      	push	{r4, lr}
 8011a28:	d133      	bne.n	8011a92 <UART_Receive_IT+0x72>
 8011a2a:	6881      	ldr	r1, [r0, #8]
 8011a2c:	6904      	ldr	r4, [r0, #16]
 8011a2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011a30:	6802      	ldr	r2, [r0, #0]
 8011a32:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8011a36:	d123      	bne.n	8011a80 <UART_Receive_IT+0x60>
 8011a38:	6852      	ldr	r2, [r2, #4]
 8011a3a:	b9ec      	cbnz	r4, 8011a78 <UART_Receive_IT+0x58>
 8011a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011a40:	f823 2b02 	strh.w	r2, [r3], #2
 8011a44:	6283      	str	r3, [r0, #40]	; 0x28
 8011a46:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8011a48:	3c01      	subs	r4, #1
 8011a4a:	b2a4      	uxth	r4, r4
 8011a4c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8011a4e:	b98c      	cbnz	r4, 8011a74 <UART_Receive_IT+0x54>
 8011a50:	6803      	ldr	r3, [r0, #0]
 8011a52:	68da      	ldr	r2, [r3, #12]
 8011a54:	f022 0220 	bic.w	r2, r2, #32
 8011a58:	60da      	str	r2, [r3, #12]
 8011a5a:	68da      	ldr	r2, [r3, #12]
 8011a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011a60:	60da      	str	r2, [r3, #12]
 8011a62:	695a      	ldr	r2, [r3, #20]
 8011a64:	f022 0201 	bic.w	r2, r2, #1
 8011a68:	615a      	str	r2, [r3, #20]
 8011a6a:	2320      	movs	r3, #32
 8011a6c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8011a70:	f7ff ffd5 	bl	8011a1e <HAL_UART_RxCpltCallback>
 8011a74:	2000      	movs	r0, #0
 8011a76:	e00d      	b.n	8011a94 <UART_Receive_IT+0x74>
 8011a78:	b2d2      	uxtb	r2, r2
 8011a7a:	f823 2b01 	strh.w	r2, [r3], #1
 8011a7e:	e7e1      	b.n	8011a44 <UART_Receive_IT+0x24>
 8011a80:	1c59      	adds	r1, r3, #1
 8011a82:	6852      	ldr	r2, [r2, #4]
 8011a84:	6281      	str	r1, [r0, #40]	; 0x28
 8011a86:	b90c      	cbnz	r4, 8011a8c <UART_Receive_IT+0x6c>
 8011a88:	701a      	strb	r2, [r3, #0]
 8011a8a:	e7dc      	b.n	8011a46 <UART_Receive_IT+0x26>
 8011a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011a90:	e7fa      	b.n	8011a88 <UART_Receive_IT+0x68>
 8011a92:	2002      	movs	r0, #2
 8011a94:	bd10      	pop	{r4, pc}

08011a96 <HAL_UART_ErrorCallback>:
 8011a96:	4770      	bx	lr

08011a98 <HAL_UART_IRQHandler>:
 8011a98:	6803      	ldr	r3, [r0, #0]
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	68d9      	ldr	r1, [r3, #12]
 8011a9e:	b570      	push	{r4, r5, r6, lr}
 8011aa0:	0716      	lsls	r6, r2, #28
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	695d      	ldr	r5, [r3, #20]
 8011aa6:	d107      	bne.n	8011ab8 <HAL_UART_IRQHandler+0x20>
 8011aa8:	0696      	lsls	r6, r2, #26
 8011aaa:	d55a      	bpl.n	8011b62 <HAL_UART_IRQHandler+0xca>
 8011aac:	068d      	lsls	r5, r1, #26
 8011aae:	d558      	bpl.n	8011b62 <HAL_UART_IRQHandler+0xca>
 8011ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ab4:	f7ff bfb4 	b.w	8011a20 <UART_Receive_IT>
 8011ab8:	f015 0501 	ands.w	r5, r5, #1
 8011abc:	d102      	bne.n	8011ac4 <HAL_UART_IRQHandler+0x2c>
 8011abe:	f411 7f90 	tst.w	r1, #288	; 0x120
 8011ac2:	d04e      	beq.n	8011b62 <HAL_UART_IRQHandler+0xca>
 8011ac4:	07d0      	lsls	r0, r2, #31
 8011ac6:	d505      	bpl.n	8011ad4 <HAL_UART_IRQHandler+0x3c>
 8011ac8:	05cb      	lsls	r3, r1, #23
 8011aca:	bf42      	ittt	mi
 8011acc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8011ace:	f043 0301 	orrmi.w	r3, r3, #1
 8011ad2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
 8011ad4:	0756      	lsls	r6, r2, #29
 8011ad6:	d504      	bpl.n	8011ae2 <HAL_UART_IRQHandler+0x4a>
 8011ad8:	b11d      	cbz	r5, 8011ae2 <HAL_UART_IRQHandler+0x4a>
 8011ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011adc:	f043 0302 	orr.w	r3, r3, #2
 8011ae0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011ae2:	0790      	lsls	r0, r2, #30
 8011ae4:	d504      	bpl.n	8011af0 <HAL_UART_IRQHandler+0x58>
 8011ae6:	b11d      	cbz	r5, 8011af0 <HAL_UART_IRQHandler+0x58>
 8011ae8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011aea:	f043 0304 	orr.w	r3, r3, #4
 8011aee:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011af0:	0713      	lsls	r3, r2, #28
 8011af2:	d506      	bpl.n	8011b02 <HAL_UART_IRQHandler+0x6a>
 8011af4:	068e      	lsls	r6, r1, #26
 8011af6:	d400      	bmi.n	8011afa <HAL_UART_IRQHandler+0x62>
 8011af8:	b11d      	cbz	r5, 8011b02 <HAL_UART_IRQHandler+0x6a>
 8011afa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011afc:	f043 0308 	orr.w	r3, r3, #8
 8011b00:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011b02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011b04:	b343      	cbz	r3, 8011b58 <HAL_UART_IRQHandler+0xc0>
 8011b06:	0695      	lsls	r5, r2, #26
 8011b08:	d504      	bpl.n	8011b14 <HAL_UART_IRQHandler+0x7c>
 8011b0a:	0688      	lsls	r0, r1, #26
 8011b0c:	d502      	bpl.n	8011b14 <HAL_UART_IRQHandler+0x7c>
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f7ff ff86 	bl	8011a20 <UART_Receive_IT>
 8011b14:	6823      	ldr	r3, [r4, #0]
 8011b16:	695d      	ldr	r5, [r3, #20]
 8011b18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8011b1a:	0711      	lsls	r1, r2, #28
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	d402      	bmi.n	8011b26 <HAL_UART_IRQHandler+0x8e>
 8011b20:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8011b24:	d019      	beq.n	8011b5a <HAL_UART_IRQHandler+0xc2>
 8011b26:	f7ff fdcf 	bl	80116c8 <UART_EndRxTransfer>
 8011b2a:	6823      	ldr	r3, [r4, #0]
 8011b2c:	695a      	ldr	r2, [r3, #20]
 8011b2e:	0652      	lsls	r2, r2, #25
 8011b30:	d50f      	bpl.n	8011b52 <HAL_UART_IRQHandler+0xba>
 8011b32:	695a      	ldr	r2, [r3, #20]
 8011b34:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011b3a:	615a      	str	r2, [r3, #20]
 8011b3c:	b148      	cbz	r0, 8011b52 <HAL_UART_IRQHandler+0xba>
 8011b3e:	4b26      	ldr	r3, [pc, #152]	; (8011bd8 <HAL_UART_IRQHandler+0x140>)
 8011b40:	6503      	str	r3, [r0, #80]	; 0x50
 8011b42:	f7fd f815 	bl	800eb70 <HAL_DMA_Abort_IT>
 8011b46:	b138      	cbz	r0, 8011b58 <HAL_UART_IRQHandler+0xc0>
 8011b48:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b4e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011b50:	4718      	bx	r3
 8011b52:	4620      	mov	r0, r4
 8011b54:	f7ff ff9f 	bl	8011a96 <HAL_UART_ErrorCallback>
 8011b58:	bd70      	pop	{r4, r5, r6, pc}
 8011b5a:	f7ff ff9c 	bl	8011a96 <HAL_UART_ErrorCallback>
 8011b5e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8011b60:	e7fa      	b.n	8011b58 <HAL_UART_IRQHandler+0xc0>
 8011b62:	0616      	lsls	r6, r2, #24
 8011b64:	d528      	bpl.n	8011bb8 <HAL_UART_IRQHandler+0x120>
 8011b66:	060d      	lsls	r5, r1, #24
 8011b68:	d526      	bpl.n	8011bb8 <HAL_UART_IRQHandler+0x120>
 8011b6a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8011b6e:	2a21      	cmp	r2, #33	; 0x21
 8011b70:	d1f2      	bne.n	8011b58 <HAL_UART_IRQHandler+0xc0>
 8011b72:	68a1      	ldr	r1, [r4, #8]
 8011b74:	6a22      	ldr	r2, [r4, #32]
 8011b76:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8011b7a:	d118      	bne.n	8011bae <HAL_UART_IRQHandler+0x116>
 8011b7c:	8811      	ldrh	r1, [r2, #0]
 8011b7e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8011b82:	6059      	str	r1, [r3, #4]
 8011b84:	6921      	ldr	r1, [r4, #16]
 8011b86:	b981      	cbnz	r1, 8011baa <HAL_UART_IRQHandler+0x112>
 8011b88:	3202      	adds	r2, #2
 8011b8a:	6222      	str	r2, [r4, #32]
 8011b8c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8011b8e:	3a01      	subs	r2, #1
 8011b90:	b292      	uxth	r2, r2
 8011b92:	84e2      	strh	r2, [r4, #38]	; 0x26
 8011b94:	2a00      	cmp	r2, #0
 8011b96:	d1df      	bne.n	8011b58 <HAL_UART_IRQHandler+0xc0>
 8011b98:	68da      	ldr	r2, [r3, #12]
 8011b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011b9e:	60da      	str	r2, [r3, #12]
 8011ba0:	68da      	ldr	r2, [r3, #12]
 8011ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011ba6:	60da      	str	r2, [r3, #12]
 8011ba8:	e7d6      	b.n	8011b58 <HAL_UART_IRQHandler+0xc0>
 8011baa:	3201      	adds	r2, #1
 8011bac:	e7ed      	b.n	8011b8a <HAL_UART_IRQHandler+0xf2>
 8011bae:	1c51      	adds	r1, r2, #1
 8011bb0:	6221      	str	r1, [r4, #32]
 8011bb2:	7812      	ldrb	r2, [r2, #0]
 8011bb4:	605a      	str	r2, [r3, #4]
 8011bb6:	e7e9      	b.n	8011b8c <HAL_UART_IRQHandler+0xf4>
 8011bb8:	0650      	lsls	r0, r2, #25
 8011bba:	d5cd      	bpl.n	8011b58 <HAL_UART_IRQHandler+0xc0>
 8011bbc:	064a      	lsls	r2, r1, #25
 8011bbe:	d5cb      	bpl.n	8011b58 <HAL_UART_IRQHandler+0xc0>
 8011bc0:	68da      	ldr	r2, [r3, #12]
 8011bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011bc6:	60da      	str	r2, [r3, #12]
 8011bc8:	2320      	movs	r3, #32
 8011bca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f7ff ff24 	bl	8011a1c <HAL_UART_TxCpltCallback>
 8011bd4:	e7c0      	b.n	8011b58 <HAL_UART_IRQHandler+0xc0>
 8011bd6:	bf00      	nop
 8011bd8:	08011bdd 	.word	0x08011bdd

08011bdc <UART_DMAAbortOnError>:
 8011bdc:	b508      	push	{r3, lr}
 8011bde:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8011be0:	2300      	movs	r3, #0
 8011be2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8011be4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011be6:	f7ff ff56 	bl	8011a96 <HAL_UART_ErrorCallback>
 8011bea:	bd08      	pop	{r3, pc}

08011bec <SDMMC_GetCmdResp2>:
 8011bec:	4b12      	ldr	r3, [pc, #72]	; (8011c38 <SDMMC_GetCmdResp2+0x4c>)
 8011bee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	fbb3 f2f2 	udiv	r2, r3, r2
 8011bf8:	f241 3388 	movw	r3, #5000	; 0x1388
 8011bfc:	4353      	muls	r3, r2
 8011bfe:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011c02:	d315      	bcc.n	8011c30 <SDMMC_GetCmdResp2+0x44>
 8011c04:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011c06:	f012 0f45 	tst.w	r2, #69	; 0x45
 8011c0a:	d0f8      	beq.n	8011bfe <SDMMC_GetCmdResp2+0x12>
 8011c0c:	0512      	lsls	r2, r2, #20
 8011c0e:	d4f6      	bmi.n	8011bfe <SDMMC_GetCmdResp2+0x12>
 8011c10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011c12:	075b      	lsls	r3, r3, #29
 8011c14:	d503      	bpl.n	8011c1e <SDMMC_GetCmdResp2+0x32>
 8011c16:	2304      	movs	r3, #4
 8011c18:	6383      	str	r3, [r0, #56]	; 0x38
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	4770      	bx	lr
 8011c1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011c20:	f013 0301 	ands.w	r3, r3, #1
 8011c24:	d001      	beq.n	8011c2a <SDMMC_GetCmdResp2+0x3e>
 8011c26:	2301      	movs	r3, #1
 8011c28:	e7f6      	b.n	8011c18 <SDMMC_GetCmdResp2+0x2c>
 8011c2a:	22c5      	movs	r2, #197	; 0xc5
 8011c2c:	6382      	str	r2, [r0, #56]	; 0x38
 8011c2e:	e7f4      	b.n	8011c1a <SDMMC_GetCmdResp2+0x2e>
 8011c30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011c34:	e7f1      	b.n	8011c1a <SDMMC_GetCmdResp2+0x2e>
 8011c36:	bf00      	nop
 8011c38:	20000058 	.word	0x20000058

08011c3c <SDMMC_GetCmdResp3>:
 8011c3c:	4b0f      	ldr	r3, [pc, #60]	; (8011c7c <SDMMC_GetCmdResp3+0x40>)
 8011c3e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	fbb3 f2f2 	udiv	r2, r3, r2
 8011c48:	f241 3388 	movw	r3, #5000	; 0x1388
 8011c4c:	4353      	muls	r3, r2
 8011c4e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011c52:	d30f      	bcc.n	8011c74 <SDMMC_GetCmdResp3+0x38>
 8011c54:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011c56:	f012 0f45 	tst.w	r2, #69	; 0x45
 8011c5a:	d0f8      	beq.n	8011c4e <SDMMC_GetCmdResp3+0x12>
 8011c5c:	0512      	lsls	r2, r2, #20
 8011c5e:	d4f6      	bmi.n	8011c4e <SDMMC_GetCmdResp3+0x12>
 8011c60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011c62:	f013 0304 	ands.w	r3, r3, #4
 8011c66:	bf15      	itete	ne
 8011c68:	2304      	movne	r3, #4
 8011c6a:	22c5      	moveq	r2, #197	; 0xc5
 8011c6c:	6383      	strne	r3, [r0, #56]	; 0x38
 8011c6e:	6382      	streq	r2, [r0, #56]	; 0x38
 8011c70:	4618      	mov	r0, r3
 8011c72:	4770      	bx	lr
 8011c74:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	20000058 	.word	0x20000058

08011c80 <SDMMC_GetCmdResp1>:
 8011c80:	4b44      	ldr	r3, [pc, #272]	; (8011d94 <SDMMC_GetCmdResp1+0x114>)
 8011c82:	b510      	push	{r4, lr}
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8011c8a:	fbb3 f3f4 	udiv	r3, r3, r4
 8011c8e:	435a      	muls	r2, r3
 8011c90:	2a00      	cmp	r2, #0
 8011c92:	d04a      	beq.n	8011d2a <SDMMC_GetCmdResp1+0xaa>
 8011c94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011c96:	f013 0f45 	tst.w	r3, #69	; 0x45
 8011c9a:	d008      	beq.n	8011cae <SDMMC_GetCmdResp1+0x2e>
 8011c9c:	051c      	lsls	r4, r3, #20
 8011c9e:	d406      	bmi.n	8011cae <SDMMC_GetCmdResp1+0x2e>
 8011ca0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011ca2:	075b      	lsls	r3, r3, #29
 8011ca4:	d505      	bpl.n	8011cb2 <SDMMC_GetCmdResp1+0x32>
 8011ca6:	2304      	movs	r3, #4
 8011ca8:	6383      	str	r3, [r0, #56]	; 0x38
 8011caa:	4618      	mov	r0, r3
 8011cac:	bd10      	pop	{r4, pc}
 8011cae:	3a01      	subs	r2, #1
 8011cb0:	e7ee      	b.n	8011c90 <SDMMC_GetCmdResp1+0x10>
 8011cb2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011cb4:	07dc      	lsls	r4, r3, #31
 8011cb6:	d503      	bpl.n	8011cc0 <SDMMC_GetCmdResp1+0x40>
 8011cb8:	2301      	movs	r3, #1
 8011cba:	6383      	str	r3, [r0, #56]	; 0x38
 8011cbc:	2001      	movs	r0, #1
 8011cbe:	e7f5      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011cc0:	23c5      	movs	r3, #197	; 0xc5
 8011cc2:	6383      	str	r3, [r0, #56]	; 0x38
 8011cc4:	6903      	ldr	r3, [r0, #16]
 8011cc6:	b2db      	uxtb	r3, r3
 8011cc8:	4299      	cmp	r1, r3
 8011cca:	d1f7      	bne.n	8011cbc <SDMMC_GetCmdResp1+0x3c>
 8011ccc:	6943      	ldr	r3, [r0, #20]
 8011cce:	4832      	ldr	r0, [pc, #200]	; (8011d98 <SDMMC_GetCmdResp1+0x118>)
 8011cd0:	4018      	ands	r0, r3
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d0ea      	beq.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	db2a      	blt.n	8011d30 <SDMMC_GetCmdResp1+0xb0>
 8011cda:	005a      	lsls	r2, r3, #1
 8011cdc:	d42b      	bmi.n	8011d36 <SDMMC_GetCmdResp1+0xb6>
 8011cde:	009c      	lsls	r4, r3, #2
 8011ce0:	d42b      	bmi.n	8011d3a <SDMMC_GetCmdResp1+0xba>
 8011ce2:	00d9      	lsls	r1, r3, #3
 8011ce4:	d42b      	bmi.n	8011d3e <SDMMC_GetCmdResp1+0xbe>
 8011ce6:	011a      	lsls	r2, r3, #4
 8011ce8:	d42c      	bmi.n	8011d44 <SDMMC_GetCmdResp1+0xc4>
 8011cea:	015c      	lsls	r4, r3, #5
 8011cec:	d42d      	bmi.n	8011d4a <SDMMC_GetCmdResp1+0xca>
 8011cee:	01d9      	lsls	r1, r3, #7
 8011cf0:	d42e      	bmi.n	8011d50 <SDMMC_GetCmdResp1+0xd0>
 8011cf2:	021a      	lsls	r2, r3, #8
 8011cf4:	d42f      	bmi.n	8011d56 <SDMMC_GetCmdResp1+0xd6>
 8011cf6:	025c      	lsls	r4, r3, #9
 8011cf8:	d430      	bmi.n	8011d5c <SDMMC_GetCmdResp1+0xdc>
 8011cfa:	0299      	lsls	r1, r3, #10
 8011cfc:	d431      	bmi.n	8011d62 <SDMMC_GetCmdResp1+0xe2>
 8011cfe:	02da      	lsls	r2, r3, #11
 8011d00:	d432      	bmi.n	8011d68 <SDMMC_GetCmdResp1+0xe8>
 8011d02:	035c      	lsls	r4, r3, #13
 8011d04:	d433      	bmi.n	8011d6e <SDMMC_GetCmdResp1+0xee>
 8011d06:	0399      	lsls	r1, r3, #14
 8011d08:	d434      	bmi.n	8011d74 <SDMMC_GetCmdResp1+0xf4>
 8011d0a:	03da      	lsls	r2, r3, #15
 8011d0c:	d435      	bmi.n	8011d7a <SDMMC_GetCmdResp1+0xfa>
 8011d0e:	041c      	lsls	r4, r3, #16
 8011d10:	d436      	bmi.n	8011d80 <SDMMC_GetCmdResp1+0x100>
 8011d12:	0459      	lsls	r1, r3, #17
 8011d14:	d437      	bmi.n	8011d86 <SDMMC_GetCmdResp1+0x106>
 8011d16:	049a      	lsls	r2, r3, #18
 8011d18:	d438      	bmi.n	8011d8c <SDMMC_GetCmdResp1+0x10c>
 8011d1a:	f013 0f08 	tst.w	r3, #8
 8011d1e:	bf0c      	ite	eq
 8011d20:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8011d24:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8011d28:	e7c0      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d2a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8011d2e:	e7bd      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d30:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8011d34:	e7ba      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d36:	2040      	movs	r0, #64	; 0x40
 8011d38:	e7b8      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d3a:	2080      	movs	r0, #128	; 0x80
 8011d3c:	e7b6      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011d42:	e7b3      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d44:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011d48:	e7b0      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d4a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011d4e:	e7ad      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011d54:	e7aa      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011d5a:	e7a7      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8011d60:	e7a4      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011d66:	e7a1      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011d6c:	e79e      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8011d72:	e79b      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d74:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8011d78:	e798      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011d7e:	e795      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d80:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011d84:	e792      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d86:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8011d8a:	e78f      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d8c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011d90:	e78c      	b.n	8011cac <SDMMC_GetCmdResp1+0x2c>
 8011d92:	bf00      	nop
 8011d94:	20000058 	.word	0x20000058
 8011d98:	fdffe008 	.word	0xfdffe008

08011d9c <SDIO_Init>:
 8011d9c:	b084      	sub	sp, #16
 8011d9e:	b510      	push	{r4, lr}
 8011da0:	ac03      	add	r4, sp, #12
 8011da2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8011da6:	460b      	mov	r3, r1
 8011da8:	9904      	ldr	r1, [sp, #16]
 8011daa:	6842      	ldr	r2, [r0, #4]
 8011dac:	430b      	orrs	r3, r1
 8011dae:	9905      	ldr	r1, [sp, #20]
 8011db0:	430b      	orrs	r3, r1
 8011db2:	9906      	ldr	r1, [sp, #24]
 8011db4:	430b      	orrs	r3, r1
 8011db6:	9907      	ldr	r1, [sp, #28]
 8011db8:	430b      	orrs	r3, r1
 8011dba:	9908      	ldr	r1, [sp, #32]
 8011dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dc0:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8011dc4:	430b      	orrs	r3, r1
 8011dc6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8011dca:	4313      	orrs	r3, r2
 8011dcc:	6043      	str	r3, [r0, #4]
 8011dce:	b004      	add	sp, #16
 8011dd0:	2000      	movs	r0, #0
 8011dd2:	4770      	bx	lr

08011dd4 <SDIO_ReadFIFO>:
 8011dd4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8011dd8:	4770      	bx	lr

08011dda <SDIO_WriteFIFO>:
 8011dda:	680b      	ldr	r3, [r1, #0]
 8011ddc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8011de0:	2000      	movs	r0, #0
 8011de2:	4770      	bx	lr

08011de4 <SDIO_PowerState_ON>:
 8011de4:	b508      	push	{r3, lr}
 8011de6:	2303      	movs	r3, #3
 8011de8:	6003      	str	r3, [r0, #0]
 8011dea:	2002      	movs	r0, #2
 8011dec:	f7fc fd3c 	bl	800e868 <HAL_Delay>
 8011df0:	2000      	movs	r0, #0
 8011df2:	bd08      	pop	{r3, pc}

08011df4 <SDIO_PowerState_OFF>:
 8011df4:	2300      	movs	r3, #0
 8011df6:	6003      	str	r3, [r0, #0]
 8011df8:	4618      	mov	r0, r3
 8011dfa:	4770      	bx	lr

08011dfc <SDIO_GetPowerState>:
 8011dfc:	6800      	ldr	r0, [r0, #0]
 8011dfe:	f000 0003 	and.w	r0, r0, #3
 8011e02:	4770      	bx	lr

08011e04 <SDIO_SendCommand>:
 8011e04:	680b      	ldr	r3, [r1, #0]
 8011e06:	b510      	push	{r4, lr}
 8011e08:	6083      	str	r3, [r0, #8]
 8011e0a:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
 8011e0e:	68c2      	ldr	r2, [r0, #12]
 8011e10:	4323      	orrs	r3, r4
 8011e12:	68cc      	ldr	r4, [r1, #12]
 8011e14:	6909      	ldr	r1, [r1, #16]
 8011e16:	4323      	orrs	r3, r4
 8011e18:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8011e1c:	430b      	orrs	r3, r1
 8011e1e:	f022 020f 	bic.w	r2, r2, #15
 8011e22:	4313      	orrs	r3, r2
 8011e24:	60c3      	str	r3, [r0, #12]
 8011e26:	2000      	movs	r0, #0
 8011e28:	bd10      	pop	{r4, pc}

08011e2a <SDIO_GetResponse>:
 8011e2a:	3014      	adds	r0, #20
 8011e2c:	5840      	ldr	r0, [r0, r1]
 8011e2e:	4770      	bx	lr

08011e30 <SDIO_ConfigData>:
 8011e30:	680b      	ldr	r3, [r1, #0]
 8011e32:	b510      	push	{r4, lr}
 8011e34:	6243      	str	r3, [r0, #36]	; 0x24
 8011e36:	684b      	ldr	r3, [r1, #4]
 8011e38:	6283      	str	r3, [r0, #40]	; 0x28
 8011e3a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8011e3e:	4323      	orrs	r3, r4
 8011e40:	690c      	ldr	r4, [r1, #16]
 8011e42:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8011e44:	6949      	ldr	r1, [r1, #20]
 8011e46:	4323      	orrs	r3, r4
 8011e48:	430b      	orrs	r3, r1
 8011e4a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8011e4e:	4313      	orrs	r3, r2
 8011e50:	62c3      	str	r3, [r0, #44]	; 0x2c
 8011e52:	2000      	movs	r0, #0
 8011e54:	bd10      	pop	{r4, pc}

08011e56 <SDMMC_CmdBlockLength>:
 8011e56:	b530      	push	{r4, r5, lr}
 8011e58:	b087      	sub	sp, #28
 8011e5a:	2410      	movs	r4, #16
 8011e5c:	2340      	movs	r3, #64	; 0x40
 8011e5e:	4605      	mov	r5, r0
 8011e60:	9101      	str	r1, [sp, #4]
 8011e62:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8011e66:	2200      	movs	r2, #0
 8011e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e6c:	a901      	add	r1, sp, #4
 8011e6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011e72:	f7ff ffc7 	bl	8011e04 <SDIO_SendCommand>
 8011e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e7a:	4621      	mov	r1, r4
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	f7ff feff 	bl	8011c80 <SDMMC_GetCmdResp1>
 8011e82:	b007      	add	sp, #28
 8011e84:	bd30      	pop	{r4, r5, pc}

08011e86 <SDMMC_CmdReadSingleBlock>:
 8011e86:	b530      	push	{r4, r5, lr}
 8011e88:	b087      	sub	sp, #28
 8011e8a:	2411      	movs	r4, #17
 8011e8c:	2340      	movs	r3, #64	; 0x40
 8011e8e:	4605      	mov	r5, r0
 8011e90:	9101      	str	r1, [sp, #4]
 8011e92:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8011e96:	2200      	movs	r2, #0
 8011e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e9c:	a901      	add	r1, sp, #4
 8011e9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ea2:	f7ff ffaf 	bl	8011e04 <SDIO_SendCommand>
 8011ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eaa:	4621      	mov	r1, r4
 8011eac:	4628      	mov	r0, r5
 8011eae:	f7ff fee7 	bl	8011c80 <SDMMC_GetCmdResp1>
 8011eb2:	b007      	add	sp, #28
 8011eb4:	bd30      	pop	{r4, r5, pc}

08011eb6 <SDMMC_CmdReadMultiBlock>:
 8011eb6:	b530      	push	{r4, r5, lr}
 8011eb8:	b087      	sub	sp, #28
 8011eba:	2412      	movs	r4, #18
 8011ebc:	2340      	movs	r3, #64	; 0x40
 8011ebe:	4605      	mov	r5, r0
 8011ec0:	9101      	str	r1, [sp, #4]
 8011ec2:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ecc:	a901      	add	r1, sp, #4
 8011ece:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ed2:	f7ff ff97 	bl	8011e04 <SDIO_SendCommand>
 8011ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eda:	4621      	mov	r1, r4
 8011edc:	4628      	mov	r0, r5
 8011ede:	f7ff fecf 	bl	8011c80 <SDMMC_GetCmdResp1>
 8011ee2:	b007      	add	sp, #28
 8011ee4:	bd30      	pop	{r4, r5, pc}

08011ee6 <SDMMC_CmdWriteSingleBlock>:
 8011ee6:	b530      	push	{r4, r5, lr}
 8011ee8:	b087      	sub	sp, #28
 8011eea:	2418      	movs	r4, #24
 8011eec:	2340      	movs	r3, #64	; 0x40
 8011eee:	4605      	mov	r5, r0
 8011ef0:	9101      	str	r1, [sp, #4]
 8011ef2:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011efc:	a901      	add	r1, sp, #4
 8011efe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f02:	f7ff ff7f 	bl	8011e04 <SDIO_SendCommand>
 8011f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f0a:	4621      	mov	r1, r4
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	f7ff feb7 	bl	8011c80 <SDMMC_GetCmdResp1>
 8011f12:	b007      	add	sp, #28
 8011f14:	bd30      	pop	{r4, r5, pc}

08011f16 <SDMMC_CmdWriteMultiBlock>:
 8011f16:	b530      	push	{r4, r5, lr}
 8011f18:	b087      	sub	sp, #28
 8011f1a:	2419      	movs	r4, #25
 8011f1c:	2340      	movs	r3, #64	; 0x40
 8011f1e:	4605      	mov	r5, r0
 8011f20:	9101      	str	r1, [sp, #4]
 8011f22:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8011f26:	2200      	movs	r2, #0
 8011f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f2c:	a901      	add	r1, sp, #4
 8011f2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f32:	f7ff ff67 	bl	8011e04 <SDIO_SendCommand>
 8011f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f3a:	4621      	mov	r1, r4
 8011f3c:	4628      	mov	r0, r5
 8011f3e:	f7ff fe9f 	bl	8011c80 <SDMMC_GetCmdResp1>
 8011f42:	b007      	add	sp, #28
 8011f44:	bd30      	pop	{r4, r5, pc}
	...

08011f48 <SDMMC_CmdStopTransfer>:
 8011f48:	b530      	push	{r4, r5, lr}
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	b087      	sub	sp, #28
 8011f4e:	240c      	movs	r4, #12
 8011f50:	2240      	movs	r2, #64	; 0x40
 8011f52:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8011f56:	4605      	mov	r5, r0
 8011f58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f5c:	a901      	add	r1, sp, #4
 8011f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f62:	9305      	str	r3, [sp, #20]
 8011f64:	f7ff ff4e 	bl	8011e04 <SDIO_SendCommand>
 8011f68:	4a03      	ldr	r2, [pc, #12]	; (8011f78 <SDMMC_CmdStopTransfer+0x30>)
 8011f6a:	4621      	mov	r1, r4
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f7ff fe87 	bl	8011c80 <SDMMC_GetCmdResp1>
 8011f72:	b007      	add	sp, #28
 8011f74:	bd30      	pop	{r4, r5, pc}
 8011f76:	bf00      	nop
 8011f78:	05f5e100 	.word	0x05f5e100

08011f7c <SDMMC_CmdSelDesel>:
 8011f7c:	b530      	push	{r4, r5, lr}
 8011f7e:	b087      	sub	sp, #28
 8011f80:	2407      	movs	r4, #7
 8011f82:	2340      	movs	r3, #64	; 0x40
 8011f84:	4605      	mov	r5, r0
 8011f86:	9201      	str	r2, [sp, #4]
 8011f88:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f92:	a901      	add	r1, sp, #4
 8011f94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f98:	f7ff ff34 	bl	8011e04 <SDIO_SendCommand>
 8011f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fa0:	4621      	mov	r1, r4
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	f7ff fe6c 	bl	8011c80 <SDMMC_GetCmdResp1>
 8011fa8:	b007      	add	sp, #28
 8011faa:	bd30      	pop	{r4, r5, pc}

08011fac <SDMMC_CmdGoIdleState>:
 8011fac:	b510      	push	{r4, lr}
 8011fae:	2300      	movs	r3, #0
 8011fb0:	b086      	sub	sp, #24
 8011fb2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8011fb6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8011fba:	a901      	add	r1, sp, #4
 8011fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fc0:	9305      	str	r3, [sp, #20]
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	f7ff ff1e 	bl	8011e04 <SDIO_SendCommand>
 8011fc8:	4b0b      	ldr	r3, [pc, #44]	; (8011ff8 <SDMMC_CmdGoIdleState+0x4c>)
 8011fca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8011fd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8011fd8:	4353      	muls	r3, r2
 8011fda:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011fde:	d307      	bcc.n	8011ff0 <SDMMC_CmdGoIdleState+0x44>
 8011fe0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011fe2:	0612      	lsls	r2, r2, #24
 8011fe4:	d5f9      	bpl.n	8011fda <SDMMC_CmdGoIdleState+0x2e>
 8011fe6:	23c5      	movs	r3, #197	; 0xc5
 8011fe8:	63a3      	str	r3, [r4, #56]	; 0x38
 8011fea:	2000      	movs	r0, #0
 8011fec:	b006      	add	sp, #24
 8011fee:	bd10      	pop	{r4, pc}
 8011ff0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8011ff4:	e7fa      	b.n	8011fec <SDMMC_CmdGoIdleState+0x40>
 8011ff6:	bf00      	nop
 8011ff8:	20000058 	.word	0x20000058

08011ffc <SDMMC_CmdOperCond>:
 8011ffc:	b510      	push	{r4, lr}
 8011ffe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012002:	b086      	sub	sp, #24
 8012004:	2308      	movs	r3, #8
 8012006:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801200a:	f04f 0c40 	mov.w	ip, #64	; 0x40
 801200e:	2300      	movs	r3, #0
 8012010:	e9cd c303 	strd	ip, r3, [sp, #12]
 8012014:	a901      	add	r1, sp, #4
 8012016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801201a:	9305      	str	r3, [sp, #20]
 801201c:	4604      	mov	r4, r0
 801201e:	f7ff fef1 	bl	8011e04 <SDIO_SendCommand>
 8012022:	4b15      	ldr	r3, [pc, #84]	; (8012078 <SDMMC_CmdOperCond+0x7c>)
 8012024:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	fbb3 f2f2 	udiv	r2, r3, r2
 801202e:	f241 3388 	movw	r3, #5000	; 0x1388
 8012032:	4353      	muls	r3, r2
 8012034:	f113 33ff 	adds.w	r3, r3, #4294967295
 8012038:	d31a      	bcc.n	8012070 <SDMMC_CmdOperCond+0x74>
 801203a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801203c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8012040:	d0f8      	beq.n	8012034 <SDMMC_CmdOperCond+0x38>
 8012042:	0512      	lsls	r2, r2, #20
 8012044:	d4f6      	bmi.n	8012034 <SDMMC_CmdOperCond+0x38>
 8012046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012048:	075b      	lsls	r3, r3, #29
 801204a:	d503      	bpl.n	8012054 <SDMMC_CmdOperCond+0x58>
 801204c:	2004      	movs	r0, #4
 801204e:	63a0      	str	r0, [r4, #56]	; 0x38
 8012050:	b006      	add	sp, #24
 8012052:	bd10      	pop	{r4, pc}
 8012054:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012056:	f012 0201 	ands.w	r2, r2, #1
 801205a:	d001      	beq.n	8012060 <SDMMC_CmdOperCond+0x64>
 801205c:	2001      	movs	r0, #1
 801205e:	e7f6      	b.n	801204e <SDMMC_CmdOperCond+0x52>
 8012060:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012062:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8012066:	d0f3      	beq.n	8012050 <SDMMC_CmdOperCond+0x54>
 8012068:	2340      	movs	r3, #64	; 0x40
 801206a:	63a3      	str	r3, [r4, #56]	; 0x38
 801206c:	4610      	mov	r0, r2
 801206e:	e7ef      	b.n	8012050 <SDMMC_CmdOperCond+0x54>
 8012070:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8012074:	e7ec      	b.n	8012050 <SDMMC_CmdOperCond+0x54>
 8012076:	bf00      	nop
 8012078:	20000058 	.word	0x20000058

0801207c <SDMMC_CmdAppCommand>:
 801207c:	b530      	push	{r4, r5, lr}
 801207e:	b087      	sub	sp, #28
 8012080:	2437      	movs	r4, #55	; 0x37
 8012082:	2340      	movs	r3, #64	; 0x40
 8012084:	4605      	mov	r5, r0
 8012086:	9101      	str	r1, [sp, #4]
 8012088:	e9cd 4302 	strd	r4, r3, [sp, #8]
 801208c:	2200      	movs	r2, #0
 801208e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012092:	a901      	add	r1, sp, #4
 8012094:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012098:	f7ff feb4 	bl	8011e04 <SDIO_SendCommand>
 801209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80120a0:	4621      	mov	r1, r4
 80120a2:	4628      	mov	r0, r5
 80120a4:	f7ff fdec 	bl	8011c80 <SDMMC_GetCmdResp1>
 80120a8:	b007      	add	sp, #28
 80120aa:	bd30      	pop	{r4, r5, pc}

080120ac <SDMMC_CmdAppOperCommand>:
 80120ac:	b510      	push	{r4, lr}
 80120ae:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80120b2:	b086      	sub	sp, #24
 80120b4:	2229      	movs	r2, #41	; 0x29
 80120b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80120ba:	2340      	movs	r3, #64	; 0x40
 80120bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80120c0:	9101      	str	r1, [sp, #4]
 80120c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120c6:	2100      	movs	r1, #0
 80120c8:	e9cd 1304 	strd	r1, r3, [sp, #16]
 80120cc:	4604      	mov	r4, r0
 80120ce:	a901      	add	r1, sp, #4
 80120d0:	f7ff fe98 	bl	8011e04 <SDIO_SendCommand>
 80120d4:	4620      	mov	r0, r4
 80120d6:	f7ff fdb1 	bl	8011c3c <SDMMC_GetCmdResp3>
 80120da:	b006      	add	sp, #24
 80120dc:	bd10      	pop	{r4, pc}

080120de <SDMMC_CmdSendCID>:
 80120de:	b510      	push	{r4, lr}
 80120e0:	2300      	movs	r3, #0
 80120e2:	b086      	sub	sp, #24
 80120e4:	2202      	movs	r2, #2
 80120e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80120ea:	22c0      	movs	r2, #192	; 0xc0
 80120ec:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80120f0:	4604      	mov	r4, r0
 80120f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120f6:	a901      	add	r1, sp, #4
 80120f8:	9305      	str	r3, [sp, #20]
 80120fa:	f7ff fe83 	bl	8011e04 <SDIO_SendCommand>
 80120fe:	4620      	mov	r0, r4
 8012100:	f7ff fd74 	bl	8011bec <SDMMC_GetCmdResp2>
 8012104:	b006      	add	sp, #24
 8012106:	bd10      	pop	{r4, pc}

08012108 <SDMMC_CmdSendCSD>:
 8012108:	b510      	push	{r4, lr}
 801210a:	b086      	sub	sp, #24
 801210c:	2209      	movs	r2, #9
 801210e:	23c0      	movs	r3, #192	; 0xc0
 8012110:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012114:	9101      	str	r1, [sp, #4]
 8012116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801211a:	2100      	movs	r1, #0
 801211c:	e9cd 1304 	strd	r1, r3, [sp, #16]
 8012120:	4604      	mov	r4, r0
 8012122:	a901      	add	r1, sp, #4
 8012124:	f7ff fe6e 	bl	8011e04 <SDIO_SendCommand>
 8012128:	4620      	mov	r0, r4
 801212a:	f7ff fd5f 	bl	8011bec <SDMMC_GetCmdResp2>
 801212e:	b006      	add	sp, #24
 8012130:	bd10      	pop	{r4, pc}
	...

08012134 <SDMMC_CmdSetRelAdd>:
 8012134:	b530      	push	{r4, r5, lr}
 8012136:	2300      	movs	r3, #0
 8012138:	b087      	sub	sp, #28
 801213a:	2203      	movs	r2, #3
 801213c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012140:	2240      	movs	r2, #64	; 0x40
 8012142:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8012146:	460d      	mov	r5, r1
 8012148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801214c:	a901      	add	r1, sp, #4
 801214e:	9305      	str	r3, [sp, #20]
 8012150:	4604      	mov	r4, r0
 8012152:	f7ff fe57 	bl	8011e04 <SDIO_SendCommand>
 8012156:	4b1e      	ldr	r3, [pc, #120]	; (80121d0 <SDMMC_CmdSetRelAdd+0x9c>)
 8012158:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	fbb3 f2f2 	udiv	r2, r3, r2
 8012162:	f241 3388 	movw	r3, #5000	; 0x1388
 8012166:	4353      	muls	r3, r2
 8012168:	f113 33ff 	adds.w	r3, r3, #4294967295
 801216c:	d328      	bcc.n	80121c0 <SDMMC_CmdSetRelAdd+0x8c>
 801216e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012170:	f012 0f45 	tst.w	r2, #69	; 0x45
 8012174:	d0f8      	beq.n	8012168 <SDMMC_CmdSetRelAdd+0x34>
 8012176:	0512      	lsls	r2, r2, #20
 8012178:	d4f6      	bmi.n	8012168 <SDMMC_CmdSetRelAdd+0x34>
 801217a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801217c:	0758      	lsls	r0, r3, #29
 801217e:	d503      	bpl.n	8012188 <SDMMC_CmdSetRelAdd+0x54>
 8012180:	2004      	movs	r0, #4
 8012182:	63a0      	str	r0, [r4, #56]	; 0x38
 8012184:	b007      	add	sp, #28
 8012186:	bd30      	pop	{r4, r5, pc}
 8012188:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801218a:	07d9      	lsls	r1, r3, #31
 801218c:	d501      	bpl.n	8012192 <SDMMC_CmdSetRelAdd+0x5e>
 801218e:	2001      	movs	r0, #1
 8012190:	e7f7      	b.n	8012182 <SDMMC_CmdSetRelAdd+0x4e>
 8012192:	6923      	ldr	r3, [r4, #16]
 8012194:	b2db      	uxtb	r3, r3
 8012196:	2b03      	cmp	r3, #3
 8012198:	d115      	bne.n	80121c6 <SDMMC_CmdSetRelAdd+0x92>
 801219a:	23c5      	movs	r3, #197	; 0xc5
 801219c:	63a3      	str	r3, [r4, #56]	; 0x38
 801219e:	6963      	ldr	r3, [r4, #20]
 80121a0:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 80121a4:	d102      	bne.n	80121ac <SDMMC_CmdSetRelAdd+0x78>
 80121a6:	0c1b      	lsrs	r3, r3, #16
 80121a8:	802b      	strh	r3, [r5, #0]
 80121aa:	e7eb      	b.n	8012184 <SDMMC_CmdSetRelAdd+0x50>
 80121ac:	045a      	lsls	r2, r3, #17
 80121ae:	d40c      	bmi.n	80121ca <SDMMC_CmdSetRelAdd+0x96>
 80121b0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80121b4:	bf0c      	ite	eq
 80121b6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80121ba:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80121be:	e7e1      	b.n	8012184 <SDMMC_CmdSetRelAdd+0x50>
 80121c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80121c4:	e7de      	b.n	8012184 <SDMMC_CmdSetRelAdd+0x50>
 80121c6:	2001      	movs	r0, #1
 80121c8:	e7dc      	b.n	8012184 <SDMMC_CmdSetRelAdd+0x50>
 80121ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80121ce:	e7d9      	b.n	8012184 <SDMMC_CmdSetRelAdd+0x50>
 80121d0:	20000058 	.word	0x20000058

080121d4 <SDMMC_CmdSendStatus>:
 80121d4:	b530      	push	{r4, r5, lr}
 80121d6:	b087      	sub	sp, #28
 80121d8:	240d      	movs	r4, #13
 80121da:	2340      	movs	r3, #64	; 0x40
 80121dc:	4605      	mov	r5, r0
 80121de:	9101      	str	r1, [sp, #4]
 80121e0:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80121e4:	2200      	movs	r2, #0
 80121e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121ea:	a901      	add	r1, sp, #4
 80121ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80121f0:	f7ff fe08 	bl	8011e04 <SDIO_SendCommand>
 80121f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80121f8:	4621      	mov	r1, r4
 80121fa:	4628      	mov	r0, r5
 80121fc:	f7ff fd40 	bl	8011c80 <SDMMC_GetCmdResp1>
 8012200:	b007      	add	sp, #28
 8012202:	bd30      	pop	{r4, r5, pc}

08012204 <USB_CoreReset>:
 8012204:	4b0a      	ldr	r3, [pc, #40]	; (8012230 <USB_CoreReset+0x2c>)
 8012206:	3b01      	subs	r3, #1
 8012208:	d00f      	beq.n	801222a <USB_CoreReset+0x26>
 801220a:	6902      	ldr	r2, [r0, #16]
 801220c:	2a00      	cmp	r2, #0
 801220e:	dafa      	bge.n	8012206 <USB_CoreReset+0x2>
 8012210:	6903      	ldr	r3, [r0, #16]
 8012212:	4a07      	ldr	r2, [pc, #28]	; (8012230 <USB_CoreReset+0x2c>)
 8012214:	f043 0301 	orr.w	r3, r3, #1
 8012218:	6103      	str	r3, [r0, #16]
 801221a:	3a01      	subs	r2, #1
 801221c:	d005      	beq.n	801222a <USB_CoreReset+0x26>
 801221e:	6903      	ldr	r3, [r0, #16]
 8012220:	f013 0301 	ands.w	r3, r3, #1
 8012224:	d1f9      	bne.n	801221a <USB_CoreReset+0x16>
 8012226:	4618      	mov	r0, r3
 8012228:	4770      	bx	lr
 801222a:	2003      	movs	r0, #3
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop
 8012230:	00030d41 	.word	0x00030d41

08012234 <USB_CoreInit>:
 8012234:	b084      	sub	sp, #16
 8012236:	b538      	push	{r3, r4, r5, lr}
 8012238:	ad05      	add	r5, sp, #20
 801223a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801223e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012240:	2b01      	cmp	r3, #1
 8012242:	4604      	mov	r4, r0
 8012244:	d125      	bne.n	8012292 <USB_CoreInit+0x5e>
 8012246:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8012248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801224c:	6383      	str	r3, [r0, #56]	; 0x38
 801224e:	68c3      	ldr	r3, [r0, #12]
 8012250:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8012254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012258:	60c3      	str	r3, [r0, #12]
 801225a:	68c3      	ldr	r3, [r0, #12]
 801225c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012260:	60c3      	str	r3, [r0, #12]
 8012262:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012264:	2b01      	cmp	r3, #1
 8012266:	bf02      	ittt	eq
 8012268:	68c3      	ldreq	r3, [r0, #12]
 801226a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 801226e:	60c3      	streq	r3, [r0, #12]
 8012270:	f7ff ffc8 	bl	8012204 <USB_CoreReset>
 8012274:	9b08      	ldr	r3, [sp, #32]
 8012276:	2b01      	cmp	r3, #1
 8012278:	d107      	bne.n	801228a <USB_CoreInit+0x56>
 801227a:	68a3      	ldr	r3, [r4, #8]
 801227c:	f043 0306 	orr.w	r3, r3, #6
 8012280:	60a3      	str	r3, [r4, #8]
 8012282:	68a3      	ldr	r3, [r4, #8]
 8012284:	f043 0320 	orr.w	r3, r3, #32
 8012288:	60a3      	str	r3, [r4, #8]
 801228a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801228e:	b004      	add	sp, #16
 8012290:	4770      	bx	lr
 8012292:	68c3      	ldr	r3, [r0, #12]
 8012294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012298:	60c3      	str	r3, [r0, #12]
 801229a:	f7ff ffb3 	bl	8012204 <USB_CoreReset>
 801229e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122a0:	b923      	cbnz	r3, 80122ac <USB_CoreInit+0x78>
 80122a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80122a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80122a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80122aa:	e7e3      	b.n	8012274 <USB_CoreInit+0x40>
 80122ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80122ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80122b2:	e7f9      	b.n	80122a8 <USB_CoreInit+0x74>

080122b4 <USB_EnableGlobalInt>:
 80122b4:	6883      	ldr	r3, [r0, #8]
 80122b6:	f043 0301 	orr.w	r3, r3, #1
 80122ba:	6083      	str	r3, [r0, #8]
 80122bc:	2000      	movs	r0, #0
 80122be:	4770      	bx	lr

080122c0 <USB_DisableGlobalInt>:
 80122c0:	6883      	ldr	r3, [r0, #8]
 80122c2:	f023 0301 	bic.w	r3, r3, #1
 80122c6:	6083      	str	r3, [r0, #8]
 80122c8:	2000      	movs	r0, #0
 80122ca:	4770      	bx	lr

080122cc <USB_SetCurrentMode>:
 80122cc:	b508      	push	{r3, lr}
 80122ce:	68c3      	ldr	r3, [r0, #12]
 80122d0:	2901      	cmp	r1, #1
 80122d2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80122d6:	60c3      	str	r3, [r0, #12]
 80122d8:	d108      	bne.n	80122ec <USB_SetCurrentMode+0x20>
 80122da:	68c3      	ldr	r3, [r0, #12]
 80122dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80122e0:	60c3      	str	r3, [r0, #12]
 80122e2:	2032      	movs	r0, #50	; 0x32
 80122e4:	f7fc fac0 	bl	800e868 <HAL_Delay>
 80122e8:	2000      	movs	r0, #0
 80122ea:	bd08      	pop	{r3, pc}
 80122ec:	b919      	cbnz	r1, 80122f6 <USB_SetCurrentMode+0x2a>
 80122ee:	68c3      	ldr	r3, [r0, #12]
 80122f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80122f4:	e7f4      	b.n	80122e0 <USB_SetCurrentMode+0x14>
 80122f6:	2001      	movs	r0, #1
 80122f8:	e7f7      	b.n	80122ea <USB_SetCurrentMode+0x1e>
	...

080122fc <USB_FlushTxFifo>:
 80122fc:	0189      	lsls	r1, r1, #6
 80122fe:	f041 0120 	orr.w	r1, r1, #32
 8012302:	4a06      	ldr	r2, [pc, #24]	; (801231c <USB_FlushTxFifo+0x20>)
 8012304:	6101      	str	r1, [r0, #16]
 8012306:	3a01      	subs	r2, #1
 8012308:	d005      	beq.n	8012316 <USB_FlushTxFifo+0x1a>
 801230a:	6903      	ldr	r3, [r0, #16]
 801230c:	f013 0320 	ands.w	r3, r3, #32
 8012310:	d1f9      	bne.n	8012306 <USB_FlushTxFifo+0xa>
 8012312:	4618      	mov	r0, r3
 8012314:	4770      	bx	lr
 8012316:	2003      	movs	r0, #3
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	00030d41 	.word	0x00030d41

08012320 <USB_FlushRxFifo>:
 8012320:	2310      	movs	r3, #16
 8012322:	4a06      	ldr	r2, [pc, #24]	; (801233c <USB_FlushRxFifo+0x1c>)
 8012324:	6103      	str	r3, [r0, #16]
 8012326:	3a01      	subs	r2, #1
 8012328:	d005      	beq.n	8012336 <USB_FlushRxFifo+0x16>
 801232a:	6903      	ldr	r3, [r0, #16]
 801232c:	f013 0310 	ands.w	r3, r3, #16
 8012330:	d1f9      	bne.n	8012326 <USB_FlushRxFifo+0x6>
 8012332:	4618      	mov	r0, r3
 8012334:	4770      	bx	lr
 8012336:	2003      	movs	r0, #3
 8012338:	4770      	bx	lr
 801233a:	bf00      	nop
 801233c:	00030d41 	.word	0x00030d41

08012340 <USB_WritePacket>:
 8012340:	b510      	push	{r4, lr}
 8012342:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8012346:	b94c      	cbnz	r4, 801235c <USB_WritePacket+0x1c>
 8012348:	3303      	adds	r3, #3
 801234a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 801234e:	089b      	lsrs	r3, r3, #2
 8012350:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8012354:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012358:	4299      	cmp	r1, r3
 801235a:	d101      	bne.n	8012360 <USB_WritePacket+0x20>
 801235c:	2000      	movs	r0, #0
 801235e:	bd10      	pop	{r4, pc}
 8012360:	f851 2b04 	ldr.w	r2, [r1], #4
 8012364:	6002      	str	r2, [r0, #0]
 8012366:	e7f7      	b.n	8012358 <USB_WritePacket+0x18>

08012368 <USB_ReadPacket>:
 8012368:	3203      	adds	r2, #3
 801236a:	0892      	lsrs	r2, r2, #2
 801236c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012370:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8012374:	4291      	cmp	r1, r2
 8012376:	d101      	bne.n	801237c <USB_ReadPacket+0x14>
 8012378:	4608      	mov	r0, r1
 801237a:	4770      	bx	lr
 801237c:	6803      	ldr	r3, [r0, #0]
 801237e:	f841 3b04 	str.w	r3, [r1], #4
 8012382:	e7f7      	b.n	8012374 <USB_ReadPacket+0xc>

08012384 <USB_ReadInterrupts>:
 8012384:	6942      	ldr	r2, [r0, #20]
 8012386:	6980      	ldr	r0, [r0, #24]
 8012388:	4010      	ands	r0, r2
 801238a:	4770      	bx	lr

0801238c <USB_GetMode>:
 801238c:	6940      	ldr	r0, [r0, #20]
 801238e:	f000 0001 	and.w	r0, r0, #1
 8012392:	4770      	bx	lr

08012394 <USB_InitFSLSPClkSel>:
 8012394:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8012398:	f023 0303 	bic.w	r3, r3, #3
 801239c:	b510      	push	{r4, lr}
 801239e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
 80123a2:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80123a6:	f001 0303 	and.w	r3, r1, #3
 80123aa:	4323      	orrs	r3, r4
 80123ac:	2901      	cmp	r1, #1
 80123ae:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80123b2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
 80123b6:	d104      	bne.n	80123c2 <USB_InitFSLSPClkSel+0x2e>
 80123b8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80123bc:	6053      	str	r3, [r2, #4]
 80123be:	2000      	movs	r0, #0
 80123c0:	bd10      	pop	{r4, pc}
 80123c2:	2902      	cmp	r1, #2
 80123c4:	d1fb      	bne.n	80123be <USB_InitFSLSPClkSel+0x2a>
 80123c6:	f241 7370 	movw	r3, #6000	; 0x1770
 80123ca:	e7f7      	b.n	80123bc <USB_InitFSLSPClkSel+0x28>

080123cc <USB_ResetPort>:
 80123cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123ce:	2500      	movs	r5, #0
 80123d0:	9501      	str	r5, [sp, #4]
 80123d2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80123d6:	9301      	str	r3, [sp, #4]
 80123d8:	9b01      	ldr	r3, [sp, #4]
 80123da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80123de:	9301      	str	r3, [sp, #4]
 80123e0:	9b01      	ldr	r3, [sp, #4]
 80123e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80123e6:	4604      	mov	r4, r0
 80123e8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 80123ec:	2064      	movs	r0, #100	; 0x64
 80123ee:	f7fc fa3b 	bl	800e868 <HAL_Delay>
 80123f2:	9b01      	ldr	r3, [sp, #4]
 80123f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80123f8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
 80123fc:	200a      	movs	r0, #10
 80123fe:	f7fc fa33 	bl	800e868 <HAL_Delay>
 8012402:	4628      	mov	r0, r5
 8012404:	b003      	add	sp, #12
 8012406:	bd30      	pop	{r4, r5, pc}

08012408 <USB_DriveVbus>:
 8012408:	b082      	sub	sp, #8
 801240a:	2300      	movs	r3, #0
 801240c:	9301      	str	r3, [sp, #4]
 801240e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8012412:	9301      	str	r3, [sp, #4]
 8012414:	9b01      	ldr	r3, [sp, #4]
 8012416:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801241a:	9301      	str	r3, [sp, #4]
 801241c:	9b01      	ldr	r3, [sp, #4]
 801241e:	04da      	lsls	r2, r3, #19
 8012420:	d406      	bmi.n	8012430 <USB_DriveVbus+0x28>
 8012422:	2901      	cmp	r1, #1
 8012424:	bf02      	ittt	eq
 8012426:	9b01      	ldreq	r3, [sp, #4]
 8012428:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 801242c:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
 8012430:	9b01      	ldr	r3, [sp, #4]
 8012432:	04db      	lsls	r3, r3, #19
 8012434:	d505      	bpl.n	8012442 <USB_DriveVbus+0x3a>
 8012436:	b921      	cbnz	r1, 8012442 <USB_DriveVbus+0x3a>
 8012438:	9b01      	ldr	r3, [sp, #4]
 801243a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801243e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 8012442:	2000      	movs	r0, #0
 8012444:	b002      	add	sp, #8
 8012446:	4770      	bx	lr

08012448 <USB_HostInit>:
 8012448:	b084      	sub	sp, #16
 801244a:	b538      	push	{r3, r4, r5, lr}
 801244c:	4604      	mov	r4, r0
 801244e:	a805      	add	r0, sp, #20
 8012450:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012454:	2300      	movs	r3, #0
 8012456:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
 801245a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801245c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012460:	63a3      	str	r3, [r4, #56]	; 0x38
 8012462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012464:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8012468:	63a3      	str	r3, [r4, #56]	; 0x38
 801246a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801246c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012470:	63a3      	str	r3, [r4, #56]	; 0x38
 8012472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012474:	05da      	lsls	r2, r3, #23
 8012476:	d53f      	bpl.n	80124f8 <USB_HostInit+0xb0>
 8012478:	9b07      	ldr	r3, [sp, #28]
 801247a:	2b01      	cmp	r3, #1
 801247c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8012480:	d13c      	bne.n	80124fc <USB_HostInit+0xb4>
 8012482:	f043 0304 	orr.w	r3, r3, #4
 8012486:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 801248a:	2110      	movs	r1, #16
 801248c:	4620      	mov	r0, r4
 801248e:	f7ff ff35 	bl	80122fc <USB_FlushTxFifo>
 8012492:	4620      	mov	r0, r4
 8012494:	f7ff ff44 	bl	8012320 <USB_FlushRxFifo>
 8012498:	2300      	movs	r3, #0
 801249a:	9906      	ldr	r1, [sp, #24]
 801249c:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 80124a0:	f04f 30ff 	mov.w	r0, #4294967295
 80124a4:	461d      	mov	r5, r3
 80124a6:	4299      	cmp	r1, r3
 80124a8:	d12b      	bne.n	8012502 <USB_HostInit+0xba>
 80124aa:	2101      	movs	r1, #1
 80124ac:	4620      	mov	r0, r4
 80124ae:	f7ff ffab 	bl	8012408 <USB_DriveVbus>
 80124b2:	20c8      	movs	r0, #200	; 0xc8
 80124b4:	f7fc f9d8 	bl	800e868 <HAL_Delay>
 80124b8:	2300      	movs	r3, #0
 80124ba:	61a3      	str	r3, [r4, #24]
 80124bc:	f04f 33ff 	mov.w	r3, #4294967295
 80124c0:	6163      	str	r3, [r4, #20]
 80124c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80124c4:	05db      	lsls	r3, r3, #23
 80124c6:	d521      	bpl.n	801250c <USB_HostInit+0xc4>
 80124c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124cc:	6263      	str	r3, [r4, #36]	; 0x24
 80124ce:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80124d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80124d4:	4b11      	ldr	r3, [pc, #68]	; (801251c <USB_HostInit+0xd4>)
 80124d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80124da:	9b08      	ldr	r3, [sp, #32]
 80124dc:	b91b      	cbnz	r3, 80124e6 <USB_HostInit+0x9e>
 80124de:	69a3      	ldr	r3, [r4, #24]
 80124e0:	f043 0310 	orr.w	r3, r3, #16
 80124e4:	61a3      	str	r3, [r4, #24]
 80124e6:	69a2      	ldr	r2, [r4, #24]
 80124e8:	4b0d      	ldr	r3, [pc, #52]	; (8012520 <USB_HostInit+0xd8>)
 80124ea:	4313      	orrs	r3, r2
 80124ec:	61a3      	str	r3, [r4, #24]
 80124ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124f2:	2000      	movs	r0, #0
 80124f4:	b004      	add	sp, #16
 80124f6:	4770      	bx	lr
 80124f8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80124fc:	f023 0304 	bic.w	r3, r3, #4
 8012500:	e7c1      	b.n	8012486 <USB_HostInit+0x3e>
 8012502:	6090      	str	r0, [r2, #8]
 8012504:	3301      	adds	r3, #1
 8012506:	60d5      	str	r5, [r2, #12]
 8012508:	3220      	adds	r2, #32
 801250a:	e7cc      	b.n	80124a6 <USB_HostInit+0x5e>
 801250c:	2380      	movs	r3, #128	; 0x80
 801250e:	6263      	str	r3, [r4, #36]	; 0x24
 8012510:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8012514:	62a3      	str	r3, [r4, #40]	; 0x28
 8012516:	4b03      	ldr	r3, [pc, #12]	; (8012524 <USB_HostInit+0xdc>)
 8012518:	e7dd      	b.n	80124d6 <USB_HostInit+0x8e>
 801251a:	bf00      	nop
 801251c:	00e00300 	.word	0x00e00300
 8012520:	a3200008 	.word	0xa3200008
 8012524:	004000e0 	.word	0x004000e0

08012528 <USB_GetHostSpeed>:
 8012528:	b082      	sub	sp, #8
 801252a:	2300      	movs	r3, #0
 801252c:	9301      	str	r3, [sp, #4]
 801252e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8012532:	9301      	str	r3, [sp, #4]
 8012534:	9801      	ldr	r0, [sp, #4]
 8012536:	f3c0 4041 	ubfx	r0, r0, #17, #2
 801253a:	b002      	add	sp, #8
 801253c:	4770      	bx	lr

0801253e <USB_GetCurrentFrame>:
 801253e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8012542:	6880      	ldr	r0, [r0, #8]
 8012544:	b280      	uxth	r0, r0
 8012546:	4770      	bx	lr

08012548 <USB_HC_Init>:
 8012548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801254c:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8012550:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8012554:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8012558:	4605      	mov	r5, r0
 801255a:	f04f 30ff 	mov.w	r0, #4294967295
 801255e:	60a0      	str	r0, [r4, #8]
 8012560:	fa4f f882 	sxtb.w	r8, r2
 8012564:	f505 6e80 	add.w	lr, r5, #1024	; 0x400
 8012568:	f001 0c0f 	and.w	ip, r1, #15
 801256c:	2e03      	cmp	r6, #3
 801256e:	d86c      	bhi.n	801264a <USB_HC_Init+0x102>
 8012570:	e8df f006 	tbb	[pc, r6]
 8012574:	4c026102 	.word	0x4c026102
 8012578:	f240 419d 	movw	r1, #1181	; 0x49d
 801257c:	f1b8 0f00 	cmp.w	r8, #0
 8012580:	60e1      	str	r1, [r4, #12]
 8012582:	da03      	bge.n	801258c <USB_HC_Init+0x44>
 8012584:	68e1      	ldr	r1, [r4, #12]
 8012586:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801258a:	e005      	b.n	8012598 <USB_HC_Init+0x50>
 801258c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801258e:	05c9      	lsls	r1, r1, #23
 8012590:	d542      	bpl.n	8012618 <USB_HC_Init+0xd0>
 8012592:	68e1      	ldr	r1, [r4, #12]
 8012594:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8012598:	60e1      	str	r1, [r4, #12]
 801259a:	2000      	movs	r0, #0
 801259c:	f8de 4018 	ldr.w	r4, [lr, #24]
 80125a0:	2101      	movs	r1, #1
 80125a2:	fa01 f10c 	lsl.w	r1, r1, ip
 80125a6:	4321      	orrs	r1, r4
 80125a8:	f8ce 1018 	str.w	r1, [lr, #24]
 80125ac:	69a9      	ldr	r1, [r5, #24]
 80125ae:	f1b8 0f00 	cmp.w	r8, #0
 80125b2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80125b6:	61a9      	str	r1, [r5, #24]
 80125b8:	bfac      	ite	ge
 80125ba:	2400      	movge	r4, #0
 80125bc:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 80125c0:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 80125c4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80125c8:	059b      	lsls	r3, r3, #22
 80125ca:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
 80125ce:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80125d2:	02d2      	lsls	r2, r2, #11
 80125d4:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
 80125d8:	432b      	orrs	r3, r5
 80125da:	4313      	orrs	r3, r2
 80125dc:	04b2      	lsls	r2, r6, #18
 80125de:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80125e2:	2902      	cmp	r1, #2
 80125e4:	ea43 0302 	orr.w	r3, r3, r2
 80125e8:	bf14      	ite	ne
 80125ea:	2100      	movne	r1, #0
 80125ec:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 80125f0:	4323      	orrs	r3, r4
 80125f2:	430b      	orrs	r3, r1
 80125f4:	2e03      	cmp	r6, #3
 80125f6:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80125fa:	d105      	bne.n	8012608 <USB_HC_Init+0xc0>
 80125fc:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8012600:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012604:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8012608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801260c:	f240 619d 	movw	r1, #1693	; 0x69d
 8012610:	f1b8 0f00 	cmp.w	r8, #0
 8012614:	60e1      	str	r1, [r4, #12]
 8012616:	dbb5      	blt.n	8012584 <USB_HC_Init+0x3c>
 8012618:	f8de 0018 	ldr.w	r0, [lr, #24]
 801261c:	2101      	movs	r1, #1
 801261e:	fa01 f10c 	lsl.w	r1, r1, ip
 8012622:	4301      	orrs	r1, r0
 8012624:	f8ce 1018 	str.w	r1, [lr, #24]
 8012628:	69a9      	ldr	r1, [r5, #24]
 801262a:	2000      	movs	r0, #0
 801262c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8012630:	61a9      	str	r1, [r5, #24]
 8012632:	4604      	mov	r4, r0
 8012634:	e7c4      	b.n	80125c0 <USB_HC_Init+0x78>
 8012636:	f240 2125 	movw	r1, #549	; 0x225
 801263a:	f1b8 0f00 	cmp.w	r8, #0
 801263e:	60e1      	str	r1, [r4, #12]
 8012640:	daea      	bge.n	8012618 <USB_HC_Init+0xd0>
 8012642:	68e1      	ldr	r1, [r4, #12]
 8012644:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012648:	e7a6      	b.n	8012598 <USB_HC_Init+0x50>
 801264a:	2001      	movs	r0, #1
 801264c:	e7a6      	b.n	801259c <USB_HC_Init+0x54>

0801264e <USB_HC_ReadInterrupt>:
 801264e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8012652:	6940      	ldr	r0, [r0, #20]
 8012654:	b280      	uxth	r0, r0
 8012656:	4770      	bx	lr

08012658 <USB_HC_Halt>:
 8012658:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 801265c:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8012660:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8012664:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8012668:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 801266c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012670:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8012674:	d11e      	bne.n	80126b4 <USB_HC_Halt+0x5c>
 8012676:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012678:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 801267c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8012680:	d137      	bne.n	80126f2 <USB_HC_Halt+0x9a>
 8012682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012686:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 801268a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 801268e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012692:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8012696:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 801269a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801269e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80126a2:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80126a6:	3b01      	subs	r3, #1
 80126a8:	d002      	beq.n	80126b0 <USB_HC_Halt+0x58>
 80126aa:	6811      	ldr	r1, [r2, #0]
 80126ac:	2900      	cmp	r1, #0
 80126ae:	dbfa      	blt.n	80126a6 <USB_HC_Halt+0x4e>
 80126b0:	2000      	movs	r0, #0
 80126b2:	4770      	bx	lr
 80126b4:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80126b8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80126bc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80126c0:	d117      	bne.n	80126f2 <USB_HC_Halt+0x9a>
 80126c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80126c6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80126ca:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80126ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80126d2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80126d6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80126da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80126de:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80126e2:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80126e6:	3b01      	subs	r3, #1
 80126e8:	d0e2      	beq.n	80126b0 <USB_HC_Halt+0x58>
 80126ea:	6811      	ldr	r1, [r2, #0]
 80126ec:	2900      	cmp	r1, #0
 80126ee:	dbfa      	blt.n	80126e6 <USB_HC_Halt+0x8e>
 80126f0:	e7de      	b.n	80126b0 <USB_HC_Halt+0x58>
 80126f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80126f6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80126fa:	e7d9      	b.n	80126b0 <USB_HC_Halt+0x58>

080126fc <USB_DoPing>:
 80126fc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8012700:	4a06      	ldr	r2, [pc, #24]	; (801271c <USB_DoPing+0x20>)
 8012702:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
 8012706:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 801270a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801270e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012712:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8012716:	2000      	movs	r0, #0
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop
 801271c:	80080000 	.word	0x80080000

08012720 <USB_HC_StartXfer>:
 8012720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012724:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8012726:	05db      	lsls	r3, r3, #23
 8012728:	4616      	mov	r6, r2
 801272a:	4604      	mov	r4, r0
 801272c:	784a      	ldrb	r2, [r1, #1]
 801272e:	d517      	bpl.n	8012760 <USB_HC_StartXfer+0x40>
 8012730:	790d      	ldrb	r5, [r1, #4]
 8012732:	b9ad      	cbnz	r5, 8012760 <USB_HC_StartXfer+0x40>
 8012734:	b94e      	cbnz	r6, 801274a <USB_HC_StartXfer+0x2a>
 8012736:	794b      	ldrb	r3, [r1, #5]
 8012738:	2b01      	cmp	r3, #1
 801273a:	d111      	bne.n	8012760 <USB_HC_StartXfer+0x40>
 801273c:	4611      	mov	r1, r2
 801273e:	f7ff ffdd 	bl	80126fc <USB_DoPing>
 8012742:	2000      	movs	r0, #0
 8012744:	b002      	add	sp, #8
 8012746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801274a:	2e01      	cmp	r6, #1
 801274c:	d108      	bne.n	8012760 <USB_HC_StartXfer+0x40>
 801274e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8012752:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8012756:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801275a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
 801275e:	714d      	strb	r5, [r1, #5]
 8012760:	6908      	ldr	r0, [r1, #16]
 8012762:	2800      	cmp	r0, #0
 8012764:	d062      	beq.n	801282c <USB_HC_StartXfer+0x10c>
 8012766:	890b      	ldrh	r3, [r1, #8]
 8012768:	3801      	subs	r0, #1
 801276a:	4418      	add	r0, r3
 801276c:	fbb0 f0f3 	udiv	r0, r0, r3
 8012770:	b280      	uxth	r0, r0
 8012772:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8012776:	d903      	bls.n	8012780 <USB_HC_StartXfer+0x60>
 8012778:	021b      	lsls	r3, r3, #8
 801277a:	610b      	str	r3, [r1, #16]
 801277c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012780:	78cf      	ldrb	r7, [r1, #3]
 8012782:	b117      	cbz	r7, 801278a <USB_HC_StartXfer+0x6a>
 8012784:	890b      	ldrh	r3, [r1, #8]
 8012786:	4343      	muls	r3, r0
 8012788:	610b      	str	r3, [r1, #16]
 801278a:	f891 c00a 	ldrb.w	ip, [r1, #10]
 801278e:	690b      	ldr	r3, [r1, #16]
 8012790:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8012794:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
 8012798:	f3c3 0812 	ubfx	r8, r3, #0, #19
 801279c:	eb04 1542 	add.w	r5, r4, r2, lsl #5
 80127a0:	ea4c 0c08 	orr.w	ip, ip, r8
 80127a4:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
 80127a8:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
 80127ac:	b116      	cbz	r6, 80127b4 <USB_HC_StartXfer+0x94>
 80127ae:	68c8      	ldr	r0, [r1, #12]
 80127b0:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
 80127b4:	f504 6c80 	add.w	ip, r4, #1024	; 0x400
 80127b8:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80127bc:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 80127c0:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
 80127c4:	f8c5 e500 	str.w	lr, [r5, #1280]	; 0x500
 80127c8:	43c0      	mvns	r0, r0
 80127ca:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 80127ce:	0740      	lsls	r0, r0, #29
 80127d0:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 80127d4:	ea40 000e 	orr.w	r0, r0, lr
 80127d8:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
 80127dc:	4825      	ldr	r0, [pc, #148]	; (8012874 <USB_HC_StartXfer+0x154>)
 80127de:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 80127e2:	f8c0 e000 	str.w	lr, [r0]
 80127e6:	f8d0 e000 	ldr.w	lr, [r0]
 80127ea:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
 80127ee:	f8c0 e000 	str.w	lr, [r0]
 80127f2:	f8d0 e000 	ldr.w	lr, [r0]
 80127f6:	b1df      	cbz	r7, 8012830 <USB_HC_StartXfer+0x110>
 80127f8:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
 80127fc:	f8c0 e000 	str.w	lr, [r0]
 8012800:	f8d0 e000 	ldr.w	lr, [r0]
 8012804:	f04e 4e00 	orr.w	lr, lr, #2147483648	; 0x80000000
 8012808:	f8c0 e000 	str.w	lr, [r0]
 801280c:	6800      	ldr	r0, [r0, #0]
 801280e:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
 8012812:	2e00      	cmp	r6, #0
 8012814:	d195      	bne.n	8012742 <USB_HC_StartXfer+0x22>
 8012816:	2f00      	cmp	r7, #0
 8012818:	d193      	bne.n	8012742 <USB_HC_StartXfer+0x22>
 801281a:	2b00      	cmp	r3, #0
 801281c:	d091      	beq.n	8012742 <USB_HC_StartXfer+0x22>
 801281e:	79c8      	ldrb	r0, [r1, #7]
 8012820:	2803      	cmp	r0, #3
 8012822:	d813      	bhi.n	801284c <USB_HC_StartXfer+0x12c>
 8012824:	e8df f000 	tbb	[pc, r0]
 8012828:	1a071a07 	.word	0x1a071a07
 801282c:	2001      	movs	r0, #1
 801282e:	e7a7      	b.n	8012780 <USB_HC_StartXfer+0x60>
 8012830:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 8012834:	e7e2      	b.n	80127fc <USB_HC_StartXfer+0xdc>
 8012836:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8012838:	1cd8      	adds	r0, r3, #3
 801283a:	b2ad      	uxth	r5, r5
 801283c:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8012840:	4285      	cmp	r5, r0
 8012842:	d203      	bcs.n	801284c <USB_HC_StartXfer+0x12c>
 8012844:	69a0      	ldr	r0, [r4, #24]
 8012846:	f040 0020 	orr.w	r0, r0, #32
 801284a:	61a0      	str	r0, [r4, #24]
 801284c:	2000      	movs	r0, #0
 801284e:	9000      	str	r0, [sp, #0]
 8012850:	b29b      	uxth	r3, r3
 8012852:	68c9      	ldr	r1, [r1, #12]
 8012854:	4620      	mov	r0, r4
 8012856:	f7ff fd73 	bl	8012340 <USB_WritePacket>
 801285a:	e772      	b.n	8012742 <USB_HC_StartXfer+0x22>
 801285c:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8012860:	1cd8      	adds	r0, r3, #3
 8012862:	b2ad      	uxth	r5, r5
 8012864:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8012868:	4285      	cmp	r5, r0
 801286a:	d2ef      	bcs.n	801284c <USB_HC_StartXfer+0x12c>
 801286c:	69a0      	ldr	r0, [r4, #24]
 801286e:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8012872:	e7ea      	b.n	801284a <USB_HC_StartXfer+0x12a>
 8012874:	2000027c 	.word	0x2000027c

08012878 <USB_StopHost>:
 8012878:	6883      	ldr	r3, [r0, #8]
 801287a:	f023 0301 	bic.w	r3, r3, #1
 801287e:	b510      	push	{r4, lr}
 8012880:	2110      	movs	r1, #16
 8012882:	4604      	mov	r4, r0
 8012884:	6083      	str	r3, [r0, #8]
 8012886:	f7ff fd39 	bl	80122fc <USB_FlushTxFifo>
 801288a:	4620      	mov	r0, r4
 801288c:	f7ff fd48 	bl	8012320 <USB_FlushRxFifo>
 8012890:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8012894:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8012898:	461a      	mov	r2, r3
 801289a:	6811      	ldr	r1, [r2, #0]
 801289c:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
 80128a0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80128a4:	f842 1b20 	str.w	r1, [r2], #32
 80128a8:	4282      	cmp	r2, r0
 80128aa:	d1f6      	bne.n	801289a <USB_StopHost+0x22>
 80128ac:	2000      	movs	r0, #0
 80128ae:	6819      	ldr	r1, [r3, #0]
 80128b0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80128b4:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
 80128b8:	6019      	str	r1, [r3, #0]
 80128ba:	3001      	adds	r0, #1
 80128bc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80128c0:	d802      	bhi.n	80128c8 <USB_StopHost+0x50>
 80128c2:	6819      	ldr	r1, [r3, #0]
 80128c4:	2900      	cmp	r1, #0
 80128c6:	dbf8      	blt.n	80128ba <USB_StopHost+0x42>
 80128c8:	3320      	adds	r3, #32
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d1ef      	bne.n	80128ae <USB_StopHost+0x36>
 80128ce:	f04f 33ff 	mov.w	r3, #4294967295
 80128d2:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
 80128d6:	6163      	str	r3, [r4, #20]
 80128d8:	68a3      	ldr	r3, [r4, #8]
 80128da:	f043 0301 	orr.w	r3, r3, #1
 80128de:	60a3      	str	r3, [r4, #8]
 80128e0:	2000      	movs	r0, #0
 80128e2:	bd10      	pop	{r4, pc}

080128e4 <MX_FATFS_Init>:
    return FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80128e4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80128e6:	4906      	ldr	r1, [pc, #24]	; (8012900 <MX_FATFS_Init+0x1c>)
 80128e8:	4806      	ldr	r0, [pc, #24]	; (8012904 <MX_FATFS_Init+0x20>)
 80128ea:	f003 f907 	bl	8015afc <FATFS_LinkDriver>
 80128ee:	4b06      	ldr	r3, [pc, #24]	; (8012908 <MX_FATFS_Init+0x24>)
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80128f0:	4906      	ldr	r1, [pc, #24]	; (801290c <MX_FATFS_Init+0x28>)
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80128f2:	7018      	strb	r0, [r3, #0]
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80128f4:	4806      	ldr	r0, [pc, #24]	; (8012910 <MX_FATFS_Init+0x2c>)
 80128f6:	f003 f901 	bl	8015afc <FATFS_LinkDriver>
 80128fa:	4b06      	ldr	r3, [pc, #24]	; (8012914 <MX_FATFS_Init+0x30>)
 80128fc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80128fe:	bd08      	pop	{r3, pc}
 8012900:	2000177d 	.word	0x2000177d
 8012904:	08001234 	.word	0x08001234
 8012908:	20001778 	.word	0x20001778
 801290c:	20001779 	.word	0x20001779
 8012910:	08001248 	.word	0x08001248
 8012914:	20005854 	.word	0x20005854

08012918 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8012918:	2000      	movs	r0, #0
 801291a:	4770      	bx	lr

0801291c <MX_FATFS_DeInit>:

/* USER CODE BEGIN Application */
void MX_FATFS_DeInit(void)
{
 801291c:	b508      	push	{r3, lr}
	FATFS_UnLinkDriver(SDPath);
 801291e:	4805      	ldr	r0, [pc, #20]	; (8012934 <MX_FATFS_DeInit+0x18>)
 8012920:	f003 f908 	bl	8015b34 <FATFS_UnLinkDriver>
	FATFS_UnLinkDriver(USBHPath);
 8012924:	4804      	ldr	r0, [pc, #16]	; (8012938 <MX_FATFS_DeInit+0x1c>)
 8012926:	f003 f905 	bl	8015b34 <FATFS_UnLinkDriver>
	BSP_SD_DeInit();
}
 801292a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BSP_SD_DeInit();
 801292e:	f000 b85b 	b.w	80129e8 <BSP_SD_DeInit>
 8012932:	bf00      	nop
 8012934:	2000177d 	.word	0x2000177d
 8012938:	20001779 	.word	0x20001779

0801293c <BSP_SD_ReadBlocks_DMA>:
 801293c:	b508      	push	{r3, lr}
 801293e:	4613      	mov	r3, r2
 8012940:	460a      	mov	r2, r1
 8012942:	4601      	mov	r1, r0
 8012944:	4803      	ldr	r0, [pc, #12]	; (8012954 <BSP_SD_ReadBlocks_DMA+0x18>)
 8012946:	f7fd fe9b 	bl	8010680 <HAL_SD_ReadBlocks_DMA>
 801294a:	3000      	adds	r0, #0
 801294c:	bf18      	it	ne
 801294e:	2001      	movne	r0, #1
 8012950:	bd08      	pop	{r3, pc}
 8012952:	bf00      	nop
 8012954:	200015c8 	.word	0x200015c8

08012958 <BSP_SD_WriteBlocks_DMA>:
 8012958:	b508      	push	{r3, lr}
 801295a:	4613      	mov	r3, r2
 801295c:	460a      	mov	r2, r1
 801295e:	4601      	mov	r1, r0
 8012960:	4803      	ldr	r0, [pc, #12]	; (8012970 <BSP_SD_WriteBlocks_DMA+0x18>)
 8012962:	f7fd ff23 	bl	80107ac <HAL_SD_WriteBlocks_DMA>
 8012966:	3000      	adds	r0, #0
 8012968:	bf18      	it	ne
 801296a:	2001      	movne	r0, #1
 801296c:	bd08      	pop	{r3, pc}
 801296e:	bf00      	nop
 8012970:	200015c8 	.word	0x200015c8

08012974 <BSP_SD_GetCardState>:
 8012974:	b508      	push	{r3, lr}
 8012976:	4803      	ldr	r0, [pc, #12]	; (8012984 <BSP_SD_GetCardState+0x10>)
 8012978:	f7fe f9a9 	bl	8010cce <HAL_SD_GetCardState>
 801297c:	3804      	subs	r0, #4
 801297e:	bf18      	it	ne
 8012980:	2001      	movne	r0, #1
 8012982:	bd08      	pop	{r3, pc}
 8012984:	200015c8 	.word	0x200015c8

08012988 <BSP_SD_GetCardInfo>:
 8012988:	4601      	mov	r1, r0
 801298a:	4801      	ldr	r0, [pc, #4]	; (8012990 <BSP_SD_GetCardInfo+0x8>)
 801298c:	f7fe b98d 	b.w	8010caa <HAL_SD_GetCardInfo>
 8012990:	200015c8 	.word	0x200015c8

08012994 <BSP_SD_AbortCallback>:
 8012994:	4770      	bx	lr

08012996 <HAL_SD_AbortCallback>:
 8012996:	b508      	push	{r3, lr}
 8012998:	f7ff fffc 	bl	8012994 <BSP_SD_AbortCallback>
 801299c:	bd08      	pop	{r3, pc}

0801299e <HAL_SD_TxCpltCallback>:
 801299e:	b508      	push	{r3, lr}
 80129a0:	f000 f920 	bl	8012be4 <BSP_SD_WriteCpltCallback>
 80129a4:	bd08      	pop	{r3, pc}

080129a6 <HAL_SD_RxCpltCallback>:
 80129a6:	b508      	push	{r3, lr}
 80129a8:	f000 f922 	bl	8012bf0 <BSP_SD_ReadCpltCallback>
 80129ac:	bd08      	pop	{r3, pc}

080129ae <BSP_SD_IsDetected>:
 80129ae:	b507      	push	{r0, r1, r2, lr}
 80129b0:	2301      	movs	r3, #1
 80129b2:	f88d 3007 	strb.w	r3, [sp, #7]
 80129b6:	f000 f843 	bl	8012a40 <BSP_PlatformIsDetected>
 80129ba:	b908      	cbnz	r0, 80129c0 <BSP_SD_IsDetected+0x12>
 80129bc:	f88d 0007 	strb.w	r0, [sp, #7]
 80129c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80129c4:	b003      	add	sp, #12
 80129c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080129cc <BSP_SD_Init>:
 80129cc:	b508      	push	{r3, lr}
 80129ce:	f7ff ffee 	bl	80129ae <BSP_SD_IsDetected>
 80129d2:	2801      	cmp	r0, #1
 80129d4:	d104      	bne.n	80129e0 <BSP_SD_Init+0x14>
 80129d6:	4803      	ldr	r0, [pc, #12]	; (80129e4 <BSP_SD_Init+0x18>)
 80129d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80129dc:	f7fe b94a 	b.w	8010c74 <HAL_SD_Init>
 80129e0:	2001      	movs	r0, #1
 80129e2:	bd08      	pop	{r3, pc}
 80129e4:	200015c8 	.word	0x200015c8

080129e8 <BSP_SD_DeInit>:
 80129e8:	b510      	push	{r4, lr}
 80129ea:	4c13      	ldr	r4, [pc, #76]	; (8012a38 <BSP_SD_DeInit+0x50>)
 80129ec:	4620      	mov	r0, r4
 80129ee:	f7fd fe33 	bl	8010658 <HAL_SD_DeInit>
 80129f2:	4620      	mov	r0, r4
 80129f4:	f7fb faa2 	bl	800df3c <HAL_SD_MspDeInit>
 80129f8:	4b10      	ldr	r3, [pc, #64]	; (8012a3c <BSP_SD_DeInit+0x54>)
 80129fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80129fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012a00:	625a      	str	r2, [r3, #36]	; 0x24
 8012a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a04:	2000      	movs	r0, #0
 8012a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8012a0c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8012a10:	e9c4 0011 	strd	r0, r0, [r4, #68]	; 0x44
 8012a14:	6320      	str	r0, [r4, #48]	; 0x30
 8012a16:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
 8012a1a:	63a0      	str	r0, [r4, #56]	; 0x38
 8012a1c:	e9c4 0015 	strd	r0, r0, [r4, #84]	; 0x54
 8012a20:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
 8012a24:	e9c4 0019 	strd	r0, r0, [r4, #100]	; 0x64
 8012a28:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
 8012a2c:	e9c4 001d 	strd	r0, r0, [r4, #116]	; 0x74
 8012a30:	e9c4 001f 	strd	r0, r0, [r4, #124]	; 0x7c
 8012a34:	bd10      	pop	{r4, pc}
 8012a36:	bf00      	nop
 8012a38:	200015c8 	.word	0x200015c8
 8012a3c:	40023800 	.word	0x40023800

08012a40 <BSP_PlatformIsDetected>:
 8012a40:	b508      	push	{r3, lr}
 8012a42:	2102      	movs	r1, #2
 8012a44:	4803      	ldr	r0, [pc, #12]	; (8012a54 <BSP_PlatformIsDetected+0x14>)
 8012a46:	f7fc fc85 	bl	800f354 <HAL_GPIO_ReadPin>
 8012a4a:	fab0 f080 	clz	r0, r0
 8012a4e:	0940      	lsrs	r0, r0, #5
 8012a50:	bd08      	pop	{r3, pc}
 8012a52:	bf00      	nop
 8012a54:	40020c00 	.word	0x40020c00

08012a58 <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 8012a58:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8012a5a:	4c06      	ldr	r4, [pc, #24]	; (8012a74 <SD_CheckStatus.isra.0+0x1c>)
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012a60:	f7ff ff88 	bl	8012974 <BSP_SD_GetCardState>
 8012a64:	4623      	mov	r3, r4
 8012a66:	b918      	cbnz	r0, 8012a70 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8012a68:	7822      	ldrb	r2, [r4, #0]
 8012a6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012a6e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8012a70:	7818      	ldrb	r0, [r3, #0]
}
 8012a72:	bd10      	pop	{r4, pc}
 8012a74:	20000064 	.word	0x20000064

08012a78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012a78:	b510      	push	{r4, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012a7a:	f7ff ffa7 	bl	80129cc <BSP_SD_Init>
 8012a7e:	4c03      	ldr	r4, [pc, #12]	; (8012a8c <SD_initialize+0x14>)
 8012a80:	b910      	cbnz	r0, 8012a88 <SD_initialize+0x10>
  {
    Stat = SD_CheckStatus(lun);
 8012a82:	f7ff ffe9 	bl	8012a58 <SD_CheckStatus.isra.0>
 8012a86:	7020      	strb	r0, [r4, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012a88:	7820      	ldrb	r0, [r4, #0]
}
 8012a8a:	bd10      	pop	{r4, pc}
 8012a8c:	20000064 	.word	0x20000064

08012a90 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8012a90:	f7ff bfe2 	b.w	8012a58 <SD_CheckStatus.isra.0>

08012a94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012a94:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012a96:	4b12      	ldr	r3, [pc, #72]	; (8012ae0 <SD_ioctl+0x4c>)
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	07db      	lsls	r3, r3, #31
{
 8012a9c:	b088      	sub	sp, #32
 8012a9e:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012aa0:	d41b      	bmi.n	8012ada <SD_ioctl+0x46>

  switch (cmd)
 8012aa2:	2903      	cmp	r1, #3
 8012aa4:	d803      	bhi.n	8012aae <SD_ioctl+0x1a>
 8012aa6:	e8df f001 	tbb	[pc, r1]
 8012aaa:	0510      	.short	0x0510
 8012aac:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8012aae:	2004      	movs	r0, #4
  }

  return res;
}
 8012ab0:	b008      	add	sp, #32
 8012ab2:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8012ab4:	4668      	mov	r0, sp
 8012ab6:	f7ff ff67 	bl	8012988 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012aba:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012abc:	6023      	str	r3, [r4, #0]
 8012abe:	e004      	b.n	8012aca <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8012ac0:	4668      	mov	r0, sp
 8012ac2:	f7ff ff61 	bl	8012988 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012ac6:	9b07      	ldr	r3, [sp, #28]
 8012ac8:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8012aca:	2000      	movs	r0, #0
 8012acc:	e7f0      	b.n	8012ab0 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8012ace:	4668      	mov	r0, sp
 8012ad0:	f7ff ff5a 	bl	8012988 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012ad4:	9b07      	ldr	r3, [sp, #28]
 8012ad6:	0a5b      	lsrs	r3, r3, #9
 8012ad8:	e7f0      	b.n	8012abc <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012ada:	2003      	movs	r0, #3
 8012adc:	e7e8      	b.n	8012ab0 <SD_ioctl+0x1c>
 8012ade:	bf00      	nop
 8012ae0:	20000064 	.word	0x20000064

08012ae4 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8012ae4:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = HAL_GetTick();
 8012ae6:	f7fb feb9 	bl	800e85c <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 8012aea:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = HAL_GetTick();
 8012aee:	4605      	mov	r5, r0
  while(HAL_GetTick() - timer < timeout)
 8012af0:	f7fb feb4 	bl	800e85c <HAL_GetTick>
 8012af4:	1b40      	subs	r0, r0, r5
 8012af6:	42a0      	cmp	r0, r4
 8012af8:	d902      	bls.n	8012b00 <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 8012afa:	f04f 30ff 	mov.w	r0, #4294967295
 8012afe:	e003      	b.n	8012b08 <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012b00:	f7ff ff38 	bl	8012974 <BSP_SD_GetCardState>
 8012b04:	2800      	cmp	r0, #0
 8012b06:	d1f3      	bne.n	8012af0 <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 8012b08:	bd38      	pop	{r3, r4, r5, pc}
	...

08012b0c <SD_write>:
{
 8012b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   WriteStatus = 0;
 8012b0e:	4c19      	ldr	r4, [pc, #100]	; (8012b74 <SD_write+0x68>)
{
 8012b10:	461f      	mov	r7, r3
   WriteStatus = 0;
 8012b12:	2300      	movs	r3, #0
{
 8012b14:	460d      	mov	r5, r1
 8012b16:	4616      	mov	r6, r2
   WriteStatus = 0;
 8012b18:	6023      	str	r3, [r4, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012b1a:	f7ff ffe3 	bl	8012ae4 <SD_CheckStatusWithTimeout.constprop.4>
 8012b1e:	2800      	cmp	r0, #0
 8012b20:	da01      	bge.n	8012b26 <SD_write+0x1a>
    return res;
 8012b22:	2001      	movs	r0, #1
}
 8012b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012b26:	463a      	mov	r2, r7
 8012b28:	4631      	mov	r1, r6
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	f7ff ff14 	bl	8012958 <BSP_SD_WriteBlocks_DMA>
 8012b30:	2800      	cmp	r0, #0
 8012b32:	d1f6      	bne.n	8012b22 <SD_write+0x16>
      timeout = HAL_GetTick();
 8012b34:	f7fb fe92 	bl	800e85c <HAL_GetTick>
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012b38:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8012b3c:	4606      	mov	r6, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012b3e:	6823      	ldr	r3, [r4, #0]
 8012b40:	b923      	cbnz	r3, 8012b4c <SD_write+0x40>
 8012b42:	f7fb fe8b 	bl	800e85c <HAL_GetTick>
 8012b46:	1b80      	subs	r0, r0, r6
 8012b48:	42a8      	cmp	r0, r5
 8012b4a:	d9f8      	bls.n	8012b3e <SD_write+0x32>
      if (WriteStatus == 0)
 8012b4c:	6823      	ldr	r3, [r4, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d0e7      	beq.n	8012b22 <SD_write+0x16>
        WriteStatus = 0;
 8012b52:	2300      	movs	r3, #0
 8012b54:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8012b56:	f7fb fe81 	bl	800e85c <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012b5a:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8012b5e:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012b60:	f7fb fe7c 	bl	800e85c <HAL_GetTick>
 8012b64:	1b40      	subs	r0, r0, r5
 8012b66:	42a0      	cmp	r0, r4
 8012b68:	d8db      	bhi.n	8012b22 <SD_write+0x16>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012b6a:	f7ff ff03 	bl	8012974 <BSP_SD_GetCardState>
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	d1f6      	bne.n	8012b60 <SD_write+0x54>
 8012b72:	e7d7      	b.n	8012b24 <SD_write+0x18>
 8012b74:	20000284 	.word	0x20000284

08012b78 <SD_read>:
{
 8012b78:	b570      	push	{r4, r5, r6, lr}
 8012b7a:	460c      	mov	r4, r1
 8012b7c:	4615      	mov	r5, r2
 8012b7e:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012b80:	f7ff ffb0 	bl	8012ae4 <SD_CheckStatusWithTimeout.constprop.4>
 8012b84:	2800      	cmp	r0, #0
 8012b86:	da01      	bge.n	8012b8c <SD_read+0x14>
    return res;
 8012b88:	2001      	movs	r0, #1
}
 8012b8a:	bd70      	pop	{r4, r5, r6, pc}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8012b8c:	4632      	mov	r2, r6
 8012b8e:	4629      	mov	r1, r5
 8012b90:	4620      	mov	r0, r4
 8012b92:	f7ff fed3 	bl	801293c <BSP_SD_ReadBlocks_DMA>
 8012b96:	2800      	cmp	r0, #0
 8012b98:	d1f6      	bne.n	8012b88 <SD_read+0x10>
      ReadStatus = 0;
 8012b9a:	4c11      	ldr	r4, [pc, #68]	; (8012be0 <SD_read+0x68>)
 8012b9c:	6020      	str	r0, [r4, #0]
      timeout = HAL_GetTick();
 8012b9e:	f7fb fe5d 	bl	800e85c <HAL_GetTick>
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012ba2:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8012ba6:	4606      	mov	r6, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012ba8:	6823      	ldr	r3, [r4, #0]
 8012baa:	b923      	cbnz	r3, 8012bb6 <SD_read+0x3e>
 8012bac:	f7fb fe56 	bl	800e85c <HAL_GetTick>
 8012bb0:	1b80      	subs	r0, r0, r6
 8012bb2:	42a8      	cmp	r0, r5
 8012bb4:	d9f8      	bls.n	8012ba8 <SD_read+0x30>
      if (ReadStatus == 0)
 8012bb6:	6823      	ldr	r3, [r4, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d0e5      	beq.n	8012b88 <SD_read+0x10>
        ReadStatus = 0;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8012bc0:	f7fb fe4c 	bl	800e85c <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012bc4:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8012bc8:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012bca:	f7fb fe47 	bl	800e85c <HAL_GetTick>
 8012bce:	1b40      	subs	r0, r0, r5
 8012bd0:	42a0      	cmp	r0, r4
 8012bd2:	d8d9      	bhi.n	8012b88 <SD_read+0x10>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012bd4:	f7ff fece 	bl	8012974 <BSP_SD_GetCardState>
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	d1f6      	bne.n	8012bca <SD_read+0x52>
 8012bdc:	e7d5      	b.n	8012b8a <SD_read+0x12>
 8012bde:	bf00      	nop
 8012be0:	20000280 	.word	0x20000280

08012be4 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 8012be4:	4b01      	ldr	r3, [pc, #4]	; (8012bec <BSP_SD_WriteCpltCallback+0x8>)
 8012be6:	2201      	movs	r2, #1
 8012be8:	601a      	str	r2, [r3, #0]
}
 8012bea:	4770      	bx	lr
 8012bec:	20000284 	.word	0x20000284

08012bf0 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8012bf0:	4b01      	ldr	r3, [pc, #4]	; (8012bf8 <BSP_SD_ReadCpltCallback+0x8>)
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	601a      	str	r2, [r3, #0]
}
 8012bf6:	4770      	bx	lr
 8012bf8:	20000280 	.word	0x20000280

08012bfc <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 8012bfc:	2000      	movs	r0, #0
 8012bfe:	4770      	bx	lr

08012c00 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8012c00:	4601      	mov	r1, r0
{
 8012c02:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8012c04:	4803      	ldr	r0, [pc, #12]	; (8012c14 <USBH_status+0x14>)
 8012c06:	f000 fae8 	bl	80131da <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 8012c0a:	fab0 f080 	clz	r0, r0
 8012c0e:	0940      	lsrs	r0, r0, #5
 8012c10:	bd08      	pop	{r3, pc}
 8012c12:	bf00      	nop
 8012c14:	20005858 	.word	0x20005858

08012c18 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c1c:	4690      	mov	r8, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8012c1e:	078a      	lsls	r2, r1, #30
{
 8012c20:	b090      	sub	sp, #64	; 0x40
 8012c22:	4607      	mov	r7, r0
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8012c24:	d034      	beq.n	8012c90 <USBH_read+0x78>
 8012c26:	4e20      	ldr	r6, [pc, #128]	; (8012ca8 <USBH_read+0x90>)
 8012c28:	f8d6 23d0 	ldr.w	r2, [r6, #976]	; 0x3d0
 8012c2c:	6912      	ldr	r2, [r2, #16]
 8012c2e:	b37a      	cbz	r2, 8012c90 <USBH_read+0x78>
  {
    while ((count--)&&(status == USBH_OK))
    {
      status = USBH_MSC_Read(&hUSB_Host, lun, sector + count, (uint8_t *)scratch, 1);
 8012c30:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8012cac <USBH_read+0x94>
 8012c34:	1e5d      	subs	r5, r3, #1
 8012c36:	eb01 3403 	add.w	r4, r1, r3, lsl #12
 8012c3a:	f04f 0a01 	mov.w	sl, #1
    while ((count--)&&(status == USBH_OK))
 8012c3e:	1c6b      	adds	r3, r5, #1
 8012c40:	d101      	bne.n	8012c46 <USBH_read+0x2e>
    status = USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count);
  }

  if(status == USBH_OK)
  {
    res = RES_OK;
 8012c42:	2000      	movs	r0, #0
 8012c44:	e01a      	b.n	8012c7c <USBH_read+0x64>
      status = USBH_MSC_Read(&hUSB_Host, lun, sector + count, (uint8_t *)scratch, 1);
 8012c46:	eb08 0205 	add.w	r2, r8, r5
 8012c4a:	f8cd a000 	str.w	sl, [sp]
 8012c4e:	464b      	mov	r3, r9
 8012c50:	4639      	mov	r1, r7
 8012c52:	4630      	mov	r0, r6
 8012c54:	f000 faea 	bl	801322c <USBH_MSC_Read>
 8012c58:	3d01      	subs	r5, #1
 8012c5a:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
      if(status == USBH_OK)
 8012c5e:	b180      	cbz	r0, 8012c82 <USBH_read+0x6a>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8012c60:	aa03      	add	r2, sp, #12
 8012c62:	4639      	mov	r1, r7
 8012c64:	4810      	ldr	r0, [pc, #64]	; (8012ca8 <USBH_read+0x90>)
 8012c66:	f000 fac9 	bl	80131fc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8012c6a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012c6e:	2b28      	cmp	r3, #40	; 0x28
 8012c70:	d018      	beq.n	8012ca4 <USBH_read+0x8c>
 8012c72:	2b3a      	cmp	r3, #58	; 0x3a
 8012c74:	d016      	beq.n	8012ca4 <USBH_read+0x8c>
 8012c76:	2b04      	cmp	r3, #4
 8012c78:	d014      	beq.n	8012ca4 <USBH_read+0x8c>
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
      break;

    default:
      res = RES_ERROR;
 8012c7a:	2001      	movs	r0, #1
      break;
    }
  }

  return res;
}
 8012c7c:	b010      	add	sp, #64	; 0x40
 8012c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 8012c82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012c86:	4649      	mov	r1, r9
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f003 f96f 	bl	8015f6c <memcpy>
 8012c8e:	e7d6      	b.n	8012c3e <USBH_read+0x26>
    status = USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count);
 8012c90:	9300      	str	r3, [sp, #0]
 8012c92:	4642      	mov	r2, r8
 8012c94:	460b      	mov	r3, r1
 8012c96:	4804      	ldr	r0, [pc, #16]	; (8012ca8 <USBH_read+0x90>)
 8012c98:	4639      	mov	r1, r7
 8012c9a:	f000 fac7 	bl	801322c <USBH_MSC_Read>
  if(status == USBH_OK)
 8012c9e:	2800      	cmp	r0, #0
 8012ca0:	d0cf      	beq.n	8012c42 <USBH_read+0x2a>
 8012ca2:	e7dd      	b.n	8012c60 <USBH_read+0x48>
      res = RES_NOTRDY;
 8012ca4:	2003      	movs	r0, #3
 8012ca6:	e7e9      	b.n	8012c7c <USBH_read+0x64>
 8012ca8:	20005858 	.word	0x20005858
 8012cac:	20000288 	.word	0x20000288

08012cb0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012cb0:	b510      	push	{r4, lr}
 8012cb2:	4614      	mov	r4, r2
 8012cb4:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 8012cb6:	2903      	cmp	r1, #3
 8012cb8:	d803      	bhi.n	8012cc2 <USBH_ioctl+0x12>
 8012cba:	e8df f001 	tbb	[pc, r1]
 8012cbe:	0525      	.short	0x0525
 8012cc0:	1a10      	.short	0x1a10
      res = RES_ERROR;
    }
    break;

  default:
    res = RES_PARERR;
 8012cc2:	2004      	movs	r0, #4
  }

  return res;
}
 8012cc4:	b00e      	add	sp, #56	; 0x38
 8012cc6:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8012cc8:	4601      	mov	r1, r0
 8012cca:	aa01      	add	r2, sp, #4
 8012ccc:	480f      	ldr	r0, [pc, #60]	; (8012d0c <USBH_ioctl+0x5c>)
 8012cce:	f000 fa95 	bl	80131fc <USBH_MSC_GetLUNInfo>
 8012cd2:	b108      	cbz	r0, 8012cd8 <USBH_ioctl+0x28>
      res = RES_ERROR;
 8012cd4:	2001      	movs	r0, #1
 8012cd6:	e7f5      	b.n	8012cc4 <USBH_ioctl+0x14>
      *(DWORD*)buff = info.capacity.block_nbr;
 8012cd8:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 8012cda:	6023      	str	r3, [r4, #0]
 8012cdc:	e7f2      	b.n	8012cc4 <USBH_ioctl+0x14>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8012cde:	4601      	mov	r1, r0
 8012ce0:	aa01      	add	r2, sp, #4
 8012ce2:	480a      	ldr	r0, [pc, #40]	; (8012d0c <USBH_ioctl+0x5c>)
 8012ce4:	f000 fa8a 	bl	80131fc <USBH_MSC_GetLUNInfo>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	d1f3      	bne.n	8012cd4 <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_size;
 8012cec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012cf0:	e7f3      	b.n	8012cda <USBH_ioctl+0x2a>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8012cf2:	4601      	mov	r1, r0
 8012cf4:	aa01      	add	r2, sp, #4
 8012cf6:	4805      	ldr	r0, [pc, #20]	; (8012d0c <USBH_ioctl+0x5c>)
 8012cf8:	f000 fa80 	bl	80131fc <USBH_MSC_GetLUNInfo>
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	d1e9      	bne.n	8012cd4 <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8012d00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012d04:	0a5b      	lsrs	r3, r3, #9
 8012d06:	e7e8      	b.n	8012cda <USBH_ioctl+0x2a>
    res = RES_OK;
 8012d08:	2000      	movs	r0, #0
 8012d0a:	e7db      	b.n	8012cc4 <USBH_ioctl+0x14>
 8012d0c:	20005858 	.word	0x20005858

08012d10 <USBH_write>:
{
 8012d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d14:	4617      	mov	r7, r2
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8012d16:	078a      	lsls	r2, r1, #30
{
 8012d18:	b091      	sub	sp, #68	; 0x44
 8012d1a:	4606      	mov	r6, r0
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8012d1c:	d004      	beq.n	8012d28 <USBH_write+0x18>
 8012d1e:	4a22      	ldr	r2, [pc, #136]	; (8012da8 <USBH_write+0x98>)
 8012d20:	f8d2 03d0 	ldr.w	r0, [r2, #976]	; 0x3d0
 8012d24:	6900      	ldr	r0, [r0, #16]
 8012d26:	bb78      	cbnz	r0, 8012d88 <USBH_write+0x78>
    status = USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count);
 8012d28:	9300      	str	r3, [sp, #0]
 8012d2a:	463a      	mov	r2, r7
 8012d2c:	460b      	mov	r3, r1
 8012d2e:	481e      	ldr	r0, [pc, #120]	; (8012da8 <USBH_write+0x98>)
 8012d30:	4631      	mov	r1, r6
 8012d32:	f000 fabe 	bl	80132b2 <USBH_MSC_Write>
 8012d36:	e030      	b.n	8012d9a <USBH_write+0x8a>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8012d38:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
 8012d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012d40:	4621      	mov	r1, r4
 8012d42:	4640      	mov	r0, r8
 8012d44:	f003 f912 	bl	8015f6c <memcpy>
      status = USBH_MSC_Write(&hUSB_Host, lun, sector + count, (BYTE *)scratch, 1) ;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	9300      	str	r3, [sp, #0]
 8012d4c:	197a      	adds	r2, r7, r5
 8012d4e:	4643      	mov	r3, r8
 8012d50:	4631      	mov	r1, r6
 8012d52:	4648      	mov	r0, r9
 8012d54:	f000 faad 	bl	80132b2 <USBH_MSC_Write>
      if(status == USBH_FAIL)
 8012d58:	2802      	cmp	r0, #2
 8012d5a:	f105 35ff 	add.w	r5, r5, #4294967295
 8012d5e:	d11a      	bne.n	8012d96 <USBH_write+0x86>
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8012d60:	aa03      	add	r2, sp, #12
 8012d62:	4631      	mov	r1, r6
 8012d64:	4810      	ldr	r0, [pc, #64]	; (8012da8 <USBH_write+0x98>)
 8012d66:	f000 fa49 	bl	80131fc <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8012d6a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012d6e:	2b27      	cmp	r3, #39	; 0x27
 8012d70:	d018      	beq.n	8012da4 <USBH_write+0x94>
 8012d72:	d805      	bhi.n	8012d80 <USBH_write+0x70>
 8012d74:	2b04      	cmp	r3, #4
 8012d76:	d113      	bne.n	8012da0 <USBH_write+0x90>
      res = RES_NOTRDY;
 8012d78:	2003      	movs	r0, #3
}
 8012d7a:	b011      	add	sp, #68	; 0x44
 8012d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (info.sense.asc)
 8012d80:	2b28      	cmp	r3, #40	; 0x28
 8012d82:	d0f9      	beq.n	8012d78 <USBH_write+0x68>
 8012d84:	2b3a      	cmp	r3, #58	; 0x3a
 8012d86:	e7f6      	b.n	8012d76 <USBH_write+0x66>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8012d88:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8012dac <USBH_write+0x9c>
 8012d8c:	1e5d      	subs	r5, r3, #1
 8012d8e:	eb01 3403 	add.w	r4, r1, r3, lsl #12
  USBH_StatusTypeDef  status = USBH_OK;
 8012d92:	2000      	movs	r0, #0
      status = USBH_MSC_Write(&hUSB_Host, lun, sector + count, (BYTE *)scratch, 1) ;
 8012d94:	4691      	mov	r9, r2
    while (count--)
 8012d96:	1c6b      	adds	r3, r5, #1
 8012d98:	d1ce      	bne.n	8012d38 <USBH_write+0x28>
  if(status == USBH_OK)
 8012d9a:	2800      	cmp	r0, #0
 8012d9c:	d0ed      	beq.n	8012d7a <USBH_write+0x6a>
 8012d9e:	e7df      	b.n	8012d60 <USBH_write+0x50>
      res = RES_ERROR;
 8012da0:	2001      	movs	r0, #1
 8012da2:	e7ea      	b.n	8012d7a <USBH_write+0x6a>
      res = RES_WRPRT;
 8012da4:	2002      	movs	r0, #2
 8012da6:	e7e8      	b.n	8012d7a <USBH_write+0x6a>
 8012da8:	20005858 	.word	0x20005858
 8012dac:	20000288 	.word	0x20000288

08012db0 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8012db0:	2000      	movs	r0, #0
 8012db2:	4770      	bx	lr

08012db4 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8012db4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8012db8:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8012dba:	69dd      	ldr	r5, [r3, #28]
  switch (MSC_Handle->state)
 8012dbc:	7b2b      	ldrb	r3, [r5, #12]
{
 8012dbe:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 8012dc0:	b123      	cbz	r3, 8012dcc <USBH_MSC_Process+0x18>
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	f000 80e6 	beq.w	8012f94 <USBH_MSC_Process+0x1e0>
  USBH_StatusTypeDef error = USBH_BUSY;
 8012dc8:	2001      	movs	r0, #1
            break;
 8012dca:	e075      	b.n	8012eb8 <USBH_MSC_Process+0x104>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8012dcc:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8012dd0:	782a      	ldrb	r2, [r5, #0]
 8012dd2:	428a      	cmp	r2, r1
 8012dd4:	f04f 0401 	mov.w	r4, #1
 8012dd8:	f240 80d4 	bls.w	8012f84 <USBH_MSC_Process+0x1d0>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8012ddc:	2234      	movs	r2, #52	; 0x34
 8012dde:	fb02 5301 	mla	r3, r2, r1, r5
 8012de2:	f883 4091 	strb.w	r4, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8012de6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8012dea:	4614      	mov	r4, r2
 8012dec:	2b08      	cmp	r3, #8
 8012dee:	d8eb      	bhi.n	8012dc8 <USBH_MSC_Process+0x14>
 8012df0:	a201      	add	r2, pc, #4	; (adr r2, 8012df8 <USBH_MSC_Process+0x44>)
 8012df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012df6:	bf00      	nop
 8012df8:	08012e1d 	.word	0x08012e1d
 8012dfc:	08012dc9 	.word	0x08012dc9
 8012e00:	08012e51 	.word	0x08012e51
 8012e04:	08012ed7 	.word	0x08012ed7
 8012e08:	08012e31 	.word	0x08012e31
 8012e0c:	08012f1f 	.word	0x08012f1f
 8012e10:	08012dc9 	.word	0x08012dc9
 8012e14:	08012dc9 	.word	0x08012dc9
 8012e18:	08012f7d 	.word	0x08012f7d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8012e1c:	fb04 5101 	mla	r1, r4, r1, r5
 8012e20:	2304      	movs	r3, #4
 8012e22:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 8012e26:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8012e2a:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
 8012e2e:	e7cb      	b.n	8012dc8 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8012e30:	fb04 5201 	mla	r2, r4, r1, r5
 8012e34:	329f      	adds	r2, #159	; 0x9f
 8012e36:	b2c9      	uxtb	r1, r1
 8012e38:	f000 fbea 	bl	8013610 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	d15e      	bne.n	8012efe <USBH_MSC_Process+0x14a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8012e40:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8012e44:	2302      	movs	r3, #2
 8012e46:	fb04 5501 	mla	r5, r4, r1, r5
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8012e4a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 8012e4e:	e7bb      	b.n	8012dc8 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8012e50:	b2c9      	uxtb	r1, r1
 8012e52:	f000 fb83 	bl	801355c <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 8012e56:	b9a8      	cbnz	r0, 8012e84 <USBH_MSC_Process+0xd0>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8012e58:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8012e5c:	2234      	movs	r2, #52	; 0x34
 8012e5e:	fb02 5103 	mla	r1, r2, r3, r5
 8012e62:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8012e66:	b100      	cbz	r0, 8012e6a <USBH_MSC_Process+0xb6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8012e68:	2001      	movs	r0, #1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8012e6a:	fb02 5503 	mla	r5, r2, r3, r5
 8012e6e:	2303      	movs	r3, #3
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8012e70:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8012e74:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8012e7e:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 8012e82:	e7a1      	b.n	8012dc8 <USBH_MSC_Process+0x14>
            if (ready_status == USBH_FAIL)
 8012e84:	2802      	cmp	r0, #2
 8012e86:	d118      	bne.n	8012eba <USBH_MSC_Process+0x106>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8012e88:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8012e8c:	2234      	movs	r2, #52	; 0x34
 8012e8e:	fb02 5103 	mla	r1, r2, r3, r5
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8012e92:	fb02 5503 	mla	r5, r2, r3, r5
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8012e96:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8012e9a:	2802      	cmp	r0, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8012e9c:	bf14      	ite	ne
 8012e9e:	2001      	movne	r0, #1
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8012ea0:	2000      	moveq	r0, #0
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8012ea2:	2305      	movs	r3, #5
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8012ea4:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8012ea8:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8012eac:	2001      	movs	r0, #1
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8012eae:	2302      	movs	r3, #2
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8012eb0:	f885 0091 	strb.w	r0, [r5, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8012eb4:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
}
 8012eb8:	bd70      	pop	{r4, r5, r6, pc}
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8012eba:	2804      	cmp	r0, #4
 8012ebc:	d184      	bne.n	8012dc8 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012ebe:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8012ec2:	2234      	movs	r2, #52	; 0x34
 8012ec4:	fb02 5503 	mla	r5, r2, r3, r5
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012ec8:	2001      	movs	r0, #1
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8012eca:	2302      	movs	r3, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012ecc:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8012ed0:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 8012ed4:	e7f0      	b.n	8012eb8 <USBH_MSC_Process+0x104>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8012ed6:	fb04 5201 	mla	r2, r4, r1, r5
 8012eda:	3294      	adds	r2, #148	; 0x94
 8012edc:	b2c9      	uxtb	r1, r1
 8012ede:	f000 fb63 	bl	80135a8 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 8012ee2:	b960      	cbnz	r0, 8012efe <USBH_MSC_Process+0x14a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8012ee4:	f8b5 20f8 	ldrh.w	r2, [r5, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012ee8:	2301      	movs	r3, #1
 8012eea:	fb04 5402 	mla	r4, r4, r2, r5
              MSC_Handle->current_lun++;
 8012eee:	441a      	add	r2, r3
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012ef0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8012ef4:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
              MSC_Handle->current_lun++;
 8012ef8:	f8a5 20f8 	strh.w	r2, [r5, #248]	; 0xf8
 8012efc:	e764      	b.n	8012dc8 <USBH_MSC_Process+0x14>
            else if (scsi_status == USBH_FAIL)
 8012efe:	2802      	cmp	r0, #2
 8012f00:	d105      	bne.n	8012f0e <USBH_MSC_Process+0x15a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8012f02:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8012f06:	2305      	movs	r3, #5
 8012f08:	fb04 5501 	mla	r5, r4, r1, r5
 8012f0c:	e79d      	b.n	8012e4a <USBH_MSC_Process+0x96>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8012f0e:	2804      	cmp	r0, #4
 8012f10:	f47f af5a 	bne.w	8012dc8 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012f14:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8012f18:	fb04 5501 	mla	r5, r4, r1, r5
 8012f1c:	e7d4      	b.n	8012ec8 <USBH_MSC_Process+0x114>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8012f1e:	fb04 5201 	mla	r2, r4, r1, r5
 8012f22:	329c      	adds	r2, #156	; 0x9c
 8012f24:	b2c9      	uxtb	r1, r1
 8012f26:	f000 fbdf 	bl	80136e8 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 8012f2a:	b9f8      	cbnz	r0, 8012f6c <USBH_MSC_Process+0x1b8>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8012f2c:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8012f30:	fb04 5403 	mla	r4, r4, r3, r5
 8012f34:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 8012f38:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8012f3c:	2a02      	cmp	r2, #2
 8012f3e:	d10b      	bne.n	8012f58 <USBH_MSC_Process+0x1a4>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8012f40:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
 8012f44:	f8d6 03c4 	ldr.w	r0, [r6, #964]	; 0x3c4
 8012f48:	1a40      	subs	r0, r0, r1
 8012f4a:	f242 710f 	movw	r1, #9999	; 0x270f
 8012f4e:	4288      	cmp	r0, r1
 8012f50:	d802      	bhi.n	8012f58 <USBH_MSC_Process+0x1a4>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8012f52:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 8012f56:	e737      	b.n	8012dc8 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012f58:	2234      	movs	r2, #52	; 0x34
 8012f5a:	fb02 5203 	mla	r2, r2, r3, r5
 8012f5e:	2001      	movs	r0, #1
              MSC_Handle->current_lun++;
 8012f60:	4403      	add	r3, r0
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8012f62:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
 8012f66:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 8012f6a:	e7a5      	b.n	8012eb8 <USBH_MSC_Process+0x104>
            if (scsi_status == USBH_FAIL)
 8012f6c:	2802      	cmp	r0, #2
 8012f6e:	d1ce      	bne.n	8012f0e <USBH_MSC_Process+0x15a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8012f70:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8012f74:	2308      	movs	r3, #8
 8012f76:	fb04 5501 	mla	r5, r4, r1, r5
 8012f7a:	e766      	b.n	8012e4a <USBH_MSC_Process+0x96>
            MSC_Handle->current_lun++;
 8012f7c:	3101      	adds	r1, #1
 8012f7e:	f8a5 10f8 	strh.w	r1, [r5, #248]	; 0xf8
 8012f82:	e721      	b.n	8012dc8 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
 8012f84:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8012f88:	732c      	strb	r4, [r5, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8012f8a:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8012f8e:	2102      	movs	r1, #2
 8012f90:	4798      	blx	r3
 8012f92:	e719      	b.n	8012dc8 <USBH_MSC_Process+0x14>
      error = USBH_OK;
 8012f94:	2000      	movs	r0, #0
 8012f96:	e78f      	b.n	8012eb8 <USBH_MSC_Process+0x104>

08012f98 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8012f98:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8012f9c:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8012f9e:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8012fa0:	7ba3      	ldrb	r3, [r4, #14]
 8012fa2:	2b02      	cmp	r3, #2
{
 8012fa4:	4602      	mov	r2, r0
  switch (MSC_Handle->req_state)
 8012fa6:	d002      	beq.n	8012fae <USBH_MSC_ClassRequest+0x16>
 8012fa8:	2b03      	cmp	r3, #3
 8012faa:	d022      	beq.n	8012ff2 <USBH_MSC_ClassRequest+0x5a>
 8012fac:	bb3b      	cbnz	r3, 8012ffe <USBH_MSC_ClassRequest+0x66>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8012fae:	4621      	mov	r1, r4
 8012fb0:	4610      	mov	r0, r2
 8012fb2:	f000 f9c9 	bl	8013348 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 8012fb6:	2803      	cmp	r0, #3
 8012fb8:	d118      	bne.n	8012fec <USBH_MSC_ClassRequest+0x54>
        MSC_Handle->max_lun = 0U;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8012fbe:	7823      	ldrb	r3, [r4, #0]
 8012fc0:	2b02      	cmp	r3, #2
 8012fc2:	f04f 0202 	mov.w	r2, #2
 8012fc6:	bf99      	ittee	ls
 8012fc8:	3301      	addls	r3, #1
 8012fca:	b2db      	uxtbls	r3, r3
 8012fcc:	4613      	movhi	r3, r2
 8012fce:	7022      	strbhi	r2, [r4, #0]
 8012fd0:	bf98      	it	ls
 8012fd2:	7023      	strbls	r3, [r4, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8012fd4:	2000      	movs	r0, #0
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8012fd6:	2b01      	cmp	r3, #1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8012fd8:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 8012fdc:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8012fe0:	d006      	beq.n	8012ff0 <USBH_MSC_ClassRequest+0x58>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8012fe2:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 8012fe6:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
 8012fea:	e001      	b.n	8012ff0 <USBH_MSC_ClassRequest+0x58>
      if (status == USBH_OK)
 8012fec:	2800      	cmp	r0, #0
 8012fee:	d0e6      	beq.n	8012fbe <USBH_MSC_ClassRequest+0x26>
}
 8012ff0:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8012ff2:	2100      	movs	r1, #0
 8012ff4:	f001 f908 	bl	8014208 <USBH_ClrFeature>
 8012ff8:	b908      	cbnz	r0, 8012ffe <USBH_MSC_ClassRequest+0x66>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8012ffa:	7be3      	ldrb	r3, [r4, #15]
 8012ffc:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8012ffe:	2001      	movs	r0, #1
 8013000:	e7f6      	b.n	8012ff0 <USBH_MSC_ClassRequest+0x58>

08013002 <USBH_MSC_InterfaceDeInit>:
{
 8013002:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013004:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013008:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 801300a:	7969      	ldrb	r1, [r5, #5]
{
 801300c:	4604      	mov	r4, r0
  if (MSC_Handle->OutPipe)
 801300e:	b139      	cbz	r1, 8013020 <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8013010:	f001 f975 	bl	80142fe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8013014:	7969      	ldrb	r1, [r5, #5]
 8013016:	4620      	mov	r0, r4
 8013018:	f001 f98e 	bl	8014338 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 801301c:	2300      	movs	r3, #0
 801301e:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
 8013020:	7929      	ldrb	r1, [r5, #4]
 8013022:	b141      	cbz	r1, 8013036 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8013024:	4620      	mov	r0, r4
 8013026:	f001 f96a 	bl	80142fe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 801302a:	7929      	ldrb	r1, [r5, #4]
 801302c:	4620      	mov	r0, r4
 801302e:	f001 f983 	bl	8014338 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8013032:	2300      	movs	r3, #0
 8013034:	712b      	strb	r3, [r5, #4]
  if (phost->pActiveClass->pData)
 8013036:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 801303a:	69d8      	ldr	r0, [r3, #28]
 801303c:	b128      	cbz	r0, 801304a <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 801303e:	f002 ff8d 	bl	8015f5c <free>
    phost->pActiveClass->pData = 0U;
 8013042:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8013046:	2200      	movs	r2, #0
 8013048:	61da      	str	r2, [r3, #28]
}
 801304a:	2000      	movs	r0, #0
 801304c:	bd38      	pop	{r3, r4, r5, pc}

0801304e <USBH_MSC_InterfaceInit>:
{
 801304e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8013052:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8013056:	2350      	movs	r3, #80	; 0x50
 8013058:	2206      	movs	r2, #6
 801305a:	7909      	ldrb	r1, [r1, #4]
{
 801305c:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 801305e:	f000 fc83 	bl	8013968 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8013062:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8013064:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8013066:	d904      	bls.n	8013072 <USBH_MSC_InterfaceInit+0x24>
    return USBH_FAIL;
 8013068:	2702      	movs	r7, #2
}
 801306a:	4638      	mov	r0, r7
 801306c:	b004      	add	sp, #16
 801306e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 8013072:	4601      	mov	r1, r0
 8013074:	4628      	mov	r0, r5
 8013076:	f000 fc6e 	bl	8013956 <USBH_SelectInterface>
  if (status != USBH_OK)
 801307a:	4607      	mov	r7, r0
 801307c:	2800      	cmp	r0, #0
 801307e:	d1f3      	bne.n	8013068 <USBH_MSC_InterfaceInit+0x1a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8013080:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013084:	f8d5 837c 	ldr.w	r8, [r5, #892]	; 0x37c
 8013088:	f002 ff60 	bl	8015f4c <malloc>
 801308c:	4604      	mov	r4, r0
 801308e:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 8013092:	2800      	cmp	r0, #0
 8013094:	d0e8      	beq.n	8013068 <USBH_MSC_InterfaceInit+0x1a>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8013096:	4639      	mov	r1, r7
 8013098:	f44f 7280 	mov.w	r2, #256	; 0x100
 801309c:	f002 ff71 	bl	8015f82 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80130a0:	231a      	movs	r3, #26
 80130a2:	fb03 5106 	mla	r1, r3, r6, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80130a6:	fb03 5606 	mla	r6, r3, r6, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80130aa:	f891 234e 	ldrb.w	r2, [r1, #846]	; 0x34e
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80130ae:	f896 3356 	ldrb.w	r3, [r6, #854]	; 0x356
 80130b2:	f8b1 1350 	ldrh.w	r1, [r1, #848]	; 0x350
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80130b6:	0610      	lsls	r0, r2, #24
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80130b8:	bf53      	iteet	pl
 80130ba:	71a2      	strbpl	r2, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80130bc:	71e2      	strbmi	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80130be:	8161      	strhmi	r1, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80130c0:	8121      	strhpl	r1, [r4, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80130c2:	0619      	lsls	r1, r3, #24
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80130c4:	bf58      	it	pl
 80130c6:	71a3      	strbpl	r3, [r4, #6]
 80130c8:	f8b6 2358 	ldrh.w	r2, [r6, #856]	; 0x358
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80130cc:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80130ce:	bf48      	it	mi
 80130d0:	71e3      	strbmi	r3, [r4, #7]
  MSC_Handle->state = MSC_INIT;
 80130d2:	f04f 0600 	mov.w	r6, #0
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80130d6:	4628      	mov	r0, r5
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80130d8:	bf4c      	ite	mi
 80130da:	8162      	strhmi	r2, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80130dc:	8122      	strhpl	r2, [r4, #8]
  MSC_Handle->state = MSC_INIT;
 80130de:	7326      	strb	r6, [r4, #12]
  MSC_Handle->error = MSC_OK;
 80130e0:	7366      	strb	r6, [r4, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80130e2:	73a6      	strb	r6, [r4, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80130e4:	f001 f910 	bl	8014308 <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80130e8:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80130ea:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80130ec:	4628      	mov	r0, r5
 80130ee:	f001 f90b 	bl	8014308 <USBH_AllocPipe>
 80130f2:	7120      	strb	r0, [r4, #4]
  USBH_MSC_BOT_Init(phost);
 80130f4:	4628      	mov	r0, r5
 80130f6:	f000 f931 	bl	801335c <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80130fa:	8920      	ldrh	r0, [r4, #8]
 80130fc:	9002      	str	r0, [sp, #8]
 80130fe:	f04f 0802 	mov.w	r8, #2
 8013102:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8013106:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 801310a:	79a2      	ldrb	r2, [r4, #6]
 801310c:	7961      	ldrb	r1, [r4, #5]
 801310e:	9000      	str	r0, [sp, #0]
 8013110:	f8cd 8004 	str.w	r8, [sp, #4]
 8013114:	4628      	mov	r0, r5
 8013116:	f001 f8e3 	bl	80142e0 <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 801311a:	8960      	ldrh	r0, [r4, #10]
 801311c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8013120:	79e2      	ldrb	r2, [r4, #7]
 8013122:	7921      	ldrb	r1, [r4, #4]
 8013124:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8013128:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 801312c:	9000      	str	r0, [sp, #0]
 801312e:	4628      	mov	r0, r5
 8013130:	f001 f8d6 	bl	80142e0 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8013134:	4632      	mov	r2, r6
 8013136:	7921      	ldrb	r1, [r4, #4]
 8013138:	4628      	mov	r0, r5
 801313a:	f002 feaf 	bl	8015e9c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 801313e:	4632      	mov	r2, r6
 8013140:	7961      	ldrb	r1, [r4, #5]
 8013142:	4628      	mov	r0, r5
 8013144:	f002 feaa 	bl	8015e9c <USBH_LL_SetToggle>
  return USBH_OK;
 8013148:	e78f      	b.n	801306a <USBH_MSC_InterfaceInit+0x1c>

0801314a <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801314a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 801314e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013150:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8013152:	2634      	movs	r6, #52	; 0x34
 8013154:	fb06 5401 	mla	r4, r6, r1, r5
 8013158:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 801315c:	2b06      	cmp	r3, #6
 801315e:	d010      	beq.n	8013182 <USBH_MSC_RdWrProcess+0x38>
 8013160:	2b07      	cmp	r3, #7
 8013162:	d019      	beq.n	8013198 <USBH_MSC_RdWrProcess+0x4e>
 8013164:	2b05      	cmp	r3, #5
 8013166:	d122      	bne.n	80131ae <USBH_MSC_RdWrProcess+0x64>
#endif
#endif
      break;

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8013168:	fb06 5201 	mla	r2, r6, r1, r5
 801316c:	329c      	adds	r2, #156	; 0x9c
 801316e:	f000 fabb 	bl	80136e8 <USBH_MSC_SCSI_RequestSense>

      if (scsi_status == USBH_OK)
 8013172:	b9f0      	cbnz	r0, 80131b2 <USBH_MSC_RdWrProcess+0x68>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8013174:	2301      	movs	r3, #1
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8013176:	2002      	movs	r0, #2
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8013178:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 801317c:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
 8013180:	e008      	b.n	8013194 <USBH_MSC_RdWrProcess+0x4a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8013182:	2300      	movs	r3, #0
 8013184:	9300      	str	r3, [sp, #0]
 8013186:	461a      	mov	r2, r3
 8013188:	f000 fb3b 	bl	8013802 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 801318c:	b950      	cbnz	r0, 80131a4 <USBH_MSC_RdWrProcess+0x5a>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 801318e:	2301      	movs	r3, #1
 8013190:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    default:
      break;

  }
  return error;
}
 8013194:	b002      	add	sp, #8
 8013196:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8013198:	2300      	movs	r3, #0
 801319a:	9300      	str	r3, [sp, #0]
 801319c:	461a      	mov	r2, r3
 801319e:	f000 faec 	bl	801377a <USBH_MSC_SCSI_Write>
 80131a2:	e7f3      	b.n	801318c <USBH_MSC_RdWrProcess+0x42>
      else if (scsi_status == USBH_FAIL)
 80131a4:	2802      	cmp	r0, #2
 80131a6:	d104      	bne.n	80131b2 <USBH_MSC_RdWrProcess+0x68>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80131a8:	2305      	movs	r3, #5
 80131aa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 80131ae:	2001      	movs	r0, #1
 80131b0:	e7f0      	b.n	8013194 <USBH_MSC_RdWrProcess+0x4a>
      if (scsi_status == USBH_FAIL)
 80131b2:	2804      	cmp	r0, #4
 80131b4:	d1fb      	bne.n	80131ae <USBH_MSC_RdWrProcess+0x64>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80131b6:	2308      	movs	r3, #8
 80131b8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 80131bc:	2002      	movs	r0, #2
 80131be:	e7e9      	b.n	8013194 <USBH_MSC_RdWrProcess+0x4a>

080131c0 <USBH_MSC_IsReady>:
uint8_t  USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
 80131c0:	7803      	ldrb	r3, [r0, #0]
 80131c2:	2b0b      	cmp	r3, #11
 80131c4:	d107      	bne.n	80131d6 <USBH_MSC_IsReady+0x16>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80131c6:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
 80131ca:	69db      	ldr	r3, [r3, #28]
 80131cc:	7b18      	ldrb	r0, [r3, #12]
  {
    res = 1U;
 80131ce:	1e43      	subs	r3, r0, #1
 80131d0:	4258      	negs	r0, r3
 80131d2:	4158      	adcs	r0, r3
 80131d4:	4770      	bx	lr
  }
  else
  {
    res = 0U;
 80131d6:	2000      	movs	r0, #0
  }

  return res;
}
 80131d8:	4770      	bx	lr

080131da <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80131da:	7803      	ldrb	r3, [r0, #0]
 80131dc:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80131de:	bf01      	itttt	eq
 80131e0:	f8d0 337c 	ldreq.w	r3, [r0, #892]	; 0x37c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80131e4:	69db      	ldreq	r3, [r3, #28]
 80131e6:	2234      	moveq	r2, #52	; 0x34
 80131e8:	fb02 3101 	mlaeq	r1, r2, r1, r3
 80131ec:	bf03      	ittte	eq
 80131ee:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
 80131f2:	fab0 f080 	clzeq	r0, r0
 80131f6:	0940      	lsreq	r0, r0, #5
  }
  else
  {
    res = 0U;
 80131f8:	2000      	movne	r0, #0
  }

  return res;
}
 80131fa:	4770      	bx	lr

080131fc <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 80131fc:	7803      	ldrb	r3, [r0, #0]
 80131fe:	2b0b      	cmp	r3, #11
{
 8013200:	b510      	push	{r4, lr}
  if (phost->gState == HOST_CLASS)
 8013202:	d111      	bne.n	8013228 <USBH_MSC_GetLUNInfo+0x2c>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013204:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8013208:	2334      	movs	r3, #52	; 0x34
 801320a:	2490      	movs	r4, #144	; 0x90
 801320c:	fb13 4301 	smlabb	r3, r3, r1, r4
 8013210:	69c1      	ldr	r1, [r0, #28]
 8013212:	4419      	add	r1, r3
 8013214:	f101 0334 	add.w	r3, r1, #52	; 0x34
 8013218:	f851 0b04 	ldr.w	r0, [r1], #4
 801321c:	f842 0b04 	str.w	r0, [r2], #4
 8013220:	4299      	cmp	r1, r3
 8013222:	d1f9      	bne.n	8013218 <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 8013224:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
 8013226:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
 8013228:	2002      	movs	r0, #2
 801322a:	e7fc      	b.n	8013226 <USBH_MSC_GetLUNInfo+0x2a>

0801322c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 801322c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8013230:	f890 5320 	ldrb.w	r5, [r0, #800]	; 0x320
{
 8013234:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8013238:	4604      	mov	r4, r0
 801323a:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0U) ||
 801323c:	b3bd      	cbz	r5, 80132ae <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) ||
 801323e:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 8013240:	2d0b      	cmp	r5, #11
 8013242:	d134      	bne.n	80132ae <USBH_MSC_Read+0x82>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013244:	f8d0 537c 	ldr.w	r5, [r0, #892]	; 0x37c
 8013248:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 801324a:	2634      	movs	r6, #52	; 0x34
 801324c:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) ||
 8013250:	f896 c090 	ldrb.w	ip, [r6, #144]	; 0x90
 8013254:	f1bc 0f01 	cmp.w	ip, #1
 8013258:	d129      	bne.n	80132ae <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
 801325a:	f04f 0c06 	mov.w	ip, #6
 801325e:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8013262:	f886 c090 	strb.w	ip, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8013266:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 801326a:	f8cd 8000 	str.w	r8, [sp]
 801326e:	f000 fac8 	bl	8013802 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8013272:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 8013276:	f8d4 93c4 	ldr.w	r9, [r4, #964]	; 0x3c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 801327a:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 801327e:	4639      	mov	r1, r7
 8013280:	4620      	mov	r0, r4
 8013282:	f7ff ff62 	bl	801314a <USBH_MSC_RdWrProcess>
 8013286:	2801      	cmp	r0, #1
 8013288:	d005      	beq.n	8013296 <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 801328a:	2301      	movs	r3, #1
 801328c:	732b      	strb	r3, [r5, #12]

  return USBH_OK;
 801328e:	2000      	movs	r0, #0
}
 8013290:	b003      	add	sp, #12
 8013292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8013296:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 801329a:	eba3 0309 	sub.w	r3, r3, r9
 801329e:	42b3      	cmp	r3, r6
 80132a0:	d803      	bhi.n	80132aa <USBH_MSC_Read+0x7e>
 80132a2:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d1e9      	bne.n	801327e <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 80132aa:	2301      	movs	r3, #1
 80132ac:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 80132ae:	2002      	movs	r0, #2
 80132b0:	e7ee      	b.n	8013290 <USBH_MSC_Read+0x64>

080132b2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80132b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 80132b6:	f890 5320 	ldrb.w	r5, [r0, #800]	; 0x320
{
 80132ba:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80132be:	4604      	mov	r4, r0
 80132c0:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0U) ||
 80132c2:	b3bd      	cbz	r5, 8013334 <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) ||
 80132c4:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 80132c6:	2d0b      	cmp	r5, #11
 80132c8:	d134      	bne.n	8013334 <USBH_MSC_Write+0x82>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80132ca:	f8d0 537c 	ldr.w	r5, [r0, #892]	; 0x37c
 80132ce:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80132d0:	2634      	movs	r6, #52	; 0x34
 80132d2:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) ||
 80132d6:	f896 c090 	ldrb.w	ip, [r6, #144]	; 0x90
 80132da:	f1bc 0f01 	cmp.w	ip, #1
 80132de:	d129      	bne.n	8013334 <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
 80132e0:	f04f 0c07 	mov.w	ip, #7
 80132e4:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80132e8:	f886 c090 	strb.w	ip, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 80132ec:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80132f0:	f8cd 8000 	str.w	r8, [sp]
 80132f4:	f000 fa41 	bl	801377a <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80132f8:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 80132fc:	f8d4 93c4 	ldr.w	r9, [r4, #964]	; 0x3c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8013300:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8013304:	4639      	mov	r1, r7
 8013306:	4620      	mov	r0, r4
 8013308:	f7ff ff1f 	bl	801314a <USBH_MSC_RdWrProcess>
 801330c:	2801      	cmp	r0, #1
 801330e:	d005      	beq.n	801331c <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8013310:	2301      	movs	r3, #1
 8013312:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 8013314:	2000      	movs	r0, #0
}
 8013316:	b003      	add	sp, #12
 8013318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 801331c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8013320:	eba3 0309 	sub.w	r3, r3, r9
 8013324:	42b3      	cmp	r3, r6
 8013326:	d803      	bhi.n	8013330 <USBH_MSC_Write+0x7e>
 8013328:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 801332c:	2b00      	cmp	r3, #0
 801332e:	d1e9      	bne.n	8013304 <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 8013330:	2301      	movs	r3, #1
 8013332:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8013334:	2002      	movs	r0, #2
 8013336:	e7ee      	b.n	8013316 <USBH_MSC_Write+0x64>

08013338 <USBH_MSC_BOT_REQ_Reset>:

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
 8013338:	f64f 7121 	movw	r1, #65313	; 0xff21
 801333c:	2200      	movs	r2, #0
 801333e:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
 8013342:	4611      	mov	r1, r2
 8013344:	f000 bd5d 	b.w	8013e02 <USBH_CtlReq>

08013348 <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
 8013348:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801334c:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 8013350:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 8013354:	2201      	movs	r2, #1
 8013356:	f000 bd54 	b.w	8013e02 <USBH_CtlReq>
	...

0801335c <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801335c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8013360:	4905      	ldr	r1, [pc, #20]	; (8013378 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013362:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8013364:	4a05      	ldr	r2, [pc, #20]	; (801337c <USBH_MSC_BOT_Init+0x20>)
 8013366:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 801336a:	2201      	movs	r2, #1
 801336c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8013370:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
}
 8013374:	2000      	movs	r0, #0
 8013376:	4770      	bx	lr
 8013378:	43425355 	.word	0x43425355
 801337c:	20304050 	.word	0x20304050

08013380 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013380:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8013384:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013386:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 8013388:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 801338c:	3b01      	subs	r3, #1
{
 801338e:	4606      	mov	r6, r0
  switch (MSC_Handle->hbot.state)
 8013390:	2b0a      	cmp	r3, #10
 8013392:	d859      	bhi.n	8013448 <USBH_MSC_BOT_Process+0xc8>
 8013394:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013398:	001a000b 	.word	0x001a000b
 801339c:	003d0033 	.word	0x003d0033
 80133a0:	0068005e 	.word	0x0068005e
 80133a4:	0093008b 	.word	0x0093008b
 80133a8:	00be00b4 	.word	0x00be00b4
 80133ac:	00d6      	.short	0x00d6
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80133ae:	2302      	movs	r3, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80133b0:	2501      	movs	r5, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80133b2:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80133b6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80133ba:	221f      	movs	r2, #31
 80133bc:	7963      	ldrb	r3, [r4, #5]
 80133be:	9500      	str	r5, [sp, #0]
 80133c0:	f104 0154 	add.w	r1, r4, #84	; 0x54
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80133c4:	4630      	mov	r0, r6
 80133c6:	f000 ff64 	bl	8014292 <USBH_BulkSendData>
 80133ca:	e03d      	b.n	8013448 <USBH_MSC_BOT_Process+0xc8>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80133cc:	7961      	ldrb	r1, [r4, #5]
 80133ce:	f002 fd55 	bl	8015e7c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80133d2:	2801      	cmp	r0, #1
 80133d4:	d10c      	bne.n	80133f0 <USBH_MSC_BOT_Process+0x70>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80133d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80133d8:	b143      	cbz	r3, 80133ec <USBH_MSC_BOT_Process+0x6c>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80133da:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 80133de:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80133e0:	bfb4      	ite	lt
 80133e2:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80133e4:	2305      	movge	r3, #5

    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80133e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80133ea:	e006      	b.n	80133fa <USBH_MSC_BOT_Process+0x7a>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80133ec:	2307      	movs	r3, #7
 80133ee:	e7fa      	b.n	80133e6 <USBH_MSC_BOT_Process+0x66>
      else if (URB_Status == USBH_URB_NOTREADY)
 80133f0:	2802      	cmp	r0, #2
 80133f2:	d158      	bne.n	80134a6 <USBH_MSC_BOT_Process+0x126>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80133f4:	2001      	movs	r0, #1
 80133f6:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50

    default:
      break;
  }
  return status;
}
 80133fa:	b002      	add	sp, #8
 80133fc:	bd70      	pop	{r4, r5, r6, pc}
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80133fe:	7923      	ldrb	r3, [r4, #4]
 8013400:	8962      	ldrh	r2, [r4, #10]
 8013402:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8013406:	f000 ff5b 	bl	80142c0 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 801340a:	2304      	movs	r3, #4
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 801340c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8013410:	e01a      	b.n	8013448 <USBH_MSC_BOT_Process+0xc8>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8013412:	7921      	ldrb	r1, [r4, #4]
 8013414:	f002 fd32 	bl	8015e7c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013418:	2801      	cmp	r0, #1
 801341a:	d117      	bne.n	801344c <USBH_MSC_BOT_Process+0xcc>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 801341c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801341e:	8962      	ldrh	r2, [r4, #10]
 8013420:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8013422:	bf8a      	itet	hi
 8013424:	1a9b      	subhi	r3, r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8013426:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8013428:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 801342c:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 801342e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8013430:	bf84      	itt	hi
 8013432:	1889      	addhi	r1, r1, r2
 8013434:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8013438:	2b00      	cmp	r3, #0
 801343a:	d065      	beq.n	8013508 <USBH_MSC_BOT_Process+0x188>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 801343c:	7923      	ldrb	r3, [r4, #4]
 801343e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8013442:	4630      	mov	r0, r6
 8013444:	f000 ff3c 	bl	80142c0 <USBH_BulkReceiveData>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8013448:	2001      	movs	r0, #1
 801344a:	e7d6      	b.n	80133fa <USBH_MSC_BOT_Process+0x7a>
      else if (URB_Status == USBH_URB_STALL)
 801344c:	2805      	cmp	r0, #5
 801344e:	d1fb      	bne.n	8013448 <USBH_MSC_BOT_Process+0xc8>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8013450:	2309      	movs	r3, #9
 8013452:	e7db      	b.n	801340c <USBH_MSC_BOT_Process+0x8c>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8013454:	2501      	movs	r5, #1
 8013456:	7963      	ldrb	r3, [r4, #5]
 8013458:	8922      	ldrh	r2, [r4, #8]
 801345a:	9500      	str	r5, [sp, #0]
 801345c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8013460:	f000 ff17 	bl	8014292 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8013464:	2306      	movs	r3, #6
 8013466:	e7d1      	b.n	801340c <USBH_MSC_BOT_Process+0x8c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8013468:	7961      	ldrb	r1, [r4, #5]
 801346a:	f002 fd07 	bl	8015e7c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801346e:	2801      	cmp	r0, #1
 8013470:	d115      	bne.n	801349e <USBH_MSC_BOT_Process+0x11e>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8013472:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8013474:	8922      	ldrh	r2, [r4, #8]
 8013476:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8013478:	bf8a      	itet	hi
 801347a:	1a9b      	subhi	r3, r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 801347c:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 801347e:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8013482:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8013484:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8013486:	bf84      	itt	hi
 8013488:	1889      	addhi	r1, r1, r2
 801348a:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
 801348e:	2501      	movs	r5, #1
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8013490:	2b00      	cmp	r3, #0
 8013492:	d039      	beq.n	8013508 <USBH_MSC_BOT_Process+0x188>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8013494:	7963      	ldrb	r3, [r4, #5]
 8013496:	9500      	str	r5, [sp, #0]
 8013498:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 801349c:	e792      	b.n	80133c4 <USBH_MSC_BOT_Process+0x44>
      else if (URB_Status == USBH_URB_NOTREADY)
 801349e:	2802      	cmp	r0, #2
 80134a0:	d101      	bne.n	80134a6 <USBH_MSC_BOT_Process+0x126>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80134a2:	2305      	movs	r3, #5
 80134a4:	e7b2      	b.n	801340c <USBH_MSC_BOT_Process+0x8c>
      else if (URB_Status == USBH_URB_STALL)
 80134a6:	2805      	cmp	r0, #5
 80134a8:	d1ce      	bne.n	8013448 <USBH_MSC_BOT_Process+0xc8>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80134aa:	230a      	movs	r3, #10
 80134ac:	e7ae      	b.n	801340c <USBH_MSC_BOT_Process+0x8c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80134ae:	7923      	ldrb	r3, [r4, #4]
 80134b0:	220d      	movs	r2, #13
 80134b2:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80134b6:	f000 ff03 	bl	80142c0 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80134ba:	2308      	movs	r3, #8
 80134bc:	e7a6      	b.n	801340c <USBH_MSC_BOT_Process+0x8c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80134be:	7921      	ldrb	r1, [r4, #4]
 80134c0:	f002 fcdc 	bl	8015e7c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80134c4:	2801      	cmp	r0, #1
 80134c6:	d1c1      	bne.n	801344c <USBH_MSC_BOT_Process+0xcc>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80134c8:	f8d6 337c 	ldr.w	r3, [r6, #892]	; 0x37c
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80134cc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80134d0:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80134d4:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80134d6:	4630      	mov	r0, r6
 80134d8:	7921      	ldrb	r1, [r4, #4]
 80134da:	f002 fc8b 	bl	8015df4 <USBH_LL_GetLastXferSize>
 80134de:	280d      	cmp	r0, #13
 80134e0:	d137      	bne.n	8013552 <USBH_MSC_BOT_Process+0x1d2>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80134e2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80134e4:	4b1c      	ldr	r3, [pc, #112]	; (8013558 <USBH_MSC_BOT_Process+0x1d8>)
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d133      	bne.n	8013552 <USBH_MSC_BOT_Process+0x1d2>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80134ea:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80134ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d12f      	bne.n	8013552 <USBH_MSC_BOT_Process+0x1d2>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80134f2:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
          status = USBH_OK;
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	bf14      	ite	ne
 80134fa:	2002      	movne	r0, #2
 80134fc:	2000      	moveq	r0, #0
 80134fe:	e77c      	b.n	80133fa <USBH_MSC_BOT_Process+0x7a>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8013500:	79e1      	ldrb	r1, [r4, #7]
 8013502:	f000 fe81 	bl	8014208 <USBH_ClrFeature>
      if (error == USBH_OK)
 8013506:	b908      	cbnz	r0, 801350c <USBH_MSC_BOT_Process+0x18c>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8013508:	2307      	movs	r3, #7
 801350a:	e77f      	b.n	801340c <USBH_MSC_BOT_Process+0x8c>
      else if (error == USBH_UNRECOVERED_ERROR)
 801350c:	2804      	cmp	r0, #4
 801350e:	d19b      	bne.n	8013448 <USBH_MSC_BOT_Process+0xc8>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8013510:	230b      	movs	r3, #11
 8013512:	e77b      	b.n	801340c <USBH_MSC_BOT_Process+0x8c>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8013514:	79a1      	ldrb	r1, [r4, #6]
 8013516:	f000 fe77 	bl	8014208 <USBH_ClrFeature>
      if (error == USBH_OK)
 801351a:	4605      	mov	r5, r0
 801351c:	b980      	cbnz	r0, 8013540 <USBH_MSC_BOT_Process+0x1c0>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 801351e:	7961      	ldrb	r1, [r4, #5]
 8013520:	4630      	mov	r0, r6
 8013522:	f002 fcca 	bl	8015eba <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8013526:	f1c0 0201 	rsb	r2, r0, #1
 801352a:	7961      	ldrb	r1, [r4, #5]
 801352c:	b2d2      	uxtb	r2, r2
 801352e:	4630      	mov	r0, r6
 8013530:	f002 fcb4 	bl	8015e9c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8013534:	462a      	mov	r2, r5
 8013536:	7921      	ldrb	r1, [r4, #4]
 8013538:	4630      	mov	r0, r6
 801353a:	f002 fcaf 	bl	8015e9c <USBH_LL_SetToggle>
 801353e:	e787      	b.n	8013450 <USBH_MSC_BOT_Process+0xd0>
        if (error == USBH_UNRECOVERED_ERROR)
 8013540:	2804      	cmp	r0, #4
 8013542:	e7e4      	b.n	801350e <USBH_MSC_BOT_Process+0x18e>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8013544:	f7ff fef8 	bl	8013338 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 8013548:	2800      	cmp	r0, #0
 801354a:	f47f af56 	bne.w	80133fa <USBH_MSC_BOT_Process+0x7a>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 801354e:	2301      	movs	r3, #1
 8013550:	e749      	b.n	80133e6 <USBH_MSC_BOT_Process+0x66>
          status = USBH_FAIL;
 8013552:	2002      	movs	r0, #2
 8013554:	e751      	b.n	80133fa <USBH_MSC_BOT_Process+0x7a>
 8013556:	bf00      	nop
 8013558:	53425355 	.word	0x53425355

0801355c <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801355c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8013560:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013562:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8013564:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8013568:	2d01      	cmp	r5, #1
 801356a:	d003      	beq.n	8013574 <USBH_MSC_SCSI_TestUnitReady+0x18>
 801356c:	2d02      	cmp	r5, #2
 801356e:	d017      	beq.n	80135a0 <USBH_MSC_SCSI_TestUnitReady+0x44>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8013570:	2002      	movs	r0, #2
 8013572:	e014      	b.n	801359e <USBH_MSC_SCSI_TestUnitReady+0x42>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8013574:	2600      	movs	r6, #0
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8013576:	230a      	movs	r3, #10
 8013578:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 801357c:	65e6      	str	r6, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 801357e:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8013582:	2210      	movs	r2, #16
 8013584:	4631      	mov	r1, r6
 8013586:	f104 0063 	add.w	r0, r4, #99	; 0x63
 801358a:	f002 fcfa 	bl	8015f82 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;

      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801358e:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8013590:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8013594:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8013598:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      error = USBH_BUSY;
 801359c:	4628      	mov	r0, r5
    default:
      break;
  }

  return error;
}
 801359e:	bd70      	pop	{r4, r5, r6, pc}
 80135a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 80135a4:	f7ff beec 	b.w	8013380 <USBH_MSC_BOT_Process>

080135a8 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80135a8:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 80135ac:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80135ae:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80135b0:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80135b4:	2d01      	cmp	r5, #1
{
 80135b6:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 80135b8:	d003      	beq.n	80135c2 <USBH_MSC_SCSI_ReadCapacity+0x1a>
 80135ba:	2d02      	cmp	r5, #2
 80135bc:	d01c      	beq.n	80135f8 <USBH_MSC_SCSI_ReadCapacity+0x50>
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80135be:	2001      	movs	r0, #1
 80135c0:	e025      	b.n	801360e <USBH_MSC_SCSI_ReadCapacity+0x66>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80135c2:	2308      	movs	r3, #8
 80135c4:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80135c6:	2380      	movs	r3, #128	; 0x80
 80135c8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80135cc:	230a      	movs	r3, #10
 80135ce:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80135d2:	2210      	movs	r2, #16
 80135d4:	2100      	movs	r1, #0
 80135d6:	f104 0063 	add.w	r0, r4, #99	; 0x63
 80135da:	f002 fcd2 	bl	8015f82 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80135de:	2325      	movs	r3, #37	; 0x25
 80135e0:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

      MSC_Handle->hbot.state = BOT_SEND_CBW;

      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80135e4:	2302      	movs	r3, #2
 80135e6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80135ea:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80135ee:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80135f2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80135f6:	e7e2      	b.n	80135be <USBH_MSC_SCSI_ReadCapacity+0x16>
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:

      error = USBH_MSC_BOT_Process(phost, lun);
 80135f8:	f7ff fec2 	bl	8013380 <USBH_MSC_BOT_Process>

      if (error == USBH_OK)
 80135fc:	b938      	cbnz	r0, 801360e <USBH_MSC_SCSI_ReadCapacity+0x66>
      {
        /*assign the capacity*/
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80135fe:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8013602:	6813      	ldr	r3, [r2, #0]
 8013604:	ba1b      	rev	r3, r3
 8013606:	6033      	str	r3, [r6, #0]
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);

        /*assign the page length*/
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8013608:	88d3      	ldrh	r3, [r2, #6]
 801360a:	ba5b      	rev16	r3, r3
 801360c:	80b3      	strh	r3, [r6, #4]
    default:
      break;
  }

  return error;
}
 801360e:	bd70      	pop	{r4, r5, r6, pc}

08013610 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8013610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013612:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013616:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8013618:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 801361c:	2d01      	cmp	r5, #1
{
 801361e:	460f      	mov	r7, r1
 8013620:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 8013622:	d003      	beq.n	801362c <USBH_MSC_SCSI_Inquiry+0x1c>
 8013624:	2d02      	cmp	r5, #2
 8013626:	d025      	beq.n	8013674 <USBH_MSC_SCSI_Inquiry+0x64>
  USBH_StatusTypeDef error = USBH_FAIL;
 8013628:	2502      	movs	r5, #2
 801362a:	e021      	b.n	8013670 <USBH_MSC_SCSI_Inquiry+0x60>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801362c:	2380      	movs	r3, #128	; 0x80
 801362e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8013632:	230a      	movs	r3, #10
 8013634:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8013638:	2300      	movs	r3, #0
 801363a:	f8c4 3069 	str.w	r3, [r4, #105]	; 0x69
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 801363e:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8013642:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8013646:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

      MSC_Handle->hbot.state = BOT_SEND_CBW;

      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801364a:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 801364c:	2224      	movs	r2, #36	; 0x24
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 801364e:	2112      	movs	r1, #18
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8013650:	017f      	lsls	r7, r7, #5
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8013652:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8013656:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 801365a:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 801365c:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8013660:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8013664:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8013668:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 801366c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    default:
      break;
  }

  return error;
}
 8013670:	4628      	mov	r0, r5
 8013672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      error = USBH_MSC_BOT_Process(phost, lun);
 8013674:	f7ff fe84 	bl	8013380 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8013678:	4605      	mov	r5, r0
 801367a:	2800      	cmp	r0, #0
 801367c:	d1f8      	bne.n	8013670 <USBH_MSC_SCSI_Inquiry+0x60>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 801367e:	4601      	mov	r1, r0
 8013680:	2222      	movs	r2, #34	; 0x22
 8013682:	4630      	mov	r0, r6
 8013684:	f002 fc7d 	bl	8015f82 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8013688:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801368c:	781b      	ldrb	r3, [r3, #0]
 801368e:	f003 031f 	and.w	r3, r3, #31
 8013692:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8013694:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	095b      	lsrs	r3, r3, #5
 801369c:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 801369e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80136a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80136a6:	2b00      	cmp	r3, #0
          inquiry->RemovableMedia = 1U;
 80136a8:	bfba      	itte	lt
 80136aa:	2301      	movlt	r3, #1
 80136ac:	70b3      	strblt	r3, [r6, #2]
          inquiry->RemovableMedia = 0U;
 80136ae:	70b5      	strbge	r5, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80136b0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80136b4:	f852 3f08 	ldr.w	r3, [r2, #8]!
 80136b8:	f8c6 3003 	str.w	r3, [r6, #3]
 80136bc:	6853      	ldr	r3, [r2, #4]
 80136be:	f8c6 3007 	str.w	r3, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80136c2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80136c6:	3310      	adds	r3, #16
 80136c8:	f106 020c 	add.w	r2, r6, #12
 80136cc:	f103 0110 	add.w	r1, r3, #16
 80136d0:	f853 0b04 	ldr.w	r0, [r3], #4
 80136d4:	f842 0b04 	str.w	r0, [r2], #4
 80136d8:	428b      	cmp	r3, r1
 80136da:	d1f9      	bne.n	80136d0 <USBH_MSC_SCSI_Inquiry+0xc0>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80136dc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80136e0:	6a1b      	ldr	r3, [r3, #32]
 80136e2:	f8c6 301d 	str.w	r3, [r6, #29]
 80136e6:	e7c3      	b.n	8013670 <USBH_MSC_SCSI_Inquiry+0x60>

080136e8 <USBH_MSC_SCSI_RequestSense>:
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80136e8:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 80136ec:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80136ee:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80136f0:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80136f4:	2b01      	cmp	r3, #1
{
 80136f6:	460e      	mov	r6, r1
 80136f8:	4615      	mov	r5, r2
  switch (MSC_Handle->hbot.cmd_state)
 80136fa:	d003      	beq.n	8013704 <USBH_MSC_SCSI_RequestSense+0x1c>
 80136fc:	2b02      	cmp	r3, #2
 80136fe:	d029      	beq.n	8013754 <USBH_MSC_SCSI_RequestSense+0x6c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8013700:	2002      	movs	r0, #2
 8013702:	e026      	b.n	8013752 <USBH_MSC_SCSI_RequestSense+0x6a>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8013704:	2280      	movs	r2, #128	; 0x80
 8013706:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801370a:	220a      	movs	r2, #10
 801370c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8013710:	2200      	movs	r2, #0
 8013712:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
 8013716:	f8c4 206d 	str.w	r2, [r4, #109]	; 0x6d
 801371a:	f8a4 2071 	strh.w	r2, [r4, #113]	; 0x71
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 801371e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8013722:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8013726:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68

      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801372a:	2202      	movs	r2, #2
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 801372c:	210e      	movs	r1, #14
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 801372e:	2003      	movs	r0, #3
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8013730:	0176      	lsls	r6, r6, #5
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8013732:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8013736:	f104 0210 	add.w	r2, r4, #16
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 801373a:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 801373e:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8013740:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8013744:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8013748:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 801374c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      error = USBH_BUSY;
 8013750:	4618      	mov	r0, r3
    default:
      break;
  }

  return error;
}
 8013752:	bd70      	pop	{r4, r5, r6, pc}
      error = USBH_MSC_BOT_Process(phost, lun);
 8013754:	f7ff fe14 	bl	8013380 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8013758:	2800      	cmp	r0, #0
 801375a:	d1fa      	bne.n	8013752 <USBH_MSC_SCSI_RequestSense+0x6a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 801375c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8013760:	789b      	ldrb	r3, [r3, #2]
 8013762:	f003 030f 	and.w	r3, r3, #15
 8013766:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8013768:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801376c:	7b1b      	ldrb	r3, [r3, #12]
 801376e:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8013770:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8013774:	7b5b      	ldrb	r3, [r3, #13]
 8013776:	70ab      	strb	r3, [r5, #2]
 8013778:	e7eb      	b.n	8013752 <USBH_MSC_SCSI_RequestSense+0x6a>

0801377a <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 801377a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801377e:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013780:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8013784:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013786:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8013788:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 801378c:	2d01      	cmp	r5, #1
{
 801378e:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 8013790:	d003      	beq.n	801379a <USBH_MSC_SCSI_Write+0x20>
 8013792:	2d02      	cmp	r5, #2
 8013794:	d031      	beq.n	80137fa <USBH_MSC_SCSI_Write+0x80>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8013796:	2002      	movs	r0, #2
 8013798:	e02d      	b.n	80137f6 <USBH_MSC_SCSI_Write+0x7c>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 801379a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801379e:	230a      	movs	r3, #10
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80137a0:	437a      	muls	r2, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80137a2:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80137a4:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80137a6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80137aa:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80137ae:	2210      	movs	r2, #16
 80137b0:	f104 0063 	add.w	r0, r4, #99	; 0x63
 80137b4:	f002 fbe5 	bl	8015f82 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80137b8:	232a      	movs	r3, #42	; 0x2a
 80137ba:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

      /*logical block address*/
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80137be:	f3c6 6307 	ubfx	r3, r6, #24, #8
 80137c2:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80137c6:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80137ca:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80137ce:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80137d2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);


      /*Transfer length */
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80137d6:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80137da:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;


      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80137de:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80137e0:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80137e4:	f884 706b 	strb.w	r7, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80137e8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80137ec:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80137f0:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      error = USBH_BUSY;
 80137f4:	4628      	mov	r0, r5
    default:
      break;
  }

  return error;
}
 80137f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 80137fe:	f7ff bdbf 	b.w	8013380 <USBH_MSC_BOT_Process>

08013802 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8013802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013806:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8013808:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 801380c:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801380e:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8013810:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8013814:	2d01      	cmp	r5, #1
{
 8013816:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 8013818:	d003      	beq.n	8013822 <USBH_MSC_SCSI_Read+0x20>
 801381a:	2d02      	cmp	r5, #2
 801381c:	d032      	beq.n	8013884 <USBH_MSC_SCSI_Read+0x82>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 801381e:	2002      	movs	r0, #2
 8013820:	e02e      	b.n	8013880 <USBH_MSC_SCSI_Read+0x7e>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8013822:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8013826:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8013828:	437a      	muls	r2, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801382a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801382e:	230a      	movs	r3, #10
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8013830:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8013832:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8013836:	2210      	movs	r2, #16
 8013838:	2100      	movs	r1, #0
 801383a:	f104 0063 	add.w	r0, r4, #99	; 0x63
 801383e:	f002 fba0 	bl	8015f82 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8013842:	2328      	movs	r3, #40	; 0x28
 8013844:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

      /*logical block address*/
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8013848:	f3c6 6307 	ubfx	r3, r6, #24, #8
 801384c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8013850:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8013854:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8013858:	f3c6 2307 	ubfx	r3, r6, #8, #8
 801385c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);


      /*Transfer length */
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8013860:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8013864:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;


      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8013868:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 801386a:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 801386e:	f884 706b 	strb.w	r7, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8013872:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8013876:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 801387a:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      error = USBH_BUSY;
 801387e:	4628      	mov	r0, r5
    default:
      break;
  }

  return error;
}
 8013880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8013888:	f7ff bd7a 	b.w	8013380 <USBH_MSC_BOT_Process>

0801388c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 801388c:	f500 7361 	add.w	r3, r0, #900	; 0x384
 8013890:	f500 7270 	add.w	r2, r0, #960	; 0x3c0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8013894:	2100      	movs	r1, #0
 8013896:	f843 1b04 	str.w	r1, [r3], #4
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801389a:	4293      	cmp	r3, r2
 801389c:	d1fb      	bne.n	8013896 <DeInitStateMachine+0xa>
 801389e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80138a2:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 80138a6:	2300      	movs	r3, #0
 80138a8:	f802 3b01 	strb.w	r3, [r2], #1
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80138ac:	4291      	cmp	r1, r2
 80138ae:	d1fb      	bne.n	80138a8 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80138b0:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
 80138b2:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80138b4:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 80138b6:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 80138b8:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80138bc:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
  phost->Control.errorcount = 0U;
 80138be:	7643      	strb	r3, [r0, #25]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80138c0:	2240      	movs	r2, #64	; 0x40

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80138c2:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80138c6:	7182      	strb	r2, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80138c8:	f8c0 331c 	str.w	r3, [r0, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
 80138cc:	2000      	movs	r0, #0
 80138ce:	4770      	bx	lr

080138d0 <USBH_Init>:
{
 80138d0:	b570      	push	{r4, r5, r6, lr}
 80138d2:	460e      	mov	r6, r1
  if (phost == NULL)
 80138d4:	4604      	mov	r4, r0
 80138d6:	b1c0      	cbz	r0, 801390a <USBH_Init+0x3a>
  phost->pActiveClass = NULL;
 80138d8:	2500      	movs	r5, #0
  phost->id = id;
 80138da:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 80138de:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80138e2:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  DeInitStateMachine(phost);
 80138e6:	f7ff ffd1 	bl	801388c <DeInitStateMachine>
  phost->device.is_connected = 0U;
 80138ea:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80138ee:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 80138f2:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80138f6:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 80138fa:	b10e      	cbz	r6, 8013900 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 80138fc:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  USBH_LL_Init(phost);
 8013900:	4620      	mov	r0, r4
 8013902:	f002 fa15 	bl	8015d30 <USBH_LL_Init>
  return USBH_OK;
 8013906:	2000      	movs	r0, #0
}
 8013908:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 801390a:	2002      	movs	r0, #2
 801390c:	e7fc      	b.n	8013908 <USBH_Init+0x38>

0801390e <USBH_DeInit>:
{
 801390e:	b510      	push	{r4, lr}
 8013910:	4604      	mov	r4, r0
  DeInitStateMachine(phost);
 8013912:	f7ff ffbb 	bl	801388c <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 8013916:	2300      	movs	r3, #0
  phost->device.is_connected = 0U;
 8013918:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 801391c:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 8013920:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  phost->device.EnumCnt = 0U;
 8013924:	f8a4 331e 	strh.w	r3, [r4, #798]	; 0x31e
  phost->device.is_ReEnumerated = 0U;
 8013928:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  if (phost->pData != NULL)
 801392c:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8013930:	b113      	cbz	r3, 8013938 <USBH_DeInit+0x2a>
    USBH_LL_Stop(phost);
 8013932:	4620      	mov	r0, r4
 8013934:	f002 fa34 	bl	8015da0 <USBH_LL_Stop>
}
 8013938:	2000      	movs	r0, #0
 801393a:	bd10      	pop	{r4, pc}

0801393c <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 801393c:	b149      	cbz	r1, 8013952 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801393e:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8013942:	b933      	cbnz	r3, 8013952 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8013944:	2201      	movs	r2, #1
 8013946:	f8c0 2380 	str.w	r2, [r0, #896]	; 0x380
 801394a:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
      status = USBH_OK;
 801394e:	4618      	mov	r0, r3
 8013950:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8013952:	2002      	movs	r0, #2
  }

  return status;
}
 8013954:	4770      	bx	lr

08013956 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8013956:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 801395a:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 801395c:	bf86      	itte	hi
 801395e:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8013962:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8013964:	2002      	movls	r0, #2
  }

  return status;
}
 8013966:	4770      	bx	lr

08013968 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8013968:	b570      	push	{r4, r5, r6, lr}
 801396a:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801396c:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
 8013970:	428e      	cmp	r6, r1
 8013972:	b2e5      	uxtb	r5, r4
 8013974:	d001      	beq.n	801397a <USBH_FindInterface+0x12>
 8013976:	29ff      	cmp	r1, #255	; 0xff
 8013978:	d10b      	bne.n	8013992 <USBH_FindInterface+0x2a>
 801397a:	f890 6348 	ldrb.w	r6, [r0, #840]	; 0x348
 801397e:	4296      	cmp	r6, r2
 8013980:	d001      	beq.n	8013986 <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013982:	2aff      	cmp	r2, #255	; 0xff
 8013984:	d105      	bne.n	8013992 <USBH_FindInterface+0x2a>
 8013986:	f890 6349 	ldrb.w	r6, [r0, #841]	; 0x349
 801398a:	429e      	cmp	r6, r3
 801398c:	d004      	beq.n	8013998 <USBH_FindInterface+0x30>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801398e:	2bff      	cmp	r3, #255	; 0xff
 8013990:	d002      	beq.n	8013998 <USBH_FindInterface+0x30>
 8013992:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013994:	b114      	cbz	r4, 801399c <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8013996:	25ff      	movs	r5, #255	; 0xff
}
 8013998:	4628      	mov	r0, r5
 801399a:	bd70      	pop	{r4, r5, r6, pc}
 801399c:	2401      	movs	r4, #1
 801399e:	e7e5      	b.n	801396c <USBH_FindInterface+0x4>

080139a0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80139a0:	b510      	push	{r4, lr}
 80139a2:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80139a4:	f002 f9ee 	bl	8015d84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80139a8:	2101      	movs	r1, #1
 80139aa:	4620      	mov	r0, r4
 80139ac:	f002 fa6a 	bl	8015e84 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 80139b0:	2000      	movs	r0, #0
 80139b2:	bd10      	pop	{r4, pc}

080139b4 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Stop(USBH_HandleTypeDef *phost)
{
 80139b4:	b510      	push	{r4, lr}
  /* DeActivate VBUS on the port */
  USBH_LL_DriverVBUS(phost, FALSE);
 80139b6:	2100      	movs	r1, #0
{
 80139b8:	4604      	mov	r4, r0
  USBH_LL_DriverVBUS(phost, FALSE);
 80139ba:	f002 fa63 	bl	8015e84 <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  USBH_LL_Stop(phost);
 80139be:	4620      	mov	r0, r4
 80139c0:	f002 f9ee 	bl	8015da0 <USBH_LL_Stop>

  /* Free Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80139c4:	7921      	ldrb	r1, [r4, #4]
 80139c6:	4620      	mov	r0, r4
 80139c8:	f000 fcb6 	bl	8014338 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80139cc:	7961      	ldrb	r1, [r4, #5]
 80139ce:	4620      	mov	r0, r4
 80139d0:	f000 fcb2 	bl	8014338 <USBH_FreePipe>

  return USBH_OK;
}
 80139d4:	2000      	movs	r0, #0
 80139d6:	bd10      	pop	{r4, pc}

080139d8 <USBH_ReEnumerate>:
  *         Perform a new Enumeration phase.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ReEnumerate(USBH_HandleTypeDef *phost)
{
 80139d8:	b538      	push	{r3, r4, r5, lr}
  if (USBH_IsPortEnabled(phost))
 80139da:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
{
 80139de:	4604      	mov	r4, r0
  if (USBH_IsPortEnabled(phost))
 80139e0:	b133      	cbz	r3, 80139f0 <USBH_ReEnumerate+0x18>
  {
    phost->device.is_ReEnumerated = 1U;
 80139e2:	2501      	movs	r5, #1
 80139e4:	f880 5322 	strb.w	r5, [r0, #802]	; 0x322

    /* Stop Host */
    USBH_Stop(phost);
 80139e8:	f7ff ffe4 	bl	80139b4 <USBH_Stop>

    phost->device.is_disconnected = 1U;
 80139ec:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80139f0:	2000      	movs	r0, #0
 80139f2:	bd38      	pop	{r3, r4, r5, pc}

080139f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80139f4:	b570      	push	{r4, r5, r6, lr}
 80139f6:	b086      	sub	sp, #24
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80139f8:	2302      	movs	r3, #2
 80139fa:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80139fe:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8013a02:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8013a04:	bf04      	itt	eq
 8013a06:	2303      	moveq	r3, #3
 8013a08:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 8013a0a:	7803      	ldrb	r3, [r0, #0]
{
 8013a0c:	4604      	mov	r4, r0
  switch (phost->gState)
 8013a0e:	2b0b      	cmp	r3, #11
 8013a10:	d81d      	bhi.n	8013a4e <USBH_Process+0x5a>
 8013a12:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013a16:	000c      	.short	0x000c
 8013a18:	0041001f 	.word	0x0041001f
 8013a1c:	001c019b 	.word	0x001c019b
 8013a20:	017f0076 	.word	0x017f0076
 8013a24:	0147013f 	.word	0x0147013f
 8013a28:	015c0150 	.word	0x015c0150
 8013a2c:	0193      	.short	0x0193
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8013a2e:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 8013a32:	b163      	cbz	r3, 8013a4e <USBH_Process+0x5a>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8013a34:	2301      	movs	r3, #1
 8013a36:	7003      	strb	r3, [r0, #0]
        USBH_Delay(200U);
 8013a38:	20c8      	movs	r0, #200	; 0xc8
 8013a3a:	f002 fa4c 	bl	8015ed6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8013a3e:	4620      	mov	r0, r4
 8013a40:	f002 f9ca 	bl	8015dd8 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8013a44:	2300      	movs	r3, #0
 8013a46:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8013a4a:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 8013a4e:	2000      	movs	r0, #0
 8013a50:	b006      	add	sp, #24
 8013a52:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
 8013a54:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
 8013a58:	2b01      	cmp	r3, #1
 8013a5a:	d105      	bne.n	8013a68 <USBH_Process+0x74>
        phost->device.RstCnt = 0U;
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8013a62:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
 8013a64:	7023      	strb	r3, [r4, #0]
 8013a66:	e7f2      	b.n	8013a4e <USBH_Process+0x5a>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8013a68:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8013a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013a70:	d90b      	bls.n	8013a8a <USBH_Process+0x96>
          phost->device.RstCnt++;
 8013a72:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8013a76:	3301      	adds	r3, #1
 8013a78:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 8013a7a:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 8013a7c:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8013a80:	d901      	bls.n	8013a86 <USBH_Process+0x92>
        phost->gState = HOST_ABORT_STATE;
 8013a82:	230d      	movs	r3, #13
 8013a84:	e7ee      	b.n	8013a64 <USBH_Process+0x70>
            phost->gState = HOST_IDLE;
 8013a86:	2300      	movs	r3, #0
 8013a88:	e7ec      	b.n	8013a64 <USBH_Process+0x70>
          phost->Timeout += 10U;
 8013a8a:	330a      	adds	r3, #10
 8013a8c:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
          USBH_Delay(10U);
 8013a90:	200a      	movs	r0, #10
 8013a92:	f002 fa20 	bl	8015ed6 <USBH_Delay>
 8013a96:	e7da      	b.n	8013a4e <USBH_Process+0x5a>
      if (phost->pUser != NULL)
 8013a98:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8013a9c:	b10b      	cbz	r3, 8013aa2 <USBH_Process+0xae>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8013a9e:	2104      	movs	r1, #4
 8013aa0:	4798      	blx	r3
      USBH_Delay(100U);
 8013aa2:	2064      	movs	r0, #100	; 0x64
 8013aa4:	f002 fa17 	bl	8015ed6 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	f002 f987 	bl	8015dbc <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 8013aae:	2305      	movs	r3, #5
 8013ab0:	7023      	strb	r3, [r4, #0]
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8013ab2:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013ab6:	2100      	movs	r1, #0
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f000 fc25 	bl	8014308 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013abe:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013ac0:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	f000 fc20 	bl	8014308 <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013ac8:	79a2      	ldrb	r2, [r4, #6]
 8013aca:	9202      	str	r2, [sp, #8]
 8013acc:	2500      	movs	r5, #0
 8013ace:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013ad2:	7120      	strb	r0, [r4, #4]
 8013ad4:	4601      	mov	r1, r0
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013ad6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8013ada:	9200      	str	r2, [sp, #0]
 8013adc:	9501      	str	r5, [sp, #4]
 8013ade:	2280      	movs	r2, #128	; 0x80
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	f000 fbfd 	bl	80142e0 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013ae6:	79a2      	ldrb	r2, [r4, #6]
 8013ae8:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8013aec:	7961      	ldrb	r1, [r4, #5]
 8013aee:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8013af2:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8013af6:	9200      	str	r2, [sp, #0]
 8013af8:	4620      	mov	r0, r4
 8013afa:	462a      	mov	r2, r5
 8013afc:	f000 fbf0 	bl	80142e0 <USBH_OpenPipe>
      break;
 8013b00:	e7a5      	b.n	8013a4e <USBH_Process+0x5a>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 8013b02:	7843      	ldrb	r3, [r0, #1]
 8013b04:	2b07      	cmp	r3, #7
 8013b06:	d82b      	bhi.n	8013b60 <USBH_Process+0x16c>
 8013b08:	e8df f003 	tbb	[pc, r3]
 8013b0c:	64484104 	.word	0x64484104
 8013b10:	a294866a 	.word	0xa294866a
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013b14:	2108      	movs	r1, #8
 8013b16:	f000 fa54 	bl	8013fc2 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8013b1a:	4606      	mov	r6, r0
 8013b1c:	b9f0      	cbnz	r0, 8013b5c <USBH_Process+0x168>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8013b1e:	f894 232d 	ldrb.w	r2, [r4, #813]	; 0x32d
 8013b22:	71a2      	strb	r2, [r4, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013b24:	2501      	movs	r5, #1

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013b26:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8013b2a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8013b2e:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8013b32:	7921      	ldrb	r1, [r4, #4]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013b34:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013b36:	9200      	str	r2, [sp, #0]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013b38:	2280      	movs	r2, #128	; 0x80
 8013b3a:	4620      	mov	r0, r4
 8013b3c:	f000 fbd0 	bl	80142e0 <USBH_OpenPipe>
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013b40:	79a2      	ldrb	r2, [r4, #6]
 8013b42:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8013b46:	7961      	ldrb	r1, [r4, #5]
 8013b48:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8013b4c:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8013b50:	9200      	str	r2, [sp, #0]
 8013b52:	4620      	mov	r0, r4
 8013b54:	4632      	mov	r2, r6
 8013b56:	f000 fbc3 	bl	80142e0 <USBH_OpenPipe>
 8013b5a:	e001      	b.n	8013b60 <USBH_Process+0x16c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013b5c:	2803      	cmp	r0, #3
 8013b5e:	d001      	beq.n	8013b64 <USBH_Process+0x170>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013b60:	2301      	movs	r3, #1
 8013b62:	e079      	b.n	8013c58 <USBH_Process+0x264>
        phost->device.EnumCnt++;
 8013b64:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8013b68:	3301      	adds	r3, #1
 8013b6a:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8013b6c:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8013b6e:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013b72:	d901      	bls.n	8013b78 <USBH_Process+0x184>
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 8013b74:	230d      	movs	r3, #13
 8013b76:	e008      	b.n	8013b8a <USBH_Process+0x196>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013b78:	7961      	ldrb	r1, [r4, #5]
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f000 fbdc 	bl	8014338 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013b80:	7921      	ldrb	r1, [r4, #4]
 8013b82:	4620      	mov	r0, r4
 8013b84:	f000 fbd8 	bl	8014338 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8013b88:	2300      	movs	r3, #0
          USBH_FreePipe(phost, phost->Control.pipe_out);
          USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 8013b8a:	7023      	strb	r3, [r4, #0]
 8013b8c:	e7e8      	b.n	8013b60 <USBH_Process+0x16c>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8013b8e:	2112      	movs	r1, #18
 8013b90:	f000 fa17 	bl	8013fc2 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8013b94:	bb58      	cbnz	r0, 8013bee <USBH_Process+0x1fa>
        phost->EnumState = ENUM_SET_ADDR;
 8013b96:	2302      	movs	r3, #2
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013b98:	7063      	strb	r3, [r4, #1]
 8013b9a:	e7e1      	b.n	8013b60 <USBH_Process+0x16c>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8013b9c:	2101      	movs	r1, #1
 8013b9e:	f000 fb0c 	bl	80141ba <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8013ba2:	4606      	mov	r6, r0
 8013ba4:	b980      	cbnz	r0, 8013bc8 <USBH_Process+0x1d4>
        USBH_Delay(2U);
 8013ba6:	2002      	movs	r0, #2
 8013ba8:	f002 f995 	bl	8015ed6 <USBH_Delay>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8013bac:	2303      	movs	r3, #3
 8013bae:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013bb0:	79a3      	ldrb	r3, [r4, #6]
 8013bb2:	7921      	ldrb	r1, [r4, #4]
        phost->device.address = USBH_DEVICE_ADDRESS;
 8013bb4:	2501      	movs	r5, #1
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013bb6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8013bba:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8013bbe:	9300      	str	r3, [sp, #0]
        phost->device.address = USBH_DEVICE_ADDRESS;
 8013bc0:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013bc4:	462b      	mov	r3, r5
 8013bc6:	e7b7      	b.n	8013b38 <USBH_Process+0x144>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013bc8:	2803      	cmp	r0, #3
 8013bca:	d1c9      	bne.n	8013b60 <USBH_Process+0x16c>
        phost->gState = HOST_ABORT_STATE;
 8013bcc:	230d      	movs	r3, #13
 8013bce:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	e7e1      	b.n	8013b98 <USBH_Process+0x1a4>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8013bd4:	2109      	movs	r1, #9
 8013bd6:	f000 fa3c 	bl	8014052 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8013bda:	b940      	cbnz	r0, 8013bee <USBH_Process+0x1fa>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8013bdc:	2304      	movs	r3, #4
 8013bde:	e7db      	b.n	8013b98 <USBH_Process+0x1a4>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8013be0:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 8013be4:	f000 fa35 	bl	8014052 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8013be8:	b908      	cbnz	r0, 8013bee <USBH_Process+0x1fa>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8013bea:	2305      	movs	r3, #5
 8013bec:	e7d4      	b.n	8013b98 <USBH_Process+0x1a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013bee:	2803      	cmp	r0, #3
 8013bf0:	d1b6      	bne.n	8013b60 <USBH_Process+0x16c>
        phost->device.EnumCnt++;
 8013bf2:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8013bfa:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8013bfc:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013c00:	d8b8      	bhi.n	8013b74 <USBH_Process+0x180>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013c02:	7961      	ldrb	r1, [r4, #5]
 8013c04:	4620      	mov	r0, r4
 8013c06:	f000 fb97 	bl	8014338 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013c0a:	7921      	ldrb	r1, [r4, #4]
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	f000 fb93 	bl	8014338 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013c12:	2300      	movs	r3, #0
 8013c14:	7063      	strb	r3, [r4, #1]
 8013c16:	e7b8      	b.n	8013b8a <USBH_Process+0x196>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8013c18:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 8013c1c:	b129      	cbz	r1, 8013c2a <USBH_Process+0x236>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013c1e:	23ff      	movs	r3, #255	; 0xff
 8013c20:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8013c24:	f000 faa2 	bl	801416c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8013c28:	b908      	cbnz	r0, 8013c2e <USBH_Process+0x23a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013c2a:	2306      	movs	r3, #6
 8013c2c:	e7b4      	b.n	8013b98 <USBH_Process+0x1a4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013c2e:	2803      	cmp	r0, #3
 8013c30:	d196      	bne.n	8013b60 <USBH_Process+0x16c>
 8013c32:	e7fa      	b.n	8013c2a <USBH_Process+0x236>
      if (phost->device.DevDesc.iProduct != 0U)
 8013c34:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 8013c38:	b129      	cbz	r1, 8013c46 <USBH_Process+0x252>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013c3a:	23ff      	movs	r3, #255	; 0xff
 8013c3c:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8013c40:	f000 fa94 	bl	801416c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8013c44:	b908      	cbnz	r0, 8013c4a <USBH_Process+0x256>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013c46:	2307      	movs	r3, #7
 8013c48:	e7a6      	b.n	8013b98 <USBH_Process+0x1a4>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013c4a:	2803      	cmp	r0, #3
 8013c4c:	d188      	bne.n	8013b60 <USBH_Process+0x16c>
 8013c4e:	e7fa      	b.n	8013c46 <USBH_Process+0x252>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8013c50:	f890 1336 	ldrb.w	r1, [r0, #822]	; 0x336
 8013c54:	b989      	cbnz	r1, 8013c7a <USBH_Process+0x286>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 8013c56:	2300      	movs	r3, #0
      status = USBH_HandleEnum(phost);
 8013c58:	f88d 3017 	strb.w	r3, [sp, #23]
      if (status == USBH_OK)
 8013c5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8013c60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	f47f aef2 	bne.w	8013a4e <USBH_Process+0x5a>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8013c6a:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
        phost->device.current_interface = 0U;
 8013c6e:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	d10c      	bne.n	8013c90 <USBH_Process+0x29c>
        phost->gState = HOST_SET_CONFIGURATION;
 8013c76:	2308      	movs	r3, #8
 8013c78:	e6f4      	b.n	8013a64 <USBH_Process+0x70>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013c7a:	23ff      	movs	r3, #255	; 0xff
 8013c7c:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8013c80:	f000 fa74 	bl	801416c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8013c84:	2800      	cmp	r0, #0
 8013c86:	d0e6      	beq.n	8013c56 <USBH_Process+0x262>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013c88:	1ec3      	subs	r3, r0, #3
 8013c8a:	bf18      	it	ne
 8013c8c:	2301      	movne	r3, #1
 8013c8e:	e7e3      	b.n	8013c58 <USBH_Process+0x264>
          phost->gState = HOST_INPUT;
 8013c90:	2307      	movs	r3, #7
 8013c92:	e6e7      	b.n	8013a64 <USBH_Process+0x70>
      if (phost->pUser != NULL)
 8013c94:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	f43f aed8 	beq.w	8013a4e <USBH_Process+0x5a>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8013c9e:	2101      	movs	r1, #1
 8013ca0:	4798      	blx	r3
 8013ca2:	e7e8      	b.n	8013c76 <USBH_Process+0x282>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8013ca4:	f890 133d 	ldrb.w	r1, [r0, #829]	; 0x33d
 8013ca8:	f000 fa94 	bl	80141d4 <USBH_SetCfg>
 8013cac:	2800      	cmp	r0, #0
 8013cae:	f47f aece 	bne.w	8013a4e <USBH_Process+0x5a>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8013cb2:	2309      	movs	r3, #9
 8013cb4:	e6d6      	b.n	8013a64 <USBH_Process+0x70>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8013cb6:	f890 333f 	ldrb.w	r3, [r0, #831]	; 0x33f
 8013cba:	069b      	lsls	r3, r3, #26
 8013cbc:	d505      	bpl.n	8013cca <USBH_Process+0x2d6>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8013cbe:	2101      	movs	r1, #1
 8013cc0:	f000 fa95 	bl	80141ee <USBH_SetFeature>
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	f47f aec2 	bne.w	8013a4e <USBH_Process+0x5a>
        phost->gState = HOST_CHECK_CLASS;
 8013cca:	230a      	movs	r3, #10
 8013ccc:	e6ca      	b.n	8013a64 <USBH_Process+0x70>
      if (phost->ClassNumber == 0U)
 8013cce:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	f43f aebb 	beq.w	8013a4e <USBH_Process+0x5a>
        phost->pActiveClass = NULL;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8013cde:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8013ce2:	f890 2347 	ldrb.w	r2, [r0, #839]	; 0x347
 8013ce6:	7919      	ldrb	r1, [r3, #4]
 8013ce8:	4291      	cmp	r1, r2
            phost->pActiveClass = phost->pClass[idx];
 8013cea:	bf08      	it	eq
 8013cec:	f8c0 337c 	streq.w	r3, [r0, #892]	; 0x37c
        if (phost->pActiveClass != NULL)
 8013cf0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	f43f aec4 	beq.w	8013a82 <USBH_Process+0x8e>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8013cfa:	689b      	ldr	r3, [r3, #8]
 8013cfc:	4798      	blx	r3
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	f47f aebf 	bne.w	8013a82 <USBH_Process+0x8e>
            phost->gState = HOST_CLASS_REQUEST;
 8013d04:	2306      	movs	r3, #6
 8013d06:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8013d08:	2103      	movs	r1, #3
 8013d0a:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8013d0e:	4620      	mov	r0, r4
 8013d10:	4798      	blx	r3
 8013d12:	e69c      	b.n	8013a4e <USBH_Process+0x5a>
      if (phost->pActiveClass != NULL)
 8013d14:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	f43f aeb2 	beq.w	8013a82 <USBH_Process+0x8e>
        status = phost->pActiveClass->Requests(phost);
 8013d1e:	691b      	ldr	r3, [r3, #16]
 8013d20:	4798      	blx	r3
 8013d22:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8013d26:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8013d2a:	b90b      	cbnz	r3, 8013d30 <USBH_Process+0x33c>
          phost->gState = HOST_CLASS;
 8013d2c:	230b      	movs	r3, #11
 8013d2e:	e699      	b.n	8013a64 <USBH_Process+0x70>
        else if (status == USBH_FAIL)
 8013d30:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8013d34:	2b02      	cmp	r3, #2
 8013d36:	f47f ae8a 	bne.w	8013a4e <USBH_Process+0x5a>
 8013d3a:	e6a2      	b.n	8013a82 <USBH_Process+0x8e>
      if (phost->pActiveClass != NULL)
 8013d3c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	f43f ae84 	beq.w	8013a4e <USBH_Process+0x5a>
        phost->pActiveClass->BgndProcess(phost);
 8013d46:	695b      	ldr	r3, [r3, #20]
 8013d48:	4798      	blx	r3
 8013d4a:	e680      	b.n	8013a4e <USBH_Process+0x5a>
      phost->device.is_disconnected = 0U;
 8013d4c:	2500      	movs	r5, #0
 8013d4e:	f880 5321 	strb.w	r5, [r0, #801]	; 0x321
      DeInitStateMachine(phost);
 8013d52:	f7ff fd9b 	bl	801388c <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 8013d56:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8013d5a:	b123      	cbz	r3, 8013d66 <USBH_Process+0x372>
        phost->pActiveClass->DeInit(phost);
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	4620      	mov	r0, r4
 8013d60:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8013d62:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 8013d66:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8013d6a:	b113      	cbz	r3, 8013d72 <USBH_Process+0x37e>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8013d6c:	2105      	movs	r1, #5
 8013d6e:	4620      	mov	r0, r4
 8013d70:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8013d72:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8013d76:	2b01      	cmp	r3, #1
 8013d78:	d106      	bne.n	8013d88 <USBH_Process+0x394>
        phost->device.is_ReEnumerated = 0U;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        USBH_Start(phost);
 8013d80:	4620      	mov	r0, r4
 8013d82:	f7ff fe0d 	bl	80139a0 <USBH_Start>
 8013d86:	e662      	b.n	8013a4e <USBH_Process+0x5a>
        USBH_LL_Start(phost);
 8013d88:	4620      	mov	r0, r4
 8013d8a:	f001 fffb 	bl	8015d84 <USBH_LL_Start>
 8013d8e:	e65e      	b.n	8013a4e <USBH_Process+0x5a>

08013d90 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8013d90:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8013d94:	4770      	bx	lr

08013d96 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 8013d96:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 8013d9a:	3201      	adds	r2, #1
 8013d9c:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8013da0:	7802      	ldrb	r2, [r0, #0]
 8013da2:	2a0b      	cmp	r2, #11
 8013da4:	d104      	bne.n	8013db0 <USBH_LL_IncTimer+0x1a>
 8013da6:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8013daa:	b10b      	cbz	r3, 8013db0 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013dac:	699b      	ldr	r3, [r3, #24]
 8013dae:	4718      	bx	r3
}
 8013db0:	4770      	bx	lr

08013db2 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8013db2:	2301      	movs	r3, #1
 8013db4:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8013db8:	4770      	bx	lr

08013dba <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8013dc0:	4770      	bx	lr

08013dc2 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	f880 3320 	strb.w	r3, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8013dce:	f880 3322 	strb.w	r3, [r0, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	4770      	bx	lr

08013dd6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8013dd6:	b538      	push	{r3, r4, r5, lr}
 8013dd8:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8013dda:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 8013ddc:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 8013dde:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 8013de2:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 8013de6:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320

  /* Stop Host */
  USBH_LL_Stop(phost);
 8013dea:	f001 ffd9 	bl	8015da0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8013dee:	7921      	ldrb	r1, [r4, #4]
 8013df0:	4620      	mov	r0, r4
 8013df2:	f000 faa1 	bl	8014338 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8013df6:	7961      	ldrb	r1, [r4, #5]
 8013df8:	4620      	mov	r0, r4
 8013dfa:	f000 fa9d 	bl	8014338 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8013dfe:	4628      	mov	r0, r5
 8013e00:	bd38      	pop	{r3, r4, r5, pc}

08013e02 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013e02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e04:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8013e06:	7880      	ldrb	r0, [r0, #2]
 8013e08:	2801      	cmp	r0, #1
 8013e0a:	d003      	beq.n	8013e14 <USBH_CtlReq+0x12>
 8013e0c:	2802      	cmp	r0, #2
 8013e0e:	d008      	beq.n	8013e22 <USBH_CtlReq+0x20>
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
        {
          phost->Control.state = CTRL_ERROR;
 8013e10:	2001      	movs	r0, #1
  return status;
 8013e12:	e004      	b.n	8013e1e <USBH_CtlReq+0x1c>
      phost->RequestState = CMD_WAIT;
 8013e14:	2302      	movs	r3, #2
      phost->Control.buff = buff;
 8013e16:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 8013e18:	81a2      	strh	r2, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 8013e1a:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_WAIT;
 8013e1c:	70a3      	strb	r3, [r4, #2]
}
 8013e1e:	b003      	add	sp, #12
 8013e20:	bd30      	pop	{r4, r5, pc}
  switch (phost->Control.state)
 8013e22:	7e23      	ldrb	r3, [r4, #24]
 8013e24:	3b01      	subs	r3, #1
 8013e26:	2101      	movs	r1, #1
 8013e28:	2b0a      	cmp	r3, #10
 8013e2a:	d8f1      	bhi.n	8013e10 <USBH_CtlReq+0xe>
 8013e2c:	e8df f003 	tbb	[pc, r3]
 8013e30:	372c0f06 	.word	0x372c0f06
 8013e34:	6f644d41 	.word	0x6f644d41
 8013e38:	897d      	.short	0x897d
 8013e3a:	92          	.byte	0x92
 8013e3b:	00          	.byte	0x00
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013e3c:	7962      	ldrb	r2, [r4, #5]
 8013e3e:	f104 0110 	add.w	r1, r4, #16
 8013e42:	4620      	mov	r0, r4
 8013e44:	f000 f9ed 	bl	8014222 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 8013e48:	2302      	movs	r3, #2

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8013e4a:	7623      	strb	r3, [r4, #24]
 8013e4c:	e7e0      	b.n	8013e10 <USBH_CtlReq+0xe>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013e4e:	7961      	ldrb	r1, [r4, #5]
 8013e50:	4620      	mov	r0, r4
 8013e52:	f002 f813 	bl	8015e7c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013e56:	2801      	cmp	r0, #1
 8013e58:	d110      	bne.n	8013e7c <USBH_CtlReq+0x7a>
        if (phost->Control.setup.b.wLength.w != 0U)
 8013e5a:	8ae2      	ldrh	r2, [r4, #22]
 8013e5c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8013e60:	b132      	cbz	r2, 8013e70 <USBH_CtlReq+0x6e>
          if (direction == USB_D2H)
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	da02      	bge.n	8013e6c <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
 8013e66:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
 8013e68:	7623      	strb	r3, [r4, #24]
 8013e6a:	e7d8      	b.n	8013e1e <USBH_CtlReq+0x1c>
            phost->Control.state = CTRL_DATA_OUT;
 8013e6c:	2305      	movs	r3, #5
 8013e6e:	e7ec      	b.n	8013e4a <USBH_CtlReq+0x48>
          if (direction == USB_D2H)
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	da01      	bge.n	8013e78 <USBH_CtlReq+0x76>
        phost->Control.state = CTRL_STATUS_OUT;
 8013e74:	2309      	movs	r3, #9
 8013e76:	e7e8      	b.n	8013e4a <USBH_CtlReq+0x48>
            phost->Control.state = CTRL_STATUS_IN;
 8013e78:	2307      	movs	r3, #7
 8013e7a:	e7e6      	b.n	8013e4a <USBH_CtlReq+0x48>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8013e7c:	2804      	cmp	r0, #4
 8013e7e:	d001      	beq.n	8013e84 <USBH_CtlReq+0x82>
 8013e80:	2802      	cmp	r0, #2
 8013e82:	d1c5      	bne.n	8013e10 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8013e84:	230b      	movs	r3, #11
 8013e86:	e7e0      	b.n	8013e4a <USBH_CtlReq+0x48>
      phost->Control.timer = (uint16_t)phost->Timer;
 8013e88:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8013e8c:	81e3      	strh	r3, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8013e8e:	89a2      	ldrh	r2, [r4, #12]
 8013e90:	7923      	ldrb	r3, [r4, #4]
 8013e92:	68a1      	ldr	r1, [r4, #8]
 8013e94:	4620      	mov	r0, r4
 8013e96:	f000 f9ec 	bl	8014272 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8013e9a:	2304      	movs	r3, #4
 8013e9c:	e7d5      	b.n	8013e4a <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013e9e:	7921      	ldrb	r1, [r4, #4]
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	f001 ffeb 	bl	8015e7c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013ea6:	2801      	cmp	r0, #1
 8013ea8:	d0e4      	beq.n	8013e74 <USBH_CtlReq+0x72>
      if (URB_Status == USBH_URB_STALL)
 8013eaa:	2805      	cmp	r0, #5
 8013eac:	d015      	beq.n	8013eda <USBH_CtlReq+0xd8>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8013eae:	2804      	cmp	r0, #4
 8013eb0:	e7e7      	b.n	8013e82 <USBH_CtlReq+0x80>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8013eb2:	7963      	ldrb	r3, [r4, #5]
 8013eb4:	9100      	str	r1, [sp, #0]
 8013eb6:	89a2      	ldrh	r2, [r4, #12]
 8013eb8:	68a1      	ldr	r1, [r4, #8]
 8013eba:	4620      	mov	r0, r4
 8013ebc:	f000 f9c2 	bl	8014244 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8013ec0:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8013ec4:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8013ec6:	2306      	movs	r3, #6
 8013ec8:	e7bf      	b.n	8013e4a <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013eca:	7961      	ldrb	r1, [r4, #5]
 8013ecc:	4620      	mov	r0, r4
 8013ece:	f001 ffd5 	bl	8015e7c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013ed2:	2801      	cmp	r0, #1
 8013ed4:	d0d0      	beq.n	8013e78 <USBH_CtlReq+0x76>
      else if (URB_Status == USBH_URB_STALL)
 8013ed6:	2805      	cmp	r0, #5
 8013ed8:	d104      	bne.n	8013ee4 <USBH_CtlReq+0xe2>
        status = USBH_OK;
 8013eda:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 8013edc:	2301      	movs	r3, #1
 8013ede:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	e7c1      	b.n	8013e68 <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013ee4:	2802      	cmp	r0, #2
 8013ee6:	d0c1      	beq.n	8013e6c <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
 8013ee8:	2804      	cmp	r0, #4
 8013eea:	d191      	bne.n	8013e10 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8013eec:	230b      	movs	r3, #11
 8013eee:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	70a3      	strb	r3, [r4, #2]
      status = USBH_HandleControl(phost);
 8013ef4:	2002      	movs	r0, #2
 8013ef6:	e792      	b.n	8013e1e <USBH_CtlReq+0x1c>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8013ef8:	2200      	movs	r2, #0
 8013efa:	7923      	ldrb	r3, [r4, #4]
 8013efc:	4611      	mov	r1, r2
 8013efe:	4620      	mov	r0, r4
 8013f00:	f000 f9b7 	bl	8014272 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8013f04:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8013f08:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8013f0a:	2308      	movs	r3, #8
 8013f0c:	e79d      	b.n	8013e4a <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013f0e:	7921      	ldrb	r1, [r4, #4]
 8013f10:	4620      	mov	r0, r4
 8013f12:	f001 ffb3 	bl	8015e7c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013f16:	2801      	cmp	r0, #1
 8013f18:	d101      	bne.n	8013f1e <USBH_CtlReq+0x11c>
        status = USBH_OK;
 8013f1a:	2000      	movs	r0, #0
 8013f1c:	e7de      	b.n	8013edc <USBH_CtlReq+0xda>
      else if (URB_Status == USBH_URB_ERROR)
 8013f1e:	2804      	cmp	r0, #4
 8013f20:	d0b0      	beq.n	8013e84 <USBH_CtlReq+0x82>
        if (URB_Status == USBH_URB_STALL)
 8013f22:	2805      	cmp	r0, #5
 8013f24:	f47f af74 	bne.w	8013e10 <USBH_CtlReq+0xe>
 8013f28:	e7d7      	b.n	8013eda <USBH_CtlReq+0xd8>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	7963      	ldrb	r3, [r4, #5]
 8013f2e:	9100      	str	r1, [sp, #0]
 8013f30:	4620      	mov	r0, r4
 8013f32:	4611      	mov	r1, r2
 8013f34:	f000 f986 	bl	8014244 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8013f38:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8013f3c:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8013f3e:	230a      	movs	r3, #10
 8013f40:	e783      	b.n	8013e4a <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013f42:	7961      	ldrb	r1, [r4, #5]
 8013f44:	4620      	mov	r0, r4
 8013f46:	f001 ff99 	bl	8015e7c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8013f4a:	2801      	cmp	r0, #1
 8013f4c:	d0e5      	beq.n	8013f1a <USBH_CtlReq+0x118>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013f4e:	2802      	cmp	r0, #2
 8013f50:	d1ad      	bne.n	8013eae <USBH_CtlReq+0xac>
 8013f52:	e78f      	b.n	8013e74 <USBH_CtlReq+0x72>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8013f54:	7e63      	ldrb	r3, [r4, #25]
 8013f56:	3301      	adds	r3, #1
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	2b02      	cmp	r3, #2
 8013f5c:	7663      	strb	r3, [r4, #25]
 8013f5e:	d803      	bhi.n	8013f68 <USBH_CtlReq+0x166>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8013f60:	2001      	movs	r0, #1
 8013f62:	7620      	strb	r0, [r4, #24]
        phost->RequestState = CMD_SEND;
 8013f64:	70a0      	strb	r0, [r4, #2]
 8013f66:	e75a      	b.n	8013e1e <USBH_CtlReq+0x1c>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8013f68:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8013f6c:	2106      	movs	r1, #6
 8013f6e:	4620      	mov	r0, r4
        phost->Control.errorcount = 0U;
 8013f70:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8013f72:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8013f74:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 8013f76:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8013f78:	4620      	mov	r0, r4
 8013f7a:	f000 f9dd 	bl	8014338 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8013f7e:	7921      	ldrb	r1, [r4, #4]
 8013f80:	4620      	mov	r0, r4
 8013f82:	f000 f9d9 	bl	8014338 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 8013f86:	7025      	strb	r5, [r4, #0]
 8013f88:	e7b2      	b.n	8013ef0 <USBH_CtlReq+0xee>

08013f8a <USBH_GetDescriptor>:
{
 8013f8a:	b430      	push	{r4, r5}
  if (phost->RequestState == CMD_SEND)
 8013f8c:	7884      	ldrb	r4, [r0, #2]
{
 8013f8e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8013f92:	2c01      	cmp	r4, #1
 8013f94:	d110      	bne.n	8013fb8 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8013f96:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8013f9a:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8013f9c:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8013fa0:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8013fa4:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8013fa6:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8013faa:	bf0c      	ite	eq
 8013fac:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8013fb0:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8013fb2:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8013fb4:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8013fb6:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8013fb8:	462a      	mov	r2, r5
 8013fba:	4619      	mov	r1, r3
}
 8013fbc:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8013fbe:	f7ff bf20 	b.w	8013e02 <USBH_CtlReq>

08013fc2 <USBH_Get_DevDesc>:
{
 8013fc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
 8013fc4:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8013fc8:	460d      	mov	r5, r1
 8013fca:	9100      	str	r1, [sp, #0]
 8013fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013fd0:	2100      	movs	r1, #0
{
 8013fd2:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
 8013fd4:	f7ff ffd9 	bl	8013f8a <USBH_GetDescriptor>
 8013fd8:	bbc8      	cbnz	r0, 801404e <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8013fda:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8013fde:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8013fe2:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8013fe6:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 8013fea:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8013fee:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8013ff2:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8013ff6:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8013ffa:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8013ffe:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8014002:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8014006:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
  if (length > 8U)
 801400a:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 801400c:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8014010:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
  if (length > 8U)
 8014014:	d91b      	bls.n	801404e <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
 8014016:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 801401a:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 801401e:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8014022:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 8014026:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 801402a:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 801402e:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8014032:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8014036:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 801403a:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 801403e:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8014042:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8014046:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801404a:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
}
 801404e:	b003      	add	sp, #12
 8014050:	bd30      	pop	{r4, r5, pc}

08014052 <USBH_Get_CfgDesc>:
{
 8014052:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8014056:	f100 041c 	add.w	r4, r0, #28
{
 801405a:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801405c:	9100      	str	r1, [sp, #0]
 801405e:	4623      	mov	r3, r4
 8014060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014064:	2100      	movs	r1, #0
{
 8014066:	4605      	mov	r5, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8014068:	f7ff ff8f 	bl	8013f8a <USBH_GetDescriptor>
 801406c:	bb40      	cbnz	r0, 80140c0 <USBH_Get_CfgDesc+0x6e>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 801406e:	7f2b      	ldrb	r3, [r5, #28]
 8014070:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8014074:	7f6b      	ldrb	r3, [r5, #29]
 8014076:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 801407a:	f895 3020 	ldrb.w	r3, [r5, #32]
 801407e:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8014082:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8014086:	f885 333d 	strb.w	r3, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 801408a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 801408e:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8014092:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8014096:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 801409a:	f885 333f 	strb.w	r3, [r5, #831]	; 0x33f
  if (length > USB_CONFIGURATION_DESC_SIZE)
 801409e:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80140a0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80140a4:	f8a5 c33a 	strh.w	ip, [r5, #826]	; 0x33a
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80140a8:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80140ac:	d908      	bls.n	80140c0 <USBH_Get_CfgDesc+0x6e>
 80140ae:	462b      	mov	r3, r5
 80140b0:	4607      	mov	r7, r0
    ptr = USB_LEN_CFG_DESC;
 80140b2:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80140b4:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80140b8:	2f02      	cmp	r7, #2
 80140ba:	d001      	beq.n	80140c0 <USBH_Get_CfgDesc+0x6e>
 80140bc:	4594      	cmp	ip, r2
 80140be:	d802      	bhi.n	80140c6 <USBH_Get_CfgDesc+0x74>
}
 80140c0:	b003      	add	sp, #12
 80140c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80140c6:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80140c8:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80140ca:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80140cc:	7861      	ldrb	r1, [r4, #1]
 80140ce:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80140d0:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80140d2:	d1f1      	bne.n	80140b8 <USBH_Get_CfgDesc+0x66>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80140d4:	7821      	ldrb	r1, [r4, #0]
 80140d6:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80140da:	7861      	ldrb	r1, [r4, #1]
 80140dc:	f883 1343 	strb.w	r1, [r3, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80140e0:	78a1      	ldrb	r1, [r4, #2]
 80140e2:	f883 1344 	strb.w	r1, [r3, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80140e6:	78e1      	ldrb	r1, [r4, #3]
 80140e8:	f883 1345 	strb.w	r1, [r3, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80140ec:	7921      	ldrb	r1, [r4, #4]
 80140ee:	f883 1346 	strb.w	r1, [r3, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80140f2:	7961      	ldrb	r1, [r4, #5]
 80140f4:	f883 1347 	strb.w	r1, [r3, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80140f8:	79a1      	ldrb	r1, [r4, #6]
 80140fa:	f883 1348 	strb.w	r1, [r3, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80140fe:	79e1      	ldrb	r1, [r4, #7]
 8014100:	f883 1349 	strb.w	r1, [r3, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8014104:	7a21      	ldrb	r1, [r4, #8]
 8014106:	f883 134a 	strb.w	r1, [r3, #842]	; 0x34a
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801410a:	fb0e f807 	mul.w	r8, lr, r7
        ep_ix = 0U;
 801410e:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014110:	f893 6346 	ldrb.w	r6, [r3, #838]	; 0x346
 8014114:	428e      	cmp	r6, r1
 8014116:	d901      	bls.n	801411c <USBH_Get_CfgDesc+0xca>
 8014118:	4594      	cmp	ip, r2
 801411a:	d802      	bhi.n	8014122 <USBH_Get_CfgDesc+0xd0>
 801411c:	3701      	adds	r7, #1
 801411e:	331a      	adds	r3, #26
 8014120:	e7ca      	b.n	80140b8 <USBH_Get_CfgDesc+0x66>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8014122:	7826      	ldrb	r6, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8014124:	4434      	add	r4, r6
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8014126:	4432      	add	r2, r6
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8014128:	7866      	ldrb	r6, [r4, #1]
 801412a:	2e05      	cmp	r6, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801412c:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 801412e:	d1ef      	bne.n	8014110 <USBH_Get_CfgDesc+0xbe>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8014130:	1c4e      	adds	r6, r1, #1
 8014132:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
 8014136:	4429      	add	r1, r5
 8014138:	f894 9000 	ldrb.w	r9, [r4]
 801413c:	f881 9344 	strb.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8014140:	f894 9001 	ldrb.w	r9, [r4, #1]
 8014144:	f881 9345 	strb.w	r9, [r1, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8014148:	f894 9002 	ldrb.w	r9, [r4, #2]
 801414c:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8014150:	f894 9003 	ldrb.w	r9, [r4, #3]
 8014154:	f881 9347 	strb.w	r9, [r1, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8014158:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801415c:	f8a1 9348 	strh.w	r9, [r1, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8014160:	f894 9006 	ldrb.w	r9, [r4, #6]
 8014164:	f881 934a 	strb.w	r9, [r1, #842]	; 0x34a
            ep_ix++;
 8014168:	b2f1      	uxtb	r1, r6
 801416a:	e7d1      	b.n	8014110 <USBH_Get_CfgDesc+0xbe>

0801416c <USBH_Get_StringDesc>:
{
 801416c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
 801416e:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8014172:	4614      	mov	r4, r2
 8014174:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
 8014176:	9300      	str	r3, [sp, #0]
 8014178:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 801417c:	462b      	mov	r3, r5
 801417e:	2100      	movs	r1, #0
{
 8014180:	4606      	mov	r6, r0
  if ((status = USBH_GetDescriptor(phost,
 8014182:	f7ff ff02 	bl	8013f8a <USBH_GetDescriptor>
 8014186:	b978      	cbnz	r0, 80141a8 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8014188:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 801418c:	2b03      	cmp	r3, #3
 801418e:	d10b      	bne.n	80141a8 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8014190:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8014194:	3b02      	subs	r3, #2
 8014196:	42bb      	cmp	r3, r7
 8014198:	bf28      	it	cs
 801419a:	463b      	movcs	r3, r7
 801419c:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 801419e:	4602      	mov	r2, r0
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d803      	bhi.n	80141ac <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 80141a4:	2300      	movs	r3, #0
 80141a6:	7023      	strb	r3, [r4, #0]
}
 80141a8:	b003      	add	sp, #12
 80141aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80141ac:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 80141ae:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 80141b0:	7889      	ldrb	r1, [r1, #2]
 80141b2:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80141b6:	b292      	uxth	r2, r2
 80141b8:	e7f2      	b.n	80141a0 <USBH_Get_StringDesc+0x34>

080141ba <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 80141ba:	7883      	ldrb	r3, [r0, #2]
 80141bc:	2b01      	cmp	r3, #1
 80141be:	d105      	bne.n	80141cc <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80141c0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80141c4:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80141c6:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80141c8:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80141ca:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 80141cc:	2200      	movs	r2, #0
 80141ce:	4611      	mov	r1, r2
 80141d0:	f7ff be17 	b.w	8013e02 <USBH_CtlReq>

080141d4 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 80141d4:	7883      	ldrb	r3, [r0, #2]
 80141d6:	2b01      	cmp	r3, #1
 80141d8:	d105      	bne.n	80141e6 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80141da:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80141de:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80141e0:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 80141e2:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80141e4:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 80141e6:	2200      	movs	r2, #0
 80141e8:	4611      	mov	r1, r2
 80141ea:	f7ff be0a 	b.w	8013e02 <USBH_CtlReq>

080141ee <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 80141ee:	7883      	ldrb	r3, [r0, #2]
 80141f0:	2b01      	cmp	r3, #1
 80141f2:	d105      	bne.n	8014200 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80141f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80141f8:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80141fa:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 80141fc:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80141fe:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8014200:	2200      	movs	r2, #0
 8014202:	4611      	mov	r1, r2
 8014204:	f7ff bdfd 	b.w	8013e02 <USBH_CtlReq>

08014208 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 8014208:	7883      	ldrb	r3, [r0, #2]
 801420a:	2b01      	cmp	r3, #1
 801420c:	d105      	bne.n	801421a <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801420e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8014212:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8014214:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 8014216:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014218:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 801421a:	2200      	movs	r2, #0
 801421c:	4611      	mov	r1, r2
 801421e:	f7ff bdf0 	b.w	8013e02 <USBH_CtlReq>

08014222 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8014222:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014224:	2308      	movs	r3, #8
{
 8014226:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014228:	2400      	movs	r4, #0
{
 801422a:	4615      	mov	r5, r2
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801422c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014230:	e9cd 4100 	strd	r4, r1, [sp]
 8014234:	4623      	mov	r3, r4
 8014236:	4622      	mov	r2, r4
 8014238:	4629      	mov	r1, r5
 801423a:	f001 fe05 	bl	8015e48 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 801423e:	4620      	mov	r0, r4
 8014240:	b005      	add	sp, #20
 8014242:	bd30      	pop	{r4, r5, pc}

08014244 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8014244:	b530      	push	{r4, r5, lr}
 8014246:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014248:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801424c:	9101      	str	r1, [sp, #4]
{
 801424e:	461c      	mov	r4, r3
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014250:	2d00      	cmp	r5, #0
{
 8014252:	f89d 3020 	ldrb.w	r3, [sp, #32]
    do_ping = 0U;
 8014256:	bf18      	it	ne
 8014258:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801425a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801425e:	2301      	movs	r3, #1
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	2300      	movs	r3, #0
 8014264:	461a      	mov	r2, r3
 8014266:	4621      	mov	r1, r4
 8014268:	f001 fdee 	bl	8015e48 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 801426c:	2000      	movs	r0, #0
 801426e:	b005      	add	sp, #20
 8014270:	bd30      	pop	{r4, r5, pc}

08014272 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8014272:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014274:	2400      	movs	r4, #0
{
 8014276:	b085      	sub	sp, #20
 8014278:	461d      	mov	r5, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801427a:	e9cd 2402 	strd	r2, r4, [sp, #8]
 801427e:	2201      	movs	r2, #1
 8014280:	9101      	str	r1, [sp, #4]
 8014282:	9200      	str	r2, [sp, #0]
 8014284:	4623      	mov	r3, r4
 8014286:	4629      	mov	r1, r5
 8014288:	f001 fdde 	bl	8015e48 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 801428c:	4620      	mov	r0, r4
 801428e:	b005      	add	sp, #20
 8014290:	bd30      	pop	{r4, r5, pc}

08014292 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8014292:	b530      	push	{r4, r5, lr}
 8014294:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014296:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801429a:	9101      	str	r1, [sp, #4]
{
 801429c:	461c      	mov	r4, r3
  if (phost->device.speed != USBH_SPEED_HIGH)
 801429e:	2d00      	cmp	r5, #0
{
 80142a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    do_ping = 0U;
 80142a4:	bf18      	it	ne
 80142a6:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80142a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80142ac:	2301      	movs	r3, #1
 80142ae:	9300      	str	r3, [sp, #0]
 80142b0:	2200      	movs	r2, #0
 80142b2:	2302      	movs	r3, #2
 80142b4:	4621      	mov	r1, r4
 80142b6:	f001 fdc7 	bl	8015e48 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 80142ba:	2000      	movs	r0, #0
 80142bc:	b005      	add	sp, #20
 80142be:	bd30      	pop	{r4, r5, pc}

080142c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80142c0:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80142c2:	2400      	movs	r4, #0
{
 80142c4:	b085      	sub	sp, #20
 80142c6:	461d      	mov	r5, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80142c8:	e9cd 2402 	strd	r2, r4, [sp, #8]
 80142cc:	2201      	movs	r2, #1
 80142ce:	9101      	str	r1, [sp, #4]
 80142d0:	9200      	str	r2, [sp, #0]
 80142d2:	2302      	movs	r3, #2
 80142d4:	4629      	mov	r1, r5
 80142d6:	f001 fdb7 	bl	8015e48 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 80142da:	4620      	mov	r0, r4
 80142dc:	b005      	add	sp, #20
 80142de:	bd30      	pop	{r4, r5, pc}

080142e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80142e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80142e2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80142e6:	9402      	str	r4, [sp, #8]
 80142e8:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80142ec:	9401      	str	r4, [sp, #4]
 80142ee:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80142f2:	9400      	str	r4, [sp, #0]
 80142f4:	f001 fd82 	bl	8015dfc <USBH_LL_OpenPipe>

  return USBH_OK;
}
 80142f8:	2000      	movs	r0, #0
 80142fa:	b004      	add	sp, #16
 80142fc:	bd10      	pop	{r4, pc}

080142fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80142fe:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8014300:	f001 fd94 	bl	8015e2c <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8014304:	2000      	movs	r0, #0
 8014306:	bd08      	pop	{r3, pc}

08014308 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8014308:	b530      	push	{r4, r5, lr}
 801430a:	2300      	movs	r3, #0
 801430c:	f500 7461 	add.w	r4, r0, #900	; 0x384
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8014310:	f854 5b04 	ldr.w	r5, [r4], #4
 8014314:	042d      	lsls	r5, r5, #16
 8014316:	b2da      	uxtb	r2, r3
 8014318:	d408      	bmi.n	801432c <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801431a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801431e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 8014322:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8014324:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
}
 8014328:	b2d0      	uxtb	r0, r2
 801432a:	bd30      	pop	{r4, r5, pc}
 801432c:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 801432e:	2b0b      	cmp	r3, #11
 8014330:	d1ee      	bne.n	8014310 <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 8014332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014336:	e7f7      	b.n	8014328 <USBH_AllocPipe+0x20>

08014338 <USBH_FreePipe>:
  if (idx < 11U)
 8014338:	290a      	cmp	r1, #10
 801433a:	bf9f      	itttt	ls
 801433c:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
    phost->Pipes[idx] &= 0x7FFFU;
 8014340:	f8d0 3384 	ldrls.w	r3, [r0, #900]	; 0x384
 8014344:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8014348:	f8c0 3384 	strls.w	r3, [r0, #900]	; 0x384
}
 801434c:	2000      	movs	r0, #0
 801434e:	4770      	bx	lr

08014350 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014350:	4b03      	ldr	r3, [pc, #12]	; (8014360 <disk_status+0x10>)
 8014352:	181a      	adds	r2, r3, r0
 8014354:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8014358:	7b10      	ldrb	r0, [r2, #12]
 801435a:	685b      	ldr	r3, [r3, #4]
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	4718      	bx	r3
 8014360:	200014b4 	.word	0x200014b4

08014364 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8014364:	4b06      	ldr	r3, [pc, #24]	; (8014380 <disk_initialize+0x1c>)
 8014366:	5c1a      	ldrb	r2, [r3, r0]
 8014368:	b942      	cbnz	r2, 801437c <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 801436a:	2201      	movs	r2, #1
 801436c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801436e:	181a      	adds	r2, r3, r0
 8014370:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8014374:	7b10      	ldrb	r0, [r2, #12]
 8014376:	685b      	ldr	r3, [r3, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	4718      	bx	r3
  }
  return stat;
}
 801437c:	2000      	movs	r0, #0
 801437e:	4770      	bx	lr
 8014380:	200014b4 	.word	0x200014b4

08014384 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014384:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014386:	4c05      	ldr	r4, [pc, #20]	; (801439c <disk_read+0x18>)
 8014388:	1825      	adds	r5, r4, r0
 801438a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 801438e:	6860      	ldr	r0, [r4, #4]
 8014390:	6884      	ldr	r4, [r0, #8]
 8014392:	7b28      	ldrb	r0, [r5, #12]
 8014394:	46a4      	mov	ip, r4
  return res;
}
 8014396:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014398:	4760      	bx	ip
 801439a:	bf00      	nop
 801439c:	200014b4 	.word	0x200014b4

080143a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80143a0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80143a2:	4c05      	ldr	r4, [pc, #20]	; (80143b8 <disk_write+0x18>)
 80143a4:	1825      	adds	r5, r4, r0
 80143a6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80143aa:	6860      	ldr	r0, [r4, #4]
 80143ac:	68c4      	ldr	r4, [r0, #12]
 80143ae:	7b28      	ldrb	r0, [r5, #12]
 80143b0:	46a4      	mov	ip, r4
  return res;
}
 80143b2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80143b4:	4760      	bx	ip
 80143b6:	bf00      	nop
 80143b8:	200014b4 	.word	0x200014b4

080143bc <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80143bc:	4b05      	ldr	r3, [pc, #20]	; (80143d4 <disk_ioctl+0x18>)
{
 80143be:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80143c0:	181c      	adds	r4, r3, r0
 80143c2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80143c6:	7b20      	ldrb	r0, [r4, #12]
 80143c8:	685b      	ldr	r3, [r3, #4]
  return res;
}
 80143ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80143ce:	691b      	ldr	r3, [r3, #16]
 80143d0:	4718      	bx	r3
 80143d2:	bf00      	nop
 80143d4:	200014b4 	.word	0x200014b4

080143d8 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80143d8:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80143da:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80143dc:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80143de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80143e2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80143e6:	4770      	bx	lr

080143e8 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80143e8:	0a0b      	lsrs	r3, r1, #8
 80143ea:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80143ec:	7043      	strb	r3, [r0, #1]
 80143ee:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80143f0:	0e09      	lsrs	r1, r1, #24
 80143f2:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80143f4:	70c1      	strb	r1, [r0, #3]
}
 80143f6:	4770      	bx	lr

080143f8 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80143f8:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80143fa:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80143fe:	4290      	cmp	r0, r2
 8014400:	d1fb      	bne.n	80143fa <mem_set+0x2>
}
 8014402:	4770      	bx	lr

08014404 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8014404:	4a1b      	ldr	r2, [pc, #108]	; (8014474 <chk_lock+0x70>)
 8014406:	6813      	ldr	r3, [r2, #0]
{
 8014408:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 801440a:	b163      	cbz	r3, 8014426 <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801440c:	6804      	ldr	r4, [r0, #0]
 801440e:	429c      	cmp	r4, r3
 8014410:	d107      	bne.n	8014422 <chk_lock+0x1e>
 8014412:	6854      	ldr	r4, [r2, #4]
 8014414:	6883      	ldr	r3, [r0, #8]
 8014416:	429c      	cmp	r4, r3
 8014418:	d103      	bne.n	8014422 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 801441a:	6894      	ldr	r4, [r2, #8]
 801441c:	6943      	ldr	r3, [r0, #20]
 801441e:	429c      	cmp	r4, r3
 8014420:	d020      	beq.n	8014464 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014422:	2400      	movs	r4, #0
 8014424:	e000      	b.n	8014428 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8014426:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8014428:	6913      	ldr	r3, [r2, #16]
 801442a:	b1cb      	cbz	r3, 8014460 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801442c:	6805      	ldr	r5, [r0, #0]
 801442e:	42ab      	cmp	r3, r5
 8014430:	d107      	bne.n	8014442 <chk_lock+0x3e>
 8014432:	6955      	ldr	r5, [r2, #20]
 8014434:	6883      	ldr	r3, [r0, #8]
 8014436:	429d      	cmp	r5, r3
 8014438:	d103      	bne.n	8014442 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 801443a:	6995      	ldr	r5, [r2, #24]
 801443c:	6943      	ldr	r3, [r0, #20]
 801443e:	429d      	cmp	r5, r3
 8014440:	d015      	beq.n	801446e <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014442:	b96c      	cbnz	r4, 8014460 <chk_lock+0x5c>
 8014444:	2902      	cmp	r1, #2
 8014446:	bf0c      	ite	eq
 8014448:	2000      	moveq	r0, #0
 801444a:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 801444c:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801444e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8014452:	8993      	ldrh	r3, [r2, #12]
 8014454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014458:	bf14      	ite	ne
 801445a:	2000      	movne	r0, #0
 801445c:	2010      	moveq	r0, #16
 801445e:	e7f5      	b.n	801444c <chk_lock+0x48>
 8014460:	2000      	movs	r0, #0
 8014462:	e7f3      	b.n	801444c <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014464:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014466:	2900      	cmp	r1, #0
 8014468:	d0f1      	beq.n	801444e <chk_lock+0x4a>
 801446a:	2010      	movs	r0, #16
 801446c:	e7ee      	b.n	801444c <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801446e:	2301      	movs	r3, #1
 8014470:	e7f9      	b.n	8014466 <chk_lock+0x62>
 8014472:	bf00      	nop
 8014474:	20001290 	.word	0x20001290

08014478 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8014478:	4a1e      	ldr	r2, [pc, #120]	; (80144f4 <inc_lock+0x7c>)
{
 801447a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 801447c:	6813      	ldr	r3, [r2, #0]
 801447e:	6805      	ldr	r5, [r0, #0]
 8014480:	429d      	cmp	r5, r3
 8014482:	d107      	bne.n	8014494 <inc_lock+0x1c>
 8014484:	6856      	ldr	r6, [r2, #4]
 8014486:	6884      	ldr	r4, [r0, #8]
 8014488:	42a6      	cmp	r6, r4
 801448a:	d103      	bne.n	8014494 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 801448c:	6946      	ldr	r6, [r0, #20]
 801448e:	6894      	ldr	r4, [r2, #8]
 8014490:	42a6      	cmp	r6, r4
 8014492:	d021      	beq.n	80144d8 <inc_lock+0x60>
		if (Files[i].fs == dp->obj.fs &&
 8014494:	6914      	ldr	r4, [r2, #16]
 8014496:	42ac      	cmp	r4, r5
 8014498:	d107      	bne.n	80144aa <inc_lock+0x32>
 801449a:	6957      	ldr	r7, [r2, #20]
 801449c:	6886      	ldr	r6, [r0, #8]
 801449e:	42b7      	cmp	r7, r6
 80144a0:	d103      	bne.n	80144aa <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 80144a2:	6997      	ldr	r7, [r2, #24]
 80144a4:	6946      	ldr	r6, [r0, #20]
 80144a6:	42b7      	cmp	r7, r6
 80144a8:	d020      	beq.n	80144ec <inc_lock+0x74>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80144aa:	b10b      	cbz	r3, 80144b0 <inc_lock+0x38>
 80144ac:	bb04      	cbnz	r4, 80144f0 <inc_lock+0x78>
 80144ae:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 80144b0:	011e      	lsls	r6, r3, #4
 80144b2:	1994      	adds	r4, r2, r6
 80144b4:	5195      	str	r5, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 80144b6:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 80144b8:	6940      	ldr	r0, [r0, #20]
 80144ba:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 80144bc:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 80144be:	6065      	str	r5, [r4, #4]
		Files[i].ctr = 0;
 80144c0:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80144c2:	b981      	cbnz	r1, 80144e6 <inc_lock+0x6e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80144c4:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80144c8:	8989      	ldrh	r1, [r1, #12]
 80144ca:	3101      	adds	r1, #1
 80144cc:	b289      	uxth	r1, r1
 80144ce:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 80144d2:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80144d4:	8191      	strh	r1, [r2, #12]
}
 80144d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80144d8:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80144da:	2900      	cmp	r1, #0
 80144dc:	d0f2      	beq.n	80144c4 <inc_lock+0x4c>
 80144de:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80144e2:	8989      	ldrh	r1, [r1, #12]
 80144e4:	b921      	cbnz	r1, 80144f0 <inc_lock+0x78>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80144e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80144ea:	e7f0      	b.n	80144ce <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80144ec:	2301      	movs	r3, #1
 80144ee:	e7f4      	b.n	80144da <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80144f0:	2000      	movs	r0, #0
 80144f2:	e7f0      	b.n	80144d6 <inc_lock+0x5e>
 80144f4:	20001290 	.word	0x20001290

080144f8 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80144f8:	3801      	subs	r0, #1
 80144fa:	2801      	cmp	r0, #1
 80144fc:	d814      	bhi.n	8014528 <dec_lock+0x30>
		n = Files[i].ctr;
 80144fe:	490b      	ldr	r1, [pc, #44]	; (801452c <dec_lock+0x34>)
 8014500:	0102      	lsls	r2, r0, #4
 8014502:	1888      	adds	r0, r1, r2
 8014504:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8014506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801450a:	d104      	bne.n	8014516 <dec_lock+0x1e>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 801450c:	2300      	movs	r3, #0
 801450e:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8014510:	2000      	movs	r0, #0
 8014512:	5088      	str	r0, [r1, r2]
 8014514:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8014516:	2b00      	cmp	r3, #0
 8014518:	d0fa      	beq.n	8014510 <dec_lock+0x18>
 801451a:	3b01      	subs	r3, #1
 801451c:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 801451e:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8014520:	2b00      	cmp	r3, #0
 8014522:	d0f5      	beq.n	8014510 <dec_lock+0x18>
		res = FR_OK;
 8014524:	2000      	movs	r0, #0
 8014526:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8014528:	2002      	movs	r0, #2
	}
	return res;
}
 801452a:	4770      	bx	lr
 801452c:	20001290 	.word	0x20001290

08014530 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014530:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;
 8014532:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014534:	3b02      	subs	r3, #2
 8014536:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8014538:	bf83      	ittte	hi
 801453a:	8943      	ldrhhi	r3, [r0, #10]
 801453c:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
 801453e:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014542:	2000      	movls	r0, #0
}
 8014544:	4770      	bx	lr

08014546 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014546:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 8014548:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 801454a:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801454c:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801454e:	89a3      	ldrh	r3, [r4, #12]
 8014550:	fbb1 f1f3 	udiv	r1, r1, r3
 8014554:	8963      	ldrh	r3, [r4, #10]
 8014556:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801455a:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801455c:	b130      	cbz	r0, 801456c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801455e:	4281      	cmp	r1, r0
 8014560:	d302      	bcc.n	8014568 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8014562:	1a09      	subs	r1, r1, r0
 8014564:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014566:	e7f8      	b.n	801455a <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8014568:	6850      	ldr	r0, [r2, #4]
 801456a:	4408      	add	r0, r1
}
 801456c:	bd10      	pop	{r4, pc}

0801456e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801456e:	4602      	mov	r2, r0
 8014570:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8014574:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014576:	01c3      	lsls	r3, r0, #7
 8014578:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 801457c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8014580:	fa50 f383 	uxtab	r3, r0, r3
	} while (--n);
 8014584:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014586:	b2d8      	uxtb	r0, r3
	} while (--n);
 8014588:	d1f5      	bne.n	8014576 <sum_sfn+0x8>
	return sum;
}
 801458a:	4770      	bx	lr

0801458c <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801458c:	6803      	ldr	r3, [r0, #0]
{
 801458e:	b510      	push	{r4, lr}
 8014590:	4604      	mov	r4, r0
	if (*path) {	/* If the pointer is not a null */
 8014592:	b153      	cbz	r3, 80145aa <get_ldnumber+0x1e>
 8014594:	4619      	mov	r1, r3
 8014596:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014598:	f811 0b01 	ldrb.w	r0, [r1], #1
 801459c:	281f      	cmp	r0, #31
 801459e:	d910      	bls.n	80145c2 <get_ldnumber+0x36>
 80145a0:	283a      	cmp	r0, #58	; 0x3a
 80145a2:	d1f8      	bne.n	8014596 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80145a4:	1c59      	adds	r1, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80145a6:	428a      	cmp	r2, r1
 80145a8:	d002      	beq.n	80145b0 <get_ldnumber+0x24>
	int vol = -1;
 80145aa:	f04f 30ff 	mov.w	r0, #4294967295
 80145ae:	e007      	b.n	80145c0 <get_ldnumber+0x34>
			i = *tp++ - '0';
 80145b0:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80145b2:	3b30      	subs	r3, #48	; 0x30
 80145b4:	b2d9      	uxtb	r1, r3
 80145b6:	2901      	cmp	r1, #1
 80145b8:	d8f7      	bhi.n	80145aa <get_ldnumber+0x1e>
					vol = (int)i;
					*path = ++tt;
 80145ba:	3201      	adds	r2, #1
			i = *tp++ - '0';
 80145bc:	4618      	mov	r0, r3
					*path = ++tt;
 80145be:	6022      	str	r2, [r4, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80145c0:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 80145c2:	2000      	movs	r0, #0
 80145c4:	e7fc      	b.n	80145c0 <get_ldnumber+0x34>

080145c6 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80145c6:	b538      	push	{r3, r4, r5, lr}
 80145c8:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80145ca:	4604      	mov	r4, r0
 80145cc:	b918      	cbnz	r0, 80145d6 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80145ce:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80145d0:	2300      	movs	r3, #0
 80145d2:	602b      	str	r3, [r5, #0]
	return res;
}
 80145d4:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80145d6:	6803      	ldr	r3, [r0, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d0f8      	beq.n	80145ce <validate+0x8>
 80145dc:	781a      	ldrb	r2, [r3, #0]
 80145de:	2a00      	cmp	r2, #0
 80145e0:	d0f5      	beq.n	80145ce <validate+0x8>
 80145e2:	8881      	ldrh	r1, [r0, #4]
 80145e4:	88da      	ldrh	r2, [r3, #6]
 80145e6:	4291      	cmp	r1, r2
 80145e8:	d1f1      	bne.n	80145ce <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80145ea:	7858      	ldrb	r0, [r3, #1]
 80145ec:	f7ff feb0 	bl	8014350 <disk_status>
 80145f0:	f010 0001 	ands.w	r0, r0, #1
 80145f4:	d1eb      	bne.n	80145ce <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80145f6:	6823      	ldr	r3, [r4, #0]
 80145f8:	e7eb      	b.n	80145d2 <validate+0xc>

080145fa <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80145fa:	3801      	subs	r0, #1
 80145fc:	440a      	add	r2, r1
			*d++ = *s++;
 80145fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014602:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8014606:	4291      	cmp	r1, r2
 8014608:	d1f9      	bne.n	80145fe <mem_cpy.part.0+0x4>
}
 801460a:	4770      	bx	lr

0801460c <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 801460c:	7eca      	ldrb	r2, [r1, #27]
 801460e:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8014610:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8014612:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8014616:	bf01      	itttt	eq
 8014618:	7d48      	ldrbeq	r0, [r1, #21]
 801461a:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801461c:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8014620:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8014624:	4618      	mov	r0, r3
 8014626:	4770      	bx	lr

08014628 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8014628:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801462c:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 801462e:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8014630:	7803      	ldrb	r3, [r0, #0]
 8014632:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014634:	bf01      	itttt	eq
 8014636:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8014638:	750a      	strbeq	r2, [r1, #20]
 801463a:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 801463c:	754a      	strbeq	r2, [r1, #21]
}
 801463e:	4770      	bx	lr

08014640 <sync_window.part.3>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8014640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8014642:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014644:	f100 0738 	add.w	r7, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8014648:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801464a:	2301      	movs	r3, #1
 801464c:	462a      	mov	r2, r5
 801464e:	4639      	mov	r1, r7
 8014650:	7840      	ldrb	r0, [r0, #1]
 8014652:	f7ff fea5 	bl	80143a0 <disk_write>
 8014656:	b9a0      	cbnz	r0, 8014682 <sync_window.part.3+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014658:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801465a:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 801465c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801465e:	1aeb      	subs	r3, r5, r3
 8014660:	4293      	cmp	r3, r2
 8014662:	d301      	bcc.n	8014668 <sync_window.part.3+0x28>
	FRESULT res = FR_OK;
 8014664:	2000      	movs	r0, #0
}
 8014666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014668:	78a6      	ldrb	r6, [r4, #2]
 801466a:	2e01      	cmp	r6, #1
 801466c:	d9fa      	bls.n	8014664 <sync_window.part.3+0x24>
					wsect += fs->fsize;
 801466e:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014670:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8014672:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8014674:	462a      	mov	r2, r5
 8014676:	2301      	movs	r3, #1
 8014678:	4639      	mov	r1, r7
 801467a:	f7ff fe91 	bl	80143a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801467e:	3e01      	subs	r6, #1
 8014680:	e7f3      	b.n	801466a <sync_window.part.3+0x2a>
			res = FR_DISK_ERR;
 8014682:	2001      	movs	r0, #1
 8014684:	e7ef      	b.n	8014666 <sync_window.part.3+0x26>

08014686 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014686:	78c3      	ldrb	r3, [r0, #3]
 8014688:	b10b      	cbz	r3, 801468e <sync_window+0x8>
 801468a:	f7ff bfd9 	b.w	8014640 <sync_window.part.3>
}
 801468e:	4618      	mov	r0, r3
 8014690:	4770      	bx	lr

08014692 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014692:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014694:	428b      	cmp	r3, r1
{
 8014696:	b570      	push	{r4, r5, r6, lr}
 8014698:	4606      	mov	r6, r0
 801469a:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 801469c:	d012      	beq.n	80146c4 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 801469e:	f7ff fff2 	bl	8014686 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80146a2:	4604      	mov	r4, r0
 80146a4:	b960      	cbnz	r0, 80146c0 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80146a6:	462a      	mov	r2, r5
 80146a8:	2301      	movs	r3, #1
 80146aa:	f106 0138 	add.w	r1, r6, #56	; 0x38
 80146ae:	7870      	ldrb	r0, [r6, #1]
 80146b0:	f7ff fe68 	bl	8014384 <disk_read>
 80146b4:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80146b6:	bf1c      	itt	ne
 80146b8:	f04f 35ff 	movne.w	r5, #4294967295
 80146bc:	2401      	movne	r4, #1
			fs->winsect = sector;
 80146be:	6375      	str	r5, [r6, #52]	; 0x34
}
 80146c0:	4620      	mov	r0, r4
 80146c2:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80146c4:	2400      	movs	r4, #0
 80146c6:	e7fb      	b.n	80146c0 <move_window+0x2e>

080146c8 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80146c8:	2300      	movs	r3, #0
{
 80146ca:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80146cc:	70c3      	strb	r3, [r0, #3]
 80146ce:	f04f 33ff 	mov.w	r3, #4294967295
 80146d2:	6343      	str	r3, [r0, #52]	; 0x34
{
 80146d4:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80146d6:	f7ff ffdc 	bl	8014692 <move_window>
 80146da:	bb30      	cbnz	r0, 801472a <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 80146dc:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 80146e0:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 80146e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80146e8:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80146ec:	4293      	cmp	r3, r2
 80146ee:	d11e      	bne.n	801472e <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80146f0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80146f4:	2be9      	cmp	r3, #233	; 0xe9
 80146f6:	d005      	beq.n	8014704 <check_fs+0x3c>
 80146f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80146fa:	4a10      	ldr	r2, [pc, #64]	; (801473c <check_fs+0x74>)
 80146fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014700:	4293      	cmp	r3, r2
 8014702:	d116      	bne.n	8014732 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014704:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8014708:	f7ff fe66 	bl	80143d8 <ld_dword>
 801470c:	4b0c      	ldr	r3, [pc, #48]	; (8014740 <check_fs+0x78>)
 801470e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8014712:	4298      	cmp	r0, r3
 8014714:	d00f      	beq.n	8014736 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014716:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 801471a:	f7ff fe5d 	bl	80143d8 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801471e:	4b09      	ldr	r3, [pc, #36]	; (8014744 <check_fs+0x7c>)
 8014720:	4298      	cmp	r0, r3
 8014722:	bf14      	ite	ne
 8014724:	2002      	movne	r0, #2
 8014726:	2000      	moveq	r0, #0
}
 8014728:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801472a:	2004      	movs	r0, #4
 801472c:	e7fc      	b.n	8014728 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801472e:	2003      	movs	r0, #3
 8014730:	e7fa      	b.n	8014728 <check_fs+0x60>
	return 2;
 8014732:	2002      	movs	r0, #2
 8014734:	e7f8      	b.n	8014728 <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014736:	2000      	movs	r0, #0
 8014738:	e7f6      	b.n	8014728 <check_fs+0x60>
 801473a:	bf00      	nop
 801473c:	009000eb 	.word	0x009000eb
 8014740:	00544146 	.word	0x00544146
 8014744:	33544146 	.word	0x33544146

08014748 <find_volume>:
{
 8014748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	*rfs = 0;
 801474c:	2300      	movs	r3, #0
 801474e:	600b      	str	r3, [r1, #0]
{
 8014750:	460f      	mov	r7, r1
 8014752:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8014754:	f7ff ff1a 	bl	801458c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8014758:	1e06      	subs	r6, r0, #0
 801475a:	f2c0 8157 	blt.w	8014a0c <find_volume+0x2c4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801475e:	4baf      	ldr	r3, [pc, #700]	; (8014a1c <find_volume+0x2d4>)
 8014760:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014764:	2c00      	cmp	r4, #0
 8014766:	f000 8153 	beq.w	8014a10 <find_volume+0x2c8>
	*rfs = fs;							/* Return pointer to the file system object */
 801476a:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801476c:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801476e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014772:	b173      	cbz	r3, 8014792 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8014774:	7860      	ldrb	r0, [r4, #1]
 8014776:	f7ff fdeb 	bl	8014350 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801477a:	07c1      	lsls	r1, r0, #31
 801477c:	d409      	bmi.n	8014792 <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801477e:	2d00      	cmp	r5, #0
 8014780:	f000 8148 	beq.w	8014a14 <find_volume+0x2cc>
 8014784:	f010 0004 	ands.w	r0, r0, #4
 8014788:	d000      	beq.n	801478c <find_volume+0x44>
				return FR_WRITE_PROTECTED;
 801478a:	200a      	movs	r0, #10
}
 801478c:	b004      	add	sp, #16
 801478e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8014792:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014794:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8014796:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014798:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801479a:	f7ff fde3 	bl	8014364 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801479e:	07c2      	lsls	r2, r0, #31
 80147a0:	f100 813a 	bmi.w	8014a18 <find_volume+0x2d0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80147a4:	b10d      	cbz	r5, 80147aa <find_volume+0x62>
 80147a6:	0743      	lsls	r3, r0, #29
 80147a8:	d4ef      	bmi.n	801478a <find_volume+0x42>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80147aa:	f104 020c 	add.w	r2, r4, #12
 80147ae:	2102      	movs	r1, #2
 80147b0:	7860      	ldrb	r0, [r4, #1]
 80147b2:	f7ff fe03 	bl	80143bc <disk_ioctl>
 80147b6:	b108      	cbz	r0, 80147bc <find_volume+0x74>
 80147b8:	2001      	movs	r0, #1
 80147ba:	e7e7      	b.n	801478c <find_volume+0x44>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80147bc:	89a5      	ldrh	r5, [r4, #12]
 80147be:	f5a5 7300 	sub.w	r3, r5, #512	; 0x200
 80147c2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80147c6:	d8f7      	bhi.n	80147b8 <find_volume+0x70>
 80147c8:	1e69      	subs	r1, r5, #1
 80147ca:	400d      	ands	r5, r1
 80147cc:	d1f4      	bne.n	80147b8 <find_volume+0x70>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80147ce:	4629      	mov	r1, r5
 80147d0:	4620      	mov	r0, r4
 80147d2:	f7ff ff79 	bl	80146c8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80147d6:	2802      	cmp	r0, #2
 80147d8:	f040 80fd 	bne.w	80149d6 <find_volume+0x28e>
 80147dc:	f504 76ff 	add.w	r6, r4, #510	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80147e0:	f816 0c04 	ldrb.w	r0, [r6, #-4]
 80147e4:	b110      	cbz	r0, 80147ec <find_volume+0xa4>
 80147e6:	4630      	mov	r0, r6
 80147e8:	f7ff fdf6 	bl	80143d8 <ld_dword>
 80147ec:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80147f0:	3501      	adds	r5, #1
 80147f2:	2d04      	cmp	r5, #4
 80147f4:	f106 0610 	add.w	r6, r6, #16
 80147f8:	d1f2      	bne.n	80147e0 <find_volume+0x98>
 80147fa:	2500      	movs	r5, #0
			bsect = br[i];
 80147fc:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014800:	2e00      	cmp	r6, #0
 8014802:	f000 80e0 	beq.w	80149c6 <find_volume+0x27e>
 8014806:	4631      	mov	r1, r6
 8014808:	4620      	mov	r0, r4
 801480a:	f7ff ff5d 	bl	80146c8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801480e:	2801      	cmp	r0, #1
 8014810:	f200 80da 	bhi.w	80149c8 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 8014814:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8014818:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801481c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8014820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014824:	4598      	cmp	r8, r3
 8014826:	f040 80db 	bne.w	80149e0 <find_volume+0x298>
	rv = rv << 8 | ptr[0];
 801482a:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 801482e:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014832:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8014836:	d104      	bne.n	8014842 <find_volume+0xfa>
 8014838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801483c:	f7ff fdcc 	bl	80143d8 <ld_dword>
 8014840:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014842:	f894 a048 	ldrb.w	sl, [r4, #72]	; 0x48
		fs->fsize = fasize;
 8014846:	6221      	str	r1, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014848:	f10a 33ff 	add.w	r3, sl, #4294967295
 801484c:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801484e:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014852:	f200 80c5 	bhi.w	80149e0 <find_volume+0x298>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014856:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801485a:	b2ab      	uxth	r3, r5
 801485c:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801485e:	2b00      	cmp	r3, #0
 8014860:	f000 80be 	beq.w	80149e0 <find_volume+0x298>
 8014864:	1e6b      	subs	r3, r5, #1
 8014866:	422b      	tst	r3, r5
 8014868:	f040 80ba 	bne.w	80149e0 <find_volume+0x298>
	rv = rv << 8 | ptr[0];
 801486c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014870:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014874:	ea4f 1058 	mov.w	r0, r8, lsr #5
	rv = rv << 8 | ptr[0];
 8014878:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801487c:	fbb9 f7f0 	udiv	r7, r9, r0
 8014880:	fb00 9017 	mls	r0, r0, r7, r9
 8014884:	b280      	uxth	r0, r0
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014886:	f8a4 9008 	strh.w	r9, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801488a:	2800      	cmp	r0, #0
 801488c:	f040 80a8 	bne.w	80149e0 <find_volume+0x298>
	rv = rv << 8 | ptr[0];
 8014890:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8014894:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014898:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 801489c:	d103      	bne.n	80148a6 <find_volume+0x15e>
 801489e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80148a2:	f7ff fd99 	bl	80143d8 <ld_dword>
	rv = rv << 8 | ptr[0];
 80148a6:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 80148aa:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80148ae:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80148b2:	f000 8095 	beq.w	80149e0 <find_volume+0x298>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80148b6:	fb01 fc0a 	mul.w	ip, r1, sl
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80148ba:	18fa      	adds	r2, r7, r3
 80148bc:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80148be:	4290      	cmp	r0, r2
 80148c0:	f0c0 808e 	bcc.w	80149e0 <find_volume+0x298>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80148c4:	1a80      	subs	r0, r0, r2
 80148c6:	fbb0 f0f5 	udiv	r0, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80148ca:	2800      	cmp	r0, #0
 80148cc:	f000 8088 	beq.w	80149e0 <find_volume+0x298>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80148d0:	f64f 77f5 	movw	r7, #65525	; 0xfff5
 80148d4:	42b8      	cmp	r0, r7
 80148d6:	bf8c      	ite	hi
 80148d8:	2703      	movhi	r7, #3
 80148da:	2702      	movls	r7, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80148dc:	f640 75f5 	movw	r5, #4085	; 0xff5
 80148e0:	42a8      	cmp	r0, r5
 80148e2:	bf98      	it	ls
 80148e4:	2701      	movls	r7, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80148e6:	4433      	add	r3, r6
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80148e8:	1c85      	adds	r5, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 80148ea:	4432      	add	r2, r6
		if (fmt == FS_FAT32) {
 80148ec:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80148ee:	61e5      	str	r5, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80148f0:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80148f2:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80148f4:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80148f6:	d177      	bne.n	80149e8 <find_volume+0x2a0>
	rv = rv << 8 | ptr[0];
 80148f8:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 80148fc:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014900:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8014904:	d16c      	bne.n	80149e0 <find_volume+0x298>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014906:	f1b9 0f00 	cmp.w	r9, #0
 801490a:	d169      	bne.n	80149e0 <find_volume+0x298>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801490c:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8014910:	f7ff fd62 	bl	80143d8 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014914:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014916:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014918:	f108 33ff 	add.w	r3, r8, #4294967295
 801491c:	441d      	add	r5, r3
 801491e:	fbb5 f8f8 	udiv	r8, r5, r8
 8014922:	4588      	cmp	r8, r1
 8014924:	d85c      	bhi.n	80149e0 <find_volume+0x298>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014926:	f04f 33ff 	mov.w	r3, #4294967295
 801492a:	e9c4 3305 	strd	r3, r3, [r4, #20]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801492e:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8014930:	f04f 0380 	mov.w	r3, #128	; 0x80
 8014934:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014936:	d12f      	bne.n	8014998 <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 8014938:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 801493c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8014940:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014944:	2b01      	cmp	r3, #1
 8014946:	d127      	bne.n	8014998 <find_volume+0x250>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014948:	1c71      	adds	r1, r6, #1
 801494a:	4620      	mov	r0, r4
 801494c:	f7ff fea1 	bl	8014692 <move_window>
 8014950:	bb10      	cbnz	r0, 8014998 <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 8014952:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8014956:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 801495a:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 801495c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014960:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8014964:	4293      	cmp	r3, r2
 8014966:	d117      	bne.n	8014998 <find_volume+0x250>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014968:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801496c:	f7ff fd34 	bl	80143d8 <ld_dword>
 8014970:	4b2b      	ldr	r3, [pc, #172]	; (8014a20 <find_volume+0x2d8>)
 8014972:	4298      	cmp	r0, r3
 8014974:	d110      	bne.n	8014998 <find_volume+0x250>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014976:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 801497a:	f7ff fd2d 	bl	80143d8 <ld_dword>
 801497e:	4b29      	ldr	r3, [pc, #164]	; (8014a24 <find_volume+0x2dc>)
 8014980:	4298      	cmp	r0, r3
 8014982:	d109      	bne.n	8014998 <find_volume+0x250>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014984:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8014988:	f7ff fd26 	bl	80143d8 <ld_dword>
 801498c:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801498e:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8014992:	f7ff fd21 	bl	80143d8 <ld_dword>
 8014996:	6160      	str	r0, [r4, #20]
	fs->id = ++Fsid;		/* File system mount ID */
 8014998:	4a23      	ldr	r2, [pc, #140]	; (8014a28 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 801499a:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801499c:	8813      	ldrh	r3, [r2, #0]
 801499e:	3301      	adds	r3, #1
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	8013      	strh	r3, [r2, #0]
 80149a4:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80149a6:	4b21      	ldr	r3, [pc, #132]	; (8014a2c <find_volume+0x2e4>)
 80149a8:	6123      	str	r3, [r4, #16]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80149aa:	4b21      	ldr	r3, [pc, #132]	; (8014a30 <find_volume+0x2e8>)
 80149ac:	681a      	ldr	r2, [r3, #0]
 80149ae:	4294      	cmp	r4, r2
 80149b0:	bf04      	itt	eq
 80149b2:	2200      	moveq	r2, #0
 80149b4:	601a      	streq	r2, [r3, #0]
 80149b6:	691a      	ldr	r2, [r3, #16]
 80149b8:	4294      	cmp	r4, r2
 80149ba:	f04f 0000 	mov.w	r0, #0
 80149be:	f47f aee5 	bne.w	801478c <find_volume+0x44>
 80149c2:	6118      	str	r0, [r3, #16]
 80149c4:	e6e2      	b.n	801478c <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80149c6:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80149c8:	3501      	adds	r5, #1
 80149ca:	2d04      	cmp	r5, #4
 80149cc:	f47f af16 	bne.w	80147fc <find_volume+0xb4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80149d0:	2804      	cmp	r0, #4
 80149d2:	d105      	bne.n	80149e0 <find_volume+0x298>
 80149d4:	e6f0      	b.n	80147b8 <find_volume+0x70>
 80149d6:	2804      	cmp	r0, #4
 80149d8:	f43f aeee 	beq.w	80147b8 <find_volume+0x70>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80149dc:	2801      	cmp	r0, #1
 80149de:	d901      	bls.n	80149e4 <find_volume+0x29c>
 80149e0:	200d      	movs	r0, #13
 80149e2:	e6d3      	b.n	801478c <find_volume+0x44>
	bsect = 0;
 80149e4:	462e      	mov	r6, r5
 80149e6:	e715      	b.n	8014814 <find_volume+0xcc>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80149e8:	f1b9 0f00 	cmp.w	r9, #0
 80149ec:	d0f8      	beq.n	80149e0 <find_volume+0x298>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80149ee:	2f02      	cmp	r7, #2
 80149f0:	ea4f 0045 	mov.w	r0, r5, lsl #1
 80149f4:	bf18      	it	ne
 80149f6:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80149f8:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80149fa:	bf18      	it	ne
 80149fc:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014a00:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014a02:	bf0c      	ite	eq
 8014a04:	4605      	moveq	r5, r0
 8014a06:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8014a0a:	e785      	b.n	8014918 <find_volume+0x1d0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8014a0c:	200b      	movs	r0, #11
 8014a0e:	e6bd      	b.n	801478c <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014a10:	200c      	movs	r0, #12
 8014a12:	e6bb      	b.n	801478c <find_volume+0x44>
			return FR_OK;				/* The file system object is valid */
 8014a14:	4628      	mov	r0, r5
 8014a16:	e6b9      	b.n	801478c <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014a18:	2003      	movs	r0, #3
 8014a1a:	e6b7      	b.n	801478c <find_volume+0x44>
 8014a1c:	20001288 	.word	0x20001288
 8014a20:	41615252 	.word	0x41615252
 8014a24:	61417272 	.word	0x61417272
 8014a28:	200012b0 	.word	0x200012b0
 8014a2c:	200012b2 	.word	0x200012b2
 8014a30:	20001290 	.word	0x20001290

08014a34 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014a34:	2901      	cmp	r1, #1
{
 8014a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	460d      	mov	r5, r1
 8014a3e:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014a40:	f240 808a 	bls.w	8014b58 <put_fat+0x124>
 8014a44:	69c3      	ldr	r3, [r0, #28]
 8014a46:	428b      	cmp	r3, r1
 8014a48:	f240 8086 	bls.w	8014b58 <put_fat+0x124>
		switch (fs->fs_type) {
 8014a4c:	7803      	ldrb	r3, [r0, #0]
 8014a4e:	2b02      	cmp	r3, #2
 8014a50:	d049      	beq.n	8014ae6 <put_fat+0xb2>
 8014a52:	2b03      	cmp	r3, #3
 8014a54:	d060      	beq.n	8014b18 <put_fat+0xe4>
 8014a56:	2b01      	cmp	r3, #1
 8014a58:	d17e      	bne.n	8014b58 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 8014a5a:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014a5e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014a60:	8983      	ldrh	r3, [r0, #12]
 8014a62:	fbba f3f3 	udiv	r3, sl, r3
 8014a66:	4419      	add	r1, r3
 8014a68:	f7ff fe13 	bl	8014692 <move_window>
 8014a6c:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8014a6e:	bb78      	cbnz	r0, 8014ad0 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8014a70:	89a3      	ldrh	r3, [r4, #12]
 8014a72:	fbba f2f3 	udiv	r2, sl, r3
 8014a76:	f104 0838 	add.w	r8, r4, #56	; 0x38
 8014a7a:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014a7e:	f015 0501 	ands.w	r5, r5, #1
 8014a82:	bf1f      	itttt	ne
 8014a84:	f818 3002 	ldrbne.w	r3, [r8, r2]
 8014a88:	f003 010f 	andne.w	r1, r3, #15
 8014a8c:	013b      	lslne	r3, r7, #4
 8014a8e:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8014a92:	bf14      	ite	ne
 8014a94:	430b      	orrne	r3, r1
 8014a96:	b2fb      	uxtbeq	r3, r7
 8014a98:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014a9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
			fs->wflag = 1;
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 8014aa2:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014aa6:	89a3      	ldrh	r3, [r4, #12]
 8014aa8:	fbb9 f3f3 	udiv	r3, r9, r3
 8014aac:	4620      	mov	r0, r4
 8014aae:	4419      	add	r1, r3
 8014ab0:	f7ff fdef 	bl	8014692 <move_window>
			if (res != FR_OK) break;
 8014ab4:	4606      	mov	r6, r0
 8014ab6:	b958      	cbnz	r0, 8014ad0 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8014ab8:	89a3      	ldrh	r3, [r4, #12]
 8014aba:	fbb9 f2f3 	udiv	r2, r9, r3
 8014abe:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014ac2:	b145      	cbz	r5, 8014ad6 <put_fat+0xa2>
 8014ac4:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8014ac8:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 8014acc:	2301      	movs	r3, #1
 8014ace:	70e3      	strb	r3, [r4, #3]
}
 8014ad0:	4630      	mov	r0, r6
 8014ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014ad6:	f818 3002 	ldrb.w	r3, [r8, r2]
 8014ada:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8014ade:	f023 030f 	bic.w	r3, r3, #15
 8014ae2:	431f      	orrs	r7, r3
 8014ae4:	e7f0      	b.n	8014ac8 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014ae6:	8983      	ldrh	r3, [r0, #12]
 8014ae8:	085b      	lsrs	r3, r3, #1
 8014aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8014aee:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014af0:	4419      	add	r1, r3
 8014af2:	f7ff fdce 	bl	8014692 <move_window>
			if (res != FR_OK) break;
 8014af6:	4606      	mov	r6, r0
 8014af8:	2800      	cmp	r0, #0
 8014afa:	d1e9      	bne.n	8014ad0 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014afc:	89a1      	ldrh	r1, [r4, #12]
 8014afe:	006d      	lsls	r5, r5, #1
 8014b00:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8014b04:	fbb5 f3f1 	udiv	r3, r5, r1
 8014b08:	fb01 5513 	mls	r5, r1, r3, r5
 8014b0c:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8014b0e:	5557      	strb	r7, [r2, r5]
 8014b10:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8014b14:	705f      	strb	r7, [r3, #1]
 8014b16:	e7d9      	b.n	8014acc <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014b18:	8983      	ldrh	r3, [r0, #12]
 8014b1a:	089b      	lsrs	r3, r3, #2
 8014b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8014b20:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014b22:	4419      	add	r1, r3
 8014b24:	f7ff fdb5 	bl	8014692 <move_window>
			if (res != FR_OK) break;
 8014b28:	4606      	mov	r6, r0
 8014b2a:	2800      	cmp	r0, #0
 8014b2c:	d1d0      	bne.n	8014ad0 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014b2e:	89a1      	ldrh	r1, [r4, #12]
 8014b30:	00ad      	lsls	r5, r5, #2
 8014b32:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8014b36:	fbb5 f2f1 	udiv	r2, r5, r1
 8014b3a:	fb01 5512 	mls	r5, r1, r2, r5
 8014b3e:	441d      	add	r5, r3
 8014b40:	4628      	mov	r0, r5
 8014b42:	f7ff fc49 	bl	80143d8 <ld_dword>
 8014b46:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8014b4a:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014b4e:	4339      	orrs	r1, r7
 8014b50:	4628      	mov	r0, r5
 8014b52:	f7ff fc49 	bl	80143e8 <st_dword>
 8014b56:	e7b9      	b.n	8014acc <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 8014b58:	2602      	movs	r6, #2
 8014b5a:	e7b9      	b.n	8014ad0 <put_fat+0x9c>

08014b5c <get_fat.isra.7>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014b5c:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8014b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b60:	4604      	mov	r4, r0
 8014b62:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014b64:	d968      	bls.n	8014c38 <get_fat.isra.7+0xdc>
 8014b66:	69c3      	ldr	r3, [r0, #28]
 8014b68:	4299      	cmp	r1, r3
 8014b6a:	d265      	bcs.n	8014c38 <get_fat.isra.7+0xdc>
		switch (fs->fs_type) {
 8014b6c:	7803      	ldrb	r3, [r0, #0]
 8014b6e:	2b02      	cmp	r3, #2
 8014b70:	d032      	beq.n	8014bd8 <get_fat.isra.7+0x7c>
 8014b72:	2b03      	cmp	r3, #3
 8014b74:	d048      	beq.n	8014c08 <get_fat.isra.7+0xac>
 8014b76:	2b01      	cmp	r3, #1
 8014b78:	d15e      	bne.n	8014c38 <get_fat.isra.7+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 8014b7a:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014b7e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014b80:	8983      	ldrh	r3, [r0, #12]
 8014b82:	fbb5 f3f3 	udiv	r3, r5, r3
 8014b86:	4419      	add	r1, r3
 8014b88:	f7ff fd83 	bl	8014692 <move_window>
 8014b8c:	b110      	cbz	r0, 8014b94 <get_fat.isra.7+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014b8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8014b94:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];
 8014b98:	fbb5 f2f1 	udiv	r2, r5, r1
 8014b9c:	fb01 5212 	mls	r2, r1, r2, r5
 8014ba0:	4422      	add	r2, r4
 8014ba2:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	fbb7 f1f1 	udiv	r1, r7, r1
 8014baa:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 8014bac:	f892 5038 	ldrb.w	r5, [r2, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014bb0:	f7ff fd6f 	bl	8014692 <move_window>
 8014bb4:	2800      	cmp	r0, #0
 8014bb6:	d1ea      	bne.n	8014b8e <get_fat.isra.7+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014bb8:	89a2      	ldrh	r2, [r4, #12]
 8014bba:	fbb7 f3f2 	udiv	r3, r7, r2
 8014bbe:	fb02 7313 	mls	r3, r2, r3, r7
 8014bc2:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014bc4:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8014bc6:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 8014bca:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014bce:	bf4c      	ite	mi
 8014bd0:	0900      	lsrmi	r0, r0, #4
 8014bd2:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8014bd6:	e7dc      	b.n	8014b92 <get_fat.isra.7+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014bd8:	8983      	ldrh	r3, [r0, #12]
 8014bda:	085b      	lsrs	r3, r3, #1
 8014bdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8014be0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014be2:	4419      	add	r1, r3
 8014be4:	f7ff fd55 	bl	8014692 <move_window>
 8014be8:	2800      	cmp	r0, #0
 8014bea:	d1d0      	bne.n	8014b8e <get_fat.isra.7+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014bec:	89a1      	ldrh	r1, [r4, #12]
 8014bee:	0076      	lsls	r6, r6, #1
 8014bf0:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8014bf4:	fbb6 f3f1 	udiv	r3, r6, r1
 8014bf8:	fb01 6613 	mls	r6, r1, r3, r6
 8014bfc:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 8014bfe:	5d90      	ldrb	r0, [r2, r6]
 8014c00:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014c02:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8014c06:	e7c4      	b.n	8014b92 <get_fat.isra.7+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014c08:	8983      	ldrh	r3, [r0, #12]
 8014c0a:	089b      	lsrs	r3, r3, #2
 8014c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8014c10:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014c12:	4419      	add	r1, r3
 8014c14:	f7ff fd3d 	bl	8014692 <move_window>
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	d1b8      	bne.n	8014b8e <get_fat.isra.7+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014c1c:	89a2      	ldrh	r2, [r4, #12]
 8014c1e:	00b6      	lsls	r6, r6, #2
 8014c20:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014c24:	fbb6 f3f2 	udiv	r3, r6, r2
 8014c28:	fb02 6613 	mls	r6, r2, r3, r6
 8014c2c:	4430      	add	r0, r6
 8014c2e:	f7ff fbd3 	bl	80143d8 <ld_dword>
 8014c32:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8014c36:	e7ac      	b.n	8014b92 <get_fat.isra.7+0x36>
			val = 1;	/* Internal error */
 8014c38:	2001      	movs	r0, #1
 8014c3a:	e7aa      	b.n	8014b92 <get_fat.isra.7+0x36>

08014c3c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014c3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8014c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c42:	4605      	mov	r5, r0
 8014c44:	460e      	mov	r6, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014c46:	d301      	bcc.n	8014c4c <dir_sdi+0x10>
		return FR_INT_ERR;
 8014c48:	2002      	movs	r0, #2
}
 8014c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014c4c:	06ca      	lsls	r2, r1, #27
 8014c4e:	d1fb      	bne.n	8014c48 <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014c50:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8014c52:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8014c54:	6169      	str	r1, [r5, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014c56:	b9d2      	cbnz	r2, 8014c8e <dir_sdi+0x52>
 8014c58:	7823      	ldrb	r3, [r4, #0]
 8014c5a:	2b02      	cmp	r3, #2
 8014c5c:	d901      	bls.n	8014c62 <dir_sdi+0x26>
		clst = fs->dirbase;
 8014c5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014c60:	b9b3      	cbnz	r3, 8014c90 <dir_sdi+0x54>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014c62:	8923      	ldrh	r3, [r4, #8]
 8014c64:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8014c68:	d9ee      	bls.n	8014c48 <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 8014c6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014c6c:	61eb      	str	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8014c6e:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014c70:	69ea      	ldr	r2, [r5, #28]
 8014c72:	2a00      	cmp	r2, #0
 8014c74:	d0e8      	beq.n	8014c48 <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014c76:	89a1      	ldrh	r1, [r4, #12]
 8014c78:	fbb6 f3f1 	udiv	r3, r6, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014c7c:	3438      	adds	r4, #56	; 0x38
 8014c7e:	fb01 6613 	mls	r6, r1, r3, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014c82:	441a      	add	r2, r3
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014c84:	4434      	add	r4, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014c86:	61ea      	str	r2, [r5, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014c88:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8014c8a:	2000      	movs	r0, #0
 8014c8c:	e7dd      	b.n	8014c4a <dir_sdi+0xe>
 8014c8e:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014c90:	8962      	ldrh	r2, [r4, #10]
 8014c92:	89a7      	ldrh	r7, [r4, #12]
 8014c94:	4357      	muls	r7, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8014c96:	461a      	mov	r2, r3
 8014c98:	42be      	cmp	r6, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014c9a:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8014c9c:	d204      	bcs.n	8014ca8 <dir_sdi+0x6c>
		dp->sect = clust2sect(fs, clst);
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f7ff fc46 	bl	8014530 <clust2sect>
 8014ca4:	61e8      	str	r0, [r5, #28]
 8014ca6:	e7e2      	b.n	8014c6e <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014ca8:	6828      	ldr	r0, [r5, #0]
 8014caa:	f7ff ff57 	bl	8014b5c <get_fat.isra.7>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014cae:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014cb0:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014cb2:	d006      	beq.n	8014cc2 <dir_sdi+0x86>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014cb4:	2801      	cmp	r0, #1
 8014cb6:	d9c7      	bls.n	8014c48 <dir_sdi+0xc>
 8014cb8:	69e3      	ldr	r3, [r4, #28]
 8014cba:	4283      	cmp	r3, r0
 8014cbc:	d9c4      	bls.n	8014c48 <dir_sdi+0xc>
			ofs -= csz;
 8014cbe:	1bf6      	subs	r6, r6, r7
 8014cc0:	e7ea      	b.n	8014c98 <dir_sdi+0x5c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014cc2:	2001      	movs	r0, #1
 8014cc4:	e7c1      	b.n	8014c4a <dir_sdi+0xe>

08014cc6 <create_chain>:
{
 8014cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cca:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8014ccc:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8014cce:	460f      	mov	r7, r1
 8014cd0:	b971      	cbnz	r1, 8014cf0 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014cd2:	696e      	ldr	r6, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014cd4:	b1f6      	cbz	r6, 8014d14 <create_chain+0x4e>
 8014cd6:	69eb      	ldr	r3, [r5, #28]
 8014cd8:	42b3      	cmp	r3, r6
 8014cda:	bf98      	it	ls
 8014cdc:	2601      	movls	r6, #1
 8014cde:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014ce0:	69eb      	ldr	r3, [r5, #28]
			ncl++;							/* Next cluster */
 8014ce2:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014ce4:	42a3      	cmp	r3, r4
 8014ce6:	d818      	bhi.n	8014d1a <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8014ce8:	2e01      	cmp	r6, #1
 8014cea:	d815      	bhi.n	8014d18 <create_chain+0x52>
 8014cec:	2400      	movs	r4, #0
 8014cee:	e009      	b.n	8014d04 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	f7ff ff33 	bl	8014b5c <get_fat.isra.7>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014cf6:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014cf8:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014cfa:	d937      	bls.n	8014d6c <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014cfc:	1c43      	adds	r3, r0, #1
 8014cfe:	d104      	bne.n	8014d0a <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014d00:	f04f 34ff 	mov.w	r4, #4294967295
}
 8014d04:	4620      	mov	r0, r4
 8014d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014d0a:	69eb      	ldr	r3, [r5, #28]
 8014d0c:	4283      	cmp	r3, r0
 8014d0e:	d8f9      	bhi.n	8014d04 <create_chain+0x3e>
 8014d10:	463e      	mov	r6, r7
 8014d12:	e7e4      	b.n	8014cde <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014d14:	2601      	movs	r6, #1
 8014d16:	e7e2      	b.n	8014cde <create_chain+0x18>
				ncl = 2;
 8014d18:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014d1a:	4621      	mov	r1, r4
 8014d1c:	f8d8 0000 	ldr.w	r0, [r8]
 8014d20:	f7ff ff1c 	bl	8014b5c <get_fat.isra.7>
			if (cs == 0) break;				/* Found a free cluster */
 8014d24:	b130      	cbz	r0, 8014d34 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014d26:	2801      	cmp	r0, #1
 8014d28:	d020      	beq.n	8014d6c <create_chain+0xa6>
 8014d2a:	3001      	adds	r0, #1
 8014d2c:	d0e8      	beq.n	8014d00 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8014d2e:	42b4      	cmp	r4, r6
 8014d30:	d1d6      	bne.n	8014ce0 <create_chain+0x1a>
 8014d32:	e7db      	b.n	8014cec <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014d34:	f04f 32ff 	mov.w	r2, #4294967295
 8014d38:	4621      	mov	r1, r4
 8014d3a:	4628      	mov	r0, r5
 8014d3c:	f7ff fe7a 	bl	8014a34 <put_fat>
		if (res == FR_OK && clst != 0) {
 8014d40:	b990      	cbnz	r0, 8014d68 <create_chain+0xa2>
 8014d42:	b957      	cbnz	r7, 8014d5a <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014d44:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8014d48:	3a02      	subs	r2, #2
 8014d4a:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 8014d4c:	616c      	str	r4, [r5, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014d4e:	d90f      	bls.n	8014d70 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8014d50:	792b      	ldrb	r3, [r5, #4]
 8014d52:	f043 0301 	orr.w	r3, r3, #1
 8014d56:	712b      	strb	r3, [r5, #4]
 8014d58:	e7d4      	b.n	8014d04 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014d5a:	4622      	mov	r2, r4
 8014d5c:	4639      	mov	r1, r7
 8014d5e:	4628      	mov	r0, r5
 8014d60:	f7ff fe68 	bl	8014a34 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d0ed      	beq.n	8014d44 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014d68:	2801      	cmp	r0, #1
 8014d6a:	d0c9      	beq.n	8014d00 <create_chain+0x3a>
 8014d6c:	2401      	movs	r4, #1
 8014d6e:	e7c9      	b.n	8014d04 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014d70:	3b01      	subs	r3, #1
 8014d72:	61ab      	str	r3, [r5, #24]
 8014d74:	e7ec      	b.n	8014d50 <create_chain+0x8a>

08014d76 <remove_chain>:
{
 8014d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d78:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014d7a:	2d01      	cmp	r5, #1
{
 8014d7c:	4607      	mov	r7, r0
 8014d7e:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014d80:	d92c      	bls.n	8014ddc <remove_chain+0x66>
	FATFS *fs = obj->fs;
 8014d82:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014d84:	69e3      	ldr	r3, [r4, #28]
 8014d86:	42ab      	cmp	r3, r5
 8014d88:	d928      	bls.n	8014ddc <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014d8a:	b12a      	cbz	r2, 8014d98 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8014d90:	4620      	mov	r0, r4
 8014d92:	f7ff fe4f 	bl	8014a34 <put_fat>
		if (res != FR_OK) return res;
 8014d96:	b930      	cbnz	r0, 8014da6 <remove_chain+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014d98:	4629      	mov	r1, r5
 8014d9a:	6838      	ldr	r0, [r7, #0]
 8014d9c:	f7ff fede 	bl	8014b5c <get_fat.isra.7>
		if (nxt == 0) break;				/* Empty cluster? */
 8014da0:	4606      	mov	r6, r0
 8014da2:	b908      	cbnz	r0, 8014da8 <remove_chain+0x32>
	return FR_OK;
 8014da4:	2000      	movs	r0, #0
}
 8014da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014da8:	2801      	cmp	r0, #1
 8014daa:	d017      	beq.n	8014ddc <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014dac:	1c43      	adds	r3, r0, #1
 8014dae:	d017      	beq.n	8014de0 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014db0:	2200      	movs	r2, #0
 8014db2:	4629      	mov	r1, r5
 8014db4:	4620      	mov	r0, r4
 8014db6:	f7ff fe3d 	bl	8014a34 <put_fat>
			if (res != FR_OK) return res;
 8014dba:	2800      	cmp	r0, #0
 8014dbc:	d1f3      	bne.n	8014da6 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014dbe:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8014dc2:	1e91      	subs	r1, r2, #2
 8014dc4:	428b      	cmp	r3, r1
 8014dc6:	d205      	bcs.n	8014dd4 <remove_chain+0x5e>
			fs->free_clst++;
 8014dc8:	3301      	adds	r3, #1
 8014dca:	61a3      	str	r3, [r4, #24]
			fs->fsi_flag |= 1;
 8014dcc:	7923      	ldrb	r3, [r4, #4]
 8014dce:	f043 0301 	orr.w	r3, r3, #1
 8014dd2:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014dd4:	42b2      	cmp	r2, r6
 8014dd6:	4635      	mov	r5, r6
 8014dd8:	d8de      	bhi.n	8014d98 <remove_chain+0x22>
 8014dda:	e7e3      	b.n	8014da4 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014ddc:	2002      	movs	r0, #2
 8014dde:	e7e2      	b.n	8014da6 <remove_chain+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014de0:	2001      	movs	r0, #1
 8014de2:	e7e0      	b.n	8014da6 <remove_chain+0x30>

08014de4 <sync_fs>:
{
 8014de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014de6:	4604      	mov	r4, r0
	res = sync_window(fs);
 8014de8:	f7ff fc4d 	bl	8014686 <sync_window>
 8014dec:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8014dee:	2800      	cmp	r0, #0
 8014df0:	d141      	bne.n	8014e76 <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014df2:	7823      	ldrb	r3, [r4, #0]
 8014df4:	2b03      	cmp	r3, #3
 8014df6:	d136      	bne.n	8014e66 <sync_fs+0x82>
 8014df8:	7927      	ldrb	r7, [r4, #4]
 8014dfa:	2f01      	cmp	r7, #1
 8014dfc:	d133      	bne.n	8014e66 <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8014dfe:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8014e02:	4601      	mov	r1, r0
 8014e04:	89a2      	ldrh	r2, [r4, #12]
 8014e06:	4630      	mov	r0, r6
 8014e08:	f7ff faf6 	bl	80143f8 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8014e0c:	2355      	movs	r3, #85	; 0x55
 8014e0e:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val;
 8014e12:	23aa      	movs	r3, #170	; 0xaa
 8014e14:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 8014e18:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8014e1a:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8014e1c:	2172      	movs	r1, #114	; 0x72
 8014e1e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8014e22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	*ptr++ = (BYTE)val; val >>= 8;
 8014e26:	2361      	movs	r3, #97	; 0x61
 8014e28:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	*ptr++ = (BYTE)val;
 8014e2c:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
 8014e30:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val;
 8014e34:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8014e38:	f884 121c 	strb.w	r1, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 8014e3c:	f884 121d 	strb.w	r1, [r4, #541]	; 0x21d
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014e40:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8014e44:	69a1      	ldr	r1, [r4, #24]
 8014e46:	f7ff facf 	bl	80143e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014e4a:	6961      	ldr	r1, [r4, #20]
 8014e4c:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8014e50:	f7ff faca 	bl	80143e8 <st_dword>
			fs->winsect = fs->volbase + 1;
 8014e54:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014e56:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8014e58:	3201      	adds	r2, #1
 8014e5a:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014e5c:	463b      	mov	r3, r7
 8014e5e:	4631      	mov	r1, r6
 8014e60:	f7ff fa9e 	bl	80143a0 <disk_write>
			fs->fsi_flag = 0;
 8014e64:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014e66:	2200      	movs	r2, #0
 8014e68:	4611      	mov	r1, r2
 8014e6a:	7860      	ldrb	r0, [r4, #1]
 8014e6c:	f7ff faa6 	bl	80143bc <disk_ioctl>
 8014e70:	3000      	adds	r0, #0
 8014e72:	bf18      	it	ne
 8014e74:	2001      	movne	r0, #1
}
 8014e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014e78 <dir_next>:
{
 8014e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014e7c:	69c3      	ldr	r3, [r0, #28]
{
 8014e7e:	4605      	mov	r5, r0
 8014e80:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014e82:	b1b3      	cbz	r3, 8014eb2 <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014e84:	6947      	ldr	r7, [r0, #20]
 8014e86:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014e88:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8014e8c:	d211      	bcs.n	8014eb2 <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 8014e8e:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014e90:	89a2      	ldrh	r2, [r4, #12]
 8014e92:	fbb7 f0f2 	udiv	r0, r7, r2
 8014e96:	fb02 7210 	mls	r2, r2, r0, r7
 8014e9a:	2a00      	cmp	r2, #0
 8014e9c:	d14d      	bne.n	8014f3a <dir_next+0xc2>
		if (!dp->clust) {		/* Static table */
 8014e9e:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 8014ea0:	3301      	adds	r3, #1
 8014ea2:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 8014ea4:	b939      	cbnz	r1, 8014eb6 <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014ea6:	8923      	ldrh	r3, [r4, #8]
 8014ea8:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8014eac:	d845      	bhi.n	8014f3a <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014eb2:	2004      	movs	r0, #4
 8014eb4:	e00a      	b.n	8014ecc <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014eb6:	8963      	ldrh	r3, [r4, #10]
 8014eb8:	3b01      	subs	r3, #1
 8014eba:	4203      	tst	r3, r0
 8014ebc:	d13d      	bne.n	8014f3a <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	f7ff fe4c 	bl	8014b5c <get_fat.isra.7>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014ec4:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014ec6:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014ec8:	d802      	bhi.n	8014ed0 <dir_next+0x58>
 8014eca:	2002      	movs	r0, #2
}
 8014ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014ed0:	1c42      	adds	r2, r0, #1
 8014ed2:	d101      	bne.n	8014ed8 <dir_next+0x60>
 8014ed4:	2001      	movs	r0, #1
 8014ed6:	e7f9      	b.n	8014ecc <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014ed8:	69e3      	ldr	r3, [r4, #28]
 8014eda:	4283      	cmp	r3, r0
 8014edc:	d827      	bhi.n	8014f2e <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
 8014ede:	f1b8 0f00 	cmp.w	r8, #0
 8014ee2:	d0e4      	beq.n	8014eae <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014ee4:	69a9      	ldr	r1, [r5, #24]
 8014ee6:	4628      	mov	r0, r5
 8014ee8:	f7ff feed 	bl	8014cc6 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014eec:	4606      	mov	r6, r0
 8014eee:	2800      	cmp	r0, #0
 8014ef0:	d03c      	beq.n	8014f6c <dir_next+0xf4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014ef2:	2801      	cmp	r0, #1
 8014ef4:	d0e9      	beq.n	8014eca <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014ef6:	1c43      	adds	r3, r0, #1
 8014ef8:	d0ec      	beq.n	8014ed4 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014efa:	4620      	mov	r0, r4
 8014efc:	f7ff fbc3 	bl	8014686 <sync_window>
 8014f00:	4680      	mov	r8, r0
 8014f02:	2800      	cmp	r0, #0
 8014f04:	d1e6      	bne.n	8014ed4 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014f06:	4601      	mov	r1, r0
 8014f08:	89a2      	ldrh	r2, [r4, #12]
 8014f0a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014f0e:	f7ff fa73 	bl	80143f8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014f12:	4631      	mov	r1, r6
 8014f14:	4620      	mov	r0, r4
 8014f16:	f7ff fb0b 	bl	8014530 <clust2sect>
						fs->wflag = 1;
 8014f1a:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014f1e:	6360      	str	r0, [r4, #52]	; 0x34
 8014f20:	8963      	ldrh	r3, [r4, #10]
 8014f22:	4598      	cmp	r8, r3
 8014f24:	d315      	bcc.n	8014f52 <dir_next+0xda>
					fs->winsect -= n;							/* Restore window offset */
 8014f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f28:	eba3 0308 	sub.w	r3, r3, r8
 8014f2c:	6363      	str	r3, [r4, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8014f2e:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8014f30:	4631      	mov	r1, r6
 8014f32:	4620      	mov	r0, r4
 8014f34:	f7ff fafc 	bl	8014530 <clust2sect>
 8014f38:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014f3a:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 8014f3c:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014f3e:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8014f42:	fbb7 f2f1 	udiv	r2, r7, r1
 8014f46:	fb01 7712 	mls	r7, r1, r2, r7
 8014f4a:	441f      	add	r7, r3
 8014f4c:	622f      	str	r7, [r5, #32]
	return FR_OK;
 8014f4e:	2000      	movs	r0, #0
 8014f50:	e7bc      	b.n	8014ecc <dir_next+0x54>
						fs->wflag = 1;
 8014f52:	f884 9003 	strb.w	r9, [r4, #3]
 8014f56:	4620      	mov	r0, r4
 8014f58:	f7ff fb72 	bl	8014640 <sync_window.part.3>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d1b9      	bne.n	8014ed4 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014f60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f62:	3301      	adds	r3, #1
 8014f64:	f108 0801 	add.w	r8, r8, #1
 8014f68:	6363      	str	r3, [r4, #52]	; 0x34
 8014f6a:	e7d9      	b.n	8014f20 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014f6c:	2007      	movs	r0, #7
 8014f6e:	e7ad      	b.n	8014ecc <dir_next+0x54>

08014f70 <dir_find>:
{
 8014f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014f74:	2100      	movs	r1, #0
{
 8014f76:	b085      	sub	sp, #20
 8014f78:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8014f7a:	f8d0 a000 	ldr.w	sl, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014f7e:	f7ff fe5d 	bl	8014c3c <dir_sdi>
	if (res != FR_OK) return res;
 8014f82:	4680      	mov	r8, r0
 8014f84:	2800      	cmp	r0, #0
 8014f86:	f040 809c 	bne.w	80150c2 <dir_find+0x152>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f8e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8014f92:	632b      	str	r3, [r5, #48]	; 0x30
 8014f94:	464e      	mov	r6, r9
		res = move_window(fs, dp->sect);
 8014f96:	69e9      	ldr	r1, [r5, #28]
 8014f98:	4650      	mov	r0, sl
 8014f9a:	f7ff fb7a 	bl	8014692 <move_window>
		if (res != FR_OK) break;
 8014f9e:	4680      	mov	r8, r0
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	f040 808e 	bne.w	80150c2 <dir_find+0x152>
		c = dp->dir[DIR_Name];
 8014fa6:	6a2c      	ldr	r4, [r5, #32]
 8014fa8:	7827      	ldrb	r7, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014faa:	2f00      	cmp	r7, #0
 8014fac:	f000 808d 	beq.w	80150ca <dir_find+0x15a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8014fb0:	7ae2      	ldrb	r2, [r4, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014fb2:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8014fb4:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8014fb8:	71ab      	strb	r3, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014fba:	d003      	beq.n	8014fc4 <dir_find+0x54>
 8014fbc:	0712      	lsls	r2, r2, #28
 8014fbe:	d505      	bpl.n	8014fcc <dir_find+0x5c>
 8014fc0:	2b0f      	cmp	r3, #15
 8014fc2:	d005      	beq.n	8014fd0 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8014fc8:	632b      	str	r3, [r5, #48]	; 0x30
 8014fca:	e058      	b.n	801507e <dir_find+0x10e>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8014fcc:	2b0f      	cmp	r3, #15
 8014fce:	d15d      	bne.n	801508c <dir_find+0x11c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8014fd0:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8014fd4:	0658      	lsls	r0, r3, #25
 8014fd6:	d448      	bmi.n	801506a <dir_find+0xfa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8014fd8:	0679      	lsls	r1, r7, #25
 8014fda:	d54e      	bpl.n	801507a <dir_find+0x10a>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8014fdc:	696b      	ldr	r3, [r5, #20]
						sum = dp->dir[LDIR_Chksum];
 8014fde:	f894 900d 	ldrb.w	r9, [r4, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8014fe2:	632b      	str	r3, [r5, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8014fe4:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014fe8:	7b63      	ldrb	r3, [r4, #13]
 8014fea:	454b      	cmp	r3, r9
 8014fec:	d147      	bne.n	801507e <dir_find+0x10e>
	rv = rv << 8 | ptr[0];
 8014fee:	7ee3      	ldrb	r3, [r4, #27]
 8014ff0:	7ea6      	ldrb	r6, [r4, #26]
 8014ff2:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8014ff6:	b236      	sxth	r6, r6
 8014ff8:	2e00      	cmp	r6, #0
 8014ffa:	d140      	bne.n	801507e <dir_find+0x10e>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8014ffc:	f894 8000 	ldrb.w	r8, [r4]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015000:	f8da b010 	ldr.w	fp, [sl, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8015004:	f008 083f 	and.w	r8, r8, #63	; 0x3f
 8015008:	f108 33ff 	add.w	r3, r8, #4294967295
 801500c:	f04f 080d 	mov.w	r8, #13
 8015010:	fb08 f803 	mul.w	r8, r8, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015014:	2101      	movs	r1, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015016:	4b2e      	ldr	r3, [pc, #184]	; (80150d0 <dir_find+0x160>)
 8015018:	5cf2      	ldrb	r2, [r6, r3]
 801501a:	18a3      	adds	r3, r4, r2
	rv = rv << 8 | ptr[0];
 801501c:	7858      	ldrb	r0, [r3, #1]
 801501e:	5ca3      	ldrb	r3, [r4, r2]
 8015020:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		if (wc) {
 8015024:	b369      	cbz	r1, 8015082 <dir_find+0x112>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015026:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 801502a:	d828      	bhi.n	801507e <dir_find+0x10e>
 801502c:	4618      	mov	r0, r3
 801502e:	9303      	str	r3, [sp, #12]
 8015030:	f000 fda2 	bl	8015b78 <ff_wtoupper>
 8015034:	f108 0201 	add.w	r2, r8, #1
 8015038:	9002      	str	r0, [sp, #8]
 801503a:	f83b 0018 	ldrh.w	r0, [fp, r8, lsl #1]
 801503e:	9201      	str	r2, [sp, #4]
 8015040:	f000 fd9a 	bl	8015b78 <ff_wtoupper>
 8015044:	9902      	ldr	r1, [sp, #8]
 8015046:	4281      	cmp	r1, r0
 8015048:	d119      	bne.n	801507e <dir_find+0x10e>
	rv = rv << 8 | ptr[0];
 801504a:	9b03      	ldr	r3, [sp, #12]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801504c:	9a01      	ldr	r2, [sp, #4]
	rv = rv << 8 | ptr[0];
 801504e:	4619      	mov	r1, r3
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015050:	4690      	mov	r8, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015052:	3601      	adds	r6, #1
 8015054:	2e0d      	cmp	r6, #13
 8015056:	d1de      	bne.n	8015016 <dir_find+0xa6>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015058:	7823      	ldrb	r3, [r4, #0]
 801505a:	065a      	lsls	r2, r3, #25
 801505c:	d503      	bpl.n	8015066 <dir_find+0xf6>
 801505e:	b111      	cbz	r1, 8015066 <dir_find+0xf6>
 8015060:	f83b 3018 	ldrh.w	r3, [fp, r8, lsl #1]
 8015064:	b95b      	cbnz	r3, 801507e <dir_find+0x10e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015066:	3f01      	subs	r7, #1
 8015068:	b2fe      	uxtb	r6, r7
		res = dir_next(dp, 0);	/* Next entry */
 801506a:	2100      	movs	r1, #0
 801506c:	4628      	mov	r0, r5
 801506e:	f7ff ff03 	bl	8014e78 <dir_next>
	} while (res == FR_OK);
 8015072:	4680      	mov	r8, r0
 8015074:	2800      	cmp	r0, #0
 8015076:	d08e      	beq.n	8014f96 <dir_find+0x26>
 8015078:	e023      	b.n	80150c2 <dir_find+0x152>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801507a:	42be      	cmp	r6, r7
 801507c:	d0b4      	beq.n	8014fe8 <dir_find+0x78>
 801507e:	26ff      	movs	r6, #255	; 0xff
 8015080:	e7f3      	b.n	801506a <dir_find+0xfa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015086:	4293      	cmp	r3, r2
 8015088:	d0e3      	beq.n	8015052 <dir_find+0xe2>
 801508a:	e7f8      	b.n	801507e <dir_find+0x10e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801508c:	b926      	cbnz	r6, 8015098 <dir_find+0x128>
 801508e:	4620      	mov	r0, r4
 8015090:	f7ff fa6d 	bl	801456e <sum_sfn>
 8015094:	4548      	cmp	r0, r9
 8015096:	d014      	beq.n	80150c2 <dir_find+0x152>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015098:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 801509c:	07db      	lsls	r3, r3, #31
 801509e:	d491      	bmi.n	8014fc4 <dir_find+0x54>
 80150a0:	f105 0224 	add.w	r2, r5, #36	; 0x24
 80150a4:	f104 010b 	add.w	r1, r4, #11
		r = *d++ - *s++;
 80150a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80150ac:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 80150b0:	428c      	cmp	r4, r1
		r = *d++ - *s++;
 80150b2:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 80150b6:	d002      	beq.n	80150be <dir_find+0x14e>
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d0f5      	beq.n	80150a8 <dir_find+0x138>
 80150bc:	e782      	b.n	8014fc4 <dir_find+0x54>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d180      	bne.n	8014fc4 <dir_find+0x54>
}
 80150c2:	4640      	mov	r0, r8
 80150c4:	b005      	add	sp, #20
 80150c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80150ca:	f04f 0804 	mov.w	r8, #4
 80150ce:	e7f8      	b.n	80150c2 <dir_find+0x152>
 80150d0:	080012e0 	.word	0x080012e0

080150d4 <dir_register>:
{
 80150d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80150d8:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
 80150dc:	f014 04a0 	ands.w	r4, r4, #160	; 0xa0
{
 80150e0:	b089      	sub	sp, #36	; 0x24
 80150e2:	4605      	mov	r5, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80150e4:	f040 8084 	bne.w	80151f0 <dir_register+0x11c>
	FATFS *fs = dp->obj.fs;
 80150e8:	6807      	ldr	r7, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80150ea:	693a      	ldr	r2, [r7, #16]
 80150ec:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d15d      	bne.n	80151b0 <dir_register+0xdc>
	mem_cpy(sn, dp->fn, 12);
 80150f4:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80150f8:	220c      	movs	r2, #12
 80150fa:	4631      	mov	r1, r6
 80150fc:	a805      	add	r0, sp, #20
 80150fe:	f7ff fa7c 	bl	80145fa <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8015102:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015106:	07db      	lsls	r3, r3, #31
 8015108:	d57b      	bpl.n	8015202 <dir_register+0x12e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801510a:	2340      	movs	r3, #64	; 0x40
				if (sr & 0x10000) sr ^= 0x11021;
 801510c:	f8df 822c 	ldr.w	r8, [pc, #556]	; 801533c <dir_register+0x268>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8015110:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8015114:	f04f 0901 	mov.w	r9, #1
 8015118:	220b      	movs	r2, #11
 801511a:	a905      	add	r1, sp, #20
 801511c:	4630      	mov	r0, r6
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801511e:	f8d7 a010 	ldr.w	sl, [r7, #16]
 8015122:	f7ff fa6a 	bl	80145fa <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8015126:	f1b9 0f05 	cmp.w	r9, #5
 801512a:	d952      	bls.n	80151d2 <dir_register+0xfe>
 801512c:	f1aa 0102 	sub.w	r1, sl, #2
 8015130:	464b      	mov	r3, r9
		while (*lfn) {	/* Create a CRC */
 8015132:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8015136:	2a00      	cmp	r2, #0
 8015138:	d13c      	bne.n	80151b4 <dir_register+0xe0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801513a:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 801513c:	f003 000f 	and.w	r0, r3, #15
 8015140:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8015144:	2939      	cmp	r1, #57	; 0x39
 8015146:	bf88      	it	hi
 8015148:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 801514c:	3a01      	subs	r2, #1
 801514e:	a803      	add	r0, sp, #12
 8015150:	4410      	add	r0, r2
	} while (seq);
 8015152:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8015154:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8015156:	d1f1      	bne.n	801513c <dir_register+0x68>
	ns[i] = '~';
 8015158:	a908      	add	r1, sp, #32
 801515a:	4411      	add	r1, r2
 801515c:	207e      	movs	r0, #126	; 0x7e
 801515e:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015162:	429a      	cmp	r2, r3
 8015164:	d004      	beq.n	8015170 <dir_register+0x9c>
 8015166:	5cf1      	ldrb	r1, [r6, r3]
 8015168:	2920      	cmp	r1, #32
 801516a:	f103 0001 	add.w	r0, r3, #1
 801516e:	d132      	bne.n	80151d6 <dir_register+0x102>
 8015170:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015172:	2a07      	cmp	r2, #7
 8015174:	bf9b      	ittet	ls
 8015176:	a908      	addls	r1, sp, #32
 8015178:	1889      	addls	r1, r1, r2
 801517a:	2120      	movhi	r1, #32
 801517c:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8015180:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8015184:	eba3 0106 	sub.w	r1, r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015188:	bf98      	it	ls
 801518a:	3201      	addls	r2, #1
	} while (j < 8);
 801518c:	2907      	cmp	r1, #7
 801518e:	d9f0      	bls.n	8015172 <dir_register+0x9e>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015190:	4628      	mov	r0, r5
 8015192:	f7ff feed 	bl	8014f70 <dir_find>
 8015196:	4682      	mov	sl, r0
			if (res != FR_OK) break;
 8015198:	bb68      	cbnz	r0, 80151f6 <dir_register+0x122>
		for (n = 1; n < 100; n++) {
 801519a:	f109 0901 	add.w	r9, r9, #1
 801519e:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 80151a2:	d1b9      	bne.n	8015118 <dir_register+0x44>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80151a4:	f04f 0a07 	mov.w	sl, #7
}
 80151a8:	4650      	mov	r0, sl
 80151aa:	b009      	add	sp, #36	; 0x24
 80151ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80151b0:	3401      	adds	r4, #1
 80151b2:	e79b      	b.n	80150ec <dir_register+0x18>
		while (*lfn) {	/* Create a CRC */
 80151b4:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 80151b6:	f002 0c01 	and.w	ip, r2, #1
 80151ba:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80151be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80151c2:	bf18      	it	ne
 80151c4:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 80151c8:	3801      	subs	r0, #1
				wc >>= 1;
 80151ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 80151ce:	d1f2      	bne.n	80151b6 <dir_register+0xe2>
 80151d0:	e7af      	b.n	8015132 <dir_register+0x5e>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80151d2:	464b      	mov	r3, r9
 80151d4:	e7b1      	b.n	801513a <dir_register+0x66>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80151d6:	4603      	mov	r3, r0
 80151d8:	e7c3      	b.n	8015162 <dir_register+0x8e>
				n = 0;					/* Not a blank entry. Restart to search */
 80151da:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 80151dc:	2101      	movs	r1, #1
 80151de:	4628      	mov	r0, r5
 80151e0:	f7ff fe4a 	bl	8014e78 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80151e4:	4682      	mov	sl, r0
 80151e6:	b310      	cbz	r0, 801522e <dir_register+0x15a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80151e8:	f1ba 0f04 	cmp.w	sl, #4
 80151ec:	d0da      	beq.n	80151a4 <dir_register+0xd0>
 80151ee:	e7db      	b.n	80151a8 <dir_register+0xd4>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80151f0:	f04f 0a06 	mov.w	sl, #6
 80151f4:	e7d8      	b.n	80151a8 <dir_register+0xd4>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80151f6:	2804      	cmp	r0, #4
 80151f8:	d1d6      	bne.n	80151a8 <dir_register+0xd4>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80151fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80151fe:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015202:	f89d 301f 	ldrb.w	r3, [sp, #31]
	FATFS *fs = dp->obj.fs;
 8015206:	f8d5 9000 	ldr.w	r9, [r5]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801520a:	079b      	lsls	r3, r3, #30
 801520c:	bf48      	it	mi
 801520e:	340c      	addmi	r4, #12
	res = dir_sdi(dp, 0);
 8015210:	f04f 0100 	mov.w	r1, #0
 8015214:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015216:	bf49      	itett	mi
 8015218:	230d      	movmi	r3, #13
 801521a:	2401      	movpl	r4, #1
 801521c:	fbb4 f4f3 	udivmi	r4, r4, r3
 8015220:	3401      	addmi	r4, #1
	res = dir_sdi(dp, 0);
 8015222:	f7ff fd0b 	bl	8014c3c <dir_sdi>
	if (res == FR_OK) {
 8015226:	4682      	mov	sl, r0
 8015228:	2800      	cmp	r0, #0
 801522a:	d1dd      	bne.n	80151e8 <dir_register+0x114>
		n = 0;
 801522c:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 801522e:	69e9      	ldr	r1, [r5, #28]
 8015230:	4648      	mov	r0, r9
 8015232:	f7ff fa2e 	bl	8014692 <move_window>
			if (res != FR_OK) break;
 8015236:	4682      	mov	sl, r0
 8015238:	2800      	cmp	r0, #0
 801523a:	d1d5      	bne.n	80151e8 <dir_register+0x114>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801523c:	6a2b      	ldr	r3, [r5, #32]
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	2be5      	cmp	r3, #229	; 0xe5
 8015242:	d001      	beq.n	8015248 <dir_register+0x174>
 8015244:	2b00      	cmp	r3, #0
 8015246:	d1c8      	bne.n	80151da <dir_register+0x106>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015248:	f108 0801 	add.w	r8, r8, #1
 801524c:	4544      	cmp	r4, r8
 801524e:	d1c5      	bne.n	80151dc <dir_register+0x108>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015250:	3c01      	subs	r4, #1
 8015252:	d056      	beq.n	8015302 <dir_register+0x22e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015254:	6969      	ldr	r1, [r5, #20]
 8015256:	4628      	mov	r0, r5
 8015258:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 801525c:	f7ff fcee 	bl	8014c3c <dir_sdi>
		if (res == FR_OK) {
 8015260:	4682      	mov	sl, r0
 8015262:	2800      	cmp	r0, #0
 8015264:	d1a0      	bne.n	80151a8 <dir_register+0xd4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015266:	4630      	mov	r0, r6
 8015268:	f7ff f981 	bl	801456e <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801526c:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015270:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8015272:	69e9      	ldr	r1, [r5, #28]
 8015274:	4638      	mov	r0, r7
 8015276:	f7ff fa0c 	bl	8014692 <move_window>
 801527a:	4682      	mov	sl, r0
				if (res != FR_OK) break;
 801527c:	2800      	cmp	r0, #0
 801527e:	d193      	bne.n	80151a8 <dir_register+0xd4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015280:	6a2b      	ldr	r3, [r5, #32]
 8015282:	f8d7 e010 	ldr.w	lr, [r7, #16]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015286:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801528a:	220f      	movs	r2, #15
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801528c:	b2e1      	uxtb	r1, r4
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801528e:	f04f 0c0d 	mov.w	ip, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015292:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015294:	1e4a      	subs	r2, r1, #1
 8015296:	fb0c f202 	mul.w	r2, ip, r2
	dir[LDIR_Type] = 0;
 801529a:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801529c:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 801529e:	76d8      	strb	r0, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80152a0:	9201      	str	r2, [sp, #4]
	s = wc = 0;
 80152a2:	4684      	mov	ip, r0
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80152a4:	4548      	cmp	r0, r9
 80152a6:	bf1f      	itttt	ne
 80152a8:	9a01      	ldrne	r2, [sp, #4]
 80152aa:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
 80152ae:	3201      	addne	r2, #1
 80152b0:	9201      	strne	r2, [sp, #4]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80152b2:	4a21      	ldr	r2, [pc, #132]	; (8015338 <dir_register+0x264>)
 80152b4:	f81c a002 	ldrb.w	sl, [ip, r2]
	} while (++s < 13);
 80152b8:	f10c 0c01 	add.w	ip, ip, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80152bc:	eb03 0b0a 	add.w	fp, r3, sl
	*ptr++ = (BYTE)val; val >>= 8;
 80152c0:	f803 000a 	strb.w	r0, [r3, sl]
 80152c4:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80152c8:	2800      	cmp	r0, #0
 80152ca:	bf08      	it	eq
 80152cc:	4648      	moveq	r0, r9
	} while (++s < 13);
 80152ce:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 80152d2:	f88b a001 	strb.w	sl, [fp, #1]
	} while (++s < 13);
 80152d6:	d1e5      	bne.n	80152a4 <dir_register+0x1d0>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80152d8:	4548      	cmp	r0, r9
 80152da:	d003      	beq.n	80152e4 <dir_register+0x210>
 80152dc:	9a01      	ldr	r2, [sp, #4]
 80152de:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 80152e2:	b90a      	cbnz	r2, 80152e8 <dir_register+0x214>
 80152e4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80152e8:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 80152ea:	2301      	movs	r3, #1
 80152ec:	70fb      	strb	r3, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80152ee:	2100      	movs	r1, #0
 80152f0:	4628      	mov	r0, r5
 80152f2:	f7ff fdc1 	bl	8014e78 <dir_next>
			} while (res == FR_OK && --nent);
 80152f6:	4682      	mov	sl, r0
 80152f8:	2800      	cmp	r0, #0
 80152fa:	f47f af55 	bne.w	80151a8 <dir_register+0xd4>
 80152fe:	3c01      	subs	r4, #1
 8015300:	d1b7      	bne.n	8015272 <dir_register+0x19e>
		res = move_window(fs, dp->sect);
 8015302:	69e9      	ldr	r1, [r5, #28]
 8015304:	4638      	mov	r0, r7
 8015306:	f7ff f9c4 	bl	8014692 <move_window>
		if (res == FR_OK) {
 801530a:	4682      	mov	sl, r0
 801530c:	2800      	cmp	r0, #0
 801530e:	f47f af4b 	bne.w	80151a8 <dir_register+0xd4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015312:	4601      	mov	r1, r0
 8015314:	2220      	movs	r2, #32
 8015316:	6a28      	ldr	r0, [r5, #32]
 8015318:	f7ff f86e 	bl	80143f8 <mem_set>
 801531c:	220b      	movs	r2, #11
 801531e:	4631      	mov	r1, r6
 8015320:	6a28      	ldr	r0, [r5, #32]
 8015322:	f7ff f96a 	bl	80145fa <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015326:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 801532a:	6a2a      	ldr	r2, [r5, #32]
 801532c:	f003 0318 	and.w	r3, r3, #24
 8015330:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8015332:	2301      	movs	r3, #1
 8015334:	70fb      	strb	r3, [r7, #3]
 8015336:	e737      	b.n	80151a8 <dir_register+0xd4>
 8015338:	080012e0 	.word	0x080012e0
 801533c:	00011021 	.word	0x00011021

08015340 <follow_path>:
{
 8015340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8015344:	6803      	ldr	r3, [r0, #0]
 8015346:	9300      	str	r3, [sp, #0]
{
 8015348:	4607      	mov	r7, r0
 801534a:	468a      	mov	sl, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801534c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015350:	2b2f      	cmp	r3, #47	; 0x2f
 8015352:	d0fa      	beq.n	801534a <follow_path+0xa>
 8015354:	2b5c      	cmp	r3, #92	; 0x5c
 8015356:	d0f8      	beq.n	801534a <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8015358:	2100      	movs	r1, #0
 801535a:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801535c:	f89a 3000 	ldrb.w	r3, [sl]
 8015360:	2b1f      	cmp	r3, #31
 8015362:	f200 80b1 	bhi.w	80154c8 <follow_path+0x188>
		dp->fn[NSFLAG] = NS_NONAME;
 8015366:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8015368:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 801536a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 801536e:	b003      	add	sp, #12
 8015370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8015374:	f7ff bc62 	b.w	8014c3c <dir_sdi>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8015378:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801537c:	d00b      	beq.n	8015396 <follow_path+0x56>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801537e:	2101      	movs	r1, #1
 8015380:	f000 fbdc 	bl	8015b3c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015384:	b138      	cbz	r0, 8015396 <follow_path+0x56>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8015386:	287f      	cmp	r0, #127	; 0x7f
 8015388:	d807      	bhi.n	801539a <follow_path+0x5a>
 801538a:	4986      	ldr	r1, [pc, #536]	; (80155a4 <follow_path+0x264>)
	while (*str && *str != chr) str++;
 801538c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015390:	b11a      	cbz	r2, 801539a <follow_path+0x5a>
 8015392:	4290      	cmp	r0, r2
 8015394:	d1fa      	bne.n	801538c <follow_path+0x4c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015396:	2006      	movs	r0, #6
 8015398:	e04e      	b.n	8015438 <follow_path+0xf8>
		lfn[di++] = w;					/* Store the Unicode character */
 801539a:	f825 0f02 	strh.w	r0, [r5, #2]!
 801539e:	4626      	mov	r6, r4
 80153a0:	e09a      	b.n	80154d8 <follow_path+0x198>
		w = lfn[di - 1];
 80153a2:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 80153a6:	2920      	cmp	r1, #32
 80153a8:	d002      	beq.n	80153b0 <follow_path+0x70>
 80153aa:	292e      	cmp	r1, #46	; 0x2e
 80153ac:	f040 80b3 	bne.w	8015516 <follow_path+0x1d6>
		di--;
 80153b0:	3e01      	subs	r6, #1
 80153b2:	e0ad      	b.n	8015510 <follow_path+0x1d0>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80153b4:	3101      	adds	r1, #1
 80153b6:	e0be      	b.n	8015536 <follow_path+0x1f6>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80153b8:	45c1      	cmp	r9, r8
 80153ba:	d205      	bcs.n	80153c8 <follow_path+0x88>
 80153bc:	42b2      	cmp	r2, r6
 80153be:	d14b      	bne.n	8015458 <follow_path+0x118>
			if (ni == 11) {				/* Long extension */
 80153c0:	f1b8 0f0b 	cmp.w	r8, #11
 80153c4:	d140      	bne.n	8015448 <follow_path+0x108>
 80153c6:	e002      	b.n	80153ce <follow_path+0x8e>
 80153c8:	f1b8 0f0b 	cmp.w	r8, #11
 80153cc:	d137      	bne.n	801543e <follow_path+0xfe>
				cf |= NS_LOSS | NS_LFN; break;
 80153ce:	f044 0403 	orr.w	r4, r4, #3
 80153d2:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80153d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80153da:	2be5      	cmp	r3, #229	; 0xe5
 80153dc:	bf04      	itt	eq
 80153de:	2305      	moveq	r3, #5
 80153e0:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80153e4:	f1b8 0f08 	cmp.w	r8, #8
 80153e8:	bf04      	itt	eq
 80153ea:	00ad      	lsleq	r5, r5, #2
 80153ec:	b2ed      	uxtbeq	r5, r5
 80153ee:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80153f2:	2b0c      	cmp	r3, #12
 80153f4:	d003      	beq.n	80153fe <follow_path+0xbe>
 80153f6:	f005 0203 	and.w	r2, r5, #3
 80153fa:	2a03      	cmp	r2, #3
 80153fc:	d101      	bne.n	8015402 <follow_path+0xc2>
 80153fe:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015402:	07a1      	lsls	r1, r4, #30
 8015404:	d409      	bmi.n	801541a <follow_path+0xda>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015406:	f005 0503 	and.w	r5, r5, #3
 801540a:	2d01      	cmp	r5, #1
 801540c:	bf08      	it	eq
 801540e:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8015412:	2b04      	cmp	r3, #4
 8015414:	bf08      	it	eq
 8015416:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801541a:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 801541e:	4638      	mov	r0, r7
 8015420:	f7ff fda6 	bl	8014f70 <dir_find>
			ns = dp->fn[NSFLAG];
 8015424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8015428:	2800      	cmp	r0, #0
 801542a:	d039      	beq.n	80154a0 <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801542c:	2804      	cmp	r0, #4
 801542e:	d103      	bne.n	8015438 <follow_path+0xf8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015430:	f013 0f04 	tst.w	r3, #4
 8015434:	bf08      	it	eq
 8015436:	2005      	moveq	r0, #5
}
 8015438:	b003      	add	sp, #12
 801543a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801543e:	42b2      	cmp	r2, r6
 8015440:	d002      	beq.n	8015448 <follow_path+0x108>
 8015442:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8015446:	d8c6      	bhi.n	80153d6 <follow_path+0x96>
			b <<= 2; continue;
 8015448:	00ad      	lsls	r5, r5, #2
 801544a:	b2ed      	uxtb	r5, r5
 801544c:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801544e:	f04f 080b 	mov.w	r8, #11
 8015452:	f04f 0908 	mov.w	r9, #8
 8015456:	e094      	b.n	8015582 <follow_path+0x242>
		if (w >= 0x80) {				/* Non ASCII character */
 8015458:	287f      	cmp	r0, #127	; 0x7f
 801545a:	d90c      	bls.n	8015476 <follow_path+0x136>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801545c:	2100      	movs	r1, #0
 801545e:	9201      	str	r2, [sp, #4]
 8015460:	f000 fb6c 	bl	8015b3c <ff_convert>
 8015464:	f044 0402 	orr.w	r4, r4, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015468:	9a01      	ldr	r2, [sp, #4]
 801546a:	b160      	cbz	r0, 8015486 <follow_path+0x146>
 801546c:	4b4e      	ldr	r3, [pc, #312]	; (80155a8 <follow_path+0x268>)
 801546e:	4418      	add	r0, r3
 8015470:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015474:	b138      	cbz	r0, 8015486 <follow_path+0x146>
 8015476:	4b4d      	ldr	r3, [pc, #308]	; (80155ac <follow_path+0x26c>)
	while (*str && *str != chr) str++;
 8015478:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801547c:	2900      	cmp	r1, #0
 801547e:	f000 8084 	beq.w	801558a <follow_path+0x24a>
 8015482:	4281      	cmp	r1, r0
 8015484:	d1f8      	bne.n	8015478 <follow_path+0x138>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8015486:	f044 0403 	orr.w	r4, r4, #3
 801548a:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 801548c:	eb07 0109 	add.w	r1, r7, r9
 8015490:	f109 0901 	add.w	r9, r9, #1
 8015494:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8015498:	e073      	b.n	8015582 <follow_path+0x242>
					b |= 2;
 801549a:	f045 0502 	orr.w	r5, r5, #2
 801549e:	e7f5      	b.n	801548c <follow_path+0x14c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80154a0:	075a      	lsls	r2, r3, #29
 80154a2:	d4c9      	bmi.n	8015438 <follow_path+0xf8>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80154a4:	79bb      	ldrb	r3, [r7, #6]
 80154a6:	06db      	lsls	r3, r3, #27
 80154a8:	d56d      	bpl.n	8015586 <follow_path+0x246>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80154aa:	9b00      	ldr	r3, [sp, #0]
 80154ac:	6978      	ldr	r0, [r7, #20]
 80154ae:	899a      	ldrh	r2, [r3, #12]
 80154b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80154b4:	fbb0 f3f2 	udiv	r3, r0, r2
 80154b8:	fb02 0313 	mls	r3, r2, r3, r0
 80154bc:	4419      	add	r1, r3
 80154be:	9b00      	ldr	r3, [sp, #0]
 80154c0:	7818      	ldrb	r0, [r3, #0]
 80154c2:	f7ff f8a3 	bl	801460c <ld_clust.isra.1>
 80154c6:	60b8      	str	r0, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80154c8:	683b      	ldr	r3, [r7, #0]
 80154ca:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80154ce:	f10a 38ff 	add.w	r8, sl, #4294967295
 80154d2:	f1ab 0502 	sub.w	r5, fp, #2
 80154d6:	2600      	movs	r6, #0
		w = p[si++];					/* Get a character */
 80154d8:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 80154dc:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 80154de:	f106 0401 	add.w	r4, r6, #1
		if (w < ' ') break;				/* Break if end of the path name */
 80154e2:	d90e      	bls.n	8015502 <follow_path+0x1c2>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80154e4:	282f      	cmp	r0, #47	; 0x2f
 80154e6:	d002      	beq.n	80154ee <follow_path+0x1ae>
 80154e8:	285c      	cmp	r0, #92	; 0x5c
 80154ea:	f47f af45 	bne.w	8015378 <follow_path+0x38>
 80154ee:	eb0a 0204 	add.w	r2, sl, r4
 80154f2:	eba2 040a 	sub.w	r4, r2, sl
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80154f6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80154fa:	292f      	cmp	r1, #47	; 0x2f
 80154fc:	d0f9      	beq.n	80154f2 <follow_path+0x1b2>
 80154fe:	295c      	cmp	r1, #92	; 0x5c
 8015500:	d0f7      	beq.n	80154f2 <follow_path+0x1b2>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015502:	281f      	cmp	r0, #31
	*path = &p[si];						/* Return pointer to the next segment */
 8015504:	44a2      	add	sl, r4
 8015506:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801550a:	bf8c      	ite	hi
 801550c:	2400      	movhi	r4, #0
 801550e:	2404      	movls	r4, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015510:	2e00      	cmp	r6, #0
 8015512:	f47f af46 	bne.w	80153a2 <follow_path+0x62>
	lfn[di] = 0;						/* LFN is created */
 8015516:	f04f 0800 	mov.w	r8, #0
 801551a:	eb0b 0546 	add.w	r5, fp, r6, lsl #1
 801551e:	f82b 8016 	strh.w	r8, [fp, r6, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015522:	2e00      	cmp	r6, #0
 8015524:	f43f af37 	beq.w	8015396 <follow_path+0x56>
	mem_set(dp->fn, ' ', 11);
 8015528:	2120      	movs	r1, #32
 801552a:	220b      	movs	r2, #11
 801552c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015530:	f7fe ff62 	bl	80143f8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015534:	4641      	mov	r1, r8
 8015536:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 801553a:	2a20      	cmp	r2, #32
 801553c:	f43f af3a 	beq.w	80153b4 <follow_path+0x74>
 8015540:	2a2e      	cmp	r2, #46	; 0x2e
 8015542:	f43f af37 	beq.w	80153b4 <follow_path+0x74>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015546:	b109      	cbz	r1, 801554c <follow_path+0x20c>
 8015548:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801554c:	f835 2d02 	ldrh.w	r2, [r5, #-2]!
 8015550:	2a2e      	cmp	r2, #46	; 0x2e
 8015552:	d001      	beq.n	8015558 <follow_path+0x218>
 8015554:	3e01      	subs	r6, #1
 8015556:	d1f9      	bne.n	801554c <follow_path+0x20c>
		dp->fn[i++] = (BYTE)w;
 8015558:	f04f 0900 	mov.w	r9, #0
 801555c:	f04f 0808 	mov.w	r8, #8
 8015560:	464d      	mov	r5, r9
		w = lfn[si++];					/* Get an LFN character */
 8015562:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 8015566:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8015568:	2800      	cmp	r0, #0
 801556a:	f43f af34 	beq.w	80153d6 <follow_path+0x96>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801556e:	2820      	cmp	r0, #32
 8015570:	d005      	beq.n	801557e <follow_path+0x23e>
 8015572:	282e      	cmp	r0, #46	; 0x2e
 8015574:	f47f af20 	bne.w	80153b8 <follow_path+0x78>
 8015578:	42b2      	cmp	r2, r6
 801557a:	f43f af21 	beq.w	80153c0 <follow_path+0x80>
			cf |= NS_LOSS | NS_LFN; continue;
 801557e:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8015582:	4611      	mov	r1, r2
 8015584:	e7ed      	b.n	8015562 <follow_path+0x222>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015586:	2005      	movs	r0, #5
	return res;
 8015588:	e756      	b.n	8015438 <follow_path+0xf8>
				if (IsUpper(w)) {		/* ASCII large capital */
 801558a:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 801558e:	2919      	cmp	r1, #25
 8015590:	d983      	bls.n	801549a <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
 8015592:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8015596:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8015598:	bf9e      	ittt	ls
 801559a:	3820      	subls	r0, #32
 801559c:	f045 0501 	orrls.w	r5, r5, #1
 80155a0:	b280      	uxthls	r0, r0
 80155a2:	e773      	b.n	801548c <follow_path+0x14c>
 80155a4:	080012ec 	.word	0x080012ec
 80155a8:	08001260 	.word	0x08001260
 80155ac:	080012f5 	.word	0x080012f5

080155b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80155b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80155b2:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80155b6:	a804      	add	r0, sp, #16
{
 80155b8:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 80155ba:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80155be:	f7fe ffe5 	bl	801458c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80155c2:	1e05      	subs	r5, r0, #0
 80155c4:	db1f      	blt.n	8015606 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80155c6:	4912      	ldr	r1, [pc, #72]	; (8015610 <f_mount+0x60>)
 80155c8:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 80155cc:	b15c      	cbz	r4, 80155e6 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80155ce:	4b11      	ldr	r3, [pc, #68]	; (8015614 <f_mount+0x64>)
 80155d0:	681a      	ldr	r2, [r3, #0]
 80155d2:	4294      	cmp	r4, r2
 80155d4:	bf04      	itt	eq
 80155d6:	2200      	moveq	r2, #0
 80155d8:	601a      	streq	r2, [r3, #0]
 80155da:	691a      	ldr	r2, [r3, #16]
 80155dc:	2000      	movs	r0, #0
 80155de:	4294      	cmp	r4, r2
 80155e0:	bf08      	it	eq
 80155e2:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80155e4:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 80155e6:	9801      	ldr	r0, [sp, #4]
 80155e8:	b108      	cbz	r0, 80155ee <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 80155ea:	2300      	movs	r3, #0
 80155ec:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80155ee:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80155f2:	b130      	cbz	r0, 8015602 <f_mount+0x52>
 80155f4:	2e01      	cmp	r6, #1
 80155f6:	d108      	bne.n	801560a <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80155f8:	2200      	movs	r2, #0
 80155fa:	a901      	add	r1, sp, #4
 80155fc:	4668      	mov	r0, sp
 80155fe:	f7ff f8a3 	bl	8014748 <find_volume>
	LEAVE_FF(fs, res);
}
 8015602:	b004      	add	sp, #16
 8015604:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8015606:	200b      	movs	r0, #11
 8015608:	e7fb      	b.n	8015602 <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801560a:	2000      	movs	r0, #0
 801560c:	e7f9      	b.n	8015602 <f_mount+0x52>
 801560e:	bf00      	nop
 8015610:	20001288 	.word	0x20001288
 8015614:	20001290 	.word	0x20001290

08015618 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801561c:	b090      	sub	sp, #64	; 0x40
 801561e:	4690      	mov	r8, r2
 8015620:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015622:	4604      	mov	r4, r0
 8015624:	2800      	cmp	r0, #0
 8015626:	f000 80b7 	beq.w	8015798 <f_open+0x180>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801562a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 801562e:	462a      	mov	r2, r5
 8015630:	a902      	add	r1, sp, #8
 8015632:	a801      	add	r0, sp, #4
 8015634:	f7ff f888 	bl	8014748 <find_volume>
	if (res == FR_OK) {
 8015638:	4607      	mov	r7, r0
 801563a:	2800      	cmp	r0, #0
 801563c:	d165      	bne.n	801570a <f_open+0xf2>
		dj.obj.fs = fs;
 801563e:	ae10      	add	r6, sp, #64	; 0x40
 8015640:	9b02      	ldr	r3, [sp, #8]
 8015642:	f846 3d34 	str.w	r3, [r6, #-52]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015646:	9901      	ldr	r1, [sp, #4]
 8015648:	4630      	mov	r0, r6
 801564a:	f7ff fe79 	bl	8015340 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801564e:	b958      	cbnz	r0, 8015668 <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015650:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8015654:	2b00      	cmp	r3, #0
 8015656:	db5f      	blt.n	8015718 <f_open+0x100>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015658:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 801565c:	bf14      	ite	ne
 801565e:	2101      	movne	r1, #1
 8015660:	2100      	moveq	r1, #0
 8015662:	4630      	mov	r0, r6
 8015664:	f7fe fece 	bl	8014404 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015668:	f018 0f1c 	tst.w	r8, #28
 801566c:	d060      	beq.n	8015730 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 801566e:	2800      	cmp	r0, #0
 8015670:	d054      	beq.n	801571c <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015672:	2804      	cmp	r0, #4
 8015674:	d149      	bne.n	801570a <f_open+0xf2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015676:	4b70      	ldr	r3, [pc, #448]	; (8015838 <f_open+0x220>)
 8015678:	681a      	ldr	r2, [r3, #0]
 801567a:	b11a      	cbz	r2, 8015684 <f_open+0x6c>
 801567c:	691b      	ldr	r3, [r3, #16]
 801567e:	2b00      	cmp	r3, #0
 8015680:	f040 8084 	bne.w	801578c <f_open+0x174>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015684:	4630      	mov	r0, r6
 8015686:	f7ff fd25 	bl	80150d4 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801568a:	2800      	cmp	r0, #0
 801568c:	d13d      	bne.n	801570a <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801568e:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015692:	0728      	lsls	r0, r5, #28
 8015694:	d557      	bpl.n	8015746 <f_open+0x12e>
				dw = GET_FATTIME();
 8015696:	f7fd f93f 	bl	8012918 <get_fattime>
 801569a:	4602      	mov	r2, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801569c:	4601      	mov	r1, r0
 801569e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80156a0:	300e      	adds	r0, #14
 80156a2:	f7fe fea1 	bl	80143e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80156a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80156a8:	4611      	mov	r1, r2
 80156aa:	3016      	adds	r0, #22
 80156ac:	f7fe fe9c 	bl	80143e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80156b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80156b2:	f8dd 9008 	ldr.w	r9, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80156b6:	2220      	movs	r2, #32
 80156b8:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80156ba:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80156be:	f899 0000 	ldrb.w	r0, [r9]
 80156c2:	4651      	mov	r1, sl
 80156c4:	f7fe ffa2 	bl	801460c <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80156c8:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80156ca:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80156cc:	4648      	mov	r0, r9
 80156ce:	f7fe ffab 	bl	8014628 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 80156d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 80156d4:	2200      	movs	r2, #0
 80156d6:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80156d8:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80156da:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80156dc:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80156de:	9b02      	ldr	r3, [sp, #8]
 80156e0:	2101      	movs	r1, #1
 80156e2:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80156e4:	f1b8 0f00 	cmp.w	r8, #0
 80156e8:	d02d      	beq.n	8015746 <f_open+0x12e>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 80156ea:	4641      	mov	r1, r8
 80156ec:	4630      	mov	r0, r6
						dw = fs->winsect;
 80156ee:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 80156f2:	f7ff fb40 	bl	8014d76 <remove_chain>
						if (res == FR_OK) {
 80156f6:	b940      	cbnz	r0, 801570a <f_open+0xf2>
							res = move_window(fs, dw);
 80156f8:	4649      	mov	r1, r9
 80156fa:	9802      	ldr	r0, [sp, #8]
 80156fc:	f7fe ffc9 	bl	8014692 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015700:	9a02      	ldr	r2, [sp, #8]
 8015702:	f108 33ff 	add.w	r3, r8, #4294967295
 8015706:	6153      	str	r3, [r2, #20]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8015708:	b1e8      	cbz	r0, 8015746 <f_open+0x12e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801570a:	2300      	movs	r3, #0
 801570c:	6023      	str	r3, [r4, #0]
 801570e:	4607      	mov	r7, r0

	LEAVE_FF(fs, res);
}
 8015710:	4638      	mov	r0, r7
 8015712:	b010      	add	sp, #64	; 0x40
 8015714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 8015718:	2006      	movs	r0, #6
 801571a:	e7a5      	b.n	8015668 <f_open+0x50>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801571c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8015720:	f013 0f11 	tst.w	r3, #17
 8015724:	d136      	bne.n	8015794 <f_open+0x17c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015726:	f018 0f04 	tst.w	r8, #4
 801572a:	d0b2      	beq.n	8015692 <f_open+0x7a>
 801572c:	2008      	movs	r0, #8
 801572e:	e7ec      	b.n	801570a <f_open+0xf2>
			if (res == FR_OK) {					/* Following succeeded */
 8015730:	2800      	cmp	r0, #0
 8015732:	d1ea      	bne.n	801570a <f_open+0xf2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015734:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8015738:	06da      	lsls	r2, r3, #27
 801573a:	d429      	bmi.n	8015790 <f_open+0x178>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801573c:	f018 0f02 	tst.w	r8, #2
 8015740:	d001      	beq.n	8015746 <f_open+0x12e>
 8015742:	07db      	lsls	r3, r3, #31
 8015744:	d426      	bmi.n	8015794 <f_open+0x17c>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015746:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015748:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801574c:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 801574e:	bf48      	it	mi
 8015750:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015754:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8015758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801575a:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801575c:	bf14      	ite	ne
 801575e:	2101      	movne	r1, #1
 8015760:	2100      	moveq	r1, #0
 8015762:	4630      	mov	r0, r6
 8015764:	f7fe fe88 	bl	8014478 <inc_lock>
 8015768:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801576a:	b9b8      	cbnz	r0, 801579c <f_open+0x184>
 801576c:	2002      	movs	r0, #2
 801576e:	e7cc      	b.n	801570a <f_open+0xf2>
					clst = get_fat(&fp->obj, clst);
 8015770:	6820      	ldr	r0, [r4, #0]
 8015772:	f7ff f9f3 	bl	8014b5c <get_fat.isra.7>
					if (clst <= 1) res = FR_INT_ERR;
 8015776:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8015778:	4601      	mov	r1, r0
 801577a:	eba5 0508 	sub.w	r5, r5, r8
					if (clst <= 1) res = FR_INT_ERR;
 801577e:	d903      	bls.n	8015788 <f_open+0x170>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015780:	1c42      	adds	r2, r0, #1
 8015782:	d135      	bne.n	80157f0 <f_open+0x1d8>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015784:	2001      	movs	r0, #1
 8015786:	e036      	b.n	80157f6 <f_open+0x1de>
					if (clst <= 1) res = FR_INT_ERR;
 8015788:	2002      	movs	r0, #2
 801578a:	e034      	b.n	80157f6 <f_open+0x1de>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801578c:	2012      	movs	r0, #18
 801578e:	e7bc      	b.n	801570a <f_open+0xf2>
					res = FR_NO_FILE;
 8015790:	2004      	movs	r0, #4
 8015792:	e7ba      	b.n	801570a <f_open+0xf2>
					res = FR_DENIED;
 8015794:	2007      	movs	r0, #7
 8015796:	e7b8      	b.n	801570a <f_open+0xf2>
	if (!fp) return FR_INVALID_OBJECT;
 8015798:	2709      	movs	r7, #9
 801579a:	e7b9      	b.n	8015710 <f_open+0xf8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801579c:	9e02      	ldr	r6, [sp, #8]
 801579e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80157a2:	7830      	ldrb	r0, [r6, #0]
 80157a4:	4641      	mov	r1, r8
 80157a6:	f7fe ff31 	bl	801460c <ld_clust.isra.1>
 80157aa:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80157ac:	f108 001c 	add.w	r0, r8, #28
 80157b0:	f7fe fe12 	bl	80143d8 <ld_dword>
			fp->obj.id = fs->id;
 80157b4:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 80157b6:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80157b8:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80157ba:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80157be:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 80157c0:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80157c2:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 80157c4:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 80157c6:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80157c8:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80157ca:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80157cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80157d0:	4630      	mov	r0, r6
 80157d2:	f7fe fe11 	bl	80143f8 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80157d6:	06ab      	lsls	r3, r5, #26
 80157d8:	d59a      	bpl.n	8015710 <f_open+0xf8>
 80157da:	68e5      	ldr	r5, [r4, #12]
 80157dc:	2d00      	cmp	r5, #0
 80157de:	d097      	beq.n	8015710 <f_open+0xf8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80157e0:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80157e2:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80157e4:	895a      	ldrh	r2, [r3, #10]
 80157e6:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80157ea:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80157ec:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80157f0:	45a8      	cmp	r8, r5
 80157f2:	d3bd      	bcc.n	8015770 <f_open+0x158>
 80157f4:	2000      	movs	r0, #0
				fp->clust = clst;
 80157f6:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80157f8:	2800      	cmp	r0, #0
 80157fa:	d186      	bne.n	801570a <f_open+0xf2>
 80157fc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015800:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8015804:	fbb5 f2f3 	udiv	r2, r5, r3
 8015808:	fb03 5512 	mls	r5, r3, r2, r5
 801580c:	2d00      	cmp	r5, #0
 801580e:	f43f af7f 	beq.w	8015710 <f_open+0xf8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015812:	4640      	mov	r0, r8
 8015814:	f7fe fe8c 	bl	8014530 <clust2sect>
 8015818:	2800      	cmp	r0, #0
 801581a:	d0a7      	beq.n	801576c <f_open+0x154>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801581c:	4402      	add	r2, r0
 801581e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8015820:	2301      	movs	r3, #1
 8015822:	4631      	mov	r1, r6
 8015824:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015828:	f7fe fdac 	bl	8014384 <disk_read>
 801582c:	2800      	cmp	r0, #0
 801582e:	f43f af6f 	beq.w	8015710 <f_open+0xf8>
 8015832:	2001      	movs	r0, #1
 8015834:	e769      	b.n	801570a <f_open+0xf2>
 8015836:	bf00      	nop
 8015838:	20001290 	.word	0x20001290

0801583c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015840:	469b      	mov	fp, r3
 8015842:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8015844:	2300      	movs	r3, #0
{
 8015846:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8015848:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801584c:	a903      	add	r1, sp, #12
{
 801584e:	4604      	mov	r4, r0
 8015850:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8015852:	f7fe feb8 	bl	80145c6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015856:	4605      	mov	r5, r0
 8015858:	bb18      	cbnz	r0, 80158a2 <f_read+0x66>
 801585a:	7d65      	ldrb	r5, [r4, #21]
 801585c:	bb0d      	cbnz	r5, 80158a2 <f_read+0x66>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801585e:	7d23      	ldrb	r3, [r4, #20]
 8015860:	07da      	lsls	r2, r3, #31
 8015862:	f140 80a8 	bpl.w	80159b6 <f_read+0x17a>
	remain = fp->obj.objsize - fp->fptr;
 8015866:	68e3      	ldr	r3, [r4, #12]
 8015868:	69a6      	ldr	r6, [r4, #24]
 801586a:	1b9e      	subs	r6, r3, r6
 801586c:	42be      	cmp	r6, r7
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801586e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8015872:	bf28      	it	cs
 8015874:	463e      	movcs	r6, r7
 8015876:	9300      	str	r3, [sp, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8015878:	b19e      	cbz	r6, 80158a2 <f_read+0x66>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801587a:	9803      	ldr	r0, [sp, #12]
 801587c:	69a1      	ldr	r1, [r4, #24]
 801587e:	8983      	ldrh	r3, [r0, #12]
 8015880:	fbb1 f2f3 	udiv	r2, r1, r3
 8015884:	fb03 1312 	mls	r3, r3, r2, r1
 8015888:	2b00      	cmp	r3, #0
 801588a:	d17d      	bne.n	8015988 <f_read+0x14c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801588c:	8943      	ldrh	r3, [r0, #10]
 801588e:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8015890:	4013      	ands	r3, r2
 8015892:	9301      	str	r3, [sp, #4]
 8015894:	d119      	bne.n	80158ca <f_read+0x8e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8015896:	b941      	cbnz	r1, 80158aa <f_read+0x6e>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8015898:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801589a:	2801      	cmp	r0, #1
 801589c:	d810      	bhi.n	80158c0 <f_read+0x84>
 801589e:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158a0:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80158a2:	4628      	mov	r0, r5
 80158a4:	b005      	add	sp, #20
 80158a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80158aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80158ac:	b11b      	cbz	r3, 80158b6 <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80158ae:	4620      	mov	r0, r4
 80158b0:	f7fe fe49 	bl	8014546 <clmt_clust>
 80158b4:	e7f1      	b.n	801589a <f_read+0x5e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80158b6:	69e1      	ldr	r1, [r4, #28]
 80158b8:	6820      	ldr	r0, [r4, #0]
 80158ba:	f7ff f94f 	bl	8014b5c <get_fat.isra.7>
 80158be:	e7ec      	b.n	801589a <f_read+0x5e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158c0:	1c43      	adds	r3, r0, #1
 80158c2:	d101      	bne.n	80158c8 <f_read+0x8c>
 80158c4:	2501      	movs	r5, #1
 80158c6:	e7eb      	b.n	80158a0 <f_read+0x64>
				fp->clust = clst;				/* Update current cluster */
 80158c8:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80158ca:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80158ce:	69e1      	ldr	r1, [r4, #28]
 80158d0:	4650      	mov	r0, sl
 80158d2:	f7fe fe2d 	bl	8014530 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80158d6:	2800      	cmp	r0, #0
 80158d8:	d0e1      	beq.n	801589e <f_read+0x62>
			sect += csect;
 80158da:	9b01      	ldr	r3, [sp, #4]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80158dc:	f8ba 800c 	ldrh.w	r8, [sl, #12]
 80158e0:	fbb6 f8f8 	udiv	r8, r6, r8
			sect += csect;
 80158e4:	181f      	adds	r7, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 80158e6:	f1b8 0f00 	cmp.w	r8, #0
 80158ea:	d030      	beq.n	801594e <f_read+0x112>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80158ec:	9a01      	ldr	r2, [sp, #4]
 80158ee:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80158f2:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80158f6:	4442      	add	r2, r8
 80158f8:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 80158fa:	bf84      	itt	hi
 80158fc:	9a01      	ldrhi	r2, [sp, #4]
 80158fe:	eba3 0802 	subhi.w	r8, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015902:	4643      	mov	r3, r8
 8015904:	463a      	mov	r2, r7
 8015906:	4649      	mov	r1, r9
 8015908:	f7fe fd3c 	bl	8014384 <disk_read>
 801590c:	2800      	cmp	r0, #0
 801590e:	d1d9      	bne.n	80158c4 <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8015910:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8015914:	2b00      	cmp	r3, #0
 8015916:	da0b      	bge.n	8015930 <f_read+0xf4>
 8015918:	6a20      	ldr	r0, [r4, #32]
 801591a:	1bc0      	subs	r0, r0, r7
 801591c:	4540      	cmp	r0, r8
 801591e:	d207      	bcs.n	8015930 <f_read+0xf4>
 8015920:	9b03      	ldr	r3, [sp, #12]
 8015922:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 8015924:	b122      	cbz	r2, 8015930 <f_read+0xf4>
 8015926:	9900      	ldr	r1, [sp, #0]
 8015928:	fb02 9000 	mla	r0, r2, r0, r9
 801592c:	f7fe fe65 	bl	80145fa <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8015930:	9b03      	ldr	r3, [sp, #12]
 8015932:	899f      	ldrh	r7, [r3, #12]
 8015934:	fb08 f707 	mul.w	r7, r8, r7
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8015938:	69a3      	ldr	r3, [r4, #24]
 801593a:	443b      	add	r3, r7
 801593c:	61a3      	str	r3, [r4, #24]
 801593e:	f8db 3000 	ldr.w	r3, [fp]
 8015942:	443b      	add	r3, r7
 8015944:	44b9      	add	r9, r7
 8015946:	f8cb 3000 	str.w	r3, [fp]
 801594a:	1bf6      	subs	r6, r6, r7
 801594c:	e794      	b.n	8015878 <f_read+0x3c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801594e:	6a22      	ldr	r2, [r4, #32]
 8015950:	42ba      	cmp	r2, r7
 8015952:	d018      	beq.n	8015986 <f_read+0x14a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015954:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8015958:	2b00      	cmp	r3, #0
 801595a:	da0b      	bge.n	8015974 <f_read+0x138>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801595c:	2301      	movs	r3, #1
 801595e:	9900      	ldr	r1, [sp, #0]
 8015960:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8015964:	f7fe fd1c 	bl	80143a0 <disk_write>
 8015968:	2800      	cmp	r0, #0
 801596a:	d1ab      	bne.n	80158c4 <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 801596c:	7d23      	ldrb	r3, [r4, #20]
 801596e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015972:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015974:	9803      	ldr	r0, [sp, #12]
 8015976:	9900      	ldr	r1, [sp, #0]
 8015978:	7840      	ldrb	r0, [r0, #1]
 801597a:	2301      	movs	r3, #1
 801597c:	463a      	mov	r2, r7
 801597e:	f7fe fd01 	bl	8014384 <disk_read>
 8015982:	2800      	cmp	r0, #0
 8015984:	d19e      	bne.n	80158c4 <f_read+0x88>
			fp->sect = sect;
 8015986:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015988:	9b03      	ldr	r3, [sp, #12]
 801598a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801598e:	69a3      	ldr	r3, [r4, #24]
 8015990:	fbb3 f1f8 	udiv	r1, r3, r8
 8015994:	fb08 3111 	mls	r1, r8, r1, r3
 8015998:	eba8 0801 	sub.w	r8, r8, r1
 801599c:	45b0      	cmp	r8, r6
 801599e:	4647      	mov	r7, r8
 80159a0:	bf28      	it	cs
 80159a2:	4637      	movcs	r7, r6
	if (cnt) {
 80159a4:	2f00      	cmp	r7, #0
 80159a6:	d0c7      	beq.n	8015938 <f_read+0xfc>
 80159a8:	9b00      	ldr	r3, [sp, #0]
 80159aa:	463a      	mov	r2, r7
 80159ac:	4419      	add	r1, r3
 80159ae:	4648      	mov	r0, r9
 80159b0:	f7fe fe23 	bl	80145fa <mem_cpy.part.0>
 80159b4:	e7c0      	b.n	8015938 <f_read+0xfc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80159b6:	2507      	movs	r5, #7
 80159b8:	e773      	b.n	80158a2 <f_read+0x66>

080159ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80159ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80159bc:	a901      	add	r1, sp, #4
{
 80159be:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80159c0:	f7fe fe01 	bl	80145c6 <validate>
	if (res == FR_OK) {
 80159c4:	4605      	mov	r5, r0
 80159c6:	2800      	cmp	r0, #0
 80159c8:	d13a      	bne.n	8015a40 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80159ca:	7d23      	ldrb	r3, [r4, #20]
 80159cc:	065a      	lsls	r2, r3, #25
 80159ce:	d537      	bpl.n	8015a40 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80159d0:	061b      	lsls	r3, r3, #24
 80159d2:	d50c      	bpl.n	80159ee <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80159d4:	9801      	ldr	r0, [sp, #4]
 80159d6:	6a22      	ldr	r2, [r4, #32]
 80159d8:	7840      	ldrb	r0, [r0, #1]
 80159da:	2301      	movs	r3, #1
 80159dc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80159e0:	f7fe fcde 	bl	80143a0 <disk_write>
 80159e4:	bb78      	cbnz	r0, 8015a46 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80159e6:	7d23      	ldrb	r3, [r4, #20]
 80159e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159ec:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80159ee:	f7fc ff93 	bl	8012918 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80159f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 80159f4:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 80159f6:	9801      	ldr	r0, [sp, #4]
 80159f8:	f7fe fe4b 	bl	8014692 <move_window>
				if (res == FR_OK) {
 80159fc:	4605      	mov	r5, r0
 80159fe:	b9f8      	cbnz	r0, 8015a40 <f_sync+0x86>
					dir = fp->dir_ptr;
 8015a00:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015a02:	7af3      	ldrb	r3, [r6, #11]
 8015a04:	f043 0320 	orr.w	r3, r3, #32
 8015a08:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015a0a:	68a2      	ldr	r2, [r4, #8]
 8015a0c:	6820      	ldr	r0, [r4, #0]
 8015a0e:	4631      	mov	r1, r6
 8015a10:	f7fe fe0a 	bl	8014628 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015a14:	68e1      	ldr	r1, [r4, #12]
 8015a16:	f106 001c 	add.w	r0, r6, #28
 8015a1a:	f7fe fce5 	bl	80143e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015a1e:	4639      	mov	r1, r7
 8015a20:	f106 0016 	add.w	r0, r6, #22
 8015a24:	f7fe fce0 	bl	80143e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8015a28:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8015a2a:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8015a2c:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8015a2e:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8015a30:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015a32:	f7ff f9d7 	bl	8014de4 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015a36:	7d23      	ldrb	r3, [r4, #20]
 8015a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8015a3c:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015a3e:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8015a40:	4628      	mov	r0, r5
 8015a42:	b003      	add	sp, #12
 8015a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015a46:	2501      	movs	r5, #1
 8015a48:	e7fa      	b.n	8015a40 <f_sync+0x86>

08015a4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015a4a:	b513      	push	{r0, r1, r4, lr}
 8015a4c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015a4e:	f7ff ffb4 	bl	80159ba <f_sync>
	if (res == FR_OK)
 8015a52:	b948      	cbnz	r0, 8015a68 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015a54:	a901      	add	r1, sp, #4
 8015a56:	4620      	mov	r0, r4
 8015a58:	f7fe fdb5 	bl	80145c6 <validate>
		if (res == FR_OK) {
 8015a5c:	b920      	cbnz	r0, 8015a68 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015a5e:	6920      	ldr	r0, [r4, #16]
 8015a60:	f7fe fd4a 	bl	80144f8 <dec_lock>
			if (res == FR_OK)
 8015a64:	b900      	cbnz	r0, 8015a68 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015a66:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8015a68:	b002      	add	sp, #8
 8015a6a:	bd10      	pop	{r4, pc}

08015a6c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8015a6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015a70:	4606      	mov	r6, r0
 8015a72:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
 8015a74:	4605      	mov	r5, r0
	int n = 0;
 8015a76:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8015a78:	1e4f      	subs	r7, r1, #1
 8015a7a:	42bc      	cmp	r4, r7
 8015a7c:	da12      	bge.n	8015aa4 <f_gets+0x38>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8015a7e:	ab01      	add	r3, sp, #4
 8015a80:	2201      	movs	r2, #1
 8015a82:	4669      	mov	r1, sp
 8015a84:	4640      	mov	r0, r8
 8015a86:	f7ff fed9 	bl	801583c <f_read>
		if (rc != 1) break;
 8015a8a:	9b01      	ldr	r3, [sp, #4]
 8015a8c:	2b01      	cmp	r3, #1
 8015a8e:	d109      	bne.n	8015aa4 <f_gets+0x38>
		c = s[0];
 8015a90:	f89d 3000 	ldrb.w	r3, [sp]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8015a94:	2b0d      	cmp	r3, #13
 8015a96:	d0f0      	beq.n	8015a7a <f_gets+0xe>
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
 8015a98:	2b0a      	cmp	r3, #10
		*p++ = c;
 8015a9a:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 8015a9e:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 8015aa2:	d1ea      	bne.n	8015a7a <f_gets+0xe>
	}
	*p = 0;
 8015aa4:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8015aa6:	429c      	cmp	r4, r3
}
 8015aa8:	bf14      	ite	ne
 8015aaa:	4630      	movne	r0, r6
 8015aac:	4618      	moveq	r0, r3
	*p = 0;
 8015aae:	702b      	strb	r3, [r5, #0]
}
 8015ab0:	b002      	add	sp, #8
 8015ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08015ab8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015ab8:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8015aba:	4b0f      	ldr	r3, [pc, #60]	; (8015af8 <FATFS_LinkDriverEx+0x40>)
 8015abc:	7b9c      	ldrb	r4, [r3, #14]
 8015abe:	2c01      	cmp	r4, #1
 8015ac0:	d818      	bhi.n	8015af4 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015ac2:	7b9d      	ldrb	r5, [r3, #14]
 8015ac4:	b2ed      	uxtb	r5, r5
 8015ac6:	2400      	movs	r4, #0
 8015ac8:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8015aca:	7b9d      	ldrb	r5, [r3, #14]
 8015acc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8015ad0:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8015ad2:	7b98      	ldrb	r0, [r3, #14]
 8015ad4:	4418      	add	r0, r3
 8015ad6:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 8015ad8:	7b9a      	ldrb	r2, [r3, #14]
 8015ada:	b2d2      	uxtb	r2, r2
 8015adc:	1c50      	adds	r0, r2, #1
 8015ade:	b2c0      	uxtb	r0, r0
 8015ae0:	7398      	strb	r0, [r3, #14]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8015ae2:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8015ae4:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8015ae6:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8015ae8:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8015aea:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8015aec:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8015aee:	70cc      	strb	r4, [r1, #3]
 8015af0:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8015af2:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8015af4:	2001      	movs	r0, #1
 8015af6:	e7fc      	b.n	8015af2 <FATFS_LinkDriverEx+0x3a>
 8015af8:	200014b4 	.word	0x200014b4

08015afc <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8015afc:	2200      	movs	r2, #0
 8015afe:	f7ff bfdb 	b.w	8015ab8 <FATFS_LinkDriverEx>
	...

08015b04 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8015b04:	4a0a      	ldr	r2, [pc, #40]	; (8015b30 <FATFS_UnLinkDriverEx+0x2c>)
 8015b06:	7b93      	ldrb	r3, [r2, #14]
 8015b08:	b17b      	cbz	r3, 8015b2a <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8015b0a:	7803      	ldrb	r3, [r0, #0]
 8015b0c:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8015b0e:	b2db      	uxtb	r3, r3
 8015b10:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8015b14:	6848      	ldr	r0, [r1, #4]
 8015b16:	b140      	cbz	r0, 8015b2a <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8015b18:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8015b1a:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8015b1c:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
 8015b1e:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
 8015b20:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8015b22:	3b01      	subs	r3, #1
 8015b24:	b2db      	uxtb	r3, r3
 8015b26:	7393      	strb	r3, [r2, #14]
 8015b28:	4770      	bx	lr
  uint8_t ret = 1;
 8015b2a:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 8015b2c:	4770      	bx	lr
 8015b2e:	bf00      	nop
 8015b30:	200014b4 	.word	0x200014b4

08015b34 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8015b34:	2100      	movs	r1, #0
 8015b36:	f7ff bfe5 	b.w	8015b04 <FATFS_UnLinkDriverEx>
	...

08015b3c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015b3c:	287f      	cmp	r0, #127	; 0x7f
{
 8015b3e:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8015b40:	d906      	bls.n	8015b50 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015b42:	b131      	cbz	r1, 8015b52 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015b44:	28ff      	cmp	r0, #255	; 0xff
 8015b46:	d812      	bhi.n	8015b6e <ff_convert+0x32>
 8015b48:	3880      	subs	r0, #128	; 0x80
 8015b4a:	4b0a      	ldr	r3, [pc, #40]	; (8015b74 <ff_convert+0x38>)
 8015b4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8015b50:	bd10      	pop	{r4, pc}
				if (chr == Tbl[c]) break;
 8015b52:	4a08      	ldr	r2, [pc, #32]	; (8015b74 <ff_convert+0x38>)
 8015b54:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 8015b58:	4284      	cmp	r4, r0
 8015b5a:	b28b      	uxth	r3, r1
 8015b5c:	d003      	beq.n	8015b66 <ff_convert+0x2a>
 8015b5e:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8015b60:	2980      	cmp	r1, #128	; 0x80
 8015b62:	d1f7      	bne.n	8015b54 <ff_convert+0x18>
 8015b64:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 8015b66:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8015b6a:	b2c0      	uxtb	r0, r0
 8015b6c:	e7f0      	b.n	8015b50 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015b6e:	2000      	movs	r0, #0
 8015b70:	e7ee      	b.n	8015b50 <ff_convert+0x14>
 8015b72:	bf00      	nop
 8015b74:	080012fe 	.word	0x080012fe

08015b78 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015b78:	b570      	push	{r4, r5, r6, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015b7a:	4b1e      	ldr	r3, [pc, #120]	; (8015bf4 <ff_wtoupper+0x7c>)
 8015b7c:	4a1e      	ldr	r2, [pc, #120]	; (8015bf8 <ff_wtoupper+0x80>)
 8015b7e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8015b82:	bf28      	it	cs
 8015b84:	4613      	movcs	r3, r2
 8015b86:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 8015b88:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 8015b8c:	460a      	mov	r2, r1
		if (!bc || chr < bc) break;
 8015b8e:	b1a3      	cbz	r3, 8015bba <ff_wtoupper+0x42>
 8015b90:	4298      	cmp	r0, r3
 8015b92:	d312      	bcc.n	8015bba <ff_wtoupper+0x42>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8015b94:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 8015b98:	0a25      	lsrs	r5, r4, #8
 8015b9a:	b2e4      	uxtb	r4, r4
		if (chr < bc + nc) {	/* In the block? */
 8015b9c:	18e6      	adds	r6, r4, r3
 8015b9e:	42b0      	cmp	r0, r6
 8015ba0:	da21      	bge.n	8015be6 <ff_wtoupper+0x6e>
			switch (cmd) {
 8015ba2:	2d08      	cmp	r5, #8
 8015ba4:	d809      	bhi.n	8015bba <ff_wtoupper+0x42>
 8015ba6:	e8df f005 	tbb	[pc, r5]
 8015baa:	0905      	.short	0x0905
 8015bac:	1513110f 	.word	0x1513110f
 8015bb0:	1917      	.short	0x1917
 8015bb2:	1b          	.byte	0x1b
 8015bb3:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015bb4:	1ac0      	subs	r0, r0, r3
 8015bb6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 8015bba:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015bbc:	1ac3      	subs	r3, r0, r3
 8015bbe:	f003 0301 	and.w	r3, r3, #1
 8015bc2:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015bc4:	b280      	uxth	r0, r0
 8015bc6:	e7f8      	b.n	8015bba <ff_wtoupper+0x42>
			case 2: chr -= 16; break;				/* Shift -16 */
 8015bc8:	3810      	subs	r0, #16
 8015bca:	e7fb      	b.n	8015bc4 <ff_wtoupper+0x4c>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015bcc:	3820      	subs	r0, #32
 8015bce:	e7f9      	b.n	8015bc4 <ff_wtoupper+0x4c>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015bd0:	3830      	subs	r0, #48	; 0x30
 8015bd2:	e7f7      	b.n	8015bc4 <ff_wtoupper+0x4c>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015bd4:	381a      	subs	r0, #26
 8015bd6:	e7f5      	b.n	8015bc4 <ff_wtoupper+0x4c>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015bd8:	3008      	adds	r0, #8
 8015bda:	e7f3      	b.n	8015bc4 <ff_wtoupper+0x4c>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015bdc:	3850      	subs	r0, #80	; 0x50
 8015bde:	e7f1      	b.n	8015bc4 <ff_wtoupper+0x4c>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015be0:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8015be4:	e7ee      	b.n	8015bc4 <ff_wtoupper+0x4c>
 8015be6:	3104      	adds	r1, #4
		if (!cmd) p += nc;
 8015be8:	2d00      	cmp	r5, #0
 8015bea:	d1cd      	bne.n	8015b88 <ff_wtoupper+0x10>
 8015bec:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 8015bf0:	e7c9      	b.n	8015b86 <ff_wtoupper+0xe>
 8015bf2:	bf00      	nop
 8015bf4:	080013fe 	.word	0x080013fe
 8015bf8:	080015f0 	.word	0x080015f0

08015bfc <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015bfc:	2904      	cmp	r1, #4
 8015bfe:	d00a      	beq.n	8015c16 <USBH_UserProcess+0x1a>
 8015c00:	2905      	cmp	r1, #5
 8015c02:	d004      	beq.n	8015c0e <USBH_UserProcess+0x12>
 8015c04:	2902      	cmp	r1, #2
 8015c06:	d105      	bne.n	8015c14 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015c08:	4b04      	ldr	r3, [pc, #16]	; (8015c1c <USBH_UserProcess+0x20>)
 8015c0a:	7019      	strb	r1, [r3, #0]
  break;
 8015c0c:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8015c0e:	4b03      	ldr	r3, [pc, #12]	; (8015c1c <USBH_UserProcess+0x20>)
 8015c10:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015c12:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015c14:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8015c16:	4b01      	ldr	r3, [pc, #4]	; (8015c1c <USBH_UserProcess+0x20>)
 8015c18:	2201      	movs	r2, #1
 8015c1a:	e7fa      	b.n	8015c12 <USBH_UserProcess+0x16>
 8015c1c:	200014c4 	.word	0x200014c4

08015c20 <MX_USB_HOST_DeInit>:
{
 8015c20:	b510      	push	{r4, lr}
	USBH_Stop(&hUsbHostHS);
 8015c22:	4c04      	ldr	r4, [pc, #16]	; (8015c34 <MX_USB_HOST_DeInit+0x14>)
 8015c24:	4620      	mov	r0, r4
 8015c26:	f7fd fec5 	bl	80139b4 <USBH_Stop>
	USBH_DeInit(&hUsbHostHS);
 8015c2a:	4620      	mov	r0, r4
}
 8015c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USBH_DeInit(&hUsbHostHS);
 8015c30:	f7fd be6d 	b.w	801390e <USBH_DeInit>
 8015c34:	20005858 	.word	0x20005858

08015c38 <MX_USB_HOST_Init>:
{
 8015c38:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	490b      	ldr	r1, [pc, #44]	; (8015c6c <MX_USB_HOST_Init+0x34>)
 8015c3e:	480c      	ldr	r0, [pc, #48]	; (8015c70 <MX_USB_HOST_Init+0x38>)
 8015c40:	f7fd fe46 	bl	80138d0 <USBH_Init>
 8015c44:	b108      	cbz	r0, 8015c4a <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8015c46:	f7f8 f807 	bl	800dc58 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8015c4a:	490a      	ldr	r1, [pc, #40]	; (8015c74 <MX_USB_HOST_Init+0x3c>)
 8015c4c:	4808      	ldr	r0, [pc, #32]	; (8015c70 <MX_USB_HOST_Init+0x38>)
 8015c4e:	f7fd fe75 	bl	801393c <USBH_RegisterClass>
 8015c52:	b108      	cbz	r0, 8015c58 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8015c54:	f7f8 f800 	bl	800dc58 <Error_Handler>
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8015c58:	4805      	ldr	r0, [pc, #20]	; (8015c70 <MX_USB_HOST_Init+0x38>)
 8015c5a:	f7fd fea1 	bl	80139a0 <USBH_Start>
 8015c5e:	b118      	cbz	r0, 8015c68 <MX_USB_HOST_Init+0x30>
}
 8015c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8015c64:	f7f7 bff8 	b.w	800dc58 <Error_Handler>
}
 8015c68:	bd08      	pop	{r3, pc}
 8015c6a:	bf00      	nop
 8015c6c:	08015bfd 	.word	0x08015bfd
 8015c70:	20005858 	.word	0x20005858
 8015c74:	20000068 	.word	0x20000068

08015c78 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostHS);
 8015c78:	4801      	ldr	r0, [pc, #4]	; (8015c80 <MX_USB_HOST_Process+0x8>)
 8015c7a:	f7fd bebb 	b.w	80139f4 <USBH_Process>
 8015c7e:	bf00      	nop
 8015c80:	20005858 	.word	0x20005858

08015c84 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015c84:	b530      	push	{r4, r5, lr}
 8015c86:	4604      	mov	r4, r0
 8015c88:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015c8a:	2214      	movs	r2, #20
 8015c8c:	2100      	movs	r1, #0
 8015c8e:	a803      	add	r0, sp, #12
 8015c90:	f000 f977 	bl	8015f82 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 8015c94:	6822      	ldr	r2, [r4, #0]
 8015c96:	4b18      	ldr	r3, [pc, #96]	; (8015cf8 <HAL_HCD_MspInit+0x74>)
 8015c98:	429a      	cmp	r2, r3
 8015c9a:	d12b      	bne.n	8015cf4 <HAL_HCD_MspInit+0x70>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015c9c:	4c17      	ldr	r4, [pc, #92]	; (8015cfc <HAL_HCD_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015c9e:	4818      	ldr	r0, [pc, #96]	; (8015d00 <HAL_HCD_MspInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015ca0:	2500      	movs	r5, #0
 8015ca2:	9501      	str	r5, [sp, #4]
 8015ca4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ca6:	f043 0302 	orr.w	r3, r3, #2
 8015caa:	6323      	str	r3, [r4, #48]	; 0x30
 8015cac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015cae:	f003 0302 	and.w	r3, r3, #2
 8015cb2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cb4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015cb8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cba:	2302      	movs	r3, #2
 8015cbc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8015cc0:	2103      	movs	r1, #3
 8015cc2:	230c      	movs	r3, #12
 8015cc4:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015cc8:	eb0d 0103 	add.w	r1, sp, r3
 8015ccc:	f7f9 f9d4 	bl	800f078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8015cd0:	9502      	str	r5, [sp, #8]
 8015cd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015cd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015cd8:	6323      	str	r3, [r4, #48]	; 0x30
 8015cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015ce0:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8015ce2:	204d      	movs	r0, #77	; 0x4d
 8015ce4:	462a      	mov	r2, r5
 8015ce6:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8015ce8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8015cea:	f7f8 fde3 	bl	800e8b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8015cee:	204d      	movs	r0, #77	; 0x4d
 8015cf0:	f7f8 fe14 	bl	800e91c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8015cf4:	b009      	add	sp, #36	; 0x24
 8015cf6:	bd30      	pop	{r4, r5, pc}
 8015cf8:	40040000 	.word	0x40040000
 8015cfc:	40023800 	.word	0x40023800
 8015d00:	40020400 	.word	0x40020400

08015d04 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8015d04:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8015d08:	f7fe b845 	b.w	8013d96 <USBH_LL_IncTimer>

08015d0c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8015d0c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8015d10:	f7fe b857 	b.w	8013dc2 <USBH_LL_Connect>

08015d14 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8015d14:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8015d18:	f7fe b85d 	b.w	8013dd6 <USBH_LL_Disconnect>

08015d1c <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8015d1c:	4770      	bx	lr

08015d1e <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8015d1e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8015d22:	f7fe b846 	b.w	8013db2 <USBH_LL_PortEnabled>

08015d26 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8015d26:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8015d2a:	f7fe b846 	b.w	8013dba <USBH_LL_PortDisabled>
	...

08015d30 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015d30:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8015d32:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
{
 8015d36:	4604      	mov	r4, r0
  if (phost->id == HOST_HS) {
 8015d38:	b9f3      	cbnz	r3, 8015d78 <USBH_LL_Init+0x48>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8015d3a:	4810      	ldr	r0, [pc, #64]	; (8015d7c <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_HS;

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8015d3c:	4a10      	ldr	r2, [pc, #64]	; (8015d80 <USBH_LL_Init+0x50>)
 8015d3e:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8015d40:	f04f 0c0c 	mov.w	ip, #12
 8015d44:	2201      	movs	r2, #1
 8015d46:	e9c0 c202 	strd	ip, r2, [r0, #8]
  hhcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 8015d4a:	6102      	str	r2, [r0, #16]
  phost->pData = &hhcd_USB_OTG_HS;
 8015d4c:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8015d50:	2202      	movs	r2, #2
  hhcd_USB_OTG_HS.pData = phost;
 8015d52:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8015d56:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8015d5a:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8015d5c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8015d5e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8015d60:	f7f9 fb4c 	bl	800f3fc <HAL_HCD_Init>
 8015d64:	b108      	cbz	r0, 8015d6a <USBH_LL_Init+0x3a>
  {
    Error_Handler( );
 8015d66:	f7f7 ff77 	bl	800dc58 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8015d6a:	4804      	ldr	r0, [pc, #16]	; (8015d7c <USBH_LL_Init+0x4c>)
 8015d6c:	f7f9 ff30 	bl	800fbd0 <HAL_HCD_GetCurrentFrame>
 8015d70:	4601      	mov	r1, r0
 8015d72:	4620      	mov	r0, r4
 8015d74:	f7fe f80c 	bl	8013d90 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8015d78:	2000      	movs	r0, #0
 8015d7a:	bd10      	pop	{r4, pc}
 8015d7c:	20005c30 	.word	0x20005c30
 8015d80:	40040000 	.word	0x40040000

08015d84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015d84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8015d86:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8015d8a:	f7f9 feeb 	bl	800fb64 <HAL_HCD_Start>
 8015d8e:	2803      	cmp	r0, #3
 8015d90:	bf96      	itet	ls
 8015d92:	4b02      	ldrls	r3, [pc, #8]	; (8015d9c <USBH_LL_Start+0x18>)
 8015d94:	2002      	movhi	r0, #2
 8015d96:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8015d98:	bd08      	pop	{r3, pc}
 8015d9a:	bf00      	nop
 8015d9c:	080016af 	.word	0x080016af

08015da0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015da0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8015da2:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8015da6:	f7f9 fef3 	bl	800fb90 <HAL_HCD_Stop>
 8015daa:	2803      	cmp	r0, #3
 8015dac:	bf96      	itet	ls
 8015dae:	4b02      	ldrls	r3, [pc, #8]	; (8015db8 <USBH_LL_Stop+0x18>)
 8015db0:	2002      	movhi	r0, #2
 8015db2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8015db4:	bd08      	pop	{r3, pc}
 8015db6:	bf00      	nop
 8015db8:	080016af 	.word	0x080016af

08015dbc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015dbc:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015dbe:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8015dc2:	f7f9 ff08 	bl	800fbd6 <HAL_HCD_GetCurrentSpeed>
 8015dc6:	2802      	cmp	r0, #2
 8015dc8:	bf96      	itet	ls
 8015dca:	4b02      	ldrls	r3, [pc, #8]	; (8015dd4 <USBH_LL_GetSpeed+0x18>)
 8015dcc:	2001      	movhi	r0, #1
 8015dce:	5c18      	ldrbls	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8015dd0:	bd08      	pop	{r3, pc}
 8015dd2:	bf00      	nop
 8015dd4:	080016ac 	.word	0x080016ac

08015dd8 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015dd8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015dda:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8015dde:	f7f9 fee9 	bl	800fbb4 <HAL_HCD_ResetPort>
 8015de2:	2803      	cmp	r0, #3
 8015de4:	bf96      	itet	ls
 8015de6:	4b02      	ldrls	r3, [pc, #8]	; (8015df0 <USBH_LL_ResetPort+0x18>)
 8015de8:	2002      	movhi	r0, #2
 8015dea:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8015dec:	bd08      	pop	{r3, pc}
 8015dee:	bf00      	nop
 8015df0:	080016af 	.word	0x080016af

08015df4 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015df4:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8015df8:	f7f9 bee5 	b.w	800fbc6 <HAL_HCD_HC_GetXferCount>

08015dfc <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015dfe:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8015e02:	9402      	str	r4, [sp, #8]
 8015e04:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8015e08:	9401      	str	r4, [sp, #4]
 8015e0a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8015e0e:	9400      	str	r4, [sp, #0]
 8015e10:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8015e14:	f7f9 faa9 	bl	800f36a <HAL_HCD_HC_Init>
 8015e18:	2803      	cmp	r0, #3
 8015e1a:	bf9a      	itte	ls
 8015e1c:	4b02      	ldrls	r3, [pc, #8]	; (8015e28 <USBH_LL_OpenPipe+0x2c>)
 8015e1e:	5c18      	ldrbls	r0, [r3, r0]
 8015e20:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8015e22:	b004      	add	sp, #16
 8015e24:	bd10      	pop	{r4, pc}
 8015e26:	bf00      	nop
 8015e28:	080016af 	.word	0x080016af

08015e2c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015e2c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015e2e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8015e32:	f7f9 fad1 	bl	800f3d8 <HAL_HCD_HC_Halt>
 8015e36:	2803      	cmp	r0, #3
 8015e38:	bf96      	itet	ls
 8015e3a:	4b02      	ldrls	r3, [pc, #8]	; (8015e44 <USBH_LL_ClosePipe+0x18>)
 8015e3c:	2002      	movhi	r0, #2
 8015e3e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8015e40:	bd08      	pop	{r3, pc}
 8015e42:	bf00      	nop
 8015e44:	080016af 	.word	0x080016af

08015e48 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015e4a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8015e4e:	9403      	str	r4, [sp, #12]
 8015e50:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8015e54:	9402      	str	r4, [sp, #8]
 8015e56:	9c07      	ldr	r4, [sp, #28]
 8015e58:	9401      	str	r4, [sp, #4]
 8015e5a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8015e5e:	9400      	str	r4, [sp, #0]
 8015e60:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8015e64:	f7f9 fb14 	bl	800f490 <HAL_HCD_HC_SubmitRequest>
 8015e68:	2803      	cmp	r0, #3
 8015e6a:	bf9a      	itte	ls
 8015e6c:	4b02      	ldrls	r3, [pc, #8]	; (8015e78 <USBH_LL_SubmitURB+0x30>)
 8015e6e:	5c18      	ldrbls	r0, [r3, r0]
 8015e70:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8015e72:	b004      	add	sp, #16
 8015e74:	bd10      	pop	{r4, pc}
 8015e76:	bf00      	nop
 8015e78:	080016af 	.word	0x080016af

08015e7c <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8015e7c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8015e80:	f7f9 be9b 	b.w	800fbba <HAL_HCD_HC_GetURBState>

08015e84 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8015e84:	b508      	push	{r3, lr}
  if (phost->id == HOST_HS) {
 8015e86:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8015e8a:	b913      	cbnz	r3, 8015e92 <USBH_LL_DriverVBUS+0xe>
    MX_DriverVbusHS(state);
 8015e8c:	4608      	mov	r0, r1
 8015e8e:	f000 f825 	bl	8015edc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015e92:	20c8      	movs	r0, #200	; 0xc8
 8015e94:	f7f8 fce8 	bl	800e868 <HAL_Delay>
  return USBH_OK;
}
 8015e98:	2000      	movs	r0, #0
 8015e9a:	bd08      	pop	{r3, pc}

08015e9c <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015e9c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8015ea0:	2328      	movs	r3, #40	; 0x28
 8015ea2:	fb03 0101 	mla	r1, r3, r1, r0
 8015ea6:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8015eaa:	b11b      	cbz	r3, 8015eb4 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015eac:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8015eb0:	2000      	movs	r0, #0
 8015eb2:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8015eb4:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8015eb8:	e7fa      	b.n	8015eb0 <USBH_LL_SetToggle+0x14>

08015eba <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015eba:	f8d0 23d0 	ldr.w	r2, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8015ebe:	2328      	movs	r3, #40	; 0x28
 8015ec0:	fb03 2101 	mla	r1, r3, r1, r2
 8015ec4:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8015ec8:	b113      	cbz	r3, 8015ed0 <USBH_LL_GetToggle+0x16>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8015eca:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 8015ece:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8015ed0:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 8015ed4:	4770      	bx	lr

08015ed6 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8015ed6:	f7f8 bcc7 	b.w	800e868 <HAL_Delay>
	...

08015edc <MX_DriverVbusHS>:
 8015edc:	fab0 f280 	clz	r2, r0
 8015ee0:	0952      	lsrs	r2, r2, #5
 8015ee2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015ee6:	4801      	ldr	r0, [pc, #4]	; (8015eec <MX_DriverVbusHS+0x10>)
 8015ee8:	f7f9 ba3a 	b.w	800f360 <HAL_GPIO_WritePin>
 8015eec:	40021000 	.word	0x40021000

08015ef0 <atol>:
 8015ef0:	220a      	movs	r2, #10
 8015ef2:	2100      	movs	r1, #0
 8015ef4:	f000 b9c2 	b.w	801627c <strtol>

08015ef8 <__errno>:
 8015ef8:	4b01      	ldr	r3, [pc, #4]	; (8015f00 <__errno+0x8>)
 8015efa:	6818      	ldr	r0, [r3, #0]
 8015efc:	4770      	bx	lr
 8015efe:	bf00      	nop
 8015f00:	20000088 	.word	0x20000088

08015f04 <__libc_init_array>:
 8015f04:	b570      	push	{r4, r5, r6, lr}
 8015f06:	4e0d      	ldr	r6, [pc, #52]	; (8015f3c <__libc_init_array+0x38>)
 8015f08:	4c0d      	ldr	r4, [pc, #52]	; (8015f40 <__libc_init_array+0x3c>)
 8015f0a:	1ba4      	subs	r4, r4, r6
 8015f0c:	10a4      	asrs	r4, r4, #2
 8015f0e:	2500      	movs	r5, #0
 8015f10:	42a5      	cmp	r5, r4
 8015f12:	d109      	bne.n	8015f28 <__libc_init_array+0x24>
 8015f14:	4e0b      	ldr	r6, [pc, #44]	; (8015f44 <__libc_init_array+0x40>)
 8015f16:	4c0c      	ldr	r4, [pc, #48]	; (8015f48 <__libc_init_array+0x44>)
 8015f18:	f001 f998 	bl	801724c <_init>
 8015f1c:	1ba4      	subs	r4, r4, r6
 8015f1e:	10a4      	asrs	r4, r4, #2
 8015f20:	2500      	movs	r5, #0
 8015f22:	42a5      	cmp	r5, r4
 8015f24:	d105      	bne.n	8015f32 <__libc_init_array+0x2e>
 8015f26:	bd70      	pop	{r4, r5, r6, pc}
 8015f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f2c:	4798      	blx	r3
 8015f2e:	3501      	adds	r5, #1
 8015f30:	e7ee      	b.n	8015f10 <__libc_init_array+0xc>
 8015f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f36:	4798      	blx	r3
 8015f38:	3501      	adds	r5, #1
 8015f3a:	e7f2      	b.n	8015f22 <__libc_init_array+0x1e>
 8015f3c:	0801726c 	.word	0x0801726c
 8015f40:	0801726c 	.word	0x0801726c
 8015f44:	0801726c 	.word	0x0801726c
 8015f48:	08017270 	.word	0x08017270

08015f4c <malloc>:
 8015f4c:	4b02      	ldr	r3, [pc, #8]	; (8015f58 <malloc+0xc>)
 8015f4e:	4601      	mov	r1, r0
 8015f50:	6818      	ldr	r0, [r3, #0]
 8015f52:	f000 b86d 	b.w	8016030 <_malloc_r>
 8015f56:	bf00      	nop
 8015f58:	20000088 	.word	0x20000088

08015f5c <free>:
 8015f5c:	4b02      	ldr	r3, [pc, #8]	; (8015f68 <free+0xc>)
 8015f5e:	4601      	mov	r1, r0
 8015f60:	6818      	ldr	r0, [r3, #0]
 8015f62:	f000 b817 	b.w	8015f94 <_free_r>
 8015f66:	bf00      	nop
 8015f68:	20000088 	.word	0x20000088

08015f6c <memcpy>:
 8015f6c:	b510      	push	{r4, lr}
 8015f6e:	1e43      	subs	r3, r0, #1
 8015f70:	440a      	add	r2, r1
 8015f72:	4291      	cmp	r1, r2
 8015f74:	d100      	bne.n	8015f78 <memcpy+0xc>
 8015f76:	bd10      	pop	{r4, pc}
 8015f78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f80:	e7f7      	b.n	8015f72 <memcpy+0x6>

08015f82 <memset>:
 8015f82:	4402      	add	r2, r0
 8015f84:	4603      	mov	r3, r0
 8015f86:	4293      	cmp	r3, r2
 8015f88:	d100      	bne.n	8015f8c <memset+0xa>
 8015f8a:	4770      	bx	lr
 8015f8c:	f803 1b01 	strb.w	r1, [r3], #1
 8015f90:	e7f9      	b.n	8015f86 <memset+0x4>
	...

08015f94 <_free_r>:
 8015f94:	b538      	push	{r3, r4, r5, lr}
 8015f96:	4605      	mov	r5, r0
 8015f98:	2900      	cmp	r1, #0
 8015f9a:	d045      	beq.n	8016028 <_free_r+0x94>
 8015f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fa0:	1f0c      	subs	r4, r1, #4
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	bfb8      	it	lt
 8015fa6:	18e4      	addlt	r4, r4, r3
 8015fa8:	f000 fb72 	bl	8016690 <__malloc_lock>
 8015fac:	4a1f      	ldr	r2, [pc, #124]	; (801602c <_free_r+0x98>)
 8015fae:	6813      	ldr	r3, [r2, #0]
 8015fb0:	4610      	mov	r0, r2
 8015fb2:	b933      	cbnz	r3, 8015fc2 <_free_r+0x2e>
 8015fb4:	6063      	str	r3, [r4, #4]
 8015fb6:	6014      	str	r4, [r2, #0]
 8015fb8:	4628      	mov	r0, r5
 8015fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fbe:	f000 bb68 	b.w	8016692 <__malloc_unlock>
 8015fc2:	42a3      	cmp	r3, r4
 8015fc4:	d90c      	bls.n	8015fe0 <_free_r+0x4c>
 8015fc6:	6821      	ldr	r1, [r4, #0]
 8015fc8:	1862      	adds	r2, r4, r1
 8015fca:	4293      	cmp	r3, r2
 8015fcc:	bf04      	itt	eq
 8015fce:	681a      	ldreq	r2, [r3, #0]
 8015fd0:	685b      	ldreq	r3, [r3, #4]
 8015fd2:	6063      	str	r3, [r4, #4]
 8015fd4:	bf04      	itt	eq
 8015fd6:	1852      	addeq	r2, r2, r1
 8015fd8:	6022      	streq	r2, [r4, #0]
 8015fda:	6004      	str	r4, [r0, #0]
 8015fdc:	e7ec      	b.n	8015fb8 <_free_r+0x24>
 8015fde:	4613      	mov	r3, r2
 8015fe0:	685a      	ldr	r2, [r3, #4]
 8015fe2:	b10a      	cbz	r2, 8015fe8 <_free_r+0x54>
 8015fe4:	42a2      	cmp	r2, r4
 8015fe6:	d9fa      	bls.n	8015fde <_free_r+0x4a>
 8015fe8:	6819      	ldr	r1, [r3, #0]
 8015fea:	1858      	adds	r0, r3, r1
 8015fec:	42a0      	cmp	r0, r4
 8015fee:	d10b      	bne.n	8016008 <_free_r+0x74>
 8015ff0:	6820      	ldr	r0, [r4, #0]
 8015ff2:	4401      	add	r1, r0
 8015ff4:	1858      	adds	r0, r3, r1
 8015ff6:	4282      	cmp	r2, r0
 8015ff8:	6019      	str	r1, [r3, #0]
 8015ffa:	d1dd      	bne.n	8015fb8 <_free_r+0x24>
 8015ffc:	6810      	ldr	r0, [r2, #0]
 8015ffe:	6852      	ldr	r2, [r2, #4]
 8016000:	605a      	str	r2, [r3, #4]
 8016002:	4401      	add	r1, r0
 8016004:	6019      	str	r1, [r3, #0]
 8016006:	e7d7      	b.n	8015fb8 <_free_r+0x24>
 8016008:	d902      	bls.n	8016010 <_free_r+0x7c>
 801600a:	230c      	movs	r3, #12
 801600c:	602b      	str	r3, [r5, #0]
 801600e:	e7d3      	b.n	8015fb8 <_free_r+0x24>
 8016010:	6820      	ldr	r0, [r4, #0]
 8016012:	1821      	adds	r1, r4, r0
 8016014:	428a      	cmp	r2, r1
 8016016:	bf04      	itt	eq
 8016018:	6811      	ldreq	r1, [r2, #0]
 801601a:	6852      	ldreq	r2, [r2, #4]
 801601c:	6062      	str	r2, [r4, #4]
 801601e:	bf04      	itt	eq
 8016020:	1809      	addeq	r1, r1, r0
 8016022:	6021      	streq	r1, [r4, #0]
 8016024:	605c      	str	r4, [r3, #4]
 8016026:	e7c7      	b.n	8015fb8 <_free_r+0x24>
 8016028:	bd38      	pop	{r3, r4, r5, pc}
 801602a:	bf00      	nop
 801602c:	200014c8 	.word	0x200014c8

08016030 <_malloc_r>:
 8016030:	b570      	push	{r4, r5, r6, lr}
 8016032:	1ccd      	adds	r5, r1, #3
 8016034:	f025 0503 	bic.w	r5, r5, #3
 8016038:	3508      	adds	r5, #8
 801603a:	2d0c      	cmp	r5, #12
 801603c:	bf38      	it	cc
 801603e:	250c      	movcc	r5, #12
 8016040:	2d00      	cmp	r5, #0
 8016042:	4606      	mov	r6, r0
 8016044:	db01      	blt.n	801604a <_malloc_r+0x1a>
 8016046:	42a9      	cmp	r1, r5
 8016048:	d903      	bls.n	8016052 <_malloc_r+0x22>
 801604a:	230c      	movs	r3, #12
 801604c:	6033      	str	r3, [r6, #0]
 801604e:	2000      	movs	r0, #0
 8016050:	bd70      	pop	{r4, r5, r6, pc}
 8016052:	f000 fb1d 	bl	8016690 <__malloc_lock>
 8016056:	4a21      	ldr	r2, [pc, #132]	; (80160dc <_malloc_r+0xac>)
 8016058:	6814      	ldr	r4, [r2, #0]
 801605a:	4621      	mov	r1, r4
 801605c:	b991      	cbnz	r1, 8016084 <_malloc_r+0x54>
 801605e:	4c20      	ldr	r4, [pc, #128]	; (80160e0 <_malloc_r+0xb0>)
 8016060:	6823      	ldr	r3, [r4, #0]
 8016062:	b91b      	cbnz	r3, 801606c <_malloc_r+0x3c>
 8016064:	4630      	mov	r0, r6
 8016066:	f000 f855 	bl	8016114 <_sbrk_r>
 801606a:	6020      	str	r0, [r4, #0]
 801606c:	4629      	mov	r1, r5
 801606e:	4630      	mov	r0, r6
 8016070:	f000 f850 	bl	8016114 <_sbrk_r>
 8016074:	1c43      	adds	r3, r0, #1
 8016076:	d124      	bne.n	80160c2 <_malloc_r+0x92>
 8016078:	230c      	movs	r3, #12
 801607a:	6033      	str	r3, [r6, #0]
 801607c:	4630      	mov	r0, r6
 801607e:	f000 fb08 	bl	8016692 <__malloc_unlock>
 8016082:	e7e4      	b.n	801604e <_malloc_r+0x1e>
 8016084:	680b      	ldr	r3, [r1, #0]
 8016086:	1b5b      	subs	r3, r3, r5
 8016088:	d418      	bmi.n	80160bc <_malloc_r+0x8c>
 801608a:	2b0b      	cmp	r3, #11
 801608c:	d90f      	bls.n	80160ae <_malloc_r+0x7e>
 801608e:	600b      	str	r3, [r1, #0]
 8016090:	50cd      	str	r5, [r1, r3]
 8016092:	18cc      	adds	r4, r1, r3
 8016094:	4630      	mov	r0, r6
 8016096:	f000 fafc 	bl	8016692 <__malloc_unlock>
 801609a:	f104 000b 	add.w	r0, r4, #11
 801609e:	1d23      	adds	r3, r4, #4
 80160a0:	f020 0007 	bic.w	r0, r0, #7
 80160a4:	1ac3      	subs	r3, r0, r3
 80160a6:	d0d3      	beq.n	8016050 <_malloc_r+0x20>
 80160a8:	425a      	negs	r2, r3
 80160aa:	50e2      	str	r2, [r4, r3]
 80160ac:	e7d0      	b.n	8016050 <_malloc_r+0x20>
 80160ae:	428c      	cmp	r4, r1
 80160b0:	684b      	ldr	r3, [r1, #4]
 80160b2:	bf16      	itet	ne
 80160b4:	6063      	strne	r3, [r4, #4]
 80160b6:	6013      	streq	r3, [r2, #0]
 80160b8:	460c      	movne	r4, r1
 80160ba:	e7eb      	b.n	8016094 <_malloc_r+0x64>
 80160bc:	460c      	mov	r4, r1
 80160be:	6849      	ldr	r1, [r1, #4]
 80160c0:	e7cc      	b.n	801605c <_malloc_r+0x2c>
 80160c2:	1cc4      	adds	r4, r0, #3
 80160c4:	f024 0403 	bic.w	r4, r4, #3
 80160c8:	42a0      	cmp	r0, r4
 80160ca:	d005      	beq.n	80160d8 <_malloc_r+0xa8>
 80160cc:	1a21      	subs	r1, r4, r0
 80160ce:	4630      	mov	r0, r6
 80160d0:	f000 f820 	bl	8016114 <_sbrk_r>
 80160d4:	3001      	adds	r0, #1
 80160d6:	d0cf      	beq.n	8016078 <_malloc_r+0x48>
 80160d8:	6025      	str	r5, [r4, #0]
 80160da:	e7db      	b.n	8016094 <_malloc_r+0x64>
 80160dc:	200014c8 	.word	0x200014c8
 80160e0:	200014cc 	.word	0x200014cc

080160e4 <iprintf>:
 80160e4:	b40f      	push	{r0, r1, r2, r3}
 80160e6:	4b0a      	ldr	r3, [pc, #40]	; (8016110 <iprintf+0x2c>)
 80160e8:	b513      	push	{r0, r1, r4, lr}
 80160ea:	681c      	ldr	r4, [r3, #0]
 80160ec:	b124      	cbz	r4, 80160f8 <iprintf+0x14>
 80160ee:	69a3      	ldr	r3, [r4, #24]
 80160f0:	b913      	cbnz	r3, 80160f8 <iprintf+0x14>
 80160f2:	4620      	mov	r0, r4
 80160f4:	f000 f9c8 	bl	8016488 <__sinit>
 80160f8:	ab05      	add	r3, sp, #20
 80160fa:	9a04      	ldr	r2, [sp, #16]
 80160fc:	68a1      	ldr	r1, [r4, #8]
 80160fe:	9301      	str	r3, [sp, #4]
 8016100:	4620      	mov	r0, r4
 8016102:	f000 fc43 	bl	801698c <_vfiprintf_r>
 8016106:	b002      	add	sp, #8
 8016108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801610c:	b004      	add	sp, #16
 801610e:	4770      	bx	lr
 8016110:	20000088 	.word	0x20000088

08016114 <_sbrk_r>:
 8016114:	b538      	push	{r3, r4, r5, lr}
 8016116:	4c06      	ldr	r4, [pc, #24]	; (8016130 <_sbrk_r+0x1c>)
 8016118:	2300      	movs	r3, #0
 801611a:	4605      	mov	r5, r0
 801611c:	4608      	mov	r0, r1
 801611e:	6023      	str	r3, [r4, #0]
 8016120:	f7f8 f99a 	bl	800e458 <_sbrk>
 8016124:	1c43      	adds	r3, r0, #1
 8016126:	d102      	bne.n	801612e <_sbrk_r+0x1a>
 8016128:	6823      	ldr	r3, [r4, #0]
 801612a:	b103      	cbz	r3, 801612e <_sbrk_r+0x1a>
 801612c:	602b      	str	r3, [r5, #0]
 801612e:	bd38      	pop	{r3, r4, r5, pc}
 8016130:	20005ef4 	.word	0x20005ef4

08016134 <siprintf>:
 8016134:	b40e      	push	{r1, r2, r3}
 8016136:	b500      	push	{lr}
 8016138:	b09c      	sub	sp, #112	; 0x70
 801613a:	ab1d      	add	r3, sp, #116	; 0x74
 801613c:	9002      	str	r0, [sp, #8]
 801613e:	9006      	str	r0, [sp, #24]
 8016140:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016144:	4809      	ldr	r0, [pc, #36]	; (801616c <siprintf+0x38>)
 8016146:	9107      	str	r1, [sp, #28]
 8016148:	9104      	str	r1, [sp, #16]
 801614a:	4909      	ldr	r1, [pc, #36]	; (8016170 <siprintf+0x3c>)
 801614c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016150:	9105      	str	r1, [sp, #20]
 8016152:	6800      	ldr	r0, [r0, #0]
 8016154:	9301      	str	r3, [sp, #4]
 8016156:	a902      	add	r1, sp, #8
 8016158:	f000 faf6 	bl	8016748 <_svfiprintf_r>
 801615c:	9b02      	ldr	r3, [sp, #8]
 801615e:	2200      	movs	r2, #0
 8016160:	701a      	strb	r2, [r3, #0]
 8016162:	b01c      	add	sp, #112	; 0x70
 8016164:	f85d eb04 	ldr.w	lr, [sp], #4
 8016168:	b003      	add	sp, #12
 801616a:	4770      	bx	lr
 801616c:	20000088 	.word	0x20000088
 8016170:	ffff0208 	.word	0xffff0208

08016174 <strcpy>:
 8016174:	4603      	mov	r3, r0
 8016176:	f811 2b01 	ldrb.w	r2, [r1], #1
 801617a:	f803 2b01 	strb.w	r2, [r3], #1
 801617e:	2a00      	cmp	r2, #0
 8016180:	d1f9      	bne.n	8016176 <strcpy+0x2>
 8016182:	4770      	bx	lr

08016184 <_strtol_l.isra.0>:
 8016184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016188:	4680      	mov	r8, r0
 801618a:	4689      	mov	r9, r1
 801618c:	4692      	mov	sl, r2
 801618e:	461e      	mov	r6, r3
 8016190:	460f      	mov	r7, r1
 8016192:	463d      	mov	r5, r7
 8016194:	9808      	ldr	r0, [sp, #32]
 8016196:	f815 4b01 	ldrb.w	r4, [r5], #1
 801619a:	f000 f9ff 	bl	801659c <__locale_ctype_ptr_l>
 801619e:	4420      	add	r0, r4
 80161a0:	7843      	ldrb	r3, [r0, #1]
 80161a2:	f013 0308 	ands.w	r3, r3, #8
 80161a6:	d132      	bne.n	801620e <_strtol_l.isra.0+0x8a>
 80161a8:	2c2d      	cmp	r4, #45	; 0x2d
 80161aa:	d132      	bne.n	8016212 <_strtol_l.isra.0+0x8e>
 80161ac:	787c      	ldrb	r4, [r7, #1]
 80161ae:	1cbd      	adds	r5, r7, #2
 80161b0:	2201      	movs	r2, #1
 80161b2:	2e00      	cmp	r6, #0
 80161b4:	d05d      	beq.n	8016272 <_strtol_l.isra.0+0xee>
 80161b6:	2e10      	cmp	r6, #16
 80161b8:	d109      	bne.n	80161ce <_strtol_l.isra.0+0x4a>
 80161ba:	2c30      	cmp	r4, #48	; 0x30
 80161bc:	d107      	bne.n	80161ce <_strtol_l.isra.0+0x4a>
 80161be:	782b      	ldrb	r3, [r5, #0]
 80161c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80161c4:	2b58      	cmp	r3, #88	; 0x58
 80161c6:	d14f      	bne.n	8016268 <_strtol_l.isra.0+0xe4>
 80161c8:	786c      	ldrb	r4, [r5, #1]
 80161ca:	2610      	movs	r6, #16
 80161cc:	3502      	adds	r5, #2
 80161ce:	2a00      	cmp	r2, #0
 80161d0:	bf14      	ite	ne
 80161d2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80161d6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80161da:	2700      	movs	r7, #0
 80161dc:	fbb1 fcf6 	udiv	ip, r1, r6
 80161e0:	4638      	mov	r0, r7
 80161e2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80161e6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80161ea:	2b09      	cmp	r3, #9
 80161ec:	d817      	bhi.n	801621e <_strtol_l.isra.0+0x9a>
 80161ee:	461c      	mov	r4, r3
 80161f0:	42a6      	cmp	r6, r4
 80161f2:	dd23      	ble.n	801623c <_strtol_l.isra.0+0xb8>
 80161f4:	1c7b      	adds	r3, r7, #1
 80161f6:	d007      	beq.n	8016208 <_strtol_l.isra.0+0x84>
 80161f8:	4584      	cmp	ip, r0
 80161fa:	d31c      	bcc.n	8016236 <_strtol_l.isra.0+0xb2>
 80161fc:	d101      	bne.n	8016202 <_strtol_l.isra.0+0x7e>
 80161fe:	45a6      	cmp	lr, r4
 8016200:	db19      	blt.n	8016236 <_strtol_l.isra.0+0xb2>
 8016202:	fb00 4006 	mla	r0, r0, r6, r4
 8016206:	2701      	movs	r7, #1
 8016208:	f815 4b01 	ldrb.w	r4, [r5], #1
 801620c:	e7eb      	b.n	80161e6 <_strtol_l.isra.0+0x62>
 801620e:	462f      	mov	r7, r5
 8016210:	e7bf      	b.n	8016192 <_strtol_l.isra.0+0xe>
 8016212:	2c2b      	cmp	r4, #43	; 0x2b
 8016214:	bf04      	itt	eq
 8016216:	1cbd      	addeq	r5, r7, #2
 8016218:	787c      	ldrbeq	r4, [r7, #1]
 801621a:	461a      	mov	r2, r3
 801621c:	e7c9      	b.n	80161b2 <_strtol_l.isra.0+0x2e>
 801621e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016222:	2b19      	cmp	r3, #25
 8016224:	d801      	bhi.n	801622a <_strtol_l.isra.0+0xa6>
 8016226:	3c37      	subs	r4, #55	; 0x37
 8016228:	e7e2      	b.n	80161f0 <_strtol_l.isra.0+0x6c>
 801622a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801622e:	2b19      	cmp	r3, #25
 8016230:	d804      	bhi.n	801623c <_strtol_l.isra.0+0xb8>
 8016232:	3c57      	subs	r4, #87	; 0x57
 8016234:	e7dc      	b.n	80161f0 <_strtol_l.isra.0+0x6c>
 8016236:	f04f 37ff 	mov.w	r7, #4294967295
 801623a:	e7e5      	b.n	8016208 <_strtol_l.isra.0+0x84>
 801623c:	1c7b      	adds	r3, r7, #1
 801623e:	d108      	bne.n	8016252 <_strtol_l.isra.0+0xce>
 8016240:	2322      	movs	r3, #34	; 0x22
 8016242:	f8c8 3000 	str.w	r3, [r8]
 8016246:	4608      	mov	r0, r1
 8016248:	f1ba 0f00 	cmp.w	sl, #0
 801624c:	d107      	bne.n	801625e <_strtol_l.isra.0+0xda>
 801624e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016252:	b102      	cbz	r2, 8016256 <_strtol_l.isra.0+0xd2>
 8016254:	4240      	negs	r0, r0
 8016256:	f1ba 0f00 	cmp.w	sl, #0
 801625a:	d0f8      	beq.n	801624e <_strtol_l.isra.0+0xca>
 801625c:	b10f      	cbz	r7, 8016262 <_strtol_l.isra.0+0xde>
 801625e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016262:	f8ca 9000 	str.w	r9, [sl]
 8016266:	e7f2      	b.n	801624e <_strtol_l.isra.0+0xca>
 8016268:	2430      	movs	r4, #48	; 0x30
 801626a:	2e00      	cmp	r6, #0
 801626c:	d1af      	bne.n	80161ce <_strtol_l.isra.0+0x4a>
 801626e:	2608      	movs	r6, #8
 8016270:	e7ad      	b.n	80161ce <_strtol_l.isra.0+0x4a>
 8016272:	2c30      	cmp	r4, #48	; 0x30
 8016274:	d0a3      	beq.n	80161be <_strtol_l.isra.0+0x3a>
 8016276:	260a      	movs	r6, #10
 8016278:	e7a9      	b.n	80161ce <_strtol_l.isra.0+0x4a>
	...

0801627c <strtol>:
 801627c:	4b08      	ldr	r3, [pc, #32]	; (80162a0 <strtol+0x24>)
 801627e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016280:	681c      	ldr	r4, [r3, #0]
 8016282:	4d08      	ldr	r5, [pc, #32]	; (80162a4 <strtol+0x28>)
 8016284:	6a23      	ldr	r3, [r4, #32]
 8016286:	2b00      	cmp	r3, #0
 8016288:	bf08      	it	eq
 801628a:	462b      	moveq	r3, r5
 801628c:	9300      	str	r3, [sp, #0]
 801628e:	4613      	mov	r3, r2
 8016290:	460a      	mov	r2, r1
 8016292:	4601      	mov	r1, r0
 8016294:	4620      	mov	r0, r4
 8016296:	f7ff ff75 	bl	8016184 <_strtol_l.isra.0>
 801629a:	b003      	add	sp, #12
 801629c:	bd30      	pop	{r4, r5, pc}
 801629e:	bf00      	nop
 80162a0:	20000088 	.word	0x20000088
 80162a4:	200000ec 	.word	0x200000ec

080162a8 <__sflush_r>:
 80162a8:	898a      	ldrh	r2, [r1, #12]
 80162aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162ae:	4605      	mov	r5, r0
 80162b0:	0710      	lsls	r0, r2, #28
 80162b2:	460c      	mov	r4, r1
 80162b4:	d458      	bmi.n	8016368 <__sflush_r+0xc0>
 80162b6:	684b      	ldr	r3, [r1, #4]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	dc05      	bgt.n	80162c8 <__sflush_r+0x20>
 80162bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80162be:	2b00      	cmp	r3, #0
 80162c0:	dc02      	bgt.n	80162c8 <__sflush_r+0x20>
 80162c2:	2000      	movs	r0, #0
 80162c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162ca:	2e00      	cmp	r6, #0
 80162cc:	d0f9      	beq.n	80162c2 <__sflush_r+0x1a>
 80162ce:	2300      	movs	r3, #0
 80162d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80162d4:	682f      	ldr	r7, [r5, #0]
 80162d6:	6a21      	ldr	r1, [r4, #32]
 80162d8:	602b      	str	r3, [r5, #0]
 80162da:	d032      	beq.n	8016342 <__sflush_r+0x9a>
 80162dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80162de:	89a3      	ldrh	r3, [r4, #12]
 80162e0:	075a      	lsls	r2, r3, #29
 80162e2:	d505      	bpl.n	80162f0 <__sflush_r+0x48>
 80162e4:	6863      	ldr	r3, [r4, #4]
 80162e6:	1ac0      	subs	r0, r0, r3
 80162e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80162ea:	b10b      	cbz	r3, 80162f0 <__sflush_r+0x48>
 80162ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80162ee:	1ac0      	subs	r0, r0, r3
 80162f0:	2300      	movs	r3, #0
 80162f2:	4602      	mov	r2, r0
 80162f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162f6:	6a21      	ldr	r1, [r4, #32]
 80162f8:	4628      	mov	r0, r5
 80162fa:	47b0      	blx	r6
 80162fc:	1c43      	adds	r3, r0, #1
 80162fe:	89a3      	ldrh	r3, [r4, #12]
 8016300:	d106      	bne.n	8016310 <__sflush_r+0x68>
 8016302:	6829      	ldr	r1, [r5, #0]
 8016304:	291d      	cmp	r1, #29
 8016306:	d848      	bhi.n	801639a <__sflush_r+0xf2>
 8016308:	4a29      	ldr	r2, [pc, #164]	; (80163b0 <__sflush_r+0x108>)
 801630a:	40ca      	lsrs	r2, r1
 801630c:	07d6      	lsls	r6, r2, #31
 801630e:	d544      	bpl.n	801639a <__sflush_r+0xf2>
 8016310:	2200      	movs	r2, #0
 8016312:	6062      	str	r2, [r4, #4]
 8016314:	04d9      	lsls	r1, r3, #19
 8016316:	6922      	ldr	r2, [r4, #16]
 8016318:	6022      	str	r2, [r4, #0]
 801631a:	d504      	bpl.n	8016326 <__sflush_r+0x7e>
 801631c:	1c42      	adds	r2, r0, #1
 801631e:	d101      	bne.n	8016324 <__sflush_r+0x7c>
 8016320:	682b      	ldr	r3, [r5, #0]
 8016322:	b903      	cbnz	r3, 8016326 <__sflush_r+0x7e>
 8016324:	6560      	str	r0, [r4, #84]	; 0x54
 8016326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016328:	602f      	str	r7, [r5, #0]
 801632a:	2900      	cmp	r1, #0
 801632c:	d0c9      	beq.n	80162c2 <__sflush_r+0x1a>
 801632e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016332:	4299      	cmp	r1, r3
 8016334:	d002      	beq.n	801633c <__sflush_r+0x94>
 8016336:	4628      	mov	r0, r5
 8016338:	f7ff fe2c 	bl	8015f94 <_free_r>
 801633c:	2000      	movs	r0, #0
 801633e:	6360      	str	r0, [r4, #52]	; 0x34
 8016340:	e7c0      	b.n	80162c4 <__sflush_r+0x1c>
 8016342:	2301      	movs	r3, #1
 8016344:	4628      	mov	r0, r5
 8016346:	47b0      	blx	r6
 8016348:	1c41      	adds	r1, r0, #1
 801634a:	d1c8      	bne.n	80162de <__sflush_r+0x36>
 801634c:	682b      	ldr	r3, [r5, #0]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d0c5      	beq.n	80162de <__sflush_r+0x36>
 8016352:	2b1d      	cmp	r3, #29
 8016354:	d001      	beq.n	801635a <__sflush_r+0xb2>
 8016356:	2b16      	cmp	r3, #22
 8016358:	d101      	bne.n	801635e <__sflush_r+0xb6>
 801635a:	602f      	str	r7, [r5, #0]
 801635c:	e7b1      	b.n	80162c2 <__sflush_r+0x1a>
 801635e:	89a3      	ldrh	r3, [r4, #12]
 8016360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016364:	81a3      	strh	r3, [r4, #12]
 8016366:	e7ad      	b.n	80162c4 <__sflush_r+0x1c>
 8016368:	690f      	ldr	r7, [r1, #16]
 801636a:	2f00      	cmp	r7, #0
 801636c:	d0a9      	beq.n	80162c2 <__sflush_r+0x1a>
 801636e:	0793      	lsls	r3, r2, #30
 8016370:	680e      	ldr	r6, [r1, #0]
 8016372:	bf08      	it	eq
 8016374:	694b      	ldreq	r3, [r1, #20]
 8016376:	600f      	str	r7, [r1, #0]
 8016378:	bf18      	it	ne
 801637a:	2300      	movne	r3, #0
 801637c:	eba6 0807 	sub.w	r8, r6, r7
 8016380:	608b      	str	r3, [r1, #8]
 8016382:	f1b8 0f00 	cmp.w	r8, #0
 8016386:	dd9c      	ble.n	80162c2 <__sflush_r+0x1a>
 8016388:	4643      	mov	r3, r8
 801638a:	463a      	mov	r2, r7
 801638c:	6a21      	ldr	r1, [r4, #32]
 801638e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016390:	4628      	mov	r0, r5
 8016392:	47b0      	blx	r6
 8016394:	2800      	cmp	r0, #0
 8016396:	dc06      	bgt.n	80163a6 <__sflush_r+0xfe>
 8016398:	89a3      	ldrh	r3, [r4, #12]
 801639a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801639e:	81a3      	strh	r3, [r4, #12]
 80163a0:	f04f 30ff 	mov.w	r0, #4294967295
 80163a4:	e78e      	b.n	80162c4 <__sflush_r+0x1c>
 80163a6:	4407      	add	r7, r0
 80163a8:	eba8 0800 	sub.w	r8, r8, r0
 80163ac:	e7e9      	b.n	8016382 <__sflush_r+0xda>
 80163ae:	bf00      	nop
 80163b0:	20400001 	.word	0x20400001

080163b4 <_fflush_r>:
 80163b4:	b538      	push	{r3, r4, r5, lr}
 80163b6:	690b      	ldr	r3, [r1, #16]
 80163b8:	4605      	mov	r5, r0
 80163ba:	460c      	mov	r4, r1
 80163bc:	b1db      	cbz	r3, 80163f6 <_fflush_r+0x42>
 80163be:	b118      	cbz	r0, 80163c8 <_fflush_r+0x14>
 80163c0:	6983      	ldr	r3, [r0, #24]
 80163c2:	b90b      	cbnz	r3, 80163c8 <_fflush_r+0x14>
 80163c4:	f000 f860 	bl	8016488 <__sinit>
 80163c8:	4b0c      	ldr	r3, [pc, #48]	; (80163fc <_fflush_r+0x48>)
 80163ca:	429c      	cmp	r4, r3
 80163cc:	d109      	bne.n	80163e2 <_fflush_r+0x2e>
 80163ce:	686c      	ldr	r4, [r5, #4]
 80163d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163d4:	b17b      	cbz	r3, 80163f6 <_fflush_r+0x42>
 80163d6:	4621      	mov	r1, r4
 80163d8:	4628      	mov	r0, r5
 80163da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163de:	f7ff bf63 	b.w	80162a8 <__sflush_r>
 80163e2:	4b07      	ldr	r3, [pc, #28]	; (8016400 <_fflush_r+0x4c>)
 80163e4:	429c      	cmp	r4, r3
 80163e6:	d101      	bne.n	80163ec <_fflush_r+0x38>
 80163e8:	68ac      	ldr	r4, [r5, #8]
 80163ea:	e7f1      	b.n	80163d0 <_fflush_r+0x1c>
 80163ec:	4b05      	ldr	r3, [pc, #20]	; (8016404 <_fflush_r+0x50>)
 80163ee:	429c      	cmp	r4, r3
 80163f0:	bf08      	it	eq
 80163f2:	68ec      	ldreq	r4, [r5, #12]
 80163f4:	e7ec      	b.n	80163d0 <_fflush_r+0x1c>
 80163f6:	2000      	movs	r0, #0
 80163f8:	bd38      	pop	{r3, r4, r5, pc}
 80163fa:	bf00      	nop
 80163fc:	080016d8 	.word	0x080016d8
 8016400:	080016f8 	.word	0x080016f8
 8016404:	080016b8 	.word	0x080016b8

08016408 <std>:
 8016408:	2300      	movs	r3, #0
 801640a:	b510      	push	{r4, lr}
 801640c:	4604      	mov	r4, r0
 801640e:	e9c0 3300 	strd	r3, r3, [r0]
 8016412:	6083      	str	r3, [r0, #8]
 8016414:	8181      	strh	r1, [r0, #12]
 8016416:	6643      	str	r3, [r0, #100]	; 0x64
 8016418:	81c2      	strh	r2, [r0, #14]
 801641a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801641e:	6183      	str	r3, [r0, #24]
 8016420:	4619      	mov	r1, r3
 8016422:	2208      	movs	r2, #8
 8016424:	305c      	adds	r0, #92	; 0x5c
 8016426:	f7ff fdac 	bl	8015f82 <memset>
 801642a:	4b05      	ldr	r3, [pc, #20]	; (8016440 <std+0x38>)
 801642c:	6263      	str	r3, [r4, #36]	; 0x24
 801642e:	4b05      	ldr	r3, [pc, #20]	; (8016444 <std+0x3c>)
 8016430:	62a3      	str	r3, [r4, #40]	; 0x28
 8016432:	4b05      	ldr	r3, [pc, #20]	; (8016448 <std+0x40>)
 8016434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016436:	4b05      	ldr	r3, [pc, #20]	; (801644c <std+0x44>)
 8016438:	6224      	str	r4, [r4, #32]
 801643a:	6323      	str	r3, [r4, #48]	; 0x30
 801643c:	bd10      	pop	{r4, pc}
 801643e:	bf00      	nop
 8016440:	08016ec9 	.word	0x08016ec9
 8016444:	08016eeb 	.word	0x08016eeb
 8016448:	08016f23 	.word	0x08016f23
 801644c:	08016f47 	.word	0x08016f47

08016450 <_cleanup_r>:
 8016450:	4901      	ldr	r1, [pc, #4]	; (8016458 <_cleanup_r+0x8>)
 8016452:	f000 b885 	b.w	8016560 <_fwalk_reent>
 8016456:	bf00      	nop
 8016458:	080163b5 	.word	0x080163b5

0801645c <__sfmoreglue>:
 801645c:	b570      	push	{r4, r5, r6, lr}
 801645e:	1e4a      	subs	r2, r1, #1
 8016460:	2568      	movs	r5, #104	; 0x68
 8016462:	4355      	muls	r5, r2
 8016464:	460e      	mov	r6, r1
 8016466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801646a:	f7ff fde1 	bl	8016030 <_malloc_r>
 801646e:	4604      	mov	r4, r0
 8016470:	b140      	cbz	r0, 8016484 <__sfmoreglue+0x28>
 8016472:	2100      	movs	r1, #0
 8016474:	e9c0 1600 	strd	r1, r6, [r0]
 8016478:	300c      	adds	r0, #12
 801647a:	60a0      	str	r0, [r4, #8]
 801647c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016480:	f7ff fd7f 	bl	8015f82 <memset>
 8016484:	4620      	mov	r0, r4
 8016486:	bd70      	pop	{r4, r5, r6, pc}

08016488 <__sinit>:
 8016488:	6983      	ldr	r3, [r0, #24]
 801648a:	b510      	push	{r4, lr}
 801648c:	4604      	mov	r4, r0
 801648e:	bb33      	cbnz	r3, 80164de <__sinit+0x56>
 8016490:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016494:	6503      	str	r3, [r0, #80]	; 0x50
 8016496:	4b12      	ldr	r3, [pc, #72]	; (80164e0 <__sinit+0x58>)
 8016498:	4a12      	ldr	r2, [pc, #72]	; (80164e4 <__sinit+0x5c>)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	6282      	str	r2, [r0, #40]	; 0x28
 801649e:	4298      	cmp	r0, r3
 80164a0:	bf04      	itt	eq
 80164a2:	2301      	moveq	r3, #1
 80164a4:	6183      	streq	r3, [r0, #24]
 80164a6:	f000 f81f 	bl	80164e8 <__sfp>
 80164aa:	6060      	str	r0, [r4, #4]
 80164ac:	4620      	mov	r0, r4
 80164ae:	f000 f81b 	bl	80164e8 <__sfp>
 80164b2:	60a0      	str	r0, [r4, #8]
 80164b4:	4620      	mov	r0, r4
 80164b6:	f000 f817 	bl	80164e8 <__sfp>
 80164ba:	2200      	movs	r2, #0
 80164bc:	60e0      	str	r0, [r4, #12]
 80164be:	2104      	movs	r1, #4
 80164c0:	6860      	ldr	r0, [r4, #4]
 80164c2:	f7ff ffa1 	bl	8016408 <std>
 80164c6:	2201      	movs	r2, #1
 80164c8:	2109      	movs	r1, #9
 80164ca:	68a0      	ldr	r0, [r4, #8]
 80164cc:	f7ff ff9c 	bl	8016408 <std>
 80164d0:	2202      	movs	r2, #2
 80164d2:	2112      	movs	r1, #18
 80164d4:	68e0      	ldr	r0, [r4, #12]
 80164d6:	f7ff ff97 	bl	8016408 <std>
 80164da:	2301      	movs	r3, #1
 80164dc:	61a3      	str	r3, [r4, #24]
 80164de:	bd10      	pop	{r4, pc}
 80164e0:	080016b4 	.word	0x080016b4
 80164e4:	08016451 	.word	0x08016451

080164e8 <__sfp>:
 80164e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164ea:	4b1b      	ldr	r3, [pc, #108]	; (8016558 <__sfp+0x70>)
 80164ec:	681e      	ldr	r6, [r3, #0]
 80164ee:	69b3      	ldr	r3, [r6, #24]
 80164f0:	4607      	mov	r7, r0
 80164f2:	b913      	cbnz	r3, 80164fa <__sfp+0x12>
 80164f4:	4630      	mov	r0, r6
 80164f6:	f7ff ffc7 	bl	8016488 <__sinit>
 80164fa:	3648      	adds	r6, #72	; 0x48
 80164fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016500:	3b01      	subs	r3, #1
 8016502:	d503      	bpl.n	801650c <__sfp+0x24>
 8016504:	6833      	ldr	r3, [r6, #0]
 8016506:	b133      	cbz	r3, 8016516 <__sfp+0x2e>
 8016508:	6836      	ldr	r6, [r6, #0]
 801650a:	e7f7      	b.n	80164fc <__sfp+0x14>
 801650c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016510:	b16d      	cbz	r5, 801652e <__sfp+0x46>
 8016512:	3468      	adds	r4, #104	; 0x68
 8016514:	e7f4      	b.n	8016500 <__sfp+0x18>
 8016516:	2104      	movs	r1, #4
 8016518:	4638      	mov	r0, r7
 801651a:	f7ff ff9f 	bl	801645c <__sfmoreglue>
 801651e:	6030      	str	r0, [r6, #0]
 8016520:	2800      	cmp	r0, #0
 8016522:	d1f1      	bne.n	8016508 <__sfp+0x20>
 8016524:	230c      	movs	r3, #12
 8016526:	603b      	str	r3, [r7, #0]
 8016528:	4604      	mov	r4, r0
 801652a:	4620      	mov	r0, r4
 801652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801652e:	4b0b      	ldr	r3, [pc, #44]	; (801655c <__sfp+0x74>)
 8016530:	6665      	str	r5, [r4, #100]	; 0x64
 8016532:	e9c4 5500 	strd	r5, r5, [r4]
 8016536:	60a5      	str	r5, [r4, #8]
 8016538:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801653c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016540:	2208      	movs	r2, #8
 8016542:	4629      	mov	r1, r5
 8016544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016548:	f7ff fd1b 	bl	8015f82 <memset>
 801654c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016554:	e7e9      	b.n	801652a <__sfp+0x42>
 8016556:	bf00      	nop
 8016558:	080016b4 	.word	0x080016b4
 801655c:	ffff0001 	.word	0xffff0001

08016560 <_fwalk_reent>:
 8016560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016564:	4680      	mov	r8, r0
 8016566:	4689      	mov	r9, r1
 8016568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801656c:	2600      	movs	r6, #0
 801656e:	b914      	cbnz	r4, 8016576 <_fwalk_reent+0x16>
 8016570:	4630      	mov	r0, r6
 8016572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016576:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801657a:	3f01      	subs	r7, #1
 801657c:	d501      	bpl.n	8016582 <_fwalk_reent+0x22>
 801657e:	6824      	ldr	r4, [r4, #0]
 8016580:	e7f5      	b.n	801656e <_fwalk_reent+0xe>
 8016582:	89ab      	ldrh	r3, [r5, #12]
 8016584:	2b01      	cmp	r3, #1
 8016586:	d907      	bls.n	8016598 <_fwalk_reent+0x38>
 8016588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801658c:	3301      	adds	r3, #1
 801658e:	d003      	beq.n	8016598 <_fwalk_reent+0x38>
 8016590:	4629      	mov	r1, r5
 8016592:	4640      	mov	r0, r8
 8016594:	47c8      	blx	r9
 8016596:	4306      	orrs	r6, r0
 8016598:	3568      	adds	r5, #104	; 0x68
 801659a:	e7ee      	b.n	801657a <_fwalk_reent+0x1a>

0801659c <__locale_ctype_ptr_l>:
 801659c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80165a0:	4770      	bx	lr

080165a2 <__swhatbuf_r>:
 80165a2:	b570      	push	{r4, r5, r6, lr}
 80165a4:	460e      	mov	r6, r1
 80165a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165aa:	2900      	cmp	r1, #0
 80165ac:	b096      	sub	sp, #88	; 0x58
 80165ae:	4614      	mov	r4, r2
 80165b0:	461d      	mov	r5, r3
 80165b2:	da07      	bge.n	80165c4 <__swhatbuf_r+0x22>
 80165b4:	2300      	movs	r3, #0
 80165b6:	602b      	str	r3, [r5, #0]
 80165b8:	89b3      	ldrh	r3, [r6, #12]
 80165ba:	061a      	lsls	r2, r3, #24
 80165bc:	d410      	bmi.n	80165e0 <__swhatbuf_r+0x3e>
 80165be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80165c2:	e00e      	b.n	80165e2 <__swhatbuf_r+0x40>
 80165c4:	466a      	mov	r2, sp
 80165c6:	f000 fdb3 	bl	8017130 <_fstat_r>
 80165ca:	2800      	cmp	r0, #0
 80165cc:	dbf2      	blt.n	80165b4 <__swhatbuf_r+0x12>
 80165ce:	9a01      	ldr	r2, [sp, #4]
 80165d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80165d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80165d8:	425a      	negs	r2, r3
 80165da:	415a      	adcs	r2, r3
 80165dc:	602a      	str	r2, [r5, #0]
 80165de:	e7ee      	b.n	80165be <__swhatbuf_r+0x1c>
 80165e0:	2340      	movs	r3, #64	; 0x40
 80165e2:	2000      	movs	r0, #0
 80165e4:	6023      	str	r3, [r4, #0]
 80165e6:	b016      	add	sp, #88	; 0x58
 80165e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080165ec <__smakebuf_r>:
 80165ec:	898b      	ldrh	r3, [r1, #12]
 80165ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80165f0:	079d      	lsls	r5, r3, #30
 80165f2:	4606      	mov	r6, r0
 80165f4:	460c      	mov	r4, r1
 80165f6:	d507      	bpl.n	8016608 <__smakebuf_r+0x1c>
 80165f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80165fc:	6023      	str	r3, [r4, #0]
 80165fe:	6123      	str	r3, [r4, #16]
 8016600:	2301      	movs	r3, #1
 8016602:	6163      	str	r3, [r4, #20]
 8016604:	b002      	add	sp, #8
 8016606:	bd70      	pop	{r4, r5, r6, pc}
 8016608:	ab01      	add	r3, sp, #4
 801660a:	466a      	mov	r2, sp
 801660c:	f7ff ffc9 	bl	80165a2 <__swhatbuf_r>
 8016610:	9900      	ldr	r1, [sp, #0]
 8016612:	4605      	mov	r5, r0
 8016614:	4630      	mov	r0, r6
 8016616:	f7ff fd0b 	bl	8016030 <_malloc_r>
 801661a:	b948      	cbnz	r0, 8016630 <__smakebuf_r+0x44>
 801661c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016620:	059a      	lsls	r2, r3, #22
 8016622:	d4ef      	bmi.n	8016604 <__smakebuf_r+0x18>
 8016624:	f023 0303 	bic.w	r3, r3, #3
 8016628:	f043 0302 	orr.w	r3, r3, #2
 801662c:	81a3      	strh	r3, [r4, #12]
 801662e:	e7e3      	b.n	80165f8 <__smakebuf_r+0xc>
 8016630:	4b0d      	ldr	r3, [pc, #52]	; (8016668 <__smakebuf_r+0x7c>)
 8016632:	62b3      	str	r3, [r6, #40]	; 0x28
 8016634:	89a3      	ldrh	r3, [r4, #12]
 8016636:	6020      	str	r0, [r4, #0]
 8016638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801663c:	81a3      	strh	r3, [r4, #12]
 801663e:	9b00      	ldr	r3, [sp, #0]
 8016640:	6163      	str	r3, [r4, #20]
 8016642:	9b01      	ldr	r3, [sp, #4]
 8016644:	6120      	str	r0, [r4, #16]
 8016646:	b15b      	cbz	r3, 8016660 <__smakebuf_r+0x74>
 8016648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801664c:	4630      	mov	r0, r6
 801664e:	f000 fd81 	bl	8017154 <_isatty_r>
 8016652:	b128      	cbz	r0, 8016660 <__smakebuf_r+0x74>
 8016654:	89a3      	ldrh	r3, [r4, #12]
 8016656:	f023 0303 	bic.w	r3, r3, #3
 801665a:	f043 0301 	orr.w	r3, r3, #1
 801665e:	81a3      	strh	r3, [r4, #12]
 8016660:	89a3      	ldrh	r3, [r4, #12]
 8016662:	431d      	orrs	r5, r3
 8016664:	81a5      	strh	r5, [r4, #12]
 8016666:	e7cd      	b.n	8016604 <__smakebuf_r+0x18>
 8016668:	08016451 	.word	0x08016451

0801666c <__ascii_mbtowc>:
 801666c:	b082      	sub	sp, #8
 801666e:	b901      	cbnz	r1, 8016672 <__ascii_mbtowc+0x6>
 8016670:	a901      	add	r1, sp, #4
 8016672:	b142      	cbz	r2, 8016686 <__ascii_mbtowc+0x1a>
 8016674:	b14b      	cbz	r3, 801668a <__ascii_mbtowc+0x1e>
 8016676:	7813      	ldrb	r3, [r2, #0]
 8016678:	600b      	str	r3, [r1, #0]
 801667a:	7812      	ldrb	r2, [r2, #0]
 801667c:	1c10      	adds	r0, r2, #0
 801667e:	bf18      	it	ne
 8016680:	2001      	movne	r0, #1
 8016682:	b002      	add	sp, #8
 8016684:	4770      	bx	lr
 8016686:	4610      	mov	r0, r2
 8016688:	e7fb      	b.n	8016682 <__ascii_mbtowc+0x16>
 801668a:	f06f 0001 	mvn.w	r0, #1
 801668e:	e7f8      	b.n	8016682 <__ascii_mbtowc+0x16>

08016690 <__malloc_lock>:
 8016690:	4770      	bx	lr

08016692 <__malloc_unlock>:
 8016692:	4770      	bx	lr

08016694 <__ssputs_r>:
 8016694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016698:	688e      	ldr	r6, [r1, #8]
 801669a:	429e      	cmp	r6, r3
 801669c:	4682      	mov	sl, r0
 801669e:	460c      	mov	r4, r1
 80166a0:	4690      	mov	r8, r2
 80166a2:	4699      	mov	r9, r3
 80166a4:	d837      	bhi.n	8016716 <__ssputs_r+0x82>
 80166a6:	898a      	ldrh	r2, [r1, #12]
 80166a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80166ac:	d031      	beq.n	8016712 <__ssputs_r+0x7e>
 80166ae:	6825      	ldr	r5, [r4, #0]
 80166b0:	6909      	ldr	r1, [r1, #16]
 80166b2:	1a6f      	subs	r7, r5, r1
 80166b4:	6965      	ldr	r5, [r4, #20]
 80166b6:	2302      	movs	r3, #2
 80166b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80166bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80166c0:	f109 0301 	add.w	r3, r9, #1
 80166c4:	443b      	add	r3, r7
 80166c6:	429d      	cmp	r5, r3
 80166c8:	bf38      	it	cc
 80166ca:	461d      	movcc	r5, r3
 80166cc:	0553      	lsls	r3, r2, #21
 80166ce:	d530      	bpl.n	8016732 <__ssputs_r+0x9e>
 80166d0:	4629      	mov	r1, r5
 80166d2:	f7ff fcad 	bl	8016030 <_malloc_r>
 80166d6:	4606      	mov	r6, r0
 80166d8:	b950      	cbnz	r0, 80166f0 <__ssputs_r+0x5c>
 80166da:	230c      	movs	r3, #12
 80166dc:	f8ca 3000 	str.w	r3, [sl]
 80166e0:	89a3      	ldrh	r3, [r4, #12]
 80166e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166e6:	81a3      	strh	r3, [r4, #12]
 80166e8:	f04f 30ff 	mov.w	r0, #4294967295
 80166ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166f0:	463a      	mov	r2, r7
 80166f2:	6921      	ldr	r1, [r4, #16]
 80166f4:	f7ff fc3a 	bl	8015f6c <memcpy>
 80166f8:	89a3      	ldrh	r3, [r4, #12]
 80166fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80166fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016702:	81a3      	strh	r3, [r4, #12]
 8016704:	6126      	str	r6, [r4, #16]
 8016706:	6165      	str	r5, [r4, #20]
 8016708:	443e      	add	r6, r7
 801670a:	1bed      	subs	r5, r5, r7
 801670c:	6026      	str	r6, [r4, #0]
 801670e:	60a5      	str	r5, [r4, #8]
 8016710:	464e      	mov	r6, r9
 8016712:	454e      	cmp	r6, r9
 8016714:	d900      	bls.n	8016718 <__ssputs_r+0x84>
 8016716:	464e      	mov	r6, r9
 8016718:	4632      	mov	r2, r6
 801671a:	4641      	mov	r1, r8
 801671c:	6820      	ldr	r0, [r4, #0]
 801671e:	f000 fd3b 	bl	8017198 <memmove>
 8016722:	68a3      	ldr	r3, [r4, #8]
 8016724:	1b9b      	subs	r3, r3, r6
 8016726:	60a3      	str	r3, [r4, #8]
 8016728:	6823      	ldr	r3, [r4, #0]
 801672a:	441e      	add	r6, r3
 801672c:	6026      	str	r6, [r4, #0]
 801672e:	2000      	movs	r0, #0
 8016730:	e7dc      	b.n	80166ec <__ssputs_r+0x58>
 8016732:	462a      	mov	r2, r5
 8016734:	f000 fd49 	bl	80171ca <_realloc_r>
 8016738:	4606      	mov	r6, r0
 801673a:	2800      	cmp	r0, #0
 801673c:	d1e2      	bne.n	8016704 <__ssputs_r+0x70>
 801673e:	6921      	ldr	r1, [r4, #16]
 8016740:	4650      	mov	r0, sl
 8016742:	f7ff fc27 	bl	8015f94 <_free_r>
 8016746:	e7c8      	b.n	80166da <__ssputs_r+0x46>

08016748 <_svfiprintf_r>:
 8016748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801674c:	461d      	mov	r5, r3
 801674e:	898b      	ldrh	r3, [r1, #12]
 8016750:	061f      	lsls	r7, r3, #24
 8016752:	b09d      	sub	sp, #116	; 0x74
 8016754:	4680      	mov	r8, r0
 8016756:	460c      	mov	r4, r1
 8016758:	4616      	mov	r6, r2
 801675a:	d50f      	bpl.n	801677c <_svfiprintf_r+0x34>
 801675c:	690b      	ldr	r3, [r1, #16]
 801675e:	b96b      	cbnz	r3, 801677c <_svfiprintf_r+0x34>
 8016760:	2140      	movs	r1, #64	; 0x40
 8016762:	f7ff fc65 	bl	8016030 <_malloc_r>
 8016766:	6020      	str	r0, [r4, #0]
 8016768:	6120      	str	r0, [r4, #16]
 801676a:	b928      	cbnz	r0, 8016778 <_svfiprintf_r+0x30>
 801676c:	230c      	movs	r3, #12
 801676e:	f8c8 3000 	str.w	r3, [r8]
 8016772:	f04f 30ff 	mov.w	r0, #4294967295
 8016776:	e0c8      	b.n	801690a <_svfiprintf_r+0x1c2>
 8016778:	2340      	movs	r3, #64	; 0x40
 801677a:	6163      	str	r3, [r4, #20]
 801677c:	2300      	movs	r3, #0
 801677e:	9309      	str	r3, [sp, #36]	; 0x24
 8016780:	2320      	movs	r3, #32
 8016782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016786:	2330      	movs	r3, #48	; 0x30
 8016788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801678c:	9503      	str	r5, [sp, #12]
 801678e:	f04f 0b01 	mov.w	fp, #1
 8016792:	4637      	mov	r7, r6
 8016794:	463d      	mov	r5, r7
 8016796:	f815 3b01 	ldrb.w	r3, [r5], #1
 801679a:	b10b      	cbz	r3, 80167a0 <_svfiprintf_r+0x58>
 801679c:	2b25      	cmp	r3, #37	; 0x25
 801679e:	d13e      	bne.n	801681e <_svfiprintf_r+0xd6>
 80167a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80167a4:	d00b      	beq.n	80167be <_svfiprintf_r+0x76>
 80167a6:	4653      	mov	r3, sl
 80167a8:	4632      	mov	r2, r6
 80167aa:	4621      	mov	r1, r4
 80167ac:	4640      	mov	r0, r8
 80167ae:	f7ff ff71 	bl	8016694 <__ssputs_r>
 80167b2:	3001      	adds	r0, #1
 80167b4:	f000 80a4 	beq.w	8016900 <_svfiprintf_r+0x1b8>
 80167b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167ba:	4453      	add	r3, sl
 80167bc:	9309      	str	r3, [sp, #36]	; 0x24
 80167be:	783b      	ldrb	r3, [r7, #0]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	f000 809d 	beq.w	8016900 <_svfiprintf_r+0x1b8>
 80167c6:	2300      	movs	r3, #0
 80167c8:	f04f 32ff 	mov.w	r2, #4294967295
 80167cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80167d0:	9304      	str	r3, [sp, #16]
 80167d2:	9307      	str	r3, [sp, #28]
 80167d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80167d8:	931a      	str	r3, [sp, #104]	; 0x68
 80167da:	462f      	mov	r7, r5
 80167dc:	2205      	movs	r2, #5
 80167de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80167e2:	4850      	ldr	r0, [pc, #320]	; (8016924 <_svfiprintf_r+0x1dc>)
 80167e4:	f7f5 fc34 	bl	800c050 <memchr>
 80167e8:	9b04      	ldr	r3, [sp, #16]
 80167ea:	b9d0      	cbnz	r0, 8016822 <_svfiprintf_r+0xda>
 80167ec:	06d9      	lsls	r1, r3, #27
 80167ee:	bf44      	itt	mi
 80167f0:	2220      	movmi	r2, #32
 80167f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80167f6:	071a      	lsls	r2, r3, #28
 80167f8:	bf44      	itt	mi
 80167fa:	222b      	movmi	r2, #43	; 0x2b
 80167fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016800:	782a      	ldrb	r2, [r5, #0]
 8016802:	2a2a      	cmp	r2, #42	; 0x2a
 8016804:	d015      	beq.n	8016832 <_svfiprintf_r+0xea>
 8016806:	9a07      	ldr	r2, [sp, #28]
 8016808:	462f      	mov	r7, r5
 801680a:	2000      	movs	r0, #0
 801680c:	250a      	movs	r5, #10
 801680e:	4639      	mov	r1, r7
 8016810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016814:	3b30      	subs	r3, #48	; 0x30
 8016816:	2b09      	cmp	r3, #9
 8016818:	d94d      	bls.n	80168b6 <_svfiprintf_r+0x16e>
 801681a:	b1b8      	cbz	r0, 801684c <_svfiprintf_r+0x104>
 801681c:	e00f      	b.n	801683e <_svfiprintf_r+0xf6>
 801681e:	462f      	mov	r7, r5
 8016820:	e7b8      	b.n	8016794 <_svfiprintf_r+0x4c>
 8016822:	4a40      	ldr	r2, [pc, #256]	; (8016924 <_svfiprintf_r+0x1dc>)
 8016824:	1a80      	subs	r0, r0, r2
 8016826:	fa0b f000 	lsl.w	r0, fp, r0
 801682a:	4318      	orrs	r0, r3
 801682c:	9004      	str	r0, [sp, #16]
 801682e:	463d      	mov	r5, r7
 8016830:	e7d3      	b.n	80167da <_svfiprintf_r+0x92>
 8016832:	9a03      	ldr	r2, [sp, #12]
 8016834:	1d11      	adds	r1, r2, #4
 8016836:	6812      	ldr	r2, [r2, #0]
 8016838:	9103      	str	r1, [sp, #12]
 801683a:	2a00      	cmp	r2, #0
 801683c:	db01      	blt.n	8016842 <_svfiprintf_r+0xfa>
 801683e:	9207      	str	r2, [sp, #28]
 8016840:	e004      	b.n	801684c <_svfiprintf_r+0x104>
 8016842:	4252      	negs	r2, r2
 8016844:	f043 0302 	orr.w	r3, r3, #2
 8016848:	9207      	str	r2, [sp, #28]
 801684a:	9304      	str	r3, [sp, #16]
 801684c:	783b      	ldrb	r3, [r7, #0]
 801684e:	2b2e      	cmp	r3, #46	; 0x2e
 8016850:	d10c      	bne.n	801686c <_svfiprintf_r+0x124>
 8016852:	787b      	ldrb	r3, [r7, #1]
 8016854:	2b2a      	cmp	r3, #42	; 0x2a
 8016856:	d133      	bne.n	80168c0 <_svfiprintf_r+0x178>
 8016858:	9b03      	ldr	r3, [sp, #12]
 801685a:	1d1a      	adds	r2, r3, #4
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	9203      	str	r2, [sp, #12]
 8016860:	2b00      	cmp	r3, #0
 8016862:	bfb8      	it	lt
 8016864:	f04f 33ff 	movlt.w	r3, #4294967295
 8016868:	3702      	adds	r7, #2
 801686a:	9305      	str	r3, [sp, #20]
 801686c:	4d2e      	ldr	r5, [pc, #184]	; (8016928 <_svfiprintf_r+0x1e0>)
 801686e:	7839      	ldrb	r1, [r7, #0]
 8016870:	2203      	movs	r2, #3
 8016872:	4628      	mov	r0, r5
 8016874:	f7f5 fbec 	bl	800c050 <memchr>
 8016878:	b138      	cbz	r0, 801688a <_svfiprintf_r+0x142>
 801687a:	2340      	movs	r3, #64	; 0x40
 801687c:	1b40      	subs	r0, r0, r5
 801687e:	fa03 f000 	lsl.w	r0, r3, r0
 8016882:	9b04      	ldr	r3, [sp, #16]
 8016884:	4303      	orrs	r3, r0
 8016886:	3701      	adds	r7, #1
 8016888:	9304      	str	r3, [sp, #16]
 801688a:	7839      	ldrb	r1, [r7, #0]
 801688c:	4827      	ldr	r0, [pc, #156]	; (801692c <_svfiprintf_r+0x1e4>)
 801688e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016892:	2206      	movs	r2, #6
 8016894:	1c7e      	adds	r6, r7, #1
 8016896:	f7f5 fbdb 	bl	800c050 <memchr>
 801689a:	2800      	cmp	r0, #0
 801689c:	d038      	beq.n	8016910 <_svfiprintf_r+0x1c8>
 801689e:	4b24      	ldr	r3, [pc, #144]	; (8016930 <_svfiprintf_r+0x1e8>)
 80168a0:	bb13      	cbnz	r3, 80168e8 <_svfiprintf_r+0x1a0>
 80168a2:	9b03      	ldr	r3, [sp, #12]
 80168a4:	3307      	adds	r3, #7
 80168a6:	f023 0307 	bic.w	r3, r3, #7
 80168aa:	3308      	adds	r3, #8
 80168ac:	9303      	str	r3, [sp, #12]
 80168ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168b0:	444b      	add	r3, r9
 80168b2:	9309      	str	r3, [sp, #36]	; 0x24
 80168b4:	e76d      	b.n	8016792 <_svfiprintf_r+0x4a>
 80168b6:	fb05 3202 	mla	r2, r5, r2, r3
 80168ba:	2001      	movs	r0, #1
 80168bc:	460f      	mov	r7, r1
 80168be:	e7a6      	b.n	801680e <_svfiprintf_r+0xc6>
 80168c0:	2300      	movs	r3, #0
 80168c2:	3701      	adds	r7, #1
 80168c4:	9305      	str	r3, [sp, #20]
 80168c6:	4619      	mov	r1, r3
 80168c8:	250a      	movs	r5, #10
 80168ca:	4638      	mov	r0, r7
 80168cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80168d0:	3a30      	subs	r2, #48	; 0x30
 80168d2:	2a09      	cmp	r2, #9
 80168d4:	d903      	bls.n	80168de <_svfiprintf_r+0x196>
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d0c8      	beq.n	801686c <_svfiprintf_r+0x124>
 80168da:	9105      	str	r1, [sp, #20]
 80168dc:	e7c6      	b.n	801686c <_svfiprintf_r+0x124>
 80168de:	fb05 2101 	mla	r1, r5, r1, r2
 80168e2:	2301      	movs	r3, #1
 80168e4:	4607      	mov	r7, r0
 80168e6:	e7f0      	b.n	80168ca <_svfiprintf_r+0x182>
 80168e8:	ab03      	add	r3, sp, #12
 80168ea:	9300      	str	r3, [sp, #0]
 80168ec:	4622      	mov	r2, r4
 80168ee:	4b11      	ldr	r3, [pc, #68]	; (8016934 <_svfiprintf_r+0x1ec>)
 80168f0:	a904      	add	r1, sp, #16
 80168f2:	4640      	mov	r0, r8
 80168f4:	f3af 8000 	nop.w
 80168f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80168fc:	4681      	mov	r9, r0
 80168fe:	d1d6      	bne.n	80168ae <_svfiprintf_r+0x166>
 8016900:	89a3      	ldrh	r3, [r4, #12]
 8016902:	065b      	lsls	r3, r3, #25
 8016904:	f53f af35 	bmi.w	8016772 <_svfiprintf_r+0x2a>
 8016908:	9809      	ldr	r0, [sp, #36]	; 0x24
 801690a:	b01d      	add	sp, #116	; 0x74
 801690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016910:	ab03      	add	r3, sp, #12
 8016912:	9300      	str	r3, [sp, #0]
 8016914:	4622      	mov	r2, r4
 8016916:	4b07      	ldr	r3, [pc, #28]	; (8016934 <_svfiprintf_r+0x1ec>)
 8016918:	a904      	add	r1, sp, #16
 801691a:	4640      	mov	r0, r8
 801691c:	f000 f9c2 	bl	8016ca4 <_printf_i>
 8016920:	e7ea      	b.n	80168f8 <_svfiprintf_r+0x1b0>
 8016922:	bf00      	nop
 8016924:	0800171e 	.word	0x0800171e
 8016928:	08001724 	.word	0x08001724
 801692c:	08001728 	.word	0x08001728
 8016930:	00000000 	.word	0x00000000
 8016934:	08016695 	.word	0x08016695

08016938 <__sfputc_r>:
 8016938:	6893      	ldr	r3, [r2, #8]
 801693a:	3b01      	subs	r3, #1
 801693c:	2b00      	cmp	r3, #0
 801693e:	b410      	push	{r4}
 8016940:	6093      	str	r3, [r2, #8]
 8016942:	da08      	bge.n	8016956 <__sfputc_r+0x1e>
 8016944:	6994      	ldr	r4, [r2, #24]
 8016946:	42a3      	cmp	r3, r4
 8016948:	db01      	blt.n	801694e <__sfputc_r+0x16>
 801694a:	290a      	cmp	r1, #10
 801694c:	d103      	bne.n	8016956 <__sfputc_r+0x1e>
 801694e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016952:	f000 bafd 	b.w	8016f50 <__swbuf_r>
 8016956:	6813      	ldr	r3, [r2, #0]
 8016958:	1c58      	adds	r0, r3, #1
 801695a:	6010      	str	r0, [r2, #0]
 801695c:	7019      	strb	r1, [r3, #0]
 801695e:	4608      	mov	r0, r1
 8016960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016964:	4770      	bx	lr

08016966 <__sfputs_r>:
 8016966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016968:	4606      	mov	r6, r0
 801696a:	460f      	mov	r7, r1
 801696c:	4614      	mov	r4, r2
 801696e:	18d5      	adds	r5, r2, r3
 8016970:	42ac      	cmp	r4, r5
 8016972:	d101      	bne.n	8016978 <__sfputs_r+0x12>
 8016974:	2000      	movs	r0, #0
 8016976:	e007      	b.n	8016988 <__sfputs_r+0x22>
 8016978:	463a      	mov	r2, r7
 801697a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801697e:	4630      	mov	r0, r6
 8016980:	f7ff ffda 	bl	8016938 <__sfputc_r>
 8016984:	1c43      	adds	r3, r0, #1
 8016986:	d1f3      	bne.n	8016970 <__sfputs_r+0xa>
 8016988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801698c <_vfiprintf_r>:
 801698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016990:	460c      	mov	r4, r1
 8016992:	b09d      	sub	sp, #116	; 0x74
 8016994:	4617      	mov	r7, r2
 8016996:	461d      	mov	r5, r3
 8016998:	4606      	mov	r6, r0
 801699a:	b118      	cbz	r0, 80169a4 <_vfiprintf_r+0x18>
 801699c:	6983      	ldr	r3, [r0, #24]
 801699e:	b90b      	cbnz	r3, 80169a4 <_vfiprintf_r+0x18>
 80169a0:	f7ff fd72 	bl	8016488 <__sinit>
 80169a4:	4b7c      	ldr	r3, [pc, #496]	; (8016b98 <_vfiprintf_r+0x20c>)
 80169a6:	429c      	cmp	r4, r3
 80169a8:	d158      	bne.n	8016a5c <_vfiprintf_r+0xd0>
 80169aa:	6874      	ldr	r4, [r6, #4]
 80169ac:	89a3      	ldrh	r3, [r4, #12]
 80169ae:	0718      	lsls	r0, r3, #28
 80169b0:	d55e      	bpl.n	8016a70 <_vfiprintf_r+0xe4>
 80169b2:	6923      	ldr	r3, [r4, #16]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d05b      	beq.n	8016a70 <_vfiprintf_r+0xe4>
 80169b8:	2300      	movs	r3, #0
 80169ba:	9309      	str	r3, [sp, #36]	; 0x24
 80169bc:	2320      	movs	r3, #32
 80169be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169c2:	2330      	movs	r3, #48	; 0x30
 80169c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169c8:	9503      	str	r5, [sp, #12]
 80169ca:	f04f 0b01 	mov.w	fp, #1
 80169ce:	46b8      	mov	r8, r7
 80169d0:	4645      	mov	r5, r8
 80169d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80169d6:	b10b      	cbz	r3, 80169dc <_vfiprintf_r+0x50>
 80169d8:	2b25      	cmp	r3, #37	; 0x25
 80169da:	d154      	bne.n	8016a86 <_vfiprintf_r+0xfa>
 80169dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80169e0:	d00b      	beq.n	80169fa <_vfiprintf_r+0x6e>
 80169e2:	4653      	mov	r3, sl
 80169e4:	463a      	mov	r2, r7
 80169e6:	4621      	mov	r1, r4
 80169e8:	4630      	mov	r0, r6
 80169ea:	f7ff ffbc 	bl	8016966 <__sfputs_r>
 80169ee:	3001      	adds	r0, #1
 80169f0:	f000 80c2 	beq.w	8016b78 <_vfiprintf_r+0x1ec>
 80169f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169f6:	4453      	add	r3, sl
 80169f8:	9309      	str	r3, [sp, #36]	; 0x24
 80169fa:	f898 3000 	ldrb.w	r3, [r8]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	f000 80ba 	beq.w	8016b78 <_vfiprintf_r+0x1ec>
 8016a04:	2300      	movs	r3, #0
 8016a06:	f04f 32ff 	mov.w	r2, #4294967295
 8016a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a0e:	9304      	str	r3, [sp, #16]
 8016a10:	9307      	str	r3, [sp, #28]
 8016a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a16:	931a      	str	r3, [sp, #104]	; 0x68
 8016a18:	46a8      	mov	r8, r5
 8016a1a:	2205      	movs	r2, #5
 8016a1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016a20:	485e      	ldr	r0, [pc, #376]	; (8016b9c <_vfiprintf_r+0x210>)
 8016a22:	f7f5 fb15 	bl	800c050 <memchr>
 8016a26:	9b04      	ldr	r3, [sp, #16]
 8016a28:	bb78      	cbnz	r0, 8016a8a <_vfiprintf_r+0xfe>
 8016a2a:	06d9      	lsls	r1, r3, #27
 8016a2c:	bf44      	itt	mi
 8016a2e:	2220      	movmi	r2, #32
 8016a30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a34:	071a      	lsls	r2, r3, #28
 8016a36:	bf44      	itt	mi
 8016a38:	222b      	movmi	r2, #43	; 0x2b
 8016a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a3e:	782a      	ldrb	r2, [r5, #0]
 8016a40:	2a2a      	cmp	r2, #42	; 0x2a
 8016a42:	d02a      	beq.n	8016a9a <_vfiprintf_r+0x10e>
 8016a44:	9a07      	ldr	r2, [sp, #28]
 8016a46:	46a8      	mov	r8, r5
 8016a48:	2000      	movs	r0, #0
 8016a4a:	250a      	movs	r5, #10
 8016a4c:	4641      	mov	r1, r8
 8016a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a52:	3b30      	subs	r3, #48	; 0x30
 8016a54:	2b09      	cmp	r3, #9
 8016a56:	d969      	bls.n	8016b2c <_vfiprintf_r+0x1a0>
 8016a58:	b360      	cbz	r0, 8016ab4 <_vfiprintf_r+0x128>
 8016a5a:	e024      	b.n	8016aa6 <_vfiprintf_r+0x11a>
 8016a5c:	4b50      	ldr	r3, [pc, #320]	; (8016ba0 <_vfiprintf_r+0x214>)
 8016a5e:	429c      	cmp	r4, r3
 8016a60:	d101      	bne.n	8016a66 <_vfiprintf_r+0xda>
 8016a62:	68b4      	ldr	r4, [r6, #8]
 8016a64:	e7a2      	b.n	80169ac <_vfiprintf_r+0x20>
 8016a66:	4b4f      	ldr	r3, [pc, #316]	; (8016ba4 <_vfiprintf_r+0x218>)
 8016a68:	429c      	cmp	r4, r3
 8016a6a:	bf08      	it	eq
 8016a6c:	68f4      	ldreq	r4, [r6, #12]
 8016a6e:	e79d      	b.n	80169ac <_vfiprintf_r+0x20>
 8016a70:	4621      	mov	r1, r4
 8016a72:	4630      	mov	r0, r6
 8016a74:	f000 fade 	bl	8017034 <__swsetup_r>
 8016a78:	2800      	cmp	r0, #0
 8016a7a:	d09d      	beq.n	80169b8 <_vfiprintf_r+0x2c>
 8016a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a80:	b01d      	add	sp, #116	; 0x74
 8016a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a86:	46a8      	mov	r8, r5
 8016a88:	e7a2      	b.n	80169d0 <_vfiprintf_r+0x44>
 8016a8a:	4a44      	ldr	r2, [pc, #272]	; (8016b9c <_vfiprintf_r+0x210>)
 8016a8c:	1a80      	subs	r0, r0, r2
 8016a8e:	fa0b f000 	lsl.w	r0, fp, r0
 8016a92:	4318      	orrs	r0, r3
 8016a94:	9004      	str	r0, [sp, #16]
 8016a96:	4645      	mov	r5, r8
 8016a98:	e7be      	b.n	8016a18 <_vfiprintf_r+0x8c>
 8016a9a:	9a03      	ldr	r2, [sp, #12]
 8016a9c:	1d11      	adds	r1, r2, #4
 8016a9e:	6812      	ldr	r2, [r2, #0]
 8016aa0:	9103      	str	r1, [sp, #12]
 8016aa2:	2a00      	cmp	r2, #0
 8016aa4:	db01      	blt.n	8016aaa <_vfiprintf_r+0x11e>
 8016aa6:	9207      	str	r2, [sp, #28]
 8016aa8:	e004      	b.n	8016ab4 <_vfiprintf_r+0x128>
 8016aaa:	4252      	negs	r2, r2
 8016aac:	f043 0302 	orr.w	r3, r3, #2
 8016ab0:	9207      	str	r2, [sp, #28]
 8016ab2:	9304      	str	r3, [sp, #16]
 8016ab4:	f898 3000 	ldrb.w	r3, [r8]
 8016ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8016aba:	d10e      	bne.n	8016ada <_vfiprintf_r+0x14e>
 8016abc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8016ac2:	d138      	bne.n	8016b36 <_vfiprintf_r+0x1aa>
 8016ac4:	9b03      	ldr	r3, [sp, #12]
 8016ac6:	1d1a      	adds	r2, r3, #4
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	9203      	str	r2, [sp, #12]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	bfb8      	it	lt
 8016ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ad4:	f108 0802 	add.w	r8, r8, #2
 8016ad8:	9305      	str	r3, [sp, #20]
 8016ada:	4d33      	ldr	r5, [pc, #204]	; (8016ba8 <_vfiprintf_r+0x21c>)
 8016adc:	f898 1000 	ldrb.w	r1, [r8]
 8016ae0:	2203      	movs	r2, #3
 8016ae2:	4628      	mov	r0, r5
 8016ae4:	f7f5 fab4 	bl	800c050 <memchr>
 8016ae8:	b140      	cbz	r0, 8016afc <_vfiprintf_r+0x170>
 8016aea:	2340      	movs	r3, #64	; 0x40
 8016aec:	1b40      	subs	r0, r0, r5
 8016aee:	fa03 f000 	lsl.w	r0, r3, r0
 8016af2:	9b04      	ldr	r3, [sp, #16]
 8016af4:	4303      	orrs	r3, r0
 8016af6:	f108 0801 	add.w	r8, r8, #1
 8016afa:	9304      	str	r3, [sp, #16]
 8016afc:	f898 1000 	ldrb.w	r1, [r8]
 8016b00:	482a      	ldr	r0, [pc, #168]	; (8016bac <_vfiprintf_r+0x220>)
 8016b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b06:	2206      	movs	r2, #6
 8016b08:	f108 0701 	add.w	r7, r8, #1
 8016b0c:	f7f5 faa0 	bl	800c050 <memchr>
 8016b10:	2800      	cmp	r0, #0
 8016b12:	d037      	beq.n	8016b84 <_vfiprintf_r+0x1f8>
 8016b14:	4b26      	ldr	r3, [pc, #152]	; (8016bb0 <_vfiprintf_r+0x224>)
 8016b16:	bb1b      	cbnz	r3, 8016b60 <_vfiprintf_r+0x1d4>
 8016b18:	9b03      	ldr	r3, [sp, #12]
 8016b1a:	3307      	adds	r3, #7
 8016b1c:	f023 0307 	bic.w	r3, r3, #7
 8016b20:	3308      	adds	r3, #8
 8016b22:	9303      	str	r3, [sp, #12]
 8016b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b26:	444b      	add	r3, r9
 8016b28:	9309      	str	r3, [sp, #36]	; 0x24
 8016b2a:	e750      	b.n	80169ce <_vfiprintf_r+0x42>
 8016b2c:	fb05 3202 	mla	r2, r5, r2, r3
 8016b30:	2001      	movs	r0, #1
 8016b32:	4688      	mov	r8, r1
 8016b34:	e78a      	b.n	8016a4c <_vfiprintf_r+0xc0>
 8016b36:	2300      	movs	r3, #0
 8016b38:	f108 0801 	add.w	r8, r8, #1
 8016b3c:	9305      	str	r3, [sp, #20]
 8016b3e:	4619      	mov	r1, r3
 8016b40:	250a      	movs	r5, #10
 8016b42:	4640      	mov	r0, r8
 8016b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b48:	3a30      	subs	r2, #48	; 0x30
 8016b4a:	2a09      	cmp	r2, #9
 8016b4c:	d903      	bls.n	8016b56 <_vfiprintf_r+0x1ca>
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d0c3      	beq.n	8016ada <_vfiprintf_r+0x14e>
 8016b52:	9105      	str	r1, [sp, #20]
 8016b54:	e7c1      	b.n	8016ada <_vfiprintf_r+0x14e>
 8016b56:	fb05 2101 	mla	r1, r5, r1, r2
 8016b5a:	2301      	movs	r3, #1
 8016b5c:	4680      	mov	r8, r0
 8016b5e:	e7f0      	b.n	8016b42 <_vfiprintf_r+0x1b6>
 8016b60:	ab03      	add	r3, sp, #12
 8016b62:	9300      	str	r3, [sp, #0]
 8016b64:	4622      	mov	r2, r4
 8016b66:	4b13      	ldr	r3, [pc, #76]	; (8016bb4 <_vfiprintf_r+0x228>)
 8016b68:	a904      	add	r1, sp, #16
 8016b6a:	4630      	mov	r0, r6
 8016b6c:	f3af 8000 	nop.w
 8016b70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016b74:	4681      	mov	r9, r0
 8016b76:	d1d5      	bne.n	8016b24 <_vfiprintf_r+0x198>
 8016b78:	89a3      	ldrh	r3, [r4, #12]
 8016b7a:	065b      	lsls	r3, r3, #25
 8016b7c:	f53f af7e 	bmi.w	8016a7c <_vfiprintf_r+0xf0>
 8016b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b82:	e77d      	b.n	8016a80 <_vfiprintf_r+0xf4>
 8016b84:	ab03      	add	r3, sp, #12
 8016b86:	9300      	str	r3, [sp, #0]
 8016b88:	4622      	mov	r2, r4
 8016b8a:	4b0a      	ldr	r3, [pc, #40]	; (8016bb4 <_vfiprintf_r+0x228>)
 8016b8c:	a904      	add	r1, sp, #16
 8016b8e:	4630      	mov	r0, r6
 8016b90:	f000 f888 	bl	8016ca4 <_printf_i>
 8016b94:	e7ec      	b.n	8016b70 <_vfiprintf_r+0x1e4>
 8016b96:	bf00      	nop
 8016b98:	080016d8 	.word	0x080016d8
 8016b9c:	0800171e 	.word	0x0800171e
 8016ba0:	080016f8 	.word	0x080016f8
 8016ba4:	080016b8 	.word	0x080016b8
 8016ba8:	08001724 	.word	0x08001724
 8016bac:	08001728 	.word	0x08001728
 8016bb0:	00000000 	.word	0x00000000
 8016bb4:	08016967 	.word	0x08016967

08016bb8 <_printf_common>:
 8016bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bbc:	4691      	mov	r9, r2
 8016bbe:	461f      	mov	r7, r3
 8016bc0:	688a      	ldr	r2, [r1, #8]
 8016bc2:	690b      	ldr	r3, [r1, #16]
 8016bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016bc8:	4293      	cmp	r3, r2
 8016bca:	bfb8      	it	lt
 8016bcc:	4613      	movlt	r3, r2
 8016bce:	f8c9 3000 	str.w	r3, [r9]
 8016bd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016bd6:	4606      	mov	r6, r0
 8016bd8:	460c      	mov	r4, r1
 8016bda:	b112      	cbz	r2, 8016be2 <_printf_common+0x2a>
 8016bdc:	3301      	adds	r3, #1
 8016bde:	f8c9 3000 	str.w	r3, [r9]
 8016be2:	6823      	ldr	r3, [r4, #0]
 8016be4:	0699      	lsls	r1, r3, #26
 8016be6:	bf42      	ittt	mi
 8016be8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016bec:	3302      	addmi	r3, #2
 8016bee:	f8c9 3000 	strmi.w	r3, [r9]
 8016bf2:	6825      	ldr	r5, [r4, #0]
 8016bf4:	f015 0506 	ands.w	r5, r5, #6
 8016bf8:	d107      	bne.n	8016c0a <_printf_common+0x52>
 8016bfa:	f104 0a19 	add.w	sl, r4, #25
 8016bfe:	68e3      	ldr	r3, [r4, #12]
 8016c00:	f8d9 2000 	ldr.w	r2, [r9]
 8016c04:	1a9b      	subs	r3, r3, r2
 8016c06:	42ab      	cmp	r3, r5
 8016c08:	dc28      	bgt.n	8016c5c <_printf_common+0xa4>
 8016c0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016c0e:	6822      	ldr	r2, [r4, #0]
 8016c10:	3300      	adds	r3, #0
 8016c12:	bf18      	it	ne
 8016c14:	2301      	movne	r3, #1
 8016c16:	0692      	lsls	r2, r2, #26
 8016c18:	d42d      	bmi.n	8016c76 <_printf_common+0xbe>
 8016c1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c1e:	4639      	mov	r1, r7
 8016c20:	4630      	mov	r0, r6
 8016c22:	47c0      	blx	r8
 8016c24:	3001      	adds	r0, #1
 8016c26:	d020      	beq.n	8016c6a <_printf_common+0xb2>
 8016c28:	6823      	ldr	r3, [r4, #0]
 8016c2a:	68e5      	ldr	r5, [r4, #12]
 8016c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8016c30:	f003 0306 	and.w	r3, r3, #6
 8016c34:	2b04      	cmp	r3, #4
 8016c36:	bf08      	it	eq
 8016c38:	1aad      	subeq	r5, r5, r2
 8016c3a:	68a3      	ldr	r3, [r4, #8]
 8016c3c:	6922      	ldr	r2, [r4, #16]
 8016c3e:	bf0c      	ite	eq
 8016c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c44:	2500      	movne	r5, #0
 8016c46:	4293      	cmp	r3, r2
 8016c48:	bfc4      	itt	gt
 8016c4a:	1a9b      	subgt	r3, r3, r2
 8016c4c:	18ed      	addgt	r5, r5, r3
 8016c4e:	f04f 0900 	mov.w	r9, #0
 8016c52:	341a      	adds	r4, #26
 8016c54:	454d      	cmp	r5, r9
 8016c56:	d11a      	bne.n	8016c8e <_printf_common+0xd6>
 8016c58:	2000      	movs	r0, #0
 8016c5a:	e008      	b.n	8016c6e <_printf_common+0xb6>
 8016c5c:	2301      	movs	r3, #1
 8016c5e:	4652      	mov	r2, sl
 8016c60:	4639      	mov	r1, r7
 8016c62:	4630      	mov	r0, r6
 8016c64:	47c0      	blx	r8
 8016c66:	3001      	adds	r0, #1
 8016c68:	d103      	bne.n	8016c72 <_printf_common+0xba>
 8016c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8016c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c72:	3501      	adds	r5, #1
 8016c74:	e7c3      	b.n	8016bfe <_printf_common+0x46>
 8016c76:	18e1      	adds	r1, r4, r3
 8016c78:	1c5a      	adds	r2, r3, #1
 8016c7a:	2030      	movs	r0, #48	; 0x30
 8016c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c80:	4422      	add	r2, r4
 8016c82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c8a:	3302      	adds	r3, #2
 8016c8c:	e7c5      	b.n	8016c1a <_printf_common+0x62>
 8016c8e:	2301      	movs	r3, #1
 8016c90:	4622      	mov	r2, r4
 8016c92:	4639      	mov	r1, r7
 8016c94:	4630      	mov	r0, r6
 8016c96:	47c0      	blx	r8
 8016c98:	3001      	adds	r0, #1
 8016c9a:	d0e6      	beq.n	8016c6a <_printf_common+0xb2>
 8016c9c:	f109 0901 	add.w	r9, r9, #1
 8016ca0:	e7d8      	b.n	8016c54 <_printf_common+0x9c>
	...

08016ca4 <_printf_i>:
 8016ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ca8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016cac:	460c      	mov	r4, r1
 8016cae:	7e09      	ldrb	r1, [r1, #24]
 8016cb0:	b085      	sub	sp, #20
 8016cb2:	296e      	cmp	r1, #110	; 0x6e
 8016cb4:	4617      	mov	r7, r2
 8016cb6:	4606      	mov	r6, r0
 8016cb8:	4698      	mov	r8, r3
 8016cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016cbc:	f000 80b3 	beq.w	8016e26 <_printf_i+0x182>
 8016cc0:	d822      	bhi.n	8016d08 <_printf_i+0x64>
 8016cc2:	2963      	cmp	r1, #99	; 0x63
 8016cc4:	d036      	beq.n	8016d34 <_printf_i+0x90>
 8016cc6:	d80a      	bhi.n	8016cde <_printf_i+0x3a>
 8016cc8:	2900      	cmp	r1, #0
 8016cca:	f000 80b9 	beq.w	8016e40 <_printf_i+0x19c>
 8016cce:	2958      	cmp	r1, #88	; 0x58
 8016cd0:	f000 8083 	beq.w	8016dda <_printf_i+0x136>
 8016cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016cd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016cdc:	e032      	b.n	8016d44 <_printf_i+0xa0>
 8016cde:	2964      	cmp	r1, #100	; 0x64
 8016ce0:	d001      	beq.n	8016ce6 <_printf_i+0x42>
 8016ce2:	2969      	cmp	r1, #105	; 0x69
 8016ce4:	d1f6      	bne.n	8016cd4 <_printf_i+0x30>
 8016ce6:	6820      	ldr	r0, [r4, #0]
 8016ce8:	6813      	ldr	r3, [r2, #0]
 8016cea:	0605      	lsls	r5, r0, #24
 8016cec:	f103 0104 	add.w	r1, r3, #4
 8016cf0:	d52a      	bpl.n	8016d48 <_printf_i+0xa4>
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	6011      	str	r1, [r2, #0]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	da03      	bge.n	8016d02 <_printf_i+0x5e>
 8016cfa:	222d      	movs	r2, #45	; 0x2d
 8016cfc:	425b      	negs	r3, r3
 8016cfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016d02:	486f      	ldr	r0, [pc, #444]	; (8016ec0 <_printf_i+0x21c>)
 8016d04:	220a      	movs	r2, #10
 8016d06:	e039      	b.n	8016d7c <_printf_i+0xd8>
 8016d08:	2973      	cmp	r1, #115	; 0x73
 8016d0a:	f000 809d 	beq.w	8016e48 <_printf_i+0x1a4>
 8016d0e:	d808      	bhi.n	8016d22 <_printf_i+0x7e>
 8016d10:	296f      	cmp	r1, #111	; 0x6f
 8016d12:	d020      	beq.n	8016d56 <_printf_i+0xb2>
 8016d14:	2970      	cmp	r1, #112	; 0x70
 8016d16:	d1dd      	bne.n	8016cd4 <_printf_i+0x30>
 8016d18:	6823      	ldr	r3, [r4, #0]
 8016d1a:	f043 0320 	orr.w	r3, r3, #32
 8016d1e:	6023      	str	r3, [r4, #0]
 8016d20:	e003      	b.n	8016d2a <_printf_i+0x86>
 8016d22:	2975      	cmp	r1, #117	; 0x75
 8016d24:	d017      	beq.n	8016d56 <_printf_i+0xb2>
 8016d26:	2978      	cmp	r1, #120	; 0x78
 8016d28:	d1d4      	bne.n	8016cd4 <_printf_i+0x30>
 8016d2a:	2378      	movs	r3, #120	; 0x78
 8016d2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016d30:	4864      	ldr	r0, [pc, #400]	; (8016ec4 <_printf_i+0x220>)
 8016d32:	e055      	b.n	8016de0 <_printf_i+0x13c>
 8016d34:	6813      	ldr	r3, [r2, #0]
 8016d36:	1d19      	adds	r1, r3, #4
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	6011      	str	r1, [r2, #0]
 8016d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d44:	2301      	movs	r3, #1
 8016d46:	e08c      	b.n	8016e62 <_printf_i+0x1be>
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	6011      	str	r1, [r2, #0]
 8016d4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016d50:	bf18      	it	ne
 8016d52:	b21b      	sxthne	r3, r3
 8016d54:	e7cf      	b.n	8016cf6 <_printf_i+0x52>
 8016d56:	6813      	ldr	r3, [r2, #0]
 8016d58:	6825      	ldr	r5, [r4, #0]
 8016d5a:	1d18      	adds	r0, r3, #4
 8016d5c:	6010      	str	r0, [r2, #0]
 8016d5e:	0628      	lsls	r0, r5, #24
 8016d60:	d501      	bpl.n	8016d66 <_printf_i+0xc2>
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	e002      	b.n	8016d6c <_printf_i+0xc8>
 8016d66:	0668      	lsls	r0, r5, #25
 8016d68:	d5fb      	bpl.n	8016d62 <_printf_i+0xbe>
 8016d6a:	881b      	ldrh	r3, [r3, #0]
 8016d6c:	4854      	ldr	r0, [pc, #336]	; (8016ec0 <_printf_i+0x21c>)
 8016d6e:	296f      	cmp	r1, #111	; 0x6f
 8016d70:	bf14      	ite	ne
 8016d72:	220a      	movne	r2, #10
 8016d74:	2208      	moveq	r2, #8
 8016d76:	2100      	movs	r1, #0
 8016d78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d7c:	6865      	ldr	r5, [r4, #4]
 8016d7e:	60a5      	str	r5, [r4, #8]
 8016d80:	2d00      	cmp	r5, #0
 8016d82:	f2c0 8095 	blt.w	8016eb0 <_printf_i+0x20c>
 8016d86:	6821      	ldr	r1, [r4, #0]
 8016d88:	f021 0104 	bic.w	r1, r1, #4
 8016d8c:	6021      	str	r1, [r4, #0]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d13d      	bne.n	8016e0e <_printf_i+0x16a>
 8016d92:	2d00      	cmp	r5, #0
 8016d94:	f040 808e 	bne.w	8016eb4 <_printf_i+0x210>
 8016d98:	4665      	mov	r5, ip
 8016d9a:	2a08      	cmp	r2, #8
 8016d9c:	d10b      	bne.n	8016db6 <_printf_i+0x112>
 8016d9e:	6823      	ldr	r3, [r4, #0]
 8016da0:	07db      	lsls	r3, r3, #31
 8016da2:	d508      	bpl.n	8016db6 <_printf_i+0x112>
 8016da4:	6923      	ldr	r3, [r4, #16]
 8016da6:	6862      	ldr	r2, [r4, #4]
 8016da8:	429a      	cmp	r2, r3
 8016daa:	bfde      	ittt	le
 8016dac:	2330      	movle	r3, #48	; 0x30
 8016dae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016db2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016db6:	ebac 0305 	sub.w	r3, ip, r5
 8016dba:	6123      	str	r3, [r4, #16]
 8016dbc:	f8cd 8000 	str.w	r8, [sp]
 8016dc0:	463b      	mov	r3, r7
 8016dc2:	aa03      	add	r2, sp, #12
 8016dc4:	4621      	mov	r1, r4
 8016dc6:	4630      	mov	r0, r6
 8016dc8:	f7ff fef6 	bl	8016bb8 <_printf_common>
 8016dcc:	3001      	adds	r0, #1
 8016dce:	d14d      	bne.n	8016e6c <_printf_i+0x1c8>
 8016dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8016dd4:	b005      	add	sp, #20
 8016dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dda:	4839      	ldr	r0, [pc, #228]	; (8016ec0 <_printf_i+0x21c>)
 8016ddc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016de0:	6813      	ldr	r3, [r2, #0]
 8016de2:	6821      	ldr	r1, [r4, #0]
 8016de4:	1d1d      	adds	r5, r3, #4
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	6015      	str	r5, [r2, #0]
 8016dea:	060a      	lsls	r2, r1, #24
 8016dec:	d50b      	bpl.n	8016e06 <_printf_i+0x162>
 8016dee:	07ca      	lsls	r2, r1, #31
 8016df0:	bf44      	itt	mi
 8016df2:	f041 0120 	orrmi.w	r1, r1, #32
 8016df6:	6021      	strmi	r1, [r4, #0]
 8016df8:	b91b      	cbnz	r3, 8016e02 <_printf_i+0x15e>
 8016dfa:	6822      	ldr	r2, [r4, #0]
 8016dfc:	f022 0220 	bic.w	r2, r2, #32
 8016e00:	6022      	str	r2, [r4, #0]
 8016e02:	2210      	movs	r2, #16
 8016e04:	e7b7      	b.n	8016d76 <_printf_i+0xd2>
 8016e06:	064d      	lsls	r5, r1, #25
 8016e08:	bf48      	it	mi
 8016e0a:	b29b      	uxthmi	r3, r3
 8016e0c:	e7ef      	b.n	8016dee <_printf_i+0x14a>
 8016e0e:	4665      	mov	r5, ip
 8016e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8016e14:	fb02 3311 	mls	r3, r2, r1, r3
 8016e18:	5cc3      	ldrb	r3, [r0, r3]
 8016e1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016e1e:	460b      	mov	r3, r1
 8016e20:	2900      	cmp	r1, #0
 8016e22:	d1f5      	bne.n	8016e10 <_printf_i+0x16c>
 8016e24:	e7b9      	b.n	8016d9a <_printf_i+0xf6>
 8016e26:	6813      	ldr	r3, [r2, #0]
 8016e28:	6825      	ldr	r5, [r4, #0]
 8016e2a:	6961      	ldr	r1, [r4, #20]
 8016e2c:	1d18      	adds	r0, r3, #4
 8016e2e:	6010      	str	r0, [r2, #0]
 8016e30:	0628      	lsls	r0, r5, #24
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	d501      	bpl.n	8016e3a <_printf_i+0x196>
 8016e36:	6019      	str	r1, [r3, #0]
 8016e38:	e002      	b.n	8016e40 <_printf_i+0x19c>
 8016e3a:	066a      	lsls	r2, r5, #25
 8016e3c:	d5fb      	bpl.n	8016e36 <_printf_i+0x192>
 8016e3e:	8019      	strh	r1, [r3, #0]
 8016e40:	2300      	movs	r3, #0
 8016e42:	6123      	str	r3, [r4, #16]
 8016e44:	4665      	mov	r5, ip
 8016e46:	e7b9      	b.n	8016dbc <_printf_i+0x118>
 8016e48:	6813      	ldr	r3, [r2, #0]
 8016e4a:	1d19      	adds	r1, r3, #4
 8016e4c:	6011      	str	r1, [r2, #0]
 8016e4e:	681d      	ldr	r5, [r3, #0]
 8016e50:	6862      	ldr	r2, [r4, #4]
 8016e52:	2100      	movs	r1, #0
 8016e54:	4628      	mov	r0, r5
 8016e56:	f7f5 f8fb 	bl	800c050 <memchr>
 8016e5a:	b108      	cbz	r0, 8016e60 <_printf_i+0x1bc>
 8016e5c:	1b40      	subs	r0, r0, r5
 8016e5e:	6060      	str	r0, [r4, #4]
 8016e60:	6863      	ldr	r3, [r4, #4]
 8016e62:	6123      	str	r3, [r4, #16]
 8016e64:	2300      	movs	r3, #0
 8016e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e6a:	e7a7      	b.n	8016dbc <_printf_i+0x118>
 8016e6c:	6923      	ldr	r3, [r4, #16]
 8016e6e:	462a      	mov	r2, r5
 8016e70:	4639      	mov	r1, r7
 8016e72:	4630      	mov	r0, r6
 8016e74:	47c0      	blx	r8
 8016e76:	3001      	adds	r0, #1
 8016e78:	d0aa      	beq.n	8016dd0 <_printf_i+0x12c>
 8016e7a:	6823      	ldr	r3, [r4, #0]
 8016e7c:	079b      	lsls	r3, r3, #30
 8016e7e:	d413      	bmi.n	8016ea8 <_printf_i+0x204>
 8016e80:	68e0      	ldr	r0, [r4, #12]
 8016e82:	9b03      	ldr	r3, [sp, #12]
 8016e84:	4298      	cmp	r0, r3
 8016e86:	bfb8      	it	lt
 8016e88:	4618      	movlt	r0, r3
 8016e8a:	e7a3      	b.n	8016dd4 <_printf_i+0x130>
 8016e8c:	2301      	movs	r3, #1
 8016e8e:	464a      	mov	r2, r9
 8016e90:	4639      	mov	r1, r7
 8016e92:	4630      	mov	r0, r6
 8016e94:	47c0      	blx	r8
 8016e96:	3001      	adds	r0, #1
 8016e98:	d09a      	beq.n	8016dd0 <_printf_i+0x12c>
 8016e9a:	3501      	adds	r5, #1
 8016e9c:	68e3      	ldr	r3, [r4, #12]
 8016e9e:	9a03      	ldr	r2, [sp, #12]
 8016ea0:	1a9b      	subs	r3, r3, r2
 8016ea2:	42ab      	cmp	r3, r5
 8016ea4:	dcf2      	bgt.n	8016e8c <_printf_i+0x1e8>
 8016ea6:	e7eb      	b.n	8016e80 <_printf_i+0x1dc>
 8016ea8:	2500      	movs	r5, #0
 8016eaa:	f104 0919 	add.w	r9, r4, #25
 8016eae:	e7f5      	b.n	8016e9c <_printf_i+0x1f8>
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d1ac      	bne.n	8016e0e <_printf_i+0x16a>
 8016eb4:	7803      	ldrb	r3, [r0, #0]
 8016eb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016eba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ebe:	e76c      	b.n	8016d9a <_printf_i+0xf6>
 8016ec0:	0800172f 	.word	0x0800172f
 8016ec4:	08001740 	.word	0x08001740

08016ec8 <__sread>:
 8016ec8:	b510      	push	{r4, lr}
 8016eca:	460c      	mov	r4, r1
 8016ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ed0:	f000 f9a2 	bl	8017218 <_read_r>
 8016ed4:	2800      	cmp	r0, #0
 8016ed6:	bfab      	itete	ge
 8016ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016eda:	89a3      	ldrhlt	r3, [r4, #12]
 8016edc:	181b      	addge	r3, r3, r0
 8016ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016ee2:	bfac      	ite	ge
 8016ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8016ee6:	81a3      	strhlt	r3, [r4, #12]
 8016ee8:	bd10      	pop	{r4, pc}

08016eea <__swrite>:
 8016eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eee:	461f      	mov	r7, r3
 8016ef0:	898b      	ldrh	r3, [r1, #12]
 8016ef2:	05db      	lsls	r3, r3, #23
 8016ef4:	4605      	mov	r5, r0
 8016ef6:	460c      	mov	r4, r1
 8016ef8:	4616      	mov	r6, r2
 8016efa:	d505      	bpl.n	8016f08 <__swrite+0x1e>
 8016efc:	2302      	movs	r3, #2
 8016efe:	2200      	movs	r2, #0
 8016f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f04:	f000 f936 	bl	8017174 <_lseek_r>
 8016f08:	89a3      	ldrh	r3, [r4, #12]
 8016f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f12:	81a3      	strh	r3, [r4, #12]
 8016f14:	4632      	mov	r2, r6
 8016f16:	463b      	mov	r3, r7
 8016f18:	4628      	mov	r0, r5
 8016f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f1e:	f000 b877 	b.w	8017010 <_write_r>

08016f22 <__sseek>:
 8016f22:	b510      	push	{r4, lr}
 8016f24:	460c      	mov	r4, r1
 8016f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f2a:	f000 f923 	bl	8017174 <_lseek_r>
 8016f2e:	1c43      	adds	r3, r0, #1
 8016f30:	89a3      	ldrh	r3, [r4, #12]
 8016f32:	bf15      	itete	ne
 8016f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f3e:	81a3      	strheq	r3, [r4, #12]
 8016f40:	bf18      	it	ne
 8016f42:	81a3      	strhne	r3, [r4, #12]
 8016f44:	bd10      	pop	{r4, pc}

08016f46 <__sclose>:
 8016f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f4a:	f000 b8e1 	b.w	8017110 <_close_r>
	...

08016f50 <__swbuf_r>:
 8016f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f52:	460e      	mov	r6, r1
 8016f54:	4614      	mov	r4, r2
 8016f56:	4605      	mov	r5, r0
 8016f58:	b118      	cbz	r0, 8016f62 <__swbuf_r+0x12>
 8016f5a:	6983      	ldr	r3, [r0, #24]
 8016f5c:	b90b      	cbnz	r3, 8016f62 <__swbuf_r+0x12>
 8016f5e:	f7ff fa93 	bl	8016488 <__sinit>
 8016f62:	4b21      	ldr	r3, [pc, #132]	; (8016fe8 <__swbuf_r+0x98>)
 8016f64:	429c      	cmp	r4, r3
 8016f66:	d12a      	bne.n	8016fbe <__swbuf_r+0x6e>
 8016f68:	686c      	ldr	r4, [r5, #4]
 8016f6a:	69a3      	ldr	r3, [r4, #24]
 8016f6c:	60a3      	str	r3, [r4, #8]
 8016f6e:	89a3      	ldrh	r3, [r4, #12]
 8016f70:	071a      	lsls	r2, r3, #28
 8016f72:	d52e      	bpl.n	8016fd2 <__swbuf_r+0x82>
 8016f74:	6923      	ldr	r3, [r4, #16]
 8016f76:	b363      	cbz	r3, 8016fd2 <__swbuf_r+0x82>
 8016f78:	6923      	ldr	r3, [r4, #16]
 8016f7a:	6820      	ldr	r0, [r4, #0]
 8016f7c:	1ac0      	subs	r0, r0, r3
 8016f7e:	6963      	ldr	r3, [r4, #20]
 8016f80:	b2f6      	uxtb	r6, r6
 8016f82:	4283      	cmp	r3, r0
 8016f84:	4637      	mov	r7, r6
 8016f86:	dc04      	bgt.n	8016f92 <__swbuf_r+0x42>
 8016f88:	4621      	mov	r1, r4
 8016f8a:	4628      	mov	r0, r5
 8016f8c:	f7ff fa12 	bl	80163b4 <_fflush_r>
 8016f90:	bb28      	cbnz	r0, 8016fde <__swbuf_r+0x8e>
 8016f92:	68a3      	ldr	r3, [r4, #8]
 8016f94:	3b01      	subs	r3, #1
 8016f96:	60a3      	str	r3, [r4, #8]
 8016f98:	6823      	ldr	r3, [r4, #0]
 8016f9a:	1c5a      	adds	r2, r3, #1
 8016f9c:	6022      	str	r2, [r4, #0]
 8016f9e:	701e      	strb	r6, [r3, #0]
 8016fa0:	6963      	ldr	r3, [r4, #20]
 8016fa2:	3001      	adds	r0, #1
 8016fa4:	4283      	cmp	r3, r0
 8016fa6:	d004      	beq.n	8016fb2 <__swbuf_r+0x62>
 8016fa8:	89a3      	ldrh	r3, [r4, #12]
 8016faa:	07db      	lsls	r3, r3, #31
 8016fac:	d519      	bpl.n	8016fe2 <__swbuf_r+0x92>
 8016fae:	2e0a      	cmp	r6, #10
 8016fb0:	d117      	bne.n	8016fe2 <__swbuf_r+0x92>
 8016fb2:	4621      	mov	r1, r4
 8016fb4:	4628      	mov	r0, r5
 8016fb6:	f7ff f9fd 	bl	80163b4 <_fflush_r>
 8016fba:	b190      	cbz	r0, 8016fe2 <__swbuf_r+0x92>
 8016fbc:	e00f      	b.n	8016fde <__swbuf_r+0x8e>
 8016fbe:	4b0b      	ldr	r3, [pc, #44]	; (8016fec <__swbuf_r+0x9c>)
 8016fc0:	429c      	cmp	r4, r3
 8016fc2:	d101      	bne.n	8016fc8 <__swbuf_r+0x78>
 8016fc4:	68ac      	ldr	r4, [r5, #8]
 8016fc6:	e7d0      	b.n	8016f6a <__swbuf_r+0x1a>
 8016fc8:	4b09      	ldr	r3, [pc, #36]	; (8016ff0 <__swbuf_r+0xa0>)
 8016fca:	429c      	cmp	r4, r3
 8016fcc:	bf08      	it	eq
 8016fce:	68ec      	ldreq	r4, [r5, #12]
 8016fd0:	e7cb      	b.n	8016f6a <__swbuf_r+0x1a>
 8016fd2:	4621      	mov	r1, r4
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f000 f82d 	bl	8017034 <__swsetup_r>
 8016fda:	2800      	cmp	r0, #0
 8016fdc:	d0cc      	beq.n	8016f78 <__swbuf_r+0x28>
 8016fde:	f04f 37ff 	mov.w	r7, #4294967295
 8016fe2:	4638      	mov	r0, r7
 8016fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fe6:	bf00      	nop
 8016fe8:	080016d8 	.word	0x080016d8
 8016fec:	080016f8 	.word	0x080016f8
 8016ff0:	080016b8 	.word	0x080016b8

08016ff4 <__ascii_wctomb>:
 8016ff4:	b149      	cbz	r1, 801700a <__ascii_wctomb+0x16>
 8016ff6:	2aff      	cmp	r2, #255	; 0xff
 8016ff8:	bf85      	ittet	hi
 8016ffa:	238a      	movhi	r3, #138	; 0x8a
 8016ffc:	6003      	strhi	r3, [r0, #0]
 8016ffe:	700a      	strbls	r2, [r1, #0]
 8017000:	f04f 30ff 	movhi.w	r0, #4294967295
 8017004:	bf98      	it	ls
 8017006:	2001      	movls	r0, #1
 8017008:	4770      	bx	lr
 801700a:	4608      	mov	r0, r1
 801700c:	4770      	bx	lr
	...

08017010 <_write_r>:
 8017010:	b538      	push	{r3, r4, r5, lr}
 8017012:	4c07      	ldr	r4, [pc, #28]	; (8017030 <_write_r+0x20>)
 8017014:	4605      	mov	r5, r0
 8017016:	4608      	mov	r0, r1
 8017018:	4611      	mov	r1, r2
 801701a:	2200      	movs	r2, #0
 801701c:	6022      	str	r2, [r4, #0]
 801701e:	461a      	mov	r2, r3
 8017020:	f7f6 fe26 	bl	800dc70 <_write>
 8017024:	1c43      	adds	r3, r0, #1
 8017026:	d102      	bne.n	801702e <_write_r+0x1e>
 8017028:	6823      	ldr	r3, [r4, #0]
 801702a:	b103      	cbz	r3, 801702e <_write_r+0x1e>
 801702c:	602b      	str	r3, [r5, #0]
 801702e:	bd38      	pop	{r3, r4, r5, pc}
 8017030:	20005ef4 	.word	0x20005ef4

08017034 <__swsetup_r>:
 8017034:	4b32      	ldr	r3, [pc, #200]	; (8017100 <__swsetup_r+0xcc>)
 8017036:	b570      	push	{r4, r5, r6, lr}
 8017038:	681d      	ldr	r5, [r3, #0]
 801703a:	4606      	mov	r6, r0
 801703c:	460c      	mov	r4, r1
 801703e:	b125      	cbz	r5, 801704a <__swsetup_r+0x16>
 8017040:	69ab      	ldr	r3, [r5, #24]
 8017042:	b913      	cbnz	r3, 801704a <__swsetup_r+0x16>
 8017044:	4628      	mov	r0, r5
 8017046:	f7ff fa1f 	bl	8016488 <__sinit>
 801704a:	4b2e      	ldr	r3, [pc, #184]	; (8017104 <__swsetup_r+0xd0>)
 801704c:	429c      	cmp	r4, r3
 801704e:	d10f      	bne.n	8017070 <__swsetup_r+0x3c>
 8017050:	686c      	ldr	r4, [r5, #4]
 8017052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017056:	b29a      	uxth	r2, r3
 8017058:	0715      	lsls	r5, r2, #28
 801705a:	d42c      	bmi.n	80170b6 <__swsetup_r+0x82>
 801705c:	06d0      	lsls	r0, r2, #27
 801705e:	d411      	bmi.n	8017084 <__swsetup_r+0x50>
 8017060:	2209      	movs	r2, #9
 8017062:	6032      	str	r2, [r6, #0]
 8017064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017068:	81a3      	strh	r3, [r4, #12]
 801706a:	f04f 30ff 	mov.w	r0, #4294967295
 801706e:	e03e      	b.n	80170ee <__swsetup_r+0xba>
 8017070:	4b25      	ldr	r3, [pc, #148]	; (8017108 <__swsetup_r+0xd4>)
 8017072:	429c      	cmp	r4, r3
 8017074:	d101      	bne.n	801707a <__swsetup_r+0x46>
 8017076:	68ac      	ldr	r4, [r5, #8]
 8017078:	e7eb      	b.n	8017052 <__swsetup_r+0x1e>
 801707a:	4b24      	ldr	r3, [pc, #144]	; (801710c <__swsetup_r+0xd8>)
 801707c:	429c      	cmp	r4, r3
 801707e:	bf08      	it	eq
 8017080:	68ec      	ldreq	r4, [r5, #12]
 8017082:	e7e6      	b.n	8017052 <__swsetup_r+0x1e>
 8017084:	0751      	lsls	r1, r2, #29
 8017086:	d512      	bpl.n	80170ae <__swsetup_r+0x7a>
 8017088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801708a:	b141      	cbz	r1, 801709e <__swsetup_r+0x6a>
 801708c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017090:	4299      	cmp	r1, r3
 8017092:	d002      	beq.n	801709a <__swsetup_r+0x66>
 8017094:	4630      	mov	r0, r6
 8017096:	f7fe ff7d 	bl	8015f94 <_free_r>
 801709a:	2300      	movs	r3, #0
 801709c:	6363      	str	r3, [r4, #52]	; 0x34
 801709e:	89a3      	ldrh	r3, [r4, #12]
 80170a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80170a4:	81a3      	strh	r3, [r4, #12]
 80170a6:	2300      	movs	r3, #0
 80170a8:	6063      	str	r3, [r4, #4]
 80170aa:	6923      	ldr	r3, [r4, #16]
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	89a3      	ldrh	r3, [r4, #12]
 80170b0:	f043 0308 	orr.w	r3, r3, #8
 80170b4:	81a3      	strh	r3, [r4, #12]
 80170b6:	6923      	ldr	r3, [r4, #16]
 80170b8:	b94b      	cbnz	r3, 80170ce <__swsetup_r+0x9a>
 80170ba:	89a3      	ldrh	r3, [r4, #12]
 80170bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80170c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80170c4:	d003      	beq.n	80170ce <__swsetup_r+0x9a>
 80170c6:	4621      	mov	r1, r4
 80170c8:	4630      	mov	r0, r6
 80170ca:	f7ff fa8f 	bl	80165ec <__smakebuf_r>
 80170ce:	89a2      	ldrh	r2, [r4, #12]
 80170d0:	f012 0301 	ands.w	r3, r2, #1
 80170d4:	d00c      	beq.n	80170f0 <__swsetup_r+0xbc>
 80170d6:	2300      	movs	r3, #0
 80170d8:	60a3      	str	r3, [r4, #8]
 80170da:	6963      	ldr	r3, [r4, #20]
 80170dc:	425b      	negs	r3, r3
 80170de:	61a3      	str	r3, [r4, #24]
 80170e0:	6923      	ldr	r3, [r4, #16]
 80170e2:	b953      	cbnz	r3, 80170fa <__swsetup_r+0xc6>
 80170e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80170ec:	d1ba      	bne.n	8017064 <__swsetup_r+0x30>
 80170ee:	bd70      	pop	{r4, r5, r6, pc}
 80170f0:	0792      	lsls	r2, r2, #30
 80170f2:	bf58      	it	pl
 80170f4:	6963      	ldrpl	r3, [r4, #20]
 80170f6:	60a3      	str	r3, [r4, #8]
 80170f8:	e7f2      	b.n	80170e0 <__swsetup_r+0xac>
 80170fa:	2000      	movs	r0, #0
 80170fc:	e7f7      	b.n	80170ee <__swsetup_r+0xba>
 80170fe:	bf00      	nop
 8017100:	20000088 	.word	0x20000088
 8017104:	080016d8 	.word	0x080016d8
 8017108:	080016f8 	.word	0x080016f8
 801710c:	080016b8 	.word	0x080016b8

08017110 <_close_r>:
 8017110:	b538      	push	{r3, r4, r5, lr}
 8017112:	4c06      	ldr	r4, [pc, #24]	; (801712c <_close_r+0x1c>)
 8017114:	2300      	movs	r3, #0
 8017116:	4605      	mov	r5, r0
 8017118:	4608      	mov	r0, r1
 801711a:	6023      	str	r3, [r4, #0]
 801711c:	f7f6 fdc2 	bl	800dca4 <_close>
 8017120:	1c43      	adds	r3, r0, #1
 8017122:	d102      	bne.n	801712a <_close_r+0x1a>
 8017124:	6823      	ldr	r3, [r4, #0]
 8017126:	b103      	cbz	r3, 801712a <_close_r+0x1a>
 8017128:	602b      	str	r3, [r5, #0]
 801712a:	bd38      	pop	{r3, r4, r5, pc}
 801712c:	20005ef4 	.word	0x20005ef4

08017130 <_fstat_r>:
 8017130:	b538      	push	{r3, r4, r5, lr}
 8017132:	4c07      	ldr	r4, [pc, #28]	; (8017150 <_fstat_r+0x20>)
 8017134:	2300      	movs	r3, #0
 8017136:	4605      	mov	r5, r0
 8017138:	4608      	mov	r0, r1
 801713a:	4611      	mov	r1, r2
 801713c:	6023      	str	r3, [r4, #0]
 801713e:	f7f6 fddd 	bl	800dcfc <_fstat>
 8017142:	1c43      	adds	r3, r0, #1
 8017144:	d102      	bne.n	801714c <_fstat_r+0x1c>
 8017146:	6823      	ldr	r3, [r4, #0]
 8017148:	b103      	cbz	r3, 801714c <_fstat_r+0x1c>
 801714a:	602b      	str	r3, [r5, #0]
 801714c:	bd38      	pop	{r3, r4, r5, pc}
 801714e:	bf00      	nop
 8017150:	20005ef4 	.word	0x20005ef4

08017154 <_isatty_r>:
 8017154:	b538      	push	{r3, r4, r5, lr}
 8017156:	4c06      	ldr	r4, [pc, #24]	; (8017170 <_isatty_r+0x1c>)
 8017158:	2300      	movs	r3, #0
 801715a:	4605      	mov	r5, r0
 801715c:	4608      	mov	r0, r1
 801715e:	6023      	str	r3, [r4, #0]
 8017160:	f7f6 fd7b 	bl	800dc5a <_isatty>
 8017164:	1c43      	adds	r3, r0, #1
 8017166:	d102      	bne.n	801716e <_isatty_r+0x1a>
 8017168:	6823      	ldr	r3, [r4, #0]
 801716a:	b103      	cbz	r3, 801716e <_isatty_r+0x1a>
 801716c:	602b      	str	r3, [r5, #0]
 801716e:	bd38      	pop	{r3, r4, r5, pc}
 8017170:	20005ef4 	.word	0x20005ef4

08017174 <_lseek_r>:
 8017174:	b538      	push	{r3, r4, r5, lr}
 8017176:	4c07      	ldr	r4, [pc, #28]	; (8017194 <_lseek_r+0x20>)
 8017178:	4605      	mov	r5, r0
 801717a:	4608      	mov	r0, r1
 801717c:	4611      	mov	r1, r2
 801717e:	2200      	movs	r2, #0
 8017180:	6022      	str	r2, [r4, #0]
 8017182:	461a      	mov	r2, r3
 8017184:	f7f6 fd9a 	bl	800dcbc <_lseek>
 8017188:	1c43      	adds	r3, r0, #1
 801718a:	d102      	bne.n	8017192 <_lseek_r+0x1e>
 801718c:	6823      	ldr	r3, [r4, #0]
 801718e:	b103      	cbz	r3, 8017192 <_lseek_r+0x1e>
 8017190:	602b      	str	r3, [r5, #0]
 8017192:	bd38      	pop	{r3, r4, r5, pc}
 8017194:	20005ef4 	.word	0x20005ef4

08017198 <memmove>:
 8017198:	4288      	cmp	r0, r1
 801719a:	b510      	push	{r4, lr}
 801719c:	eb01 0302 	add.w	r3, r1, r2
 80171a0:	d807      	bhi.n	80171b2 <memmove+0x1a>
 80171a2:	1e42      	subs	r2, r0, #1
 80171a4:	4299      	cmp	r1, r3
 80171a6:	d00a      	beq.n	80171be <memmove+0x26>
 80171a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80171b0:	e7f8      	b.n	80171a4 <memmove+0xc>
 80171b2:	4283      	cmp	r3, r0
 80171b4:	d9f5      	bls.n	80171a2 <memmove+0xa>
 80171b6:	1881      	adds	r1, r0, r2
 80171b8:	1ad2      	subs	r2, r2, r3
 80171ba:	42d3      	cmn	r3, r2
 80171bc:	d100      	bne.n	80171c0 <memmove+0x28>
 80171be:	bd10      	pop	{r4, pc}
 80171c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80171c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80171c8:	e7f7      	b.n	80171ba <memmove+0x22>

080171ca <_realloc_r>:
 80171ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171cc:	4607      	mov	r7, r0
 80171ce:	4614      	mov	r4, r2
 80171d0:	460e      	mov	r6, r1
 80171d2:	b921      	cbnz	r1, 80171de <_realloc_r+0x14>
 80171d4:	4611      	mov	r1, r2
 80171d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80171da:	f7fe bf29 	b.w	8016030 <_malloc_r>
 80171de:	b922      	cbnz	r2, 80171ea <_realloc_r+0x20>
 80171e0:	f7fe fed8 	bl	8015f94 <_free_r>
 80171e4:	4625      	mov	r5, r4
 80171e6:	4628      	mov	r0, r5
 80171e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171ea:	f000 f827 	bl	801723c <_malloc_usable_size_r>
 80171ee:	42a0      	cmp	r0, r4
 80171f0:	d20f      	bcs.n	8017212 <_realloc_r+0x48>
 80171f2:	4621      	mov	r1, r4
 80171f4:	4638      	mov	r0, r7
 80171f6:	f7fe ff1b 	bl	8016030 <_malloc_r>
 80171fa:	4605      	mov	r5, r0
 80171fc:	2800      	cmp	r0, #0
 80171fe:	d0f2      	beq.n	80171e6 <_realloc_r+0x1c>
 8017200:	4631      	mov	r1, r6
 8017202:	4622      	mov	r2, r4
 8017204:	f7fe feb2 	bl	8015f6c <memcpy>
 8017208:	4631      	mov	r1, r6
 801720a:	4638      	mov	r0, r7
 801720c:	f7fe fec2 	bl	8015f94 <_free_r>
 8017210:	e7e9      	b.n	80171e6 <_realloc_r+0x1c>
 8017212:	4635      	mov	r5, r6
 8017214:	e7e7      	b.n	80171e6 <_realloc_r+0x1c>
	...

08017218 <_read_r>:
 8017218:	b538      	push	{r3, r4, r5, lr}
 801721a:	4c07      	ldr	r4, [pc, #28]	; (8017238 <_read_r+0x20>)
 801721c:	4605      	mov	r5, r0
 801721e:	4608      	mov	r0, r1
 8017220:	4611      	mov	r1, r2
 8017222:	2200      	movs	r2, #0
 8017224:	6022      	str	r2, [r4, #0]
 8017226:	461a      	mov	r2, r3
 8017228:	f7f6 fd50 	bl	800dccc <_read>
 801722c:	1c43      	adds	r3, r0, #1
 801722e:	d102      	bne.n	8017236 <_read_r+0x1e>
 8017230:	6823      	ldr	r3, [r4, #0]
 8017232:	b103      	cbz	r3, 8017236 <_read_r+0x1e>
 8017234:	602b      	str	r3, [r5, #0]
 8017236:	bd38      	pop	{r3, r4, r5, pc}
 8017238:	20005ef4 	.word	0x20005ef4

0801723c <_malloc_usable_size_r>:
 801723c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017240:	1f18      	subs	r0, r3, #4
 8017242:	2b00      	cmp	r3, #0
 8017244:	bfbc      	itt	lt
 8017246:	580b      	ldrlt	r3, [r1, r0]
 8017248:	18c0      	addlt	r0, r0, r3
 801724a:	4770      	bx	lr

0801724c <_init>:
 801724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801724e:	bf00      	nop
 8017250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017252:	bc08      	pop	{r3}
 8017254:	469e      	mov	lr, r3
 8017256:	4770      	bx	lr

08017258 <_fini>:
 8017258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725a:	bf00      	nop
 801725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801725e:	bc08      	pop	{r3}
 8017260:	469e      	mov	lr, r3
 8017262:	4770      	bx	lr
